
u575_tft16bit_cubeide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092dc  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08009510  08009510  00019510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009610  08009610  00019610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009618  08009618  00019618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800961c  0800961c  0001961c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000d  20000000  08009620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006a4  20000010  0800962d  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200006b4  0800962d  000206b4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0002000d  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d123  00000000  00000000  00020043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000034d2  00000000  00000000  0003d166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001398  00000000  00000000  00040638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001270  00000000  00000000  000419d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003aee3  00000000  00000000  00042c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000196f0  00000000  00000000  0007db23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00163dc0  00000000  00000000  00097213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fafd3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000537c  00000000  00000000  001fb024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000010 	.word	0x20000010
 8000250:	00000000 	.word	0x00000000
 8000254:	080094f8 	.word	0x080094f8

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000014 	.word	0x20000014
 8000270:	080094f8 	.word	0x080094f8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ST7789V_SEND_COMMAND>:

static uint8_t rotationNum=1;
static bool _cp437    = false;

void ST7789V_SEND_COMMAND(uint16_t cmd)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
    ST7789_REG = cmd;
 800059e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	8013      	strh	r3, [r2, #0]

}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
	...

080005b4 <ST7789V_SEND_DATA>:
void ST7789V_SEND_DATA(uint16_t data)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]
    ST7789_RAM = data;
 80005be:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <ST7789V_SEND_DATA+0x1c>)
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	8013      	strh	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	60080000 	.word	0x60080000

080005d4 <ST7789V_writeRegister32>:
	ST7789V_SEND_COMMAND(r);
	ST7789V_SEND_DATA((d >> 8));
	ST7789V_SEND_DATA(d);
}

void ST7789V_writeRegister32(uint8_t r, uint32_t d) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	6039      	str	r1, [r7, #0]
 80005de:	71fb      	strb	r3, [r7, #7]
	ST7789V_SEND_COMMAND(r);
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffd5 	bl	8000594 <ST7789V_SEND_COMMAND>
	ST7789V_SEND_DATA((d >> 24));
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	0e1b      	lsrs	r3, r3, #24
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ffdf 	bl	80005b4 <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA((d >> 16));
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	0c1b      	lsrs	r3, r3, #16
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ffd9 	bl	80005b4 <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA((d >> 8));
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	0a1b      	lsrs	r3, r3, #8
 8000606:	b29b      	uxth	r3, r3
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffd3 	bl	80005b4 <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA(d);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	b29b      	uxth	r3, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ffce 	bl	80005b4 <ST7789V_SEND_DATA>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <ST7789V_setCursorPosition>:

void ST7789V_setCursorPosition(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	4604      	mov	r4, r0
 8000628:	4608      	mov	r0, r1
 800062a:	4611      	mov	r1, r2
 800062c:	461a      	mov	r2, r3
 800062e:	4623      	mov	r3, r4
 8000630:	80fb      	strh	r3, [r7, #6]
 8000632:	4603      	mov	r3, r0
 8000634:	80bb      	strh	r3, [r7, #4]
 8000636:	460b      	mov	r3, r1
 8000638:	807b      	strh	r3, [r7, #2]
 800063a:	4613      	mov	r3, r2
 800063c:	803b      	strh	r3, [r7, #0]
  uint32_t t;
  t = (x0 << 16) | x1;
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	041a      	lsls	r2, r3, #16
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	4313      	orrs	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8000648:	202c      	movs	r0, #44	; 0x2c
 800064a:	f7ff ffa3 	bl	8000594 <ST7789V_SEND_COMMAND>
  ST7789V_writeRegister32(ST7789V_CASET, t);
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	202a      	movs	r0, #42	; 0x2a
 8000652:	f7ff ffbf 	bl	80005d4 <ST7789V_writeRegister32>
  t = (y0 << 16) | y1;
 8000656:	88bb      	ldrh	r3, [r7, #4]
 8000658:	041a      	lsls	r2, r3, #16
 800065a:	883b      	ldrh	r3, [r7, #0]
 800065c:	4313      	orrs	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8000660:	202c      	movs	r0, #44	; 0x2c
 8000662:	f7ff ff97 	bl	8000594 <ST7789V_SEND_COMMAND>
  ST7789V_writeRegister32(ST7789V_RASET, t);
 8000666:	68f9      	ldr	r1, [r7, #12]
 8000668:	202b      	movs	r0, #43	; 0x2b
 800066a:	f7ff ffb3 	bl	80005d4 <ST7789V_writeRegister32>
  ST7789V_SEND_COMMAND (ST7789V_RAMWR);
 800066e:	202c      	movs	r0, #44	; 0x2c
 8000670:	f7ff ff90 	bl	8000594 <ST7789V_SEND_COMMAND>
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bd90      	pop	{r4, r7, pc}

0800067c <ST7789V_init>:
	/* invert area */
	ST7789V_SEND_COMMAND(ST7789V_INVON);
}

void ST7789V_init(void)
 {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
   ExternalSRAMSpecStruct ST7789VSpec = {
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	f8c3 2003 	str.w	r2, [r3, #3]
 800068c:	2310      	movs	r3, #16
 800068e:	703b      	strb	r3, [r7, #0]
 8000690:	2332      	movs	r3, #50	; 0x32
 8000692:	713b      	strb	r3, [r7, #4]
 8000694:	2301      	movs	r3, #1
 8000696:	71bb      	strb	r3, [r7, #6]
		   //.tCycWrite = 66,
		   .writeOnly = 1

   };

   FMCSRAMInit(&ST7789VSpec, ST7789V_SRAM_BANK);
 8000698:	463b      	mov	r3, r7
 800069a:	2101      	movs	r1, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f000 faf1 	bl	8000c84 <FMCSRAMInit>

   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2104      	movs	r1, #4
 80006a6:	4877      	ldr	r0, [pc, #476]	; (8000884 <ST7789V_init+0x208>)
 80006a8:	f002 f87c 	bl	80027a4 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f001 f997 	bl	80019e0 <HAL_Delay>
      HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2104      	movs	r1, #4
 80006b6:	4873      	ldr	r0, [pc, #460]	; (8000884 <ST7789V_init+0x208>)
 80006b8:	f002 f874 	bl	80027a4 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 80006bc:	200a      	movs	r0, #10
 80006be:	f001 f98f 	bl	80019e0 <HAL_Delay>
      HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2104      	movs	r1, #4
 80006c6:	486f      	ldr	r0, [pc, #444]	; (8000884 <ST7789V_init+0x208>)
 80006c8:	f002 f86c 	bl	80027a4 <HAL_GPIO_WritePin>
      HAL_Delay(120);
 80006cc:	2078      	movs	r0, #120	; 0x78
 80006ce:	f001 f987 	bl	80019e0 <HAL_Delay>


      ST7789V_SEND_COMMAND(ST7789V_SLPOUT);
 80006d2:	2011      	movs	r0, #17
 80006d4:	f7ff ff5e 	bl	8000594 <ST7789V_SEND_COMMAND>
      HAL_Delay(120);
 80006d8:	2078      	movs	r0, #120	; 0x78
 80006da:	f001 f981 	bl	80019e0 <HAL_Delay>

      ST7789V_SEND_COMMAND(ST7789V_MADCTL); //Memory data acccess control
 80006de:	2036      	movs	r0, #54	; 0x36
 80006e0:	f7ff ff58 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff ff65 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PORCTRL); //Porch Setting
 80006ea:	20b2      	movs	r0, #178	; 0xb2
 80006ec:	f7ff ff52 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x0C);
 80006f0:	200c      	movs	r0, #12
 80006f2:	f7ff ff5f 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0C);
 80006f6:	200c      	movs	r0, #12
 80006f8:	f7ff ff5c 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff ff59 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x33);
 8000702:	2033      	movs	r0, #51	; 0x33
 8000704:	f7ff ff56 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x33);
 8000708:	2033      	movs	r0, #51	; 0x33
 800070a:	f7ff ff53 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_GCTRL); //Gate Control
 800070e:	20b7      	movs	r0, #183	; 0xb7
 8000710:	f7ff ff40 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x70); //VGH, VGL
 8000714:	2070      	movs	r0, #112	; 0x70
 8000716:	f7ff ff4d 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VCOMS);
 800071a:	20bb      	movs	r0, #187	; 0xbb
 800071c:	f7ff ff3a 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x3A);
 8000720:	203a      	movs	r0, #58	; 0x3a
 8000722:	f7ff ff47 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_LCMCTRL);
 8000726:	20c0      	movs	r0, #192	; 0xc0
 8000728:	f7ff ff34 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x2C);
 800072c:	202c      	movs	r0, #44	; 0x2c
 800072e:	f7ff ff41 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VDVVRHEN);
 8000732:	20c2      	movs	r0, #194	; 0xc2
 8000734:	f7ff ff2e 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x01);
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff ff3b 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VRHS);
 800073e:	20c3      	movs	r0, #195	; 0xc3
 8000740:	f7ff ff28 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x14);
 8000744:	2014      	movs	r0, #20
 8000746:	f7ff ff35 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VDVS);
 800074a:	20c4      	movs	r0, #196	; 0xc4
 800074c:	f7ff ff22 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x20);
 8000750:	2020      	movs	r0, #32
 8000752:	f7ff ff2f 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_FRCTRL2);
 8000756:	20c6      	movs	r0, #198	; 0xc6
 8000758:	f7ff ff1c 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x0F); //60Hz 0A
 800075c:	200f      	movs	r0, #15
 800075e:	f7ff ff29 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PWCTRL1);
 8000762:	20d0      	movs	r0, #208	; 0xd0
 8000764:	f7ff ff16 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xA4);
 8000768:	20a4      	movs	r0, #164	; 0xa4
 800076a:	f7ff ff23 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0xA1); //AVDD VCL
 800076e:	20a1      	movs	r0, #161	; 0xa1
 8000770:	f7ff ff20 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PVGAMCTRL);
 8000774:	20e0      	movs	r0, #224	; 0xe0
 8000776:	f7ff ff0d 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xD0);
 800077a:	20d0      	movs	r0, #208	; 0xd0
 800077c:	f7ff ff1a 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x07);
 8000780:	2007      	movs	r0, #7
 8000782:	f7ff ff17 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0D);
 8000786:	200d      	movs	r0, #13
 8000788:	f7ff ff14 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 800078c:	2009      	movs	r0, #9
 800078e:	f7ff ff11 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x08);
 8000792:	2008      	movs	r0, #8
 8000794:	f7ff ff0e 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x25);
 8000798:	2025      	movs	r0, #37	; 0x25
 800079a:	f7ff ff0b 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x28);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f7ff ff08 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x53);
 80007a4:	2053      	movs	r0, #83	; 0x53
 80007a6:	f7ff ff05 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x39);
 80007aa:	2039      	movs	r0, #57	; 0x39
 80007ac:	f7ff ff02 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x12);
 80007b0:	2012      	movs	r0, #18
 80007b2:	f7ff feff 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0B);
 80007b6:	200b      	movs	r0, #11
 80007b8:	f7ff fefc 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 80007bc:	200a      	movs	r0, #10
 80007be:	f7ff fef9 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x17);
 80007c2:	2017      	movs	r0, #23
 80007c4:	f7ff fef6 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x34);
 80007c8:	2034      	movs	r0, #52	; 0x34
 80007ca:	f7ff fef3 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_NVGAMCTRL);
 80007ce:	20e1      	movs	r0, #225	; 0xe1
 80007d0:	f7ff fee0 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xD0);
 80007d4:	20d0      	movs	r0, #208	; 0xd0
 80007d6:	f7ff feed 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x07);
 80007da:	2007      	movs	r0, #7
 80007dc:	f7ff feea 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0D);
 80007e0:	200d      	movs	r0, #13
 80007e2:	f7ff fee7 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 80007e6:	2009      	movs	r0, #9
 80007e8:	f7ff fee4 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 80007ec:	2009      	movs	r0, #9
 80007ee:	f7ff fee1 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x25);
 80007f2:	2025      	movs	r0, #37	; 0x25
 80007f4:	f7ff fede 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x29);
 80007f8:	2029      	movs	r0, #41	; 0x29
 80007fa:	f7ff fedb 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x35);
 80007fe:	2035      	movs	r0, #53	; 0x35
 8000800:	f7ff fed8 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x39);
 8000804:	2039      	movs	r0, #57	; 0x39
 8000806:	f7ff fed5 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x13);
 800080a:	2013      	movs	r0, #19
 800080c:	f7ff fed2 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000810:	200a      	movs	r0, #10
 8000812:	f7ff fecf 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000816:	200a      	movs	r0, #10
 8000818:	f7ff fecc 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x16);
 800081c:	2016      	movs	r0, #22
 800081e:	f7ff fec9 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x34);
 8000822:	2034      	movs	r0, #52	; 0x34
 8000824:	f7ff fec6 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_INVON);
 8000828:	2021      	movs	r0, #33	; 0x21
 800082a:	f7ff feb3 	bl	8000594 <ST7789V_SEND_COMMAND>

      ST7789V_SEND_COMMAND(ST7789V_COLMOD);
 800082e:	203a      	movs	r0, #58	; 0x3a
 8000830:	f7ff feb0 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x55); //65K colors, 16 bit/px
 8000834:	2055      	movs	r0, #85	; 0x55
 8000836:	f7ff febd 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_CASET);
 800083a:	202a      	movs	r0, #42	; 0x2a
 800083c:	f7ff feaa 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff feb7 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000846:	2000      	movs	r0, #0
 8000848:	f7ff feb4 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff feb1 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0xEF);
 8000852:	20ef      	movs	r0, #239	; 0xef
 8000854:	f7ff feae 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_RASET);
 8000858:	202b      	movs	r0, #43	; 0x2b
 800085a:	f7ff fe9b 	bl	8000594 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff fea8 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff fea5 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x01);
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff fea2 	bl	80005b4 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x3F);
 8000870:	203f      	movs	r0, #63	; 0x3f
 8000872:	f7ff fe9f 	bl	80005b4 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_DISPON);
 8000876:	2029      	movs	r0, #41	; 0x29
 8000878:	f7ff fe8c 	bl	8000594 <ST7789V_SEND_COMMAND>
//      ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 }
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	42021000 	.word	0x42021000

08000888 <ST7789V_drawPixel>:

void ST7789V_drawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
 8000892:	460b      	mov	r3, r1
 8000894:	80bb      	strh	r3, [r7, #4]
 8000896:	4613      	mov	r3, r2
 8000898:	807b      	strh	r3, [r7, #2]
	ST7789V_setCursorPosition(x, y, x, y);
 800089a:	88bb      	ldrh	r3, [r7, #4]
 800089c:	88fa      	ldrh	r2, [r7, #6]
 800089e:	88b9      	ldrh	r1, [r7, #4]
 80008a0:	88f8      	ldrh	r0, [r7, #6]
 80008a2:	f7ff febd 	bl	8000620 <ST7789V_setCursorPosition>
	ST7789V_SEND_DATA(color);
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fe83 	bl	80005b4 <ST7789V_SEND_DATA>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <ST7789V_fill>:

void ST7789V_fill(uint16_t color) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ST7789V_PIXEL_COUNT;
 80008c2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80008c6:	60fb      	str	r3, [r7, #12]
	
	if(rotationNum==1 || rotationNum==3)
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <ST7789V_fill+0x6c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d003      	beq.n	80008d8 <ST7789V_fill+0x20>
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <ST7789V_fill+0x6c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d107      	bne.n	80008e8 <ST7789V_fill+0x30>
	{
		ST7789V_setCursorPosition(0, 0,   ST7789V_WIDTH -1, ST7789V_HEIGHT -1);
 80008d8:	f240 133f 	movw	r3, #319	; 0x13f
 80008dc:	22ef      	movs	r2, #239	; 0xef
 80008de:	2100      	movs	r1, #0
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fe9d 	bl	8000620 <ST7789V_setCursorPosition>
 80008e6:	e00e      	b.n	8000906 <ST7789V_fill+0x4e>
	}
	else if(rotationNum==2 || rotationNum==4)
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <ST7789V_fill+0x6c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d003      	beq.n	80008f8 <ST7789V_fill+0x40>
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <ST7789V_fill+0x6c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d106      	bne.n	8000906 <ST7789V_fill+0x4e>
	{
		ST7789V_setCursorPosition(0, 0, ST7789V_HEIGHT -1, ST7789V_WIDTH -1);
 80008f8:	23ef      	movs	r3, #239	; 0xef
 80008fa:	f240 123f 	movw	r2, #319	; 0x13f
 80008fe:	2100      	movs	r1, #0
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fe8d 	bl	8000620 <ST7789V_setCursorPosition>
	}

	while (n) {
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d007      	beq.n	800091c <ST7789V_fill+0x64>
	   n--;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3b01      	subs	r3, #1
 8000910:	60fb      	str	r3, [r7, #12]
	   ST7789V_SEND_DATA(color);
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fe4d 	bl	80005b4 <ST7789V_SEND_DATA>
	while (n) {
 800091a:	e7f4      	b.n	8000906 <ST7789V_fill+0x4e>
	}
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000000 	.word	0x20000000

08000928 <ST7789V_drawCircle>:
			ST7789V_SEND_DATA(color);
	}
}

void ST7789V_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	4604      	mov	r4, r0
 8000930:	4608      	mov	r0, r1
 8000932:	4611      	mov	r1, r2
 8000934:	461a      	mov	r2, r3
 8000936:	4623      	mov	r3, r4
 8000938:	80fb      	strh	r3, [r7, #6]
 800093a:	4603      	mov	r3, r0
 800093c:	80bb      	strh	r3, [r7, #4]
 800093e:	460b      	mov	r3, r1
 8000940:	807b      	strh	r3, [r7, #2]
 8000942:	4613      	mov	r3, r2
 8000944:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 8000946:	887b      	ldrh	r3, [r7, #2]
 8000948:	f1c3 0301 	rsb	r3, r3, #1
 800094c:	b29b      	uxth	r3, r3
 800094e:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8000950:	2301      	movs	r3, #1
 8000952:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8000954:	887b      	ldrh	r3, [r7, #2]
 8000956:	461a      	mov	r2, r3
 8000958:	03d2      	lsls	r2, r2, #15
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	b29b      	uxth	r3, r3
 8000960:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8000966:	887b      	ldrh	r3, [r7, #2]
 8000968:	81fb      	strh	r3, [r7, #14]

  ST7789V_drawPixel(x0  , y0+r, color);
 800096a:	88ba      	ldrh	r2, [r7, #4]
 800096c:	887b      	ldrh	r3, [r7, #2]
 800096e:	4413      	add	r3, r2
 8000970:	b299      	uxth	r1, r3
 8000972:	883a      	ldrh	r2, [r7, #0]
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff86 	bl	8000888 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0  , y0-r, color);
 800097c:	88ba      	ldrh	r2, [r7, #4]
 800097e:	887b      	ldrh	r3, [r7, #2]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	b299      	uxth	r1, r3
 8000984:	883a      	ldrh	r2, [r7, #0]
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff7d 	bl	8000888 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0+r, y0  , color);
 800098e:	88fa      	ldrh	r2, [r7, #6]
 8000990:	887b      	ldrh	r3, [r7, #2]
 8000992:	4413      	add	r3, r2
 8000994:	b29b      	uxth	r3, r3
 8000996:	883a      	ldrh	r2, [r7, #0]
 8000998:	88b9      	ldrh	r1, [r7, #4]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff74 	bl	8000888 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0-r, y0  , color);
 80009a0:	88fa      	ldrh	r2, [r7, #6]
 80009a2:	887b      	ldrh	r3, [r7, #2]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	883a      	ldrh	r2, [r7, #0]
 80009aa:	88b9      	ldrh	r1, [r7, #4]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff6b 	bl	8000888 <ST7789V_drawPixel>

  while (x<y) {
 80009b2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80009b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	f280 8083 	bge.w	8000ac6 <ST7789V_drawCircle+0x19e>
    if (f >= 0) {
 80009c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db0e      	blt.n	80009e6 <ST7789V_drawCircle+0xbe>
      y--;
 80009c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	3b01      	subs	r3, #1
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 80009d4:	8a7b      	ldrh	r3, [r7, #18]
 80009d6:	3302      	adds	r3, #2
 80009d8:	b29b      	uxth	r3, r3
 80009da:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 80009dc:	8afa      	ldrh	r2, [r7, #22]
 80009de:	8a7b      	ldrh	r3, [r7, #18]
 80009e0:	4413      	add	r3, r2
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 80009e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	3301      	adds	r3, #1
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 80009f2:	8abb      	ldrh	r3, [r7, #20]
 80009f4:	3302      	adds	r3, #2
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 80009fa:	8afa      	ldrh	r2, [r7, #22]
 80009fc:	8abb      	ldrh	r3, [r7, #20]
 80009fe:	4413      	add	r3, r2
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	82fb      	strh	r3, [r7, #22]
  
    ST7789V_drawPixel(x0 + x, y0 + y, color);
 8000a04:	8a3a      	ldrh	r2, [r7, #16]
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	4413      	add	r3, r2
 8000a0a:	b298      	uxth	r0, r3
 8000a0c:	89fa      	ldrh	r2, [r7, #14]
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	883a      	ldrh	r2, [r7, #0]
 8000a16:	4619      	mov	r1, r3
 8000a18:	f7ff ff36 	bl	8000888 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 + y, color);
 8000a1c:	8a3b      	ldrh	r3, [r7, #16]
 8000a1e:	88fa      	ldrh	r2, [r7, #6]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	b298      	uxth	r0, r3
 8000a24:	89fa      	ldrh	r2, [r7, #14]
 8000a26:	88bb      	ldrh	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	883a      	ldrh	r2, [r7, #0]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f7ff ff2a 	bl	8000888 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + x, y0 - y, color);
 8000a34:	8a3a      	ldrh	r2, [r7, #16]
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	4413      	add	r3, r2
 8000a3a:	b298      	uxth	r0, r3
 8000a3c:	89fb      	ldrh	r3, [r7, #14]
 8000a3e:	88ba      	ldrh	r2, [r7, #4]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	883a      	ldrh	r2, [r7, #0]
 8000a46:	4619      	mov	r1, r3
 8000a48:	f7ff ff1e 	bl	8000888 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 - y, color);
 8000a4c:	8a3b      	ldrh	r3, [r7, #16]
 8000a4e:	88fa      	ldrh	r2, [r7, #6]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	b298      	uxth	r0, r3
 8000a54:	89fb      	ldrh	r3, [r7, #14]
 8000a56:	88ba      	ldrh	r2, [r7, #4]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	883a      	ldrh	r2, [r7, #0]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f7ff ff12 	bl	8000888 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 + x, color);
 8000a64:	89fa      	ldrh	r2, [r7, #14]
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	4413      	add	r3, r2
 8000a6a:	b298      	uxth	r0, r3
 8000a6c:	8a3a      	ldrh	r2, [r7, #16]
 8000a6e:	88bb      	ldrh	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	883a      	ldrh	r2, [r7, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	f7ff ff06 	bl	8000888 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 + x, color);
 8000a7c:	89fb      	ldrh	r3, [r7, #14]
 8000a7e:	88fa      	ldrh	r2, [r7, #6]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	b298      	uxth	r0, r3
 8000a84:	8a3a      	ldrh	r2, [r7, #16]
 8000a86:	88bb      	ldrh	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	883a      	ldrh	r2, [r7, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f7ff fefa 	bl	8000888 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 - x, color);
 8000a94:	89fa      	ldrh	r2, [r7, #14]
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	4413      	add	r3, r2
 8000a9a:	b298      	uxth	r0, r3
 8000a9c:	8a3b      	ldrh	r3, [r7, #16]
 8000a9e:	88ba      	ldrh	r2, [r7, #4]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	883a      	ldrh	r2, [r7, #0]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f7ff feee 	bl	8000888 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 - x, color);
 8000aac:	89fb      	ldrh	r3, [r7, #14]
 8000aae:	88fa      	ldrh	r2, [r7, #6]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	b298      	uxth	r0, r3
 8000ab4:	8a3b      	ldrh	r3, [r7, #16]
 8000ab6:	88ba      	ldrh	r2, [r7, #4]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	883a      	ldrh	r2, [r7, #0]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f7ff fee2 	bl	8000888 <ST7789V_drawPixel>
  while (x<y) {
 8000ac4:	e775      	b.n	80009b2 <ST7789V_drawCircle+0x8a>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	371c      	adds	r7, #28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd90      	pop	{r4, r7, pc}

08000ace <ST7789V_drawLine>:
  ST7789V_drawFastVLine(x0, y0-r, 2*r+1, color);
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

void ST7789V_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000ace:	b590      	push	{r4, r7, lr}
 8000ad0:	b087      	sub	sp, #28
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	4611      	mov	r1, r2
 8000ada:	461a      	mov	r2, r3
 8000adc:	4623      	mov	r3, r4
 8000ade:	80fb      	strh	r3, [r7, #6]
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	80bb      	strh	r3, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	807b      	strh	r3, [r7, #2]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000aec:	883b      	ldrh	r3, [r7, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000af8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000afc:	887b      	ldrh	r3, [r7, #2]
 8000afe:	4619      	mov	r1, r3
 8000b00:	88fb      	ldrh	r3, [r7, #6]
 8000b02:	1acb      	subs	r3, r1, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bfb8      	it	lt
 8000b08:	425b      	neglt	r3, r3
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	bfcc      	ite	gt
 8000b0e:	2301      	movgt	r3, #1
 8000b10:	2300      	movle	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	827b      	strh	r3, [r7, #18]
  if (steep) {
 8000b16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00b      	beq.n	8000b36 <ST7789V_drawLine+0x68>
	std::swap(x0, y0);
 8000b1e:	1d3a      	adds	r2, r7, #4
 8000b20:	1dbb      	adds	r3, r7, #6
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f88d 	bl	8000c44 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(x1, y1);
 8000b2a:	463a      	mov	r2, r7
 8000b2c:	1cbb      	adds	r3, r7, #2
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f887 	bl	8000c44 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  if (x0 > x1) {
 8000b36:	88fa      	ldrh	r2, [r7, #6]
 8000b38:	887b      	ldrh	r3, [r7, #2]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d90b      	bls.n	8000b56 <ST7789V_drawLine+0x88>
	std::swap(x0, x1);
 8000b3e:	1cba      	adds	r2, r7, #2
 8000b40:	1dbb      	adds	r3, r7, #6
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f87d 	bl	8000c44 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(y0, y1);
 8000b4a:	463a      	mov	r2, r7
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f877 	bl	8000c44 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  uint16_t dx, dy;
  dx = x1 - x0;
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8000b5e:	883b      	ldrh	r3, [r7, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx>>1;
 8000b6e:	8a3b      	ldrh	r3, [r7, #16]
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	82fb      	strh	r3, [r7, #22]
  int16_t ystep;

  if (y0 < y1) {
 8000b76:	88ba      	ldrh	r2, [r7, #4]
 8000b78:	883b      	ldrh	r3, [r7, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d202      	bcs.n	8000b84 <ST7789V_drawLine+0xb6>
    ystep = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	82bb      	strh	r3, [r7, #20]
 8000b82:	e002      	b.n	8000b8a <ST7789V_drawLine+0xbc>
  } else {
    ystep = -1;
 8000b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b88:	82bb      	strh	r3, [r7, #20]
  }

  for (; x0<=x1; x0++) {
 8000b8a:	88fa      	ldrh	r2, [r7, #6]
 8000b8c:	887b      	ldrh	r3, [r7, #2]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d828      	bhi.n	8000be4 <ST7789V_drawLine+0x116>
    if (steep) {
 8000b92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d006      	beq.n	8000ba8 <ST7789V_drawLine+0xda>
      ST7789V_drawPixel(y0, x0, color);
 8000b9a:	88bb      	ldrh	r3, [r7, #4]
 8000b9c:	88f9      	ldrh	r1, [r7, #6]
 8000b9e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fe71 	bl	8000888 <ST7789V_drawPixel>
 8000ba6:	e005      	b.n	8000bb4 <ST7789V_drawLine+0xe6>
    } else {
      ST7789V_drawPixel(x0, y0, color);
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	88b9      	ldrh	r1, [r7, #4]
 8000bac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fe6a 	bl	8000888 <ST7789V_drawPixel>
    }
    err -= dy;
 8000bb4:	8afa      	ldrh	r2, [r7, #22]
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	82fb      	strh	r3, [r7, #22]
    if (err < 0) {
 8000bbe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	da09      	bge.n	8000bda <ST7789V_drawLine+0x10c>
      y0 += ystep;
 8000bc6:	88ba      	ldrh	r2, [r7, #4]
 8000bc8:	8abb      	ldrh	r3, [r7, #20]
 8000bca:	4413      	add	r3, r2
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8000bd0:	8afa      	ldrh	r2, [r7, #22]
 8000bd2:	8a3b      	ldrh	r3, [r7, #16]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	82fb      	strh	r3, [r7, #22]
  for (; x0<=x1; x0++) {
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	80fb      	strh	r3, [r7, #6]
 8000be2:	e7d2      	b.n	8000b8a <ST7789V_drawLine+0xbc>
    }
  }
}	
 8000be4:	bf00      	nop
 8000be6:	371c      	adds	r7, #28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd90      	pop	{r4, r7, pc}

08000bec <ST7789V_drawFastVLine>:
{
	ST7789V_drawLine(x, y, x+w-1, y, color);
}

void ST7789V_drawFastVLine(uint16_t x, uint16_t y, uint16_t h, uint16_t color)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	80fb      	strh	r3, [r7, #6]
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80bb      	strh	r3, [r7, #4]
 8000c02:	460b      	mov	r3, r1
 8000c04:	807b      	strh	r3, [r7, #2]
 8000c06:	4613      	mov	r3, r2
 8000c08:	803b      	strh	r3, [r7, #0]
	ST7789V_drawLine(x, y, x, y+h-1, color);
 8000c0a:	88ba      	ldrh	r2, [r7, #4]
 8000c0c:	887b      	ldrh	r3, [r7, #2]
 8000c0e:	4413      	add	r3, r2
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	3b01      	subs	r3, #1
 8000c14:	b29c      	uxth	r4, r3
 8000c16:	88fa      	ldrh	r2, [r7, #6]
 8000c18:	88b9      	ldrh	r1, [r7, #4]
 8000c1a:	88f8      	ldrh	r0, [r7, #6]
 8000c1c:	883b      	ldrh	r3, [r7, #0]
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	4623      	mov	r3, r4
 8000c22:	f7ff ff54 	bl	8000ace <ST7789V_drawLine>
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd90      	pop	{r4, r7, pc}

08000c2e <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffed 	bl	8000c2e <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000c54:	4603      	mov	r3, r0
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	81fb      	strh	r3, [r7, #14]
      __a = _GLIBCXX_MOVE(__b);
 8000c5a:	6838      	ldr	r0, [r7, #0]
 8000c5c:	f7ff ffe7 	bl	8000c2e <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000c60:	4603      	mov	r3, r0
 8000c62:	881a      	ldrh	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	801a      	strh	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000c68:	f107 030e 	add.w	r3, r7, #14
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ffde 	bl	8000c2e <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000c72:	4603      	mov	r3, r0
 8000c74:	881a      	ldrh	r2, [r3, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	801a      	strh	r2, [r3, #0]
    }
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <FMCSRAMInit>:

	// set to the maximum of the two
	timing->AddressSetupTime = (addset1 > addset2) ? addset1 : addset2;
}

void FMCSRAMInit(ExternalSRAMSpecStruct * sramSpec, uint8_t bank) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0a0      	sub	sp, #128	; 0x80
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
	/* FMC configuration */
	SRAM_HandleTypeDef sram;
	FMC_NORSRAM_TimingTypeDef timing = {0};
 8000c90:	f107 0308 	add.w	r3, r7, #8
 8000c94:	2220      	movs	r2, #32
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f008 fc25 	bl	80094e8 <memset>

	sram.Instance = FMC_NORSRAM_DEVICE;
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <FMCSRAMInit+0xc4>)
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
	sram.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000ca2:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <FMCSRAMInit+0xc8>)
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (bank==1) {
 8000ca6:	78fb      	ldrb	r3, [r7, #3]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d102      	bne.n	8000cb2 <FMCSRAMInit+0x2e>
		sram.Init.NSBank = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
 8000cb0:	e005      	b.n	8000cbe <FMCSRAMInit+0x3a>
	} else {
		sram.Init.NSBank = 1 << (bank-1);
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if (sramSpec -> dataSize == 8) {
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b08      	cmp	r3, #8
 8000cc4:	d102      	bne.n	8000ccc <FMCSRAMInit+0x48>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cca:	e008      	b.n	8000cde <FMCSRAMInit+0x5a>
	} else if (sramSpec -> dataSize == 16) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b10      	cmp	r3, #16
 8000cd2:	d102      	bne.n	8000cda <FMCSRAMInit+0x56>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cd8:	e001      	b.n	8000cde <FMCSRAMInit+0x5a>
	} else {
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 8000cda:	2320      	movs	r3, #32
 8000cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	sram.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
	sram.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
	sram.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	643b      	str	r3, [r7, #64]	; 0x40
	sram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	647b      	str	r3, [r7, #68]	; 0x44
	sram.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	64bb      	str	r3, [r7, #72]	; 0x48
	sram.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sram.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	653b      	str	r3, [r7, #80]	; 0x50
	sram.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	657b      	str	r3, [r7, #84]	; 0x54
	sram.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	65bb      	str	r3, [r7, #88]	; 0x58
	sram.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	65fb      	str	r3, [r7, #92]	; 0x5c
	sram.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	663b      	str	r3, [r7, #96]	; 0x60
	sram.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000d0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d10:	667b      	str	r3, [r7, #100]	; 0x64
	sram.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	66bb      	str	r3, [r7, #104]	; 0x68

	/* Timing */
	timing.BusTurnAroundDuration = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
	timing.AccessMode = FMC_ACCESS_MODE_A;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24

	timing.AddressSetupTime = 6; //MAX_ADDSET_TIME;
 8000d1e:	2306      	movs	r3, #6
 8000d20:	60bb      	str	r3, [r7, #8]
	timing.DataSetupTime = 6;//MAX_DATAST_TIME;
 8000d22:	2306      	movs	r3, #6
 8000d24:	613b      	str	r3, [r7, #16]

	//FMCComputeAddsetDatast(sramSpec, &timing);

	if (HAL_SRAM_Init(&sram, &timing, NULL) != HAL_OK)
 8000d26:	f107 0108 	add.w	r1, r7, #8
 8000d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f006 fdb9 	bl	80078a8 <HAL_SRAM_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <FMCSRAMInit+0xbc>
	{
		FMC_Error_Handler( );
 8000d3c:	f000 f808 	bl	8000d50 <FMC_Error_Handler>
	}

#if MEM_SWAPPING
	HAL_EnableFMCMemorySwapping();
#endif
}
 8000d40:	bf00      	nop
 8000d42:	3780      	adds	r7, #128	; 0x80
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	420d0400 	.word	0x420d0400
 8000d4c:	420d0504 	.word	0x420d0504

08000d50 <FMC_Error_Handler>:

void FMC_Error_Handler() {
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000d6a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000d6e:	4909      	ldr	r1, [pc, #36]	; (8000d94 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000d7a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d84:	68fb      	ldr	r3, [r7, #12]
}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	46020c00 	.word	0x46020c00

08000d98 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <LL_APB1_GRP2_EnableClock+0x34>)
 8000da2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000da6:	4909      	ldr	r1, [pc, #36]	; (8000dcc <LL_APB1_GRP2_EnableClock+0x34>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <LL_APB1_GRP2_EnableClock+0x34>)
 8000db2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	46020c00 	.word	0x46020c00

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd6:	f000 fd7f 	bl	80018d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dda:	f000 f855 	bl	8000e88 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000dde:	f000 f8b7 	bl	8000f50 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de2:	f000 fa1f 	bl	8001224 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000de6:	f000 f8c1 	bl	8000f6c <MX_ADC1_Init>
  MX_UCPD1_Init();
 8000dea:	f000 f903 	bl	8000ff4 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8000dee:	f000 f937 	bl	8001060 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000df2:	f000 f981 	bl	80010f8 <MX_USB_OTG_FS_PCD_Init>
  MX_FMC_Init();
 8000df6:	f000 f9ab 	bl	8001150 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  ST7789V_init();
 8000dfa:	f7ff fc3f 	bl	800067c <ST7789V_init>
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8000dfe:	202c      	movs	r0, #44	; 0x2c
 8000e00:	f7ff fbc8 	bl	8000594 <ST7789V_SEND_COMMAND>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int round_num = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	481c      	ldr	r0, [pc, #112]	; (8000e80 <main+0xb0>)
 8000e0e:	f001 fcc9 	bl	80027a4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000e12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e16:	f000 fde3 	bl	80019e0 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <main+0xb0>)
 8000e20:	f001 fcc0 	bl	80027a4 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 8000e24:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e28:	f000 fdda 	bl	80019e0 <HAL_Delay>


	  if(round_num == 0)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d107      	bne.n	8000e42 <main+0x72>

		  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
		  {
			  ST7789V_SEND_DATA(COLOR_RED);
		  }*/
		  ST7789V_fill(COLOR_RED);
 8000e32:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000e36:	f7ff fd3f 	bl	80008b8 <ST7789V_fill>
		  round_num++;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	e00f      	b.n	8000e62 <main+0x92>
	  }
	  else
	  {
		  //ST7789V_fillCircle(100, 100, 50, COLOR_BLACK);
		  ST7789V_drawCircle(100, 100, 50, COLOR_WHITE);
 8000e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e46:	2232      	movs	r2, #50	; 0x32
 8000e48:	2164      	movs	r1, #100	; 0x64
 8000e4a:	2064      	movs	r0, #100	; 0x64
 8000e4c:	f7ff fd6c 	bl	8000928 <ST7789V_drawCircle>
		  ST7789V_drawFastVLine(150, 80, 100, COLOR_WHITE);
 8000e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e54:	2264      	movs	r2, #100	; 0x64
 8000e56:	2150      	movs	r1, #80	; 0x50
 8000e58:	2096      	movs	r0, #150	; 0x96
 8000e5a:	f7ff fec7 	bl	8000bec <ST7789V_drawFastVLine>
			  for(int j = 0; j<200; j++)
			  {
				  ST7789V_drawPixel(i, j, COLOR_WHITE);
			  }
		  }
*/		  round_num = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
	  	  	  {
	  	  		 ST7789V_SEND_DATA(COLOR_BLUE);
	  	  	  }
	  	  	  */

	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2104      	movs	r1, #4
 8000e66:	4807      	ldr	r0, [pc, #28]	; (8000e84 <main+0xb4>)
 8000e68:	f001 fc9c 	bl	80027a4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000e6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e70:	f000 fdb6 	bl	80019e0 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2104      	movs	r1, #4
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <main+0xb4>)
 8000e7a:	f001 fc93 	bl	80027a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 8000e7e:	e7c3      	b.n	8000e08 <main+0x38>
 8000e80:	42020400 	.word	0x42020400
 8000e84:	42021800 	.word	0x42021800

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b09e      	sub	sp, #120	; 0x78
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0318 	add.w	r3, r7, #24
 8000e92:	2260      	movs	r2, #96	; 0x60
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f008 fb26 	bl	80094e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
 8000eaa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000eac:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000eb0:	f002 fd12 	bl	80038d8 <HAL_PWREx_ControlVoltageScaling>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000eba:	f000 fa9d 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000ebe:	2332      	movs	r3, #50	; 0x32
 8000ec0:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ecc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ece:	2310      	movs	r3, #16
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ed6:	2310      	movs	r3, #16
 8000ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000eda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000ef0:	2350      	movs	r3, #80	; 0x50
 8000ef2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f08:	f107 0318 	add.w	r3, r7, #24
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 fdd5 	bl	8003abc <HAL_RCC_OscConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f18:	f000 fa6e 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1c:	231f      	movs	r3, #31
 8000f1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f20:	2303      	movs	r3, #3
 8000f22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	2104      	movs	r1, #4
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f003 fc95 	bl	8004868 <HAL_RCC_ClockConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f44:	f000 fa58 	bl	80013f8 <Error_Handler>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3778      	adds	r7, #120	; 0x78
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000f54:	f002 fda2 	bl	8003a9c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f002 fd3f 	bl	80039dc <HAL_PWREx_ConfigSupply>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000f64:	f000 fa48 	bl	80013f8 <Error_Handler>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <MX_ADC1_Init+0x80>)
 8000f72:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <MX_ADC1_Init+0x84>)
 8000f74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_ADC1_Init+0x80>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_ADC1_Init+0x80>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_ADC1_Init+0x80>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_ADC1_Init+0x80>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_ADC1_Init+0x80>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_ADC1_Init+0x80>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_ADC1_Init+0x80>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_ADC1_Init+0x80>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_ADC1_Init+0x80>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_ADC1_Init+0x80>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_ADC1_Init+0x80>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_ADC1_Init+0x80>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_ADC1_Init+0x80>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_ADC1_Init+0x80>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_ADC1_Init+0x80>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_ADC1_Init+0x80>)
 8000fda:	f000 fe01 	bl	8001be0 <HAL_ADC_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000fe4:	f000 fa08 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000002c 	.word	0x2000002c
 8000ff0:	42028000 	.word	0x42028000

08000ff4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
 8001008:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800100a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800100e:	f7ff fec3 	bl	8000d98 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001012:	2002      	movs	r0, #2
 8001014:	f7ff fea4 	bl	8000d60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001018:	2001      	movs	r0, #1
 800101a:	f7ff fea1 	bl	8000d60 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800101e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001022:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001024:	2303      	movs	r3, #3
 8001026:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <MX_UCPD1_Init+0x64>)
 8001032:	f007 fbda 	bl	80087ea <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800103a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800103c:	2303      	movs	r3, #3
 800103e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	463b      	mov	r3, r7
 8001046:	4619      	mov	r1, r3
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_UCPD1_Init+0x68>)
 800104a:	f007 fbce 	bl	80087ea <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	42020400 	.word	0x42020400
 800105c:	42020000 	.word	0x42020000

08001060 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 8001066:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <MX_USART1_UART_Init+0x94>)
 8001068:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010a8:	4811      	ldr	r0, [pc, #68]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 80010aa:	f006 fc4d 	bl	8007948 <HAL_UART_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010b4:	f000 f9a0 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b8:	2100      	movs	r1, #0
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 80010bc:	f007 f824 	bl	8008108 <HAL_UARTEx_SetTxFifoThreshold>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010c6:	f000 f997 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ca:	2100      	movs	r1, #0
 80010cc:	4808      	ldr	r0, [pc, #32]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 80010ce:	f007 f859 	bl	8008184 <HAL_UARTEx_SetRxFifoThreshold>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010d8:	f000 f98e 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <MX_USART1_UART_Init+0x90>)
 80010de:	f006 ffda 	bl	8008096 <HAL_UARTEx_DisableFifoMode>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010e8:	f000 f986 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200000b8 	.word	0x200000b8
 80010f4:	40013800 	.word	0x40013800

080010f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010fe:	4a13      	ldr	r2, [pc, #76]	; (800114c <MX_USB_OTG_FS_PCD_Init+0x54>)
 8001100:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001104:	2206      	movs	r2, #6
 8001106:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800110a:	2202      	movs	r2, #2
 800110c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001134:	f001 fb4e 	bl	80027d4 <HAL_PCD_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 800113e:	f000 f95b 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000148 	.word	0x20000148
 800114c:	42040000 	.word	0x42040000

08001150 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2220      	movs	r2, #32
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f008 f9c3 	bl	80094e8 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <MX_FMC_Init+0xc8>)
 8001164:	4a2d      	ldr	r2, [pc, #180]	; (800121c <MX_FMC_Init+0xcc>)
 8001166:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001168:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <MX_FMC_Init+0xc8>)
 800116a:	4a2d      	ldr	r2, [pc, #180]	; (8001220 <MX_FMC_Init+0xd0>)
 800116c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <MX_FMC_Init+0xc8>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001174:	4b28      	ldr	r3, [pc, #160]	; (8001218 <MX_FMC_Init+0xc8>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <MX_FMC_Init+0xc8>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <MX_FMC_Init+0xc8>)
 8001182:	2210      	movs	r2, #16
 8001184:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <MX_FMC_Init+0xc8>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <MX_FMC_Init+0xc8>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <MX_FMC_Init+0xc8>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_FMC_Init+0xc8>)
 800119a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800119e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_FMC_Init+0xc8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_FMC_Init+0xc8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_FMC_Init+0xc8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_FMC_Init+0xc8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_FMC_Init+0xc8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <MX_FMC_Init+0xc8>)
 80011c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_FMC_Init+0xc8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MX_FMC_Init+0xc8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_FMC_Init+0xc8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 7;
 80011da:	2307      	movs	r3, #7
 80011dc:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80011de:	230f      	movs	r3, #15
 80011e0:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 3;
 80011e2:	2303      	movs	r3, #3
 80011e4:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 3;
 80011e6:	2303      	movs	r3, #3
 80011e8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80011ea:	230f      	movs	r3, #15
 80011ec:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011ee:	2310      	movs	r3, #16
 80011f0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011f2:	2311      	movs	r3, #17
 80011f4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_FMC_Init+0xc8>)
 8001202:	f006 fb51 	bl	80078a8 <HAL_SRAM_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_FMC_Init+0xc0>
  {
    Error_Handler( );
 800120c:	f000 f8f4 	bl	80013f8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000654 	.word	0x20000654
 800121c:	420d0400 	.word	0x420d0400
 8001220:	420d0504 	.word	0x420d0504

08001224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123a:	4b69      	ldr	r3, [pc, #420]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 800123c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001240:	4a67      	ldr	r2, [pc, #412]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800124a:	4b65      	ldr	r3, [pc, #404]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 800124c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	61bb      	str	r3, [r7, #24]
 8001256:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001258:	4b61      	ldr	r3, [pc, #388]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 800125a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800125e:	4a60      	ldr	r2, [pc, #384]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001268:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 800126a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b5a      	ldr	r3, [pc, #360]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 8001278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800127c:	4a58      	ldr	r2, [pc, #352]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001286:	4b56      	ldr	r3, [pc, #344]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 8001288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001294:	4b52      	ldr	r3, [pc, #328]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 8001296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800129a:	4a51      	ldr	r2, [pc, #324]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012a4:	4b4e      	ldr	r3, [pc, #312]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 80012a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012b2:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 80012b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012b8:	4a49      	ldr	r2, [pc, #292]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 80012ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012c2:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 80012c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 80012d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012d6:	4a42      	ldr	r2, [pc, #264]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012e0:	4b3f      	ldr	r3, [pc, #252]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 80012e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2104      	movs	r1, #4
 80012f2:	483c      	ldr	r0, [pc, #240]	; (80013e4 <MX_GPIO_Init+0x1c0>)
 80012f4:	f001 fa56 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2104      	movs	r1, #4
 80012fc:	483a      	ldr	r0, [pc, #232]	; (80013e8 <MX_GPIO_Init+0x1c4>)
 80012fe:	f001 fa51 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	4839      	ldr	r0, [pc, #228]	; (80013ec <MX_GPIO_Init+0x1c8>)
 8001308:	f001 fa4c 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	21a0      	movs	r1, #160	; 0xa0
 8001310:	4837      	ldr	r0, [pc, #220]	; (80013f0 <MX_GPIO_Init+0x1cc>)
 8001312:	f001 fa47 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FMC_RESET_Pin */
  GPIO_InitStruct.Pin = FMC_RESET_Pin;
 8001316:	2304      	movs	r3, #4
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FMC_RESET_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	482d      	ldr	r0, [pc, #180]	; (80013e4 <MX_GPIO_Init+0x1c0>)
 800132e:	f001 f861 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001338:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <MX_GPIO_Init+0x1d0>)
 800133a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	4829      	ldr	r0, [pc, #164]	; (80013ec <MX_GPIO_Init+0x1c8>)
 8001348:	f001 f854 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800134c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	4823      	ldr	r0, [pc, #140]	; (80013f0 <MX_GPIO_Init+0x1cc>)
 8001362:	f001 f847 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001366:	2304      	movs	r3, #4
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136e:	2301      	movs	r3, #1
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001372:	2302      	movs	r3, #2
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	481a      	ldr	r0, [pc, #104]	; (80013e8 <MX_GPIO_Init+0x1c4>)
 800137e:	f001 f839 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138a:	2301      	movs	r3, #1
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138e:	2302      	movs	r3, #2
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	4814      	ldr	r0, [pc, #80]	; (80013ec <MX_GPIO_Init+0x1c8>)
 800139a:	f001 f82b 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 800139e:	2320      	movs	r3, #32
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	480e      	ldr	r0, [pc, #56]	; (80013f0 <MX_GPIO_Init+0x1cc>)
 80013b6:	f001 f81d 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c6:	2302      	movs	r3, #2
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	4807      	ldr	r0, [pc, #28]	; (80013f0 <MX_GPIO_Init+0x1cc>)
 80013d2:	f001 f80f 	bl	80023f4 <HAL_GPIO_Init>

}
 80013d6:	bf00      	nop
 80013d8:	3730      	adds	r7, #48	; 0x30
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	46020c00 	.word	0x46020c00
 80013e4:	42021000 	.word	0x42021000
 80013e8:	42021800 	.word	0x42021800
 80013ec:	42020800 	.word	0x42020800
 80013f0:	42020400 	.word	0x42020400
 80013f4:	10210000 	.word	0x10210000

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	e7fe      	b.n	8001400 <Error_Handler+0x8>
	...

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_MspInit+0x34>)
 800140c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001410:	4a09      	ldr	r2, [pc, #36]	; (8001438 <HAL_MspInit+0x34>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <HAL_MspInit+0x34>)
 800141c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001428:	2004      	movs	r0, #4
 800142a:	f000 ffa3 	bl	8002374 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	46020c00 	.word	0x46020c00

0800143c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0bc      	sub	sp, #240	; 0xf0
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	22c8      	movs	r2, #200	; 0xc8
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f008 f843 	bl	80094e8 <memset>
  if(hadc->Instance==ADC1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a24      	ldr	r2, [pc, #144]	; (80014f8 <HAL_ADC_MspInit+0xbc>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d140      	bne.n	80014ee <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800146c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001478:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800147c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	4618      	mov	r0, r3
 8001486:	f003 fdc5 	bl	8005014 <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001490:	f7ff ffb2 	bl	80013f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_ADC_MspInit+0xc0>)
 8001496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800149a:	4a18      	ldr	r2, [pc, #96]	; (80014fc <HAL_ADC_MspInit+0xc0>)
 800149c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_ADC_MspInit+0xc0>)
 80014a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_ADC_MspInit+0xc0>)
 80014b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014b8:	4a10      	ldr	r2, [pc, #64]	; (80014fc <HAL_ADC_MspInit+0xc0>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_ADC_MspInit+0xc0>)
 80014c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80014d0:	2304      	movs	r3, #4
 80014d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d6:	2303      	movs	r3, #3
 80014d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <HAL_ADC_MspInit+0xc4>)
 80014ea:	f000 ff83 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	37f0      	adds	r7, #240	; 0xf0
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	42028000 	.word	0x42028000
 80014fc:	46020c00 	.word	0x46020c00
 8001500:	42020800 	.word	0x42020800

08001504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b0bc      	sub	sp, #240	; 0xf0
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	22c8      	movs	r2, #200	; 0xc8
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f007 ffdf 	bl	80094e8 <memset>
  if(huart->Instance==USART1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a26      	ldr	r2, [pc, #152]	; (80015c8 <HAL_UART_MspInit+0xc4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d145      	bne.n	80015c0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001534:	f04f 0201 	mov.w	r2, #1
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001540:	2300      	movs	r3, #0
 8001542:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fd63 	bl	8005014 <HAL_RCCEx_PeriphCLKConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001554:	f7ff ff50 	bl	80013f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <HAL_UART_MspInit+0xc8>)
 800155a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800155e:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <HAL_UART_MspInit+0xc8>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_UART_MspInit+0xc8>)
 800156a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800156e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_UART_MspInit+0xc8>)
 8001578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800157c:	4a13      	ldr	r2, [pc, #76]	; (80015cc <HAL_UART_MspInit+0xc8>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_UART_MspInit+0xc8>)
 8001588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001594:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001598:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015ae:	2307      	movs	r3, #7
 80015b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015b8:	4619      	mov	r1, r3
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <HAL_UART_MspInit+0xcc>)
 80015bc:	f000 ff1a 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	37f0      	adds	r7, #240	; 0xf0
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40013800 	.word	0x40013800
 80015cc:	46020c00 	.word	0x46020c00
 80015d0:	42020000 	.word	0x42020000

080015d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b0be      	sub	sp, #248	; 0xf8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ec:	f107 0318 	add.w	r3, r7, #24
 80015f0:	22c8      	movs	r2, #200	; 0xc8
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f007 ff77 	bl	80094e8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a3c      	ldr	r2, [pc, #240]	; (80016f0 <HAL_PCD_MspInit+0x11c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d171      	bne.n	80016e8 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001604:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fcfa 	bl	8005014 <HAL_RCCEx_PeriphCLKConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001626:	f7ff fee7 	bl	80013f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <HAL_PCD_MspInit+0x120>)
 800162c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001630:	4a30      	ldr	r2, [pc, #192]	; (80016f4 <HAL_PCD_MspInit+0x120>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <HAL_PCD_MspInit+0x120>)
 800163c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001648:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800164c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001662:	230a      	movs	r3, #10
 8001664:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800166c:	4619      	mov	r1, r3
 800166e:	4822      	ldr	r0, [pc, #136]	; (80016f8 <HAL_PCD_MspInit+0x124>)
 8001670:	f000 fec0 	bl	80023f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HAL_PCD_MspInit+0x120>)
 8001676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800167a:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <HAL_PCD_MspInit+0x120>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_PCD_MspInit+0x120>)
 8001686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800168a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_PCD_MspInit+0x120>)
 8001694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d119      	bne.n	80016d4 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_PCD_MspInit+0x120>)
 80016a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a6:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <HAL_PCD_MspInit+0x120>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_PCD_MspInit+0x120>)
 80016b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80016be:	f002 f9dd 	bl	8003a7c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_PCD_MspInit+0x120>)
 80016c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_PCD_MspInit+0x120>)
 80016ca:	f023 0304 	bic.w	r3, r3, #4
 80016ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80016d2:	e001      	b.n	80016d8 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80016d4:	f002 f9d2 	bl	8003a7c <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2049      	movs	r0, #73	; 0x49
 80016de:	f000 fe54 	bl	800238a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80016e2:	2049      	movs	r0, #73	; 0x49
 80016e4:	f000 fe6b 	bl	80023be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	37f8      	adds	r7, #248	; 0xf8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	42040000 	.word	0x42040000
 80016f4:	46020c00 	.word	0x46020c00
 80016f8:	42020000 	.word	0x42020000

080016fc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <HAL_FMC_MspInit+0x8c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d132      	bne.n	800177e <HAL_FMC_MspInit+0x82>
    return;
  }
  FMC_Initialized = 1;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_FMC_MspInit+0x8c>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_FMC_MspInit+0x90>)
 8001720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001724:	4a19      	ldr	r2, [pc, #100]	; (800178c <HAL_FMC_MspInit+0x90>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_FMC_MspInit+0x90>)
 8001730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800173c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001740:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800174e:	230c      	movs	r3, #12
 8001750:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	4619      	mov	r1, r3
 8001756:	480e      	ldr	r0, [pc, #56]	; (8001790 <HAL_FMC_MspInit+0x94>)
 8001758:	f000 fe4c 	bl	80023f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 800175c:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8001760:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800176e:	230c      	movs	r3, #12
 8001770:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	4619      	mov	r1, r3
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <HAL_FMC_MspInit+0x98>)
 8001778:	f000 fe3c 	bl	80023f4 <HAL_GPIO_Init>
 800177c:	e000      	b.n	8001780 <HAL_FMC_MspInit+0x84>
    return;
 800177e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200006ac 	.word	0x200006ac
 800178c:	46020c00 	.word	0x46020c00
 8001790:	42021000 	.word	0x42021000
 8001794:	42020c00 	.word	0x42020c00

08001798 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80017a0:	f7ff ffac 	bl	80016fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <NMI_Handler+0x4>

080017b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <MemManage_Handler+0x4>

080017be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <UsageFault_Handler+0x4>

080017ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f8:	f000 f8d2 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <OTG_FS_IRQHandler+0x10>)
 8001806:	f001 f909 	bl	8002a1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000148 	.word	0x20000148

08001814 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <SystemInit+0x68>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181e:	4a17      	ldr	r2, [pc, #92]	; (800187c <SystemInit+0x68>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <SystemInit+0x6c>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <SystemInit+0x6c>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <SystemInit+0x6c>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <SystemInit+0x6c>)
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <SystemInit+0x6c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <SystemInit+0x6c>)
 8001846:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800184a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800184e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <SystemInit+0x6c>)
 8001852:	2200      	movs	r2, #0
 8001854:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <SystemInit+0x6c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <SystemInit+0x6c>)
 800185c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001860:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <SystemInit+0x6c>)
 8001864:	2200      	movs	r2, #0
 8001866:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <SystemInit+0x68>)
 800186a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800186e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00
 8001880:	46020c00 	.word	0x46020c00

08001884 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001888:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800188a:	e003      	b.n	8001894 <LoopCopyDataInit>

0800188c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800188e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001890:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001892:	3104      	adds	r1, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001894:	480b      	ldr	r0, [pc, #44]	; (80018c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001898:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800189a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800189c:	d3f6      	bcc.n	800188c <CopyDataInit>
	ldr	r2, =_sbss
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80018a0:	e002      	b.n	80018a8 <LoopFillZerobss>

080018a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018a4:	f842 3b04 	str.w	r3, [r2], #4

080018a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <LoopForever+0x16>)
	cmp	r2, r3
 80018aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018ac:	d3f9      	bcc.n	80018a2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018ae:	f7ff ffb1 	bl	8001814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f007 fdf5 	bl	80094a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018b6:	f7ff fa8b 	bl	8000dd0 <main>

080018ba <LoopForever>:

LoopForever:
    b LoopForever
 80018ba:	e7fe      	b.n	80018ba <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80018bc:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80018c0:	08009620 	.word	0x08009620
	ldr	r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018c8:	2000000d 	.word	0x2000000d
	ldr	r2, =_sbss
 80018cc:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80018d0:	200006b4 	.word	0x200006b4

080018d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC1_IRQHandler>
	...

080018d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_Init+0x4c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a10      	ldr	r2, [pc, #64]	; (8001924 <HAL_Init+0x4c>)
 80018e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e8:	2003      	movs	r0, #3
 80018ea:	f000 fd43 	bl	8002374 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80018ee:	f003 f9ad 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_Init+0x50>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	f003 030f 	and.w	r3, r3, #15
 80018fc:	490b      	ldr	r1, [pc, #44]	; (800192c <HAL_Init+0x54>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_Init+0x58>)
 8001906:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001908:	2000      	movs	r0, #0
 800190a:	f000 f813 	bl	8001934 <HAL_InitTick>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e002      	b.n	800191e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001918:	f7ff fd74 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40022000 	.word	0x40022000
 8001928:	46020c00 	.word	0x46020c00
 800192c:	08009510 	.word	0x08009510
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_InitTick+0x60>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e021      	b.n	800198c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_InitTick+0x64>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_InitTick+0x60>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001956:	fbb3 f3f1 	udiv	r3, r3, r1
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fd3b 	bl	80023da <HAL_SYSTICK_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e00e      	b.n	800198c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d80a      	bhi.n	800198a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f000 fd05 	bl	800238a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001980:	4a06      	ldr	r2, [pc, #24]	; (800199c <HAL_InitTick+0x68>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	e000      	b.n	800198c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000000c 	.word	0x2000000c
 8001998:	20000004 	.word	0x20000004
 800199c:	20000008 	.word	0x20000008

080019a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x20>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x24>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_IncTick+0x24>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	200006b0 	.word	0x200006b0

080019c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_GetTick+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	200006b0 	.word	0x200006b0

080019e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff ffee 	bl	80019c8 <HAL_GetTick>
 80019ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f8:	d005      	beq.n	8001a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_Delay+0x44>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a06:	bf00      	nop
 8001a08:	f7ff ffde 	bl	80019c8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d8f7      	bhi.n	8001a08 <HAL_Delay+0x28>
  {
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000000c 	.word	0x2000000c

08001a28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	601a      	str	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	2a00      	cmp	r2, #0
 8001a78:	d002      	beq.n	8001a80 <LL_ADC_SetGainCompensation+0x32>
 8001a7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a7e:	e000      	b.n	8001a82 <LL_ADC_SetGainCompensation+0x34>
 8001a80:	2200      	movs	r2, #0
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2107      	movs	r1, #7
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ae2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6093      	str	r3, [r2, #8]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b0a:	d101      	bne.n	8001b10 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	609a      	str	r2, [r3, #8]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b5a:	d101      	bne.n	8001b60 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <LL_ADC_IsEnabled+0x18>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <LL_ADC_IsEnabled+0x1a>
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d101      	bne.n	8001bac <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d101      	bne.n	8001bd2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e2e3      	b.n	80021c8 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a92      	ldr	r2, [pc, #584]	; (8001e58 <HAL_ADC_Init+0x278>)
 8001c0e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff fc0f 	bl	800143c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff60 	bl	8001af6 <LL_ADC_IsDeepPowerDownEnabled>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff46 	bl	8001ad2 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff7b 	bl	8001b46 <LL_ADC_IsInternalRegulatorEnabled>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d115      	bne.n	8001c82 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff5f 	bl	8001b1e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c60:	4b7e      	ldr	r3, [pc, #504]	; (8001e5c <HAL_ADC_Init+0x27c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	4a7e      	ldr	r2, [pc, #504]	; (8001e60 <HAL_ADC_Init+0x280>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	3301      	adds	r3, #1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c74:	e002      	b.n	8001c7c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f9      	bne.n	8001c76 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff5d 	bl	8001b46 <LL_ADC_IsInternalRegulatorEnabled>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10e      	bne.n	8001cb0 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c96:	f043 0210 	orr.w	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ca2:	f043 0201 	orr.w	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff6d 	bl	8001b94 <LL_ADC_REG_IsConversionOngoing>
 8001cba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f040 8274 	bne.w	80021b2 <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f040 8270 	bne.w	80021b2 <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cd6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cda:	f043 0202 	orr.w	r2, r3, #2
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff41 	bl	8001b6e <LL_ADC_IsEnabled>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d14e      	bne.n	8001d90 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <HAL_ADC_Init+0x278>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d028      	beq.n	8001d4e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_ADC_Init+0x284>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d109      	bne.n	8001d1a <HAL_ADC_Init+0x13a>
 8001d06:	4857      	ldr	r0, [pc, #348]	; (8001e64 <HAL_ADC_Init+0x284>)
 8001d08:	f7ff ff31 	bl	8001b6e <LL_ADC_IsEnabled>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	bf0c      	ite	eq
 8001d12:	2301      	moveq	r3, #1
 8001d14:	2300      	movne	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	e008      	b.n	8001d2c <HAL_ADC_Init+0x14c>
 8001d1a:	484f      	ldr	r0, [pc, #316]	; (8001e58 <HAL_ADC_Init+0x278>)
 8001d1c:	f7ff ff27 	bl	8001b6e <LL_ADC_IsEnabled>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bf0c      	ite	eq
 8001d26:	2301      	moveq	r3, #1
 8001d28:	2300      	movne	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d02f      	beq.n	8001d90 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a4b      	ldr	r2, [pc, #300]	; (8001e64 <HAL_ADC_Init+0x284>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_Init+0x15e>
 8001d3a:	4a4b      	ldr	r2, [pc, #300]	; (8001e68 <HAL_ADC_Init+0x288>)
 8001d3c:	e000      	b.n	8001d40 <HAL_ADC_Init+0x160>
 8001d3e:	4a4b      	ldr	r2, [pc, #300]	; (8001e6c <HAL_ADC_Init+0x28c>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	4619      	mov	r1, r3
 8001d46:	4610      	mov	r0, r2
 8001d48:	f7ff fe6e 	bl	8001a28 <LL_ADC_SetCommonClock>
 8001d4c:	e020      	b.n	8001d90 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f023 010c 	bic.w	r1, r3, #12
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d005      	beq.n	8001d70 <HAL_ADC_Init+0x190>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	e000      	b.n	8001d72 <HAL_ADC_Init+0x192>
 8001d70:	230c      	movs	r3, #12
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	430b      	orrs	r3, r1
 8001d78:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001d7a:	4b3c      	ldr	r3, [pc, #240]	; (8001e6c <HAL_ADC_Init+0x28c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d8a:	4938      	ldr	r1, [pc, #224]	; (8001e6c <HAL_ADC_Init+0x28c>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <HAL_ADC_Init+0x278>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d010      	beq.n	8001dbc <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001da0:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001da6:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001dac:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001db4:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001db6:	4313      	orrs	r3, r2
 8001db8:	623b      	str	r3, [r7, #32]
 8001dba:	e030      	b.n	8001e1e <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7f1b      	ldrb	r3, [r3, #28]
 8001dc0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc8:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dca:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dd0:	2a00      	cmp	r2, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_ADC_Init+0x1fa>
 8001dd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dd8:	e000      	b.n	8001ddc <HAL_ADC_Init+0x1fc>
 8001dda:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ddc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001de2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	da04      	bge.n	8001df6 <HAL_ADC_Init+0x216>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001df4:	e001      	b.n	8001dfa <HAL_ADC_Init+0x21a>
 8001df6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8001dfa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4918      	ldr	r1, [pc, #96]	; (8001e64 <HAL_ADC_Init+0x284>)
 8001e02:	428b      	cmp	r3, r1
 8001e04:	d103      	bne.n	8001e0e <HAL_ADC_Init+0x22e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e0c:	e003      	b.n	8001e16 <HAL_ADC_Init+0x236>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e14:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001e16:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e18:	6a3a      	ldr	r2, [r7, #32]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d12f      	bne.n	8001e88 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_ADC_Init+0x278>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	3b01      	subs	r3, #1
 8001e38:	045b      	lsls	r3, r3, #17
 8001e3a:	6a3a      	ldr	r2, [r7, #32]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	e022      	b.n	8001e88 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d111      	bne.n	8001e70 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e52:	623b      	str	r3, [r7, #32]
 8001e54:	e018      	b.n	8001e88 <HAL_ADC_Init+0x2a8>
 8001e56:	bf00      	nop
 8001e58:	46021000 	.word	0x46021000
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	053e2d63 	.word	0x053e2d63
 8001e64:	42028000 	.word	0x42028000
 8001e68:	42028308 	.word	0x42028308
 8001e6c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e74:	f043 0220 	orr.w	r2, r3, #32
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a93      	ldr	r2, [pc, #588]	; (80020dc <HAL_ADC_Init+0x4fc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d018      	beq.n	8001ec4 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	6a3a      	ldr	r2, [r7, #32]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	4b8a      	ldr	r3, [pc, #552]	; (80020e0 <HAL_ADC_Init+0x500>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	6a39      	ldr	r1, [r7, #32]
 8001ebe:	430b      	orrs	r3, r1
 8001ec0:	60d3      	str	r3, [r2, #12]
 8001ec2:	e033      	b.n	8001f2c <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d009      	beq.n	8001ee0 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	6a3a      	ldr	r2, [r7, #32]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8001eea:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	6a39      	ldr	r1, [r7, #32]
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1a      	ldr	r2, [r3, #32]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d008      	beq.n	8001f2c <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a6a      	ldr	r2, [pc, #424]	; (80020dc <HAL_ADC_Init+0x4fc>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	f000 8093 	beq.w	800205e <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fe29 	bl	8001b94 <LL_ADC_REG_IsConversionOngoing>
 8001f42:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fe36 	bl	8001bba <LL_ADC_INJ_IsConversionOngoing>
 8001f4e:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d161      	bne.n	800201a <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d15e      	bne.n	800201a <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7f1b      	ldrb	r3, [r3, #28]
 8001f60:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	495f      	ldr	r1, [pc, #380]	; (80020e4 <HAL_ADC_Init+0x504>)
 8001f68:	428b      	cmp	r3, r1
 8001f6a:	d102      	bne.n	8001f72 <HAL_ADC_Init+0x392>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f70:	e002      	b.n	8001f78 <HAL_ADC_Init+0x398>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f86:	f023 0303 	bic.w	r3, r3, #3
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	6a39      	ldr	r1, [r7, #32]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	f7ff fd51 	bl	8001a4e <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d11e      	bne.n	8001ff4 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	4b49      	ldr	r3, [pc, #292]	; (80020e8 <HAL_ADC_Init+0x508>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001fca:	0411      	lsls	r1, r2, #16
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001fd6:	4311      	orrs	r1, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001fdc:	4311      	orrs	r1, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fe2:	0892      	lsrs	r2, r2, #2
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	611a      	str	r2, [r3, #16]
 8001ff2:	e007      	b.n	8002004 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d10c      	bne.n	800203c <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	f023 010f 	bic.w	r1, r3, #15
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	1e5a      	subs	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
 800203a:	e007      	b.n	800204c <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 020f 	bic.w	r2, r2, #15
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002050:	f023 0303 	bic.w	r3, r3, #3
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800205c:	e0b2      	b.n	80021c4 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002066:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 800206c:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8002072:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	4313      	orrs	r3, r2
 8002078:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002080:	2b01      	cmp	r3, #1
 8002082:	d103      	bne.n	800208c <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_ADC_Init+0x50c>)
 8002094:	4013      	ands	r3, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	69f9      	ldr	r1, [r7, #28]
 800209c:	430b      	orrs	r3, r1
 800209e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a8:	461a      	mov	r2, r3
 80020aa:	2100      	movs	r1, #0
 80020ac:	f7ff fcf2 	bl	8001a94 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b8:	461a      	mov	r2, r3
 80020ba:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 80020be:	f7ff fce9 	bl	8001a94 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d112      	bne.n	80020f0 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f062 020f 	orn	r2, r2, #15
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
 80020da:	e044      	b.n	8002166 <HAL_ADC_Init+0x586>
 80020dc:	46021000 	.word	0x46021000
 80020e0:	fff0c013 	.word	0xfff0c013
 80020e4:	42028000 	.word	0x42028000
 80020e8:	fc00f81e 	.word	0xfc00f81e
 80020ec:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020f8:	d135      	bne.n	8002166 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	e00d      	b.n	800211c <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	2b0f      	cmp	r3, #15
 8002114:	d006      	beq.n	8002124 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	3301      	adds	r3, #1
 800211a:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	2b07      	cmp	r3, #7
 8002120:	d9ee      	bls.n	8002100 <HAL_ADC_Init+0x520>
 8002122:	e000      	b.n	8002126 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8002124:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d108      	bne.n	800213e <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f062 020f 	orn	r2, r2, #15
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
 800213c:	e013      	b.n	8002166 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	3b01      	subs	r3, #1
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	f003 031c 	and.w	r3, r3, #28
 8002150:	f06f 020f 	mvn.w	r2, #15
 8002154:	fa02 f103 	lsl.w	r1, r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <HAL_ADC_Init+0x5f0>)
 800216e:	4013      	ands	r3, r2
 8002170:	6a3a      	ldr	r2, [r7, #32]
 8002172:	429a      	cmp	r2, r3
 8002174:	d10b      	bne.n	800218e <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002180:	f023 0303 	bic.w	r3, r3, #3
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800218c:	e01a      	b.n	80021c4 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002192:	f023 0312 	bic.w	r3, r3, #18
 8002196:	f043 0210 	orr.w	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021a2:	f043 0201 	orr.w	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80021b0:	e008      	b.n	80021c4 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021b6:	f043 0210 	orr.w	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 80021c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3728      	adds	r7, #40	; 0x28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	833ffff3 	.word	0x833ffff3

080021d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f0:	4013      	ands	r3, r2
 80021f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002206:	4a04      	ldr	r2, [pc, #16]	; (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	60d3      	str	r3, [r2, #12]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <__NVIC_GetPriorityGrouping+0x18>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	f003 0307 	and.w	r3, r3, #7
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	db0b      	blt.n	8002262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	4907      	ldr	r1, [pc, #28]	; (8002270 <__NVIC_EnableIRQ+0x38>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	2001      	movs	r0, #1
 800225a:	fa00 f202 	lsl.w	r2, r0, r2
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000e100 	.word	0xe000e100

08002274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	2b00      	cmp	r3, #0
 8002286:	db0a      	blt.n	800229e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	490c      	ldr	r1, [pc, #48]	; (80022c0 <__NVIC_SetPriority+0x4c>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	0112      	lsls	r2, r2, #4
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	440b      	add	r3, r1
 8002298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800229c:	e00a      	b.n	80022b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4908      	ldr	r1, [pc, #32]	; (80022c4 <__NVIC_SetPriority+0x50>)
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	3b04      	subs	r3, #4
 80022ac:	0112      	lsls	r2, r2, #4
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	440b      	add	r3, r1
 80022b2:	761a      	strb	r2, [r3, #24]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000e100 	.word	0xe000e100
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f1c3 0307 	rsb	r3, r3, #7
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	bf28      	it	cs
 80022e6:	2304      	movcs	r3, #4
 80022e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2b06      	cmp	r3, #6
 80022f0:	d902      	bls.n	80022f8 <NVIC_EncodePriority+0x30>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3b03      	subs	r3, #3
 80022f6:	e000      	b.n	80022fa <NVIC_EncodePriority+0x32>
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	401a      	ands	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002310:	f04f 31ff 	mov.w	r1, #4294967295
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	43d9      	mvns	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	4313      	orrs	r3, r2
         );
}
 8002322:	4618      	mov	r0, r3
 8002324:	3724      	adds	r7, #36	; 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002340:	d301      	bcc.n	8002346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002342:	2301      	movs	r3, #1
 8002344:	e00f      	b.n	8002366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002346:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <SysTick_Config+0x40>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234e:	210f      	movs	r1, #15
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	f7ff ff8e 	bl	8002274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <SysTick_Config+0x40>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <SysTick_Config+0x40>)
 8002360:	2207      	movs	r2, #7
 8002362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	e000e010 	.word	0xe000e010

08002374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff29 	bl	80021d4 <__NVIC_SetPriorityGrouping>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002398:	f7ff ff40 	bl	800221c <__NVIC_GetPriorityGrouping>
 800239c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	6978      	ldr	r0, [r7, #20]
 80023a4:	f7ff ff90 	bl	80022c8 <NVIC_EncodePriority>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff5f 	bl	8002274 <__NVIC_SetPriority>
}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff33 	bl	8002238 <__NVIC_EnableIRQ>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ffa4 	bl	8002330 <SysTick_Config>
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002406:	e1ba      	b.n	800277e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	2101      	movs	r1, #1
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	fa01 f303 	lsl.w	r3, r1, r3
 8002414:	4013      	ands	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 81aa 	beq.w	8002778 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a55      	ldr	r2, [pc, #340]	; (800257c <HAL_GPIO_Init+0x188>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d15d      	bne.n	80024e8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002432:	2201      	movs	r2, #1
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	4013      	ands	r3, r2
 8002440:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0201 	and.w	r2, r3, #1
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	4313      	orrs	r3, r2
 8002454:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800245c:	4a48      	ldr	r2, [pc, #288]	; (8002580 <HAL_GPIO_Init+0x18c>)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002464:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002466:	4a46      	ldr	r2, [pc, #280]	; (8002580 <HAL_GPIO_Init+0x18c>)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	08da      	lsrs	r2, r3, #3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	3208      	adds	r2, #8
 800247a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	220f      	movs	r2, #15
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	4013      	ands	r3, r2
 8002494:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	220b      	movs	r2, #11
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	08da      	lsrs	r2, r3, #3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	3208      	adds	r2, #8
 80024b2:	69f9      	ldr	r1, [r7, #28]
 80024b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2202      	movs	r2, #2
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	e067      	b.n	80025b8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x104>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b12      	cmp	r3, #18
 80024f6:	d145      	bne.n	8002584 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	08da      	lsrs	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3208      	adds	r2, #8
 8002500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002504:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	220f      	movs	r2, #15
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	4013      	ands	r3, r2
 800251a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f003 020f 	and.w	r2, r3, #15
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	4313      	orrs	r3, r2
 8002534:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	08da      	lsrs	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3208      	adds	r2, #8
 800253e:	69f9      	ldr	r1, [r7, #28]
 8002540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	4013      	ands	r3, r2
 800255a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0203 	and.w	r2, r3, #3
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	4313      	orrs	r3, r2
 8002570:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	e01e      	b.n	80025b8 <HAL_GPIO_Init+0x1c4>
 800257a:	bf00      	nop
 800257c:	46020000 	.word	0x46020000
 8002580:	08009568 	.word	0x08009568
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	4013      	ands	r3, r2
 800259a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0203 	and.w	r2, r3, #3
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d00b      	beq.n	80025d8 <HAL_GPIO_Init+0x1e4>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d007      	beq.n	80025d8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025cc:	2b11      	cmp	r3, #17
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b12      	cmp	r3, #18
 80025d6:	d130      	bne.n	800263a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800260e:	2201      	movs	r2, #1
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	4013      	ands	r3, r2
 800261c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	f003 0201 	and.w	r2, r3, #1
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	4313      	orrs	r3, r2
 8002632:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d017      	beq.n	8002672 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	2203      	movs	r2, #3
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	4013      	ands	r3, r2
 8002658:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	4313      	orrs	r3, r2
 800266a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d07c      	beq.n	8002778 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800267e:	4a47      	ldr	r2, [pc, #284]	; (800279c <HAL_GPIO_Init+0x3a8>)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3318      	adds	r3, #24
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	4013      	ands	r3, r2
 80026a0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	0a9a      	lsrs	r2, r3, #10
 80026a6:	4b3e      	ldr	r3, [pc, #248]	; (80027a0 <HAL_GPIO_Init+0x3ac>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	f002 0203 	and.w	r2, r2, #3
 80026b0:	00d2      	lsls	r2, r2, #3
 80026b2:	4093      	lsls	r3, r2
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80026ba:	4938      	ldr	r1, [pc, #224]	; (800279c <HAL_GPIO_Init+0x3a8>)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3318      	adds	r3, #24
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80026c8:	4b34      	ldr	r3, [pc, #208]	; (800279c <HAL_GPIO_Init+0x3a8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80026ec:	4a2b      	ldr	r2, [pc, #172]	; (800279c <HAL_GPIO_Init+0x3a8>)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_GPIO_Init+0x3a8>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	4013      	ands	r3, r2
 8002700:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_GPIO_Init+0x3a8>)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800271c:	4b1f      	ldr	r3, [pc, #124]	; (800279c <HAL_GPIO_Init+0x3a8>)
 800271e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002722:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	43db      	mvns	r3, r3
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	4013      	ands	r3, r2
 800272c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002742:	4a16      	ldr	r2, [pc, #88]	; (800279c <HAL_GPIO_Init+0x3a8>)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800274a:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_GPIO_Init+0x3a8>)
 800274c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002750:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	43db      	mvns	r3, r3
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	4013      	ands	r3, r2
 800275a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <HAL_GPIO_Init+0x3a8>)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	3301      	adds	r3, #1
 800277c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	f47f ae3d 	bne.w	8002408 <HAL_GPIO_Init+0x14>
  }
}
 800278e:	bf00      	nop
 8002790:	bf00      	nop
 8002792:	3724      	adds	r7, #36	; 0x24
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	46022000 	.word	0x46022000
 80027a0:	002f7f7f 	.word	0x002f7f7f

080027a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
 80027b0:	4613      	mov	r3, r2
 80027b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027b4:	787b      	ldrb	r3, [r7, #1]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80027c0:	e002      	b.n	80027c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d6:	b08f      	sub	sp, #60	; 0x3c
 80027d8:	af0a      	add	r7, sp, #40	; 0x28
 80027da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e116      	b.n	8002a14 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d106      	bne.n	8002806 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7fe fee7 	bl	80015d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2203      	movs	r2, #3
 800280a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d102      	bne.n	8002820 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f006 f935 	bl	8008a94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	687e      	ldr	r6, [r7, #4]
 8002832:	466d      	mov	r5, sp
 8002834:	f106 0410 	add.w	r4, r6, #16
 8002838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800283a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800283c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800283e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002840:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002844:	e885 0003 	stmia.w	r5, {r0, r1}
 8002848:	1d33      	adds	r3, r6, #4
 800284a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800284c:	6838      	ldr	r0, [r7, #0]
 800284e:	f006 f852 	bl	80088f6 <USB_CoreInit>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0d7      	b.n	8002a14 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f006 f923 	bl	8008ab6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002870:	2300      	movs	r3, #0
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	e04a      	b.n	800290c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	333d      	adds	r3, #61	; 0x3d
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	333c      	adds	r3, #60	; 0x3c
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	b298      	uxth	r0, r3
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	3344      	adds	r3, #68	; 0x44
 80028b2:	4602      	mov	r2, r0
 80028b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	3340      	adds	r3, #64	; 0x40
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3348      	adds	r3, #72	; 0x48
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	334c      	adds	r3, #76	; 0x4c
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3354      	adds	r3, #84	; 0x54
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	3301      	adds	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	429a      	cmp	r2, r3
 8002914:	d3af      	bcc.n	8002876 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
 800291a:	e044      	b.n	80029a6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	3301      	adds	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d3b5      	bcc.n	800291c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	687e      	ldr	r6, [r7, #4]
 80029b8:	466d      	mov	r5, sp
 80029ba:	f106 0410 	add.w	r4, r6, #16
 80029be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80029ce:	1d33      	adds	r3, r6, #4
 80029d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d2:	6838      	ldr	r0, [r7, #0]
 80029d4:	f006 f8bc 	bl	8008b50 <USB_DevInit>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e014      	b.n	8002a14 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d102      	bne.n	8002a08 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 ff38 	bl	8003878 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f006 fbcf 	bl	80091b0 <USB_DevDisconnect>

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a1c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b08d      	sub	sp, #52	; 0x34
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f006 fc70 	bl	8009318 <USB_GetMode>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f040 84b7 	bne.w	80033ae <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f006 fbd4 	bl	80091f2 <USB_ReadInterrupts>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 84ad 	beq.w	80033ac <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f006 fbc1 	bl	80091f2 <USB_ReadInterrupts>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d107      	bne.n	8002a8a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f002 0202 	and.w	r2, r2, #2
 8002a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f006 fbaf 	bl	80091f2 <USB_ReadInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b10      	cmp	r3, #16
 8002a9c:	d161      	bne.n	8002b62 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0210 	bic.w	r2, r2, #16
 8002aac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	f003 020f 	and.w	r2, r3, #15
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	3304      	adds	r3, #4
 8002acc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	0c5b      	lsrs	r3, r3, #17
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d124      	bne.n	8002b24 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d035      	beq.n	8002b52 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	461a      	mov	r2, r3
 8002af8:	6a38      	ldr	r0, [r7, #32]
 8002afa:	f006 fb01 	bl	8009100 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b0a:	441a      	add	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	6a1a      	ldr	r2, [r3, #32]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b1c:	441a      	add	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	621a      	str	r2, [r3, #32]
 8002b22:	e016      	b.n	8002b52 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	0c5b      	lsrs	r3, r3, #17
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	2b06      	cmp	r3, #6
 8002b2e:	d110      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b36:	2208      	movs	r2, #8
 8002b38:	4619      	mov	r1, r3
 8002b3a:	6a38      	ldr	r0, [r7, #32]
 8002b3c:	f006 fae0 	bl	8009100 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	6a1a      	ldr	r2, [r3, #32]
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b4c:	441a      	add	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0210 	orr.w	r2, r2, #16
 8002b60:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f006 fb43 	bl	80091f2 <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b76:	f040 80a7 	bne.w	8002cc8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f006 fb48 	bl	8009218 <USB_ReadDevAllOutEpInterrupt>
 8002b88:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b8a:	e099      	b.n	8002cc0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 808e 	beq.w	8002cb4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f006 fb6c 	bl	8009280 <USB_ReadDevOutEPInterrupt>
 8002ba8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00c      	beq.n	8002bce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fd27 	bl	800361c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be4:	461a      	mov	r2, r3
 8002be6:	2308      	movs	r3, #8
 8002be8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fdfd 	bl	80037ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2310      	movs	r3, #16
 8002c0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d030      	beq.n	8002c7a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c20:	2b80      	cmp	r3, #128	; 0x80
 8002c22:	d109      	bne.n	8002c38 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c36:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	78db      	ldrb	r3, [r3, #3]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d108      	bne.n	8002c68 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	4619      	mov	r1, r3
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fbf0 	bl	8003448 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c74:	461a      	mov	r2, r3
 8002c76:	2302      	movs	r3, #2
 8002c78:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c90:	461a      	mov	r2, r3
 8002c92:	2320      	movs	r3, #32
 8002c94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cac:	461a      	mov	r2, r3
 8002cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cb2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f47f af62 	bne.w	8002b8c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f006 fa90 	bl	80091f2 <USB_ReadInterrupts>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cdc:	f040 80db 	bne.w	8002e96 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f006 fab1 	bl	800924c <USB_ReadDevAllInEpInterrupt>
 8002cea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002cf0:	e0cd      	b.n	8002e8e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80c2 	beq.w	8002e82 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f006 fad7 	bl	80092bc <USB_ReadDevInEPInterrupt>
 8002d0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d057      	beq.n	8002dca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	2201      	movs	r2, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69f9      	ldr	r1, [r7, #28]
 8002d36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d132      	bne.n	8002dbe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	334c      	adds	r3, #76	; 0x4c
 8002d68:	6819      	ldr	r1, [r3, #0]
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4403      	add	r3, r0
 8002d78:	3348      	adds	r3, #72	; 0x48
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4419      	add	r1, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4403      	add	r3, r0
 8002d8c:	334c      	adds	r3, #76	; 0x4c
 8002d8e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d113      	bne.n	8002dbe <HAL_PCD_IRQHandler+0x3a2>
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3354      	adds	r3, #84	; 0x54
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d108      	bne.n	8002dbe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002db6:	461a      	mov	r2, r3
 8002db8:	2101      	movs	r1, #1
 8002dba:	f006 fadf 	bl	800937c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fb01 	bl	80033cc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de0:	461a      	mov	r2, r3
 8002de2:	2308      	movs	r3, #8
 8002de4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2310      	movs	r3, #16
 8002e00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2340      	movs	r3, #64	; 0x40
 8002e1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d023      	beq.n	8002e70 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e2a:	6a38      	ldr	r0, [r7, #32]
 8002e2c:	f005 ffde 	bl	8008dec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	3338      	adds	r3, #56	; 0x38
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	3304      	adds	r3, #4
 8002e42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	78db      	ldrb	r3, [r3, #3]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d108      	bne.n	8002e5e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	4619      	mov	r1, r3
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fb01 	bl	8003460 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fb40 	bl	8003502 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	3301      	adds	r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	085b      	lsrs	r3, r3, #1
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f47f af2e 	bne.w	8002cf2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f006 f9a9 	bl	80091f2 <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eaa:	d122      	bne.n	8002ef2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d108      	bne.n	8002edc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fcf3 	bl	80038c0 <HAL_PCDEx_LPM_Callback>
 8002eda:	e002      	b.n	8002ee2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 faa9 	bl	8003434 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f006 f97b 	bl	80091f2 <USB_ReadInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f06:	d112      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d102      	bne.n	8002f1e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fa81 	bl	8003420 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f006 f95d 	bl	80091f2 <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f42:	d121      	bne.n	8002f88 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002f52:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d111      	bne.n	8002f82 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6c:	089b      	lsrs	r3, r3, #2
 8002f6e:	f003 020f 	and.w	r2, r3, #15
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002f78:	2101      	movs	r1, #1
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fca0 	bl	80038c0 <HAL_PCDEx_LPM_Callback>
 8002f80:	e002      	b.n	8002f88 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fa4c 	bl	8003420 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f006 f930 	bl	80091f2 <USB_ReadInterrupts>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9c:	f040 80b7 	bne.w	800310e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2110      	movs	r1, #16
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f005 ff16 	bl	8008dec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc4:	e046      	b.n	8003054 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fd8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fea:	0151      	lsls	r1, r2, #5
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	440a      	add	r2, r1
 8002ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ff4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ff8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003006:	461a      	mov	r2, r3
 8003008:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800300c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800301e:	0151      	lsls	r1, r2, #5
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	440a      	add	r2, r1
 8003024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003028:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800302c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800303e:	0151      	lsls	r1, r2, #5
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	440a      	add	r2, r1
 8003044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003048:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800304c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	3301      	adds	r3, #1
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800305a:	429a      	cmp	r2, r3
 800305c:	d3b3      	bcc.n	8002fc6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800306c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003070:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	2b00      	cmp	r3, #0
 8003078:	d016      	beq.n	80030a8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800308a:	f043 030b 	orr.w	r3, r3, #11
 800308e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030a0:	f043 030b 	orr.w	r3, r3, #11
 80030a4:	6453      	str	r3, [r2, #68]	; 0x44
 80030a6:	e015      	b.n	80030d4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030ba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80030be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ce:	f043 030b 	orr.w	r3, r3, #11
 80030d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80030e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030f8:	461a      	mov	r2, r3
 80030fa:	f006 f93f 	bl	800937c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800310c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f006 f86d 	bl	80091f2 <USB_ReadInterrupts>
 8003118:	4603      	mov	r3, r0
 800311a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800311e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003122:	d124      	bne.n	800316e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f006 f903 	bl	8009334 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f005 fed7 	bl	8008ee6 <USB_GetDevSpeed>
 8003138:	4603      	mov	r3, r0
 800313a:	461a      	mov	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681c      	ldr	r4, [r3, #0]
 8003144:	f001 fe8a 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8003148:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	4620      	mov	r0, r4
 8003154:	f005 fbfc 	bl	8008950 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f957 	bl	800340c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800316c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f006 f83d 	bl	80091f2 <USB_ReadInterrupts>
 8003178:	4603      	mov	r3, r0
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b08      	cmp	r3, #8
 8003180:	d10a      	bne.n	8003198 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f938 	bl	80033f8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f002 0208 	and.w	r2, r2, #8
 8003196:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f006 f828 	bl	80091f2 <USB_ReadInterrupts>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	2b80      	cmp	r3, #128	; 0x80
 80031aa:	d122      	bne.n	80031f2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031b8:	2301      	movs	r3, #1
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
 80031bc:	e014      	b.n	80031e8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d105      	bne.n	80031e2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f95f 	bl	80034a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	3301      	adds	r3, #1
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d3e5      	bcc.n	80031be <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f005 fffb 	bl	80091f2 <USB_ReadInterrupts>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003206:	d13b      	bne.n	8003280 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003208:	2301      	movs	r3, #1
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
 800320c:	e02b      	b.n	8003266 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4413      	add	r3, r2
 8003216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3340      	adds	r3, #64	; 0x40
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d115      	bne.n	8003260 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003234:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003236:	2b00      	cmp	r3, #0
 8003238:	da12      	bge.n	8003260 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323e:	4613      	mov	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	333f      	adds	r3, #63	; 0x3f
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003256:	b2db      	uxtb	r3, r3
 8003258:	4619      	mov	r1, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f920 	bl	80034a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	3301      	adds	r3, #1
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	429a      	cmp	r2, r3
 800326e:	d3ce      	bcc.n	800320e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800327e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f005 ffb4 	bl	80091f2 <USB_ReadInterrupts>
 800328a:	4603      	mov	r3, r0
 800328c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003294:	d155      	bne.n	8003342 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003296:	2301      	movs	r3, #1
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
 800329a:	e045      	b.n	8003328 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d12e      	bne.n	8003322 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	da2b      	bge.n	8003322 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80032d6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032da:	429a      	cmp	r2, r3
 80032dc:	d121      	bne.n	8003322 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800331a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800331e:	6053      	str	r3, [r2, #4]
            break;
 8003320:	e007      	b.n	8003332 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	3301      	adds	r3, #1
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332e:	429a      	cmp	r2, r3
 8003330:	d3b4      	bcc.n	800329c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f005 ff53 	bl	80091f2 <USB_ReadInterrupts>
 800334c:	4603      	mov	r3, r0
 800334e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003356:	d10a      	bne.n	800336e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f88d 	bl	8003478 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695a      	ldr	r2, [r3, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800336c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f005 ff3d 	bl	80091f2 <USB_ReadInterrupts>
 8003378:	4603      	mov	r3, r0
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b04      	cmp	r3, #4
 8003380:	d115      	bne.n	80033ae <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f879 	bl	800348c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	e000      	b.n	80033ae <HAL_PCD_IRQHandler+0x992>
      return;
 80033ac:	bf00      	nop
    }
  }
}
 80033ae:	3734      	adds	r7, #52	; 0x34
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd90      	pop	{r4, r7, pc}

080033b4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	da0c      	bge.n	80034ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	f003 020f 	and.w	r2, r3, #15
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	3338      	adds	r3, #56	; 0x38
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	3304      	adds	r3, #4
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	e00c      	b.n	80034e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	f003 020f 	and.w	r2, r3, #15
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4413      	add	r3, r2
 80034e4:	3304      	adds	r3, #4
 80034e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f005 fd1e 	bl	8008f30 <USB_EPStopXfer>
 80034f4:	4603      	mov	r3, r0
 80034f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034f8:	7afb      	ldrb	r3, [r7, #11]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b08a      	sub	sp, #40	; 0x28
 8003506:	af02      	add	r7, sp, #8
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	3338      	adds	r3, #56	; 0x38
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	3304      	adds	r3, #4
 8003528:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a1a      	ldr	r2, [r3, #32]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	429a      	cmp	r2, r3
 8003534:	d901      	bls.n	800353a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e06c      	b.n	8003614 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	429a      	cmp	r2, r3
 800354e:	d902      	bls.n	8003556 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3303      	adds	r3, #3
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800355e:	e02b      	b.n	80035b8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	429a      	cmp	r2, r3
 8003574:	d902      	bls.n	800357c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	3303      	adds	r3, #3
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6919      	ldr	r1, [r3, #16]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	b2da      	uxtb	r2, r3
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003594:	b2db      	uxtb	r3, r3
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	4603      	mov	r3, r0
 800359a:	6978      	ldr	r0, [r7, #20]
 800359c:	f005 fd72 	bl	8009084 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	441a      	add	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a1a      	ldr	r2, [r3, #32]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	441a      	add	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d809      	bhi.n	80035e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1a      	ldr	r2, [r3, #32]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d203      	bcs.n	80035e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1be      	bne.n	8003560 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d811      	bhi.n	8003612 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	2201      	movs	r2, #1
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	43db      	mvns	r3, r3
 8003608:	6939      	ldr	r1, [r7, #16]
 800360a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800360e:	4013      	ands	r3, r2
 8003610:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	333c      	adds	r3, #60	; 0x3c
 8003634:	3304      	adds	r3, #4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d17b      	bne.n	800374a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d015      	beq.n	8003688 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	4a61      	ldr	r2, [pc, #388]	; (80037e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	f240 80b9 	bls.w	80037d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80b3 	beq.w	80037d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	4413      	add	r3, r2
 800367a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367e:	461a      	mov	r2, r3
 8003680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003684:	6093      	str	r3, [r2, #8]
 8003686:	e0a7      	b.n	80037d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	4413      	add	r3, r2
 800369a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800369e:	461a      	mov	r2, r3
 80036a0:	2320      	movs	r3, #32
 80036a2:	6093      	str	r3, [r2, #8]
 80036a4:	e098      	b.n	80037d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f040 8093 	bne.w	80037d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	4a4b      	ldr	r2, [pc, #300]	; (80037e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d90f      	bls.n	80036da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d0:	461a      	mov	r2, r3
 80036d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036d6:	6093      	str	r3, [r2, #8]
 80036d8:	e07e      	b.n	80037d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	3304      	adds	r3, #4
 80036ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	69da      	ldr	r2, [r3, #28]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	0159      	lsls	r1, r3, #5
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	440b      	add	r3, r1
 80036fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003706:	1ad2      	subs	r2, r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d114      	bne.n	800373c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003724:	461a      	mov	r2, r3
 8003726:	2101      	movs	r1, #1
 8003728:	f005 fe28 	bl	800937c <USB_EP0_OutStart>
 800372c:	e006      	b.n	800373c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	441a      	add	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	4619      	mov	r1, r3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff fe36 	bl	80033b4 <HAL_PCD_DataOutStageCallback>
 8003748:	e046      	b.n	80037d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	4a26      	ldr	r2, [pc, #152]	; (80037e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d124      	bne.n	800379c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003768:	461a      	mov	r2, r3
 800376a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376e:	6093      	str	r3, [r2, #8]
 8003770:	e032      	b.n	80037d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003788:	461a      	mov	r2, r3
 800378a:	2320      	movs	r3, #32
 800378c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	4619      	mov	r1, r3
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff fe0d 	bl	80033b4 <HAL_PCD_DataOutStageCallback>
 800379a:	e01d      	b.n	80037d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d114      	bne.n	80037cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d108      	bne.n	80037cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037c4:	461a      	mov	r2, r3
 80037c6:	2100      	movs	r1, #0
 80037c8:	f005 fdd8 	bl	800937c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	4619      	mov	r1, r3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff fdee 	bl	80033b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	4f54300a 	.word	0x4f54300a
 80037e8:	4f54310a 	.word	0x4f54310a

080037ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	333c      	adds	r3, #60	; 0x3c
 8003804:	3304      	adds	r3, #4
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4a15      	ldr	r2, [pc, #84]	; (8003874 <PCD_EP_OutSetupPacket_int+0x88>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d90e      	bls.n	8003840 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003838:	461a      	mov	r2, r3
 800383a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800383e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fdcf 	bl	80033e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <PCD_EP_OutSetupPacket_int+0x88>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d90c      	bls.n	8003868 <PCD_EP_OutSetupPacket_int+0x7c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d108      	bne.n	8003868 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003860:	461a      	mov	r2, r3
 8003862:	2101      	movs	r1, #1
 8003864:	f005 fd8a 	bl	800937c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	4f54300a 	.word	0x4f54300a

08003878 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	f043 0303 	orr.w	r3, r3, #3
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80038e0:	4b34      	ldr	r3, [pc, #208]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80038e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038e8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d101      	bne.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e057      	b.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fc:	d90a      	bls.n	8003914 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80038fe:	4b2d      	ldr	r3, [pc, #180]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4313      	orrs	r3, r2
 800390a:	4a2a      	ldr	r2, [pc, #168]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800390c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003910:	60d3      	str	r3, [r2, #12]
 8003912:	e007      	b.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003914:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800391c:	4925      	ldr	r1, [pc, #148]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4313      	orrs	r3, r2
 8003922:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003924:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a24      	ldr	r2, [pc, #144]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	099b      	lsrs	r3, r3, #6
 8003930:	2232      	movs	r2, #50	; 0x32
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	4a21      	ldr	r2, [pc, #132]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	099b      	lsrs	r3, r3, #6
 800393e:	3301      	adds	r3, #1
 8003940:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003942:	e002      	b.n	800394a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	3b01      	subs	r3, #1
 8003948:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800394a:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d102      	bne.n	800395c <HAL_PWREx_ControlVoltageScaling+0x84>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f3      	bne.n	8003944 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01b      	beq.n	800399a <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a15      	ldr	r2, [pc, #84]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	099b      	lsrs	r3, r3, #6
 800396e:	2232      	movs	r2, #50	; 0x32
 8003970:	fb02 f303 	mul.w	r3, r2, r3
 8003974:	4a11      	ldr	r2, [pc, #68]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	099b      	lsrs	r3, r3, #6
 800397c:	3301      	adds	r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003980:	e002      	b.n	8003988 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3b01      	subs	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d102      	bne.n	800399a <HAL_PWREx_ControlVoltageScaling+0xc2>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f3      	bne.n	8003982 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e000      	b.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	46020800 	.word	0x46020800
 80039b8:	20000004 	.word	0x20000004
 80039bc:	10624dd3 	.word	0x10624dd3

080039c0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	46020800 	.word	0x46020800

080039dc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80039e4:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <HAL_PWREx_ConfigSupply+0x94>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a22      	ldr	r2, [pc, #136]	; (8003a74 <HAL_PWREx_ConfigSupply+0x98>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	099b      	lsrs	r3, r3, #6
 80039f0:	2232      	movs	r2, #50	; 0x32
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <HAL_PWREx_ConfigSupply+0x98>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	3301      	adds	r3, #1
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d113      	bne.n	8003a30 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003a08:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a1a      	ldr	r2, [pc, #104]	; (8003a78 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a0e:	f023 0302 	bic.w	r3, r3, #2
 8003a12:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003a14:	e002      	b.n	8003a1c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003a1c:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d116      	bne.n	8003a56 <HAL_PWREx_ConfigSupply+0x7a>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f3      	bne.n	8003a16 <HAL_PWREx_ConfigSupply+0x3a>
 8003a2e:	e012      	b.n	8003a56 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003a30:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a10      	ldr	r2, [pc, #64]	; (8003a78 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a36:	f043 0302 	orr.w	r3, r3, #2
 8003a3a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003a3c:	e002      	b.n	8003a44 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <HAL_PWREx_ConfigSupply+0x7a>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f3      	bne.n	8003a3e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e000      	b.n	8003a62 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000004 	.word	0x20000004
 8003a74:	10624dd3 	.word	0x10624dd3
 8003a78:	46020800 	.word	0x46020800

08003a7c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	4a04      	ldr	r2, [pc, #16]	; (8003a98 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	6113      	str	r3, [r2, #16]
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	46020800 	.word	0x46020800

08003a9c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003aa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003aaa:	6113      	str	r3, [r2, #16]
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	46020800 	.word	0x46020800

08003abc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08e      	sub	sp, #56	; 0x38
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d102      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f000 bec3 	b.w	800485c <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad6:	4b9c      	ldr	r3, [pc, #624]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ae0:	4b99      	ldr	r3, [pc, #612]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 8172 	beq.w	8003ddc <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <HAL_RCC_OscConfig+0x52>
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	f040 80e4 	bne.w	8003cce <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	f040 80e0 	bne.w	8003cce <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b0e:	4b8e      	ldr	r3, [pc, #568]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d006      	beq.n	8003b28 <HAL_RCC_OscConfig+0x6c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f000 be9a 	b.w	800485c <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2c:	4b86      	ldr	r3, [pc, #536]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d004      	beq.n	8003b42 <HAL_RCC_OscConfig+0x86>
 8003b38:	4b83      	ldr	r3, [pc, #524]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b40:	e005      	b.n	8003b4e <HAL_RCC_OscConfig+0x92>
 8003b42:	4b81      	ldr	r3, [pc, #516]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d255      	bcs.n	8003bfe <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 f9d3 	bl	8004f08 <RCC_SetFlashLatencyFromMSIRange>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	f000 be77 	b.w	800485c <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003b6e:	4b76      	ldr	r3, [pc, #472]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	4a75      	ldr	r2, [pc, #468]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003b74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b78:	6093      	str	r3, [r2, #8]
 8003b7a:	4b73      	ldr	r3, [pc, #460]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	4970      	ldr	r1, [pc, #448]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003b94:	d309      	bcc.n	8003baa <HAL_RCC_OscConfig+0xee>
 8003b96:	4b6c      	ldr	r3, [pc, #432]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f023 021f 	bic.w	r2, r3, #31
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	4969      	ldr	r1, [pc, #420]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60cb      	str	r3, [r1, #12]
 8003ba8:	e07e      	b.n	8003ca8 <HAL_RCC_OscConfig+0x1ec>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	da0a      	bge.n	8003bc8 <HAL_RCC_OscConfig+0x10c>
 8003bb2:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	015b      	lsls	r3, r3, #5
 8003bc0:	4961      	ldr	r1, [pc, #388]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60cb      	str	r3, [r1, #12]
 8003bc6:	e06f      	b.n	8003ca8 <HAL_RCC_OscConfig+0x1ec>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd0:	d30a      	bcc.n	8003be8 <HAL_RCC_OscConfig+0x12c>
 8003bd2:	4b5d      	ldr	r3, [pc, #372]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	029b      	lsls	r3, r3, #10
 8003be0:	4959      	ldr	r1, [pc, #356]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60cb      	str	r3, [r1, #12]
 8003be6:	e05f      	b.n	8003ca8 <HAL_RCC_OscConfig+0x1ec>
 8003be8:	4b57      	ldr	r3, [pc, #348]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	03db      	lsls	r3, r3, #15
 8003bf6:	4954      	ldr	r1, [pc, #336]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60cb      	str	r3, [r1, #12]
 8003bfc:	e054      	b.n	8003ca8 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003bfe:	4b52      	ldr	r3, [pc, #328]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	4a51      	ldr	r2, [pc, #324]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003c04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c08:	6093      	str	r3, [r2, #8]
 8003c0a:	4b4f      	ldr	r3, [pc, #316]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	494c      	ldr	r1, [pc, #304]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003c24:	d309      	bcc.n	8003c3a <HAL_RCC_OscConfig+0x17e>
 8003c26:	4b48      	ldr	r3, [pc, #288]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f023 021f 	bic.w	r2, r3, #31
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	4945      	ldr	r1, [pc, #276]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60cb      	str	r3, [r1, #12]
 8003c38:	e028      	b.n	8003c8c <HAL_RCC_OscConfig+0x1d0>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	da0a      	bge.n	8003c58 <HAL_RCC_OscConfig+0x19c>
 8003c42:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	015b      	lsls	r3, r3, #5
 8003c50:	493d      	ldr	r1, [pc, #244]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60cb      	str	r3, [r1, #12]
 8003c56:	e019      	b.n	8003c8c <HAL_RCC_OscConfig+0x1d0>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c60:	d30a      	bcc.n	8003c78 <HAL_RCC_OscConfig+0x1bc>
 8003c62:	4b39      	ldr	r3, [pc, #228]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	029b      	lsls	r3, r3, #10
 8003c70:	4935      	ldr	r1, [pc, #212]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60cb      	str	r3, [r1, #12]
 8003c76:	e009      	b.n	8003c8c <HAL_RCC_OscConfig+0x1d0>
 8003c78:	4b33      	ldr	r3, [pc, #204]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	03db      	lsls	r3, r3, #15
 8003c86:	4930      	ldr	r1, [pc, #192]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 f936 	bl	8004f08 <RCC_SetFlashLatencyFromMSIRange>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f000 bdda 	b.w	800485c <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003ca8:	f001 f8d8 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <HAL_RCC_OscConfig+0x290>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fd fe3f 	bl	8001934 <HAL_InitTick>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 808a 	beq.w	8003dda <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8003cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cca:	f000 bdc7 	b.w	800485c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d066      	beq.n	8003da4 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003cd6:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003ce2:	f7fd fe71 	bl	80019c8 <HAL_GetTick>
 8003ce6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003ce8:	e009      	b.n	8003cfe <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cea:	f7fd fe6d 	bl	80019c8 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d902      	bls.n	8003cfe <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	f000 bdaf 	b.w	800485c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003cfe:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0ef      	beq.n	8003cea <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	4a0e      	ldr	r2, [pc, #56]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003d10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d14:	6093      	str	r3, [r2, #8]
 8003d16:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	4909      	ldr	r1, [pc, #36]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003d30:	d30e      	bcc.n	8003d50 <HAL_RCC_OscConfig+0x294>
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f023 021f 	bic.w	r2, r3, #31
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	4902      	ldr	r1, [pc, #8]	; (8003d48 <HAL_RCC_OscConfig+0x28c>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60cb      	str	r3, [r1, #12]
 8003d44:	e04a      	b.n	8003ddc <HAL_RCC_OscConfig+0x320>
 8003d46:	bf00      	nop
 8003d48:	46020c00 	.word	0x46020c00
 8003d4c:	20000008 	.word	0x20000008
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	da0a      	bge.n	8003d6e <HAL_RCC_OscConfig+0x2b2>
 8003d58:	4b9b      	ldr	r3, [pc, #620]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	015b      	lsls	r3, r3, #5
 8003d66:	4998      	ldr	r1, [pc, #608]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60cb      	str	r3, [r1, #12]
 8003d6c:	e036      	b.n	8003ddc <HAL_RCC_OscConfig+0x320>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d30a      	bcc.n	8003d8e <HAL_RCC_OscConfig+0x2d2>
 8003d78:	4b93      	ldr	r3, [pc, #588]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	029b      	lsls	r3, r3, #10
 8003d86:	4990      	ldr	r1, [pc, #576]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60cb      	str	r3, [r1, #12]
 8003d8c:	e026      	b.n	8003ddc <HAL_RCC_OscConfig+0x320>
 8003d8e:	4b8e      	ldr	r3, [pc, #568]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	03db      	lsls	r3, r3, #15
 8003d9c:	498a      	ldr	r1, [pc, #552]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60cb      	str	r3, [r1, #12]
 8003da2:	e01b      	b.n	8003ddc <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003da4:	4b88      	ldr	r3, [pc, #544]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a87      	ldr	r2, [pc, #540]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003db0:	f7fd fe0a 	bl	80019c8 <HAL_GetTick>
 8003db4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003db6:	e009      	b.n	8003dcc <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003db8:	f7fd fe06 	bl	80019c8 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d902      	bls.n	8003dcc <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	f000 bd48 	b.w	800485c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003dcc:	4b7e      	ldr	r3, [pc, #504]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1ef      	bne.n	8003db8 <HAL_RCC_OscConfig+0x2fc>
 8003dd8:	e000      	b.n	8003ddc <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8094 	beq.w	8003f12 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_OscConfig+0x340>
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	2b0c      	cmp	r3, #12
 8003df4:	d110      	bne.n	8003e18 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d10d      	bne.n	8003e18 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	4b72      	ldr	r3, [pc, #456]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8083 	beq.w	8003f10 <HAL_RCC_OscConfig+0x454>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d17e      	bne.n	8003f10 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	f000 bd22 	b.w	800485c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e20:	d106      	bne.n	8003e30 <HAL_RCC_OscConfig+0x374>
 8003e22:	4b69      	ldr	r3, [pc, #420]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a68      	ldr	r2, [pc, #416]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	e041      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3f8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e38:	d112      	bne.n	8003e60 <HAL_RCC_OscConfig+0x3a4>
 8003e3a:	4b63      	ldr	r3, [pc, #396]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a62      	ldr	r2, [pc, #392]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	4b60      	ldr	r3, [pc, #384]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a5f      	ldr	r2, [pc, #380]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	4b5d      	ldr	r3, [pc, #372]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a5c      	ldr	r2, [pc, #368]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	e029      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3f8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003e68:	d112      	bne.n	8003e90 <HAL_RCC_OscConfig+0x3d4>
 8003e6a:	4b57      	ldr	r3, [pc, #348]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a56      	ldr	r2, [pc, #344]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	4b54      	ldr	r3, [pc, #336]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a53      	ldr	r2, [pc, #332]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	4b51      	ldr	r3, [pc, #324]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a50      	ldr	r2, [pc, #320]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	e011      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3f8>
 8003e90:	4b4d      	ldr	r3, [pc, #308]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a4c      	ldr	r2, [pc, #304]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	4b4a      	ldr	r3, [pc, #296]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a49      	ldr	r2, [pc, #292]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	4b47      	ldr	r3, [pc, #284]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a46      	ldr	r2, [pc, #280]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003eae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d014      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8003ebc:	f7fd fd84 	bl	80019c8 <HAL_GetTick>
 8003ec0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ec2:	e009      	b.n	8003ed8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec4:	f7fd fd80 	bl	80019c8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	; 0x64
 8003ed0:	d902      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	f000 bcc2 	b.w	800485c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ed8:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0ef      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x408>
 8003ee4:	e015      	b.n	8003f12 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003ee6:	f7fd fd6f 	bl	80019c8 <HAL_GetTick>
 8003eea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eec:	e009      	b.n	8003f02 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eee:	f7fd fd6b 	bl	80019c8 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b64      	cmp	r3, #100	; 0x64
 8003efa:	d902      	bls.n	8003f02 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	f000 bcad 	b.w	800485c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f02:	4b31      	ldr	r3, [pc, #196]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1ef      	bne.n	8003eee <HAL_RCC_OscConfig+0x432>
 8003f0e:	e000      	b.n	8003f12 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d066      	beq.n	8003fec <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_OscConfig+0x474>
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	2b0c      	cmp	r3, #12
 8003f28:	d11a      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d117      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f30:	4b25      	ldr	r3, [pc, #148]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d006      	beq.n	8003f4a <HAL_RCC_OscConfig+0x48e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f000 bc89 	b.w	800485c <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003f4a:	4b1f      	ldr	r3, [pc, #124]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	041b      	lsls	r3, r3, #16
 8003f58:	491b      	ldr	r1, [pc, #108]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f5e:	e045      	b.n	8003fec <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d024      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003f68:	4b17      	ldr	r3, [pc, #92]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f72:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f74:	f7fd fd28 	bl	80019c8 <HAL_GetTick>
 8003f78:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f7a:	e009      	b.n	8003f90 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f7c:	f7fd fd24 	bl	80019c8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d902      	bls.n	8003f90 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	f000 bc66 	b.w	800485c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f90:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0ef      	beq.n	8003f7c <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	041b      	lsls	r3, r3, #16
 8003faa:	4907      	ldr	r1, [pc, #28]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	610b      	str	r3, [r1, #16]
 8003fb0:	e01c      	b.n	8003fec <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <HAL_RCC_OscConfig+0x50c>)
 8003fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fbc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003fbe:	f7fd fd03 	bl	80019c8 <HAL_GetTick>
 8003fc2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fc4:	e00c      	b.n	8003fe0 <HAL_RCC_OscConfig+0x524>
 8003fc6:	bf00      	nop
 8003fc8:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fcc:	f7fd fcfc 	bl	80019c8 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d902      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	f000 bc3e 	b.w	800485c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fe0:	4baf      	ldr	r3, [pc, #700]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ef      	bne.n	8003fcc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80c7 	beq.w	8004188 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004000:	4ba7      	ldr	r3, [pc, #668]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8004002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d111      	bne.n	8004032 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400e:	4ba4      	ldr	r3, [pc, #656]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8004010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004014:	4aa2      	ldr	r2, [pc, #648]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8004016:	f043 0304 	orr.w	r3, r3, #4
 800401a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800401e:	4ba0      	ldr	r3, [pc, #640]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8004020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004032:	4b9c      	ldr	r3, [pc, #624]	; (80042a4 <HAL_RCC_OscConfig+0x7e8>)
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d118      	bne.n	8004070 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800403e:	4b99      	ldr	r3, [pc, #612]	; (80042a4 <HAL_RCC_OscConfig+0x7e8>)
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	4a98      	ldr	r2, [pc, #608]	; (80042a4 <HAL_RCC_OscConfig+0x7e8>)
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404a:	f7fd fcbd 	bl	80019c8 <HAL_GetTick>
 800404e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004052:	f7fd fcb9 	bl	80019c8 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e3fb      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004064:	4b8f      	ldr	r3, [pc, #572]	; (80042a4 <HAL_RCC_OscConfig+0x7e8>)
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d05f      	beq.n	8004138 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004078:	4b89      	ldr	r3, [pc, #548]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 800407a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800407e:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699a      	ldr	r2, [r3, #24]
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408a:	429a      	cmp	r2, r3
 800408c:	d037      	beq.n	80040fe <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d006      	beq.n	80040a6 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e3da      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d01b      	beq.n	80040e8 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 80040b0:	4b7b      	ldr	r3, [pc, #492]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 80040b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040b6:	4a7a      	ldr	r2, [pc, #488]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 80040b8:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80040bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80040c0:	f7fd fc82 	bl	80019c8 <HAL_GetTick>
 80040c4:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c8:	f7fd fc7e 	bl	80019c8 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e3c0      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80040da:	4b71      	ldr	r3, [pc, #452]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 80040dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1ef      	bne.n	80040c8 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80040e8:	4b6d      	ldr	r3, [pc, #436]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 80040ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	496a      	ldr	r1, [pc, #424]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80040fe:	4b68      	ldr	r3, [pc, #416]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8004100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004104:	4a66      	ldr	r2, [pc, #408]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8004106:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800410a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800410e:	f7fd fc5b 	bl	80019c8 <HAL_GetTick>
 8004112:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004116:	f7fd fc57 	bl	80019c8 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e399      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004128:	4b5d      	ldr	r3, [pc, #372]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 800412a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800412e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0ef      	beq.n	8004116 <HAL_RCC_OscConfig+0x65a>
 8004136:	e01b      	b.n	8004170 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004138:	4b59      	ldr	r3, [pc, #356]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 800413a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800413e:	4a58      	ldr	r2, [pc, #352]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8004140:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004144:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004148:	f7fd fc3e 	bl	80019c8 <HAL_GetTick>
 800414c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004150:	f7fd fc3a 	bl	80019c8 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e37c      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004162:	4b4f      	ldr	r3, [pc, #316]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8004164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1ef      	bne.n	8004150 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004170:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004174:	2b01      	cmp	r3, #1
 8004176:	d107      	bne.n	8004188 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004178:	4b49      	ldr	r3, [pc, #292]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 800417a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800417e:	4a48      	ldr	r2, [pc, #288]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8004180:	f023 0304 	bic.w	r3, r3, #4
 8004184:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8112 	beq.w	80043ba <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8004196:	2300      	movs	r3, #0
 8004198:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419c:	4b40      	ldr	r3, [pc, #256]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 800419e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d111      	bne.n	80041ce <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	4b3d      	ldr	r3, [pc, #244]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 80041ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b0:	4a3b      	ldr	r2, [pc, #236]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 80041b2:	f043 0304 	orr.w	r3, r3, #4
 80041b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80041ba:	4b39      	ldr	r3, [pc, #228]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 80041bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80041ce:	4b35      	ldr	r3, [pc, #212]	; (80042a4 <HAL_RCC_OscConfig+0x7e8>)
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d118      	bne.n	800420c <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80041da:	4b32      	ldr	r3, [pc, #200]	; (80042a4 <HAL_RCC_OscConfig+0x7e8>)
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	4a31      	ldr	r2, [pc, #196]	; (80042a4 <HAL_RCC_OscConfig+0x7e8>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e6:	f7fd fbef 	bl	80019c8 <HAL_GetTick>
 80041ea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ee:	f7fd fbeb 	bl	80019c8 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e32d      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004200:	4b28      	ldr	r3, [pc, #160]	; (80042a4 <HAL_RCC_OscConfig+0x7e8>)
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01f      	beq.n	8004258 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d010      	beq.n	8004246 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004224:	4b1e      	ldr	r3, [pc, #120]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8004226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800422a:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 800422c:	f043 0304 	orr.w	r3, r3, #4
 8004230:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004234:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8004236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800423a:	4a19      	ldr	r2, [pc, #100]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004244:	e018      	b.n	8004278 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004246:	4b16      	ldr	r3, [pc, #88]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8004248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800424c:	4a14      	ldr	r2, [pc, #80]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004256:	e00f      	b.n	8004278 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 800425a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800425e:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004268:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 800426a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800426e:	4a0c      	ldr	r2, [pc, #48]	; (80042a0 <HAL_RCC_OscConfig+0x7e4>)
 8004270:	f023 0304 	bic.w	r3, r3, #4
 8004274:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d058      	beq.n	8004332 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8004280:	f7fd fba2 	bl	80019c8 <HAL_GetTick>
 8004284:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004286:	e00f      	b.n	80042a8 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004288:	f7fd fb9e 	bl	80019c8 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f241 3288 	movw	r2, #5000	; 0x1388
 8004296:	4293      	cmp	r3, r2
 8004298:	d906      	bls.n	80042a8 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e2de      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
 800429e:	bf00      	nop
 80042a0:	46020c00 	.word	0x46020c00
 80042a4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a8:	4b9c      	ldr	r3, [pc, #624]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80042aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0e8      	beq.n	8004288 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d01b      	beq.n	80042fa <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80042c2:	4b96      	ldr	r3, [pc, #600]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80042c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042c8:	4a94      	ldr	r2, [pc, #592]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80042ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d4:	f7fd fb78 	bl	80019c8 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e2b8      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80042ea:	4b8c      	ldr	r3, [pc, #560]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80042ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0ed      	beq.n	80042d4 <HAL_RCC_OscConfig+0x818>
 80042f8:	e053      	b.n	80043a2 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80042fa:	4b88      	ldr	r3, [pc, #544]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80042fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004300:	4a86      	ldr	r2, [pc, #536]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 8004302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004306:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800430a:	e00a      	b.n	8004322 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430c:	f7fd fb5c 	bl	80019c8 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e29c      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004322:	4b7e      	ldr	r3, [pc, #504]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 8004324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1ed      	bne.n	800430c <HAL_RCC_OscConfig+0x850>
 8004330:	e037      	b.n	80043a2 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004332:	f7fd fb49 	bl	80019c8 <HAL_GetTick>
 8004336:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fd fb45 	bl	80019c8 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e285      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004350:	4b72      	ldr	r3, [pc, #456]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 8004352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1ed      	bne.n	800433a <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800435e:	4b6f      	ldr	r3, [pc, #444]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 8004360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01a      	beq.n	80043a2 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800436c:	4b6b      	ldr	r3, [pc, #428]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 800436e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004372:	4a6a      	ldr	r2, [pc, #424]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 8004374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004378:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800437c:	e00a      	b.n	8004394 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437e:	f7fd fb23 	bl	80019c8 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f241 3288 	movw	r2, #5000	; 0x1388
 800438c:	4293      	cmp	r3, r2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e263      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004394:	4b61      	ldr	r3, [pc, #388]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 8004396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800439a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1ed      	bne.n	800437e <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043a2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d107      	bne.n	80043ba <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043aa:	4b5c      	ldr	r3, [pc, #368]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80043ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b0:	4a5a      	ldr	r2, [pc, #360]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80043b2:	f023 0304 	bic.w	r3, r3, #4
 80043b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d036      	beq.n	8004434 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d019      	beq.n	8004402 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80043ce:	4b53      	ldr	r3, [pc, #332]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a52      	ldr	r2, [pc, #328]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80043d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043d8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80043da:	f7fd faf5 	bl	80019c8 <HAL_GetTick>
 80043de:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043e2:	f7fd faf1 	bl	80019c8 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e233      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80043f4:	4b49      	ldr	r3, [pc, #292]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCC_OscConfig+0x926>
 8004400:	e018      	b.n	8004434 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004402:	4b46      	ldr	r3, [pc, #280]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a45      	ldr	r2, [pc, #276]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 8004408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800440c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800440e:	f7fd fadb 	bl	80019c8 <HAL_GetTick>
 8004412:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004416:	f7fd fad7 	bl	80019c8 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e219      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004428:	4b3c      	ldr	r3, [pc, #240]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f0      	bne.n	8004416 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443c:	2b00      	cmp	r3, #0
 800443e:	d036      	beq.n	80044ae <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	2b00      	cmp	r3, #0
 8004446:	d019      	beq.n	800447c <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004448:	4b34      	ldr	r3, [pc, #208]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a33      	ldr	r2, [pc, #204]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 800444e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004452:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004454:	f7fd fab8 	bl	80019c8 <HAL_GetTick>
 8004458:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800445c:	f7fd fab4 	bl	80019c8 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e1f6      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800446e:	4b2b      	ldr	r3, [pc, #172]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0x9a0>
 800447a:	e018      	b.n	80044ae <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800447c:	4b27      	ldr	r3, [pc, #156]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a26      	ldr	r2, [pc, #152]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 8004482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004486:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004488:	f7fd fa9e 	bl	80019c8 <HAL_GetTick>
 800448c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004490:	f7fd fa9a 	bl	80019c8 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1dc      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80044a2:	4b1e      	ldr	r3, [pc, #120]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d07f      	beq.n	80045ba <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d062      	beq.n	8004588 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80044c2:	4b16      	ldr	r3, [pc, #88]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	4a15      	ldr	r2, [pc, #84]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80044c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044cc:	6093      	str	r3, [r2, #8]
 80044ce:	4b13      	ldr	r3, [pc, #76]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	4910      	ldr	r1, [pc, #64]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80044e8:	d309      	bcc.n	80044fe <HAL_RCC_OscConfig+0xa42>
 80044ea:	4b0c      	ldr	r3, [pc, #48]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f023 021f 	bic.w	r2, r3, #31
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4909      	ldr	r1, [pc, #36]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60cb      	str	r3, [r1, #12]
 80044fc:	e02a      	b.n	8004554 <HAL_RCC_OscConfig+0xa98>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	2b00      	cmp	r3, #0
 8004504:	da0c      	bge.n	8004520 <HAL_RCC_OscConfig+0xa64>
 8004506:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	015b      	lsls	r3, r3, #5
 8004514:	4901      	ldr	r1, [pc, #4]	; (800451c <HAL_RCC_OscConfig+0xa60>)
 8004516:	4313      	orrs	r3, r2
 8004518:	60cb      	str	r3, [r1, #12]
 800451a:	e01b      	b.n	8004554 <HAL_RCC_OscConfig+0xa98>
 800451c:	46020c00 	.word	0x46020c00
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004528:	d30a      	bcc.n	8004540 <HAL_RCC_OscConfig+0xa84>
 800452a:	4ba5      	ldr	r3, [pc, #660]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	029b      	lsls	r3, r3, #10
 8004538:	49a1      	ldr	r1, [pc, #644]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800453a:	4313      	orrs	r3, r2
 800453c:	60cb      	str	r3, [r1, #12]
 800453e:	e009      	b.n	8004554 <HAL_RCC_OscConfig+0xa98>
 8004540:	4b9f      	ldr	r3, [pc, #636]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	03db      	lsls	r3, r3, #15
 800454e:	499c      	ldr	r1, [pc, #624]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 8004550:	4313      	orrs	r3, r2
 8004552:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004554:	4b9a      	ldr	r3, [pc, #616]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a99      	ldr	r2, [pc, #612]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800455a:	f043 0310 	orr.w	r3, r3, #16
 800455e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004560:	f7fd fa32 	bl	80019c8 <HAL_GetTick>
 8004564:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004568:	f7fd fa2e 	bl	80019c8 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e170      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800457a:	4b91      	ldr	r3, [pc, #580]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0xaac>
 8004586:	e018      	b.n	80045ba <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004588:	4b8d      	ldr	r3, [pc, #564]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a8c      	ldr	r2, [pc, #560]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800458e:	f023 0310 	bic.w	r3, r3, #16
 8004592:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004594:	f7fd fa18 	bl	80019c8 <HAL_GetTick>
 8004598:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800459c:	f7fd fa14 	bl	80019c8 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e156      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80045ae:	4b84      	ldr	r3, [pc, #528]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 814b 	beq.w	800485a <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045ca:	4b7d      	ldr	r3, [pc, #500]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	f000 80fa 	beq.w	80047cc <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	2b02      	cmp	r3, #2
 80045de:	f040 80cc 	bne.w	800477a <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80045e2:	4b77      	ldr	r3, [pc, #476]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a76      	ldr	r2, [pc, #472]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80045e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045ee:	f7fd f9eb 	bl	80019c8 <HAL_GetTick>
 80045f2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f6:	f7fd f9e7 	bl	80019c8 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e129      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004608:	4b6d      	ldr	r3, [pc, #436]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004614:	4b6a      	ldr	r3, [pc, #424]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 8004616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	d111      	bne.n	8004646 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004622:	4b67      	ldr	r3, [pc, #412]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 8004624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004628:	4a65      	ldr	r2, [pc, #404]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800462a:	f043 0304 	orr.w	r3, r3, #4
 800462e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004632:	4b63      	ldr	r3, [pc, #396]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 8004634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004646:	4b5f      	ldr	r3, [pc, #380]	; (80047c4 <HAL_RCC_OscConfig+0xd08>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004652:	d102      	bne.n	800465a <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800465a:	4b5a      	ldr	r3, [pc, #360]	; (80047c4 <HAL_RCC_OscConfig+0xd08>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	4a59      	ldr	r2, [pc, #356]	; (80047c4 <HAL_RCC_OscConfig+0xd08>)
 8004660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004664:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004666:	4b56      	ldr	r3, [pc, #344]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800466e:	f023 0303 	bic.w	r3, r3, #3
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800467a:	3a01      	subs	r2, #1
 800467c:	0212      	lsls	r2, r2, #8
 800467e:	4311      	orrs	r1, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004684:	430a      	orrs	r2, r1
 8004686:	494e      	ldr	r1, [pc, #312]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 8004688:	4313      	orrs	r3, r2
 800468a:	628b      	str	r3, [r1, #40]	; 0x28
 800468c:	4b4c      	ldr	r3, [pc, #304]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800468e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004690:	4b4d      	ldr	r3, [pc, #308]	; (80047c8 <HAL_RCC_OscConfig+0xd0c>)
 8004692:	4013      	ands	r3, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004698:	3a01      	subs	r2, #1
 800469a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80046a2:	3a01      	subs	r2, #1
 80046a4:	0252      	lsls	r2, r2, #9
 80046a6:	b292      	uxth	r2, r2
 80046a8:	4311      	orrs	r1, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046ae:	3a01      	subs	r2, #1
 80046b0:	0412      	lsls	r2, r2, #16
 80046b2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80046b6:	4311      	orrs	r1, r2
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80046bc:	3a01      	subs	r2, #1
 80046be:	0612      	lsls	r2, r2, #24
 80046c0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80046c4:	430a      	orrs	r2, r1
 80046c6:	493e      	ldr	r1, [pc, #248]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80046cc:	4b3c      	ldr	r3, [pc, #240]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	4a3b      	ldr	r2, [pc, #236]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80046d2:	f023 0310 	bic.w	r3, r3, #16
 80046d6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80046d8:	4b39      	ldr	r3, [pc, #228]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046e8:	00d2      	lsls	r2, r2, #3
 80046ea:	4935      	ldr	r1, [pc, #212]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80046f0:	4b33      	ldr	r3, [pc, #204]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	4a32      	ldr	r2, [pc, #200]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80046f6:	f043 0310 	orr.w	r3, r3, #16
 80046fa:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80046fc:	4b30      	ldr	r3, [pc, #192]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	f023 020c 	bic.w	r2, r3, #12
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004708:	492d      	ldr	r1, [pc, #180]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800470a:	4313      	orrs	r3, r2
 800470c:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800470e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004712:	2b01      	cmp	r3, #1
 8004714:	d105      	bne.n	8004722 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004716:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <HAL_RCC_OscConfig+0xd08>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	4a2a      	ldr	r2, [pc, #168]	; (80047c4 <HAL_RCC_OscConfig+0xd08>)
 800471c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004720:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004722:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004726:	2b01      	cmp	r3, #1
 8004728:	d107      	bne.n	800473a <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800472a:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800472c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004730:	4a23      	ldr	r2, [pc, #140]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 8004732:	f023 0304 	bic.w	r3, r3, #4
 8004736:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800473a:	4b21      	ldr	r3, [pc, #132]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	4a20      	ldr	r2, [pc, #128]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 8004740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004744:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004746:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1d      	ldr	r2, [pc, #116]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800474c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004750:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004752:	f7fd f939 	bl	80019c8 <HAL_GetTick>
 8004756:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475a:	f7fd f935 	bl	80019c8 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e077      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800476c:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0f0      	beq.n	800475a <HAL_RCC_OscConfig+0xc9e>
 8004778:	e06f      	b.n	800485a <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800477a:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a10      	ldr	r2, [pc, #64]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 8004780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004784:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004786:	f7fd f91f 	bl	80019c8 <HAL_GetTick>
 800478a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478e:	f7fd f91b 	bl	80019c8 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e05d      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f0      	bne.n	800478e <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80047ac:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	4a03      	ldr	r2, [pc, #12]	; (80047c0 <HAL_RCC_OscConfig+0xd04>)
 80047b2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80047b6:	f023 0303 	bic.w	r3, r3, #3
 80047ba:	6293      	str	r3, [r2, #40]	; 0x28
 80047bc:	e04d      	b.n	800485a <HAL_RCC_OscConfig+0xd9e>
 80047be:	bf00      	nop
 80047c0:	46020c00 	.word	0x46020c00
 80047c4:	46020800 	.word	0x46020800
 80047c8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80047cc:	4b25      	ldr	r3, [pc, #148]	; (8004864 <HAL_RCC_OscConfig+0xda8>)
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047d2:	4b24      	ldr	r3, [pc, #144]	; (8004864 <HAL_RCC_OscConfig+0xda8>)
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d03a      	beq.n	8004856 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 0203 	and.w	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d133      	bne.n	8004856 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	0a1b      	lsrs	r3, r3, #8
 80047f2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d12a      	bne.n	8004856 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	0b1b      	lsrs	r3, r3, #12
 8004804:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d122      	bne.n	8004856 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d11a      	bne.n	8004856 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	0a5b      	lsrs	r3, r3, #9
 8004824:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800482e:	429a      	cmp	r2, r3
 8004830:	d111      	bne.n	8004856 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	0c1b      	lsrs	r3, r3, #16
 8004836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d108      	bne.n	8004856 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	0e1b      	lsrs	r3, r3, #24
 8004848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d001      	beq.n	800485a <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3738      	adds	r7, #56	; 0x38
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	46020c00 	.word	0x46020c00

08004868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e1d9      	b.n	8004c30 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800487c:	4b9b      	ldr	r3, [pc, #620]	; (8004aec <HAL_RCC_ClockConfig+0x284>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d910      	bls.n	80048ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b98      	ldr	r3, [pc, #608]	; (8004aec <HAL_RCC_ClockConfig+0x284>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 020f 	bic.w	r2, r3, #15
 8004892:	4996      	ldr	r1, [pc, #600]	; (8004aec <HAL_RCC_ClockConfig+0x284>)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	4b94      	ldr	r3, [pc, #592]	; (8004aec <HAL_RCC_ClockConfig+0x284>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e1c1      	b.n	8004c30 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d010      	beq.n	80048da <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695a      	ldr	r2, [r3, #20]
 80048bc:	4b8c      	ldr	r3, [pc, #560]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d908      	bls.n	80048da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80048c8:	4b89      	ldr	r3, [pc, #548]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	4986      	ldr	r1, [pc, #536]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d012      	beq.n	800490c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	4b81      	ldr	r3, [pc, #516]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	091b      	lsrs	r3, r3, #4
 80048f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d909      	bls.n	800490c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80048f8:	4b7d      	ldr	r3, [pc, #500]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	497a      	ldr	r1, [pc, #488]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004908:	4313      	orrs	r3, r2
 800490a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d010      	beq.n	800493a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	4b74      	ldr	r3, [pc, #464]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004924:	429a      	cmp	r2, r3
 8004926:	d908      	bls.n	800493a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004928:	4b71      	ldr	r3, [pc, #452]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	496e      	ldr	r1, [pc, #440]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004936:	4313      	orrs	r3, r2
 8004938:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d010      	beq.n	8004968 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	4b69      	ldr	r3, [pc, #420]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	429a      	cmp	r2, r3
 8004954:	d908      	bls.n	8004968 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004956:	4b66      	ldr	r3, [pc, #408]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f023 020f 	bic.w	r2, r3, #15
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	4963      	ldr	r1, [pc, #396]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004964:	4313      	orrs	r3, r2
 8004966:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80d2 	beq.w	8004b1a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004976:	2300      	movs	r3, #0
 8004978:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b03      	cmp	r3, #3
 8004980:	d143      	bne.n	8004a0a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004982:	4b5b      	ldr	r3, [pc, #364]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d110      	bne.n	80049b2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004990:	4b57      	ldr	r3, [pc, #348]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004996:	4a56      	ldr	r2, [pc, #344]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004998:	f043 0304 	orr.w	r3, r3, #4
 800499c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80049a0:	4b53      	ldr	r3, [pc, #332]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 80049a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80049b2:	f7fd f809 	bl	80019c8 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80049b8:	4b4e      	ldr	r3, [pc, #312]	; (8004af4 <HAL_RCC_ClockConfig+0x28c>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00f      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80049c6:	f7fc ffff 	bl	80019c8 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e12b      	b.n	8004c30 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80049d8:	4b46      	ldr	r3, [pc, #280]	; (8004af4 <HAL_RCC_ClockConfig+0x28c>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f0      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d107      	bne.n	80049fa <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80049ea:	4b41      	ldr	r3, [pc, #260]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 80049ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f0:	4a3f      	ldr	r2, [pc, #252]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 80049f2:	f023 0304 	bic.w	r3, r3, #4
 80049f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80049fa:	4b3d      	ldr	r3, [pc, #244]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d121      	bne.n	8004a4a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e112      	b.n	8004c30 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a12:	4b37      	ldr	r3, [pc, #220]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d115      	bne.n	8004a4a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e106      	b.n	8004c30 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004a2a:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e0fa      	b.n	8004c30 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a3a:	4b2d      	ldr	r3, [pc, #180]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0f2      	b.n	8004c30 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004a4a:	4b29      	ldr	r3, [pc, #164]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4926      	ldr	r1, [pc, #152]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004a5c:	f7fc ffb4 	bl	80019c8 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d112      	bne.n	8004a90 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a6a:	e00a      	b.n	8004a82 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a6c:	f7fc ffac 	bl	80019c8 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e0d6      	b.n	8004c30 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a82:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f003 030c 	and.w	r3, r3, #12
 8004a8a:	2b0c      	cmp	r3, #12
 8004a8c:	d1ee      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x204>
 8004a8e:	e044      	b.n	8004b1a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d112      	bne.n	8004abe <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a98:	e00a      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a9a:	f7fc ff95 	bl	80019c8 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e0bf      	b.n	8004c30 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ab0:	4b0f      	ldr	r3, [pc, #60]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	f003 030c 	and.w	r3, r3, #12
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d1ee      	bne.n	8004a9a <HAL_RCC_ClockConfig+0x232>
 8004abc:	e02d      	b.n	8004b1a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d123      	bne.n	8004b0e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac8:	f7fc ff7e 	bl	80019c8 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e0a8      	b.n	8004c30 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ade:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <HAL_RCC_ClockConfig+0x288>)
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1ee      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0x260>
 8004aea:	e016      	b.n	8004b1a <HAL_RCC_ClockConfig+0x2b2>
 8004aec:	40022000 	.word	0x40022000
 8004af0:	46020c00 	.word	0x46020c00
 8004af4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af8:	f7fc ff66 	bl	80019c8 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e090      	b.n	8004c30 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b0e:	4b4a      	ldr	r3, [pc, #296]	; (8004c38 <HAL_RCC_ClockConfig+0x3d0>)
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d1ee      	bne.n	8004af8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d010      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	4b43      	ldr	r3, [pc, #268]	; (8004c38 <HAL_RCC_ClockConfig+0x3d0>)
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d208      	bcs.n	8004b48 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004b36:	4b40      	ldr	r3, [pc, #256]	; (8004c38 <HAL_RCC_ClockConfig+0x3d0>)
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	f023 020f 	bic.w	r2, r3, #15
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	493d      	ldr	r1, [pc, #244]	; (8004c38 <HAL_RCC_ClockConfig+0x3d0>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b48:	4b3c      	ldr	r3, [pc, #240]	; (8004c3c <HAL_RCC_ClockConfig+0x3d4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d210      	bcs.n	8004b78 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <HAL_RCC_ClockConfig+0x3d4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 020f 	bic.w	r2, r3, #15
 8004b5e:	4937      	ldr	r1, [pc, #220]	; (8004c3c <HAL_RCC_ClockConfig+0x3d4>)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b66:	4b35      	ldr	r3, [pc, #212]	; (8004c3c <HAL_RCC_ClockConfig+0x3d4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e05b      	b.n	8004c30 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d010      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	4b2b      	ldr	r3, [pc, #172]	; (8004c38 <HAL_RCC_ClockConfig+0x3d0>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d208      	bcs.n	8004ba6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004b94:	4b28      	ldr	r3, [pc, #160]	; (8004c38 <HAL_RCC_ClockConfig+0x3d0>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4925      	ldr	r1, [pc, #148]	; (8004c38 <HAL_RCC_ClockConfig+0x3d0>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d012      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	4b20      	ldr	r3, [pc, #128]	; (8004c38 <HAL_RCC_ClockConfig+0x3d0>)
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	091b      	lsrs	r3, r3, #4
 8004bbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d209      	bcs.n	8004bd8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004bc4:	4b1c      	ldr	r3, [pc, #112]	; (8004c38 <HAL_RCC_ClockConfig+0x3d0>)
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	4919      	ldr	r1, [pc, #100]	; (8004c38 <HAL_RCC_ClockConfig+0x3d0>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d010      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	695a      	ldr	r2, [r3, #20]
 8004be8:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <HAL_RCC_ClockConfig+0x3d0>)
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d208      	bcs.n	8004c06 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004bf4:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <HAL_RCC_ClockConfig+0x3d0>)
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	490d      	ldr	r1, [pc, #52]	; (8004c38 <HAL_RCC_ClockConfig+0x3d0>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004c06:	f000 f821 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <HAL_RCC_ClockConfig+0x3d0>)
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	490a      	ldr	r1, [pc, #40]	; (8004c40 <HAL_RCC_ClockConfig+0x3d8>)
 8004c16:	5ccb      	ldrb	r3, [r1, r3]
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1c:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <HAL_RCC_ClockConfig+0x3dc>)
 8004c1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c20:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RCC_ClockConfig+0x3e0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fc fe85 	bl	8001934 <HAL_InitTick>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	73fb      	strb	r3, [r7, #15]

  return status;
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	46020c00 	.word	0x46020c00
 8004c3c:	40022000 	.word	0x40022000
 8004c40:	08009510 	.word	0x08009510
 8004c44:	20000004 	.word	0x20000004
 8004c48:	20000008 	.word	0x20000008

08004c4c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b08b      	sub	sp, #44	; 0x2c
 8004c50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c5a:	4b7b      	ldr	r3, [pc, #492]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c64:	4b78      	ldr	r3, [pc, #480]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_GetSysClockFreq+0x34>
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d121      	bne.n	8004cbe <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d11e      	bne.n	8004cbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004c80:	4b71      	ldr	r3, [pc, #452]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d107      	bne.n	8004c9c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004c8c:	4b6e      	ldr	r3, [pc, #440]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c92:	0b1b      	lsrs	r3, r3, #12
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9a:	e005      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004c9c:	4b6a      	ldr	r3, [pc, #424]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	0f1b      	lsrs	r3, r3, #28
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ca8:	4a68      	ldr	r2, [pc, #416]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d110      	bne.n	8004cda <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cbc:	e00d      	b.n	8004cda <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cbe:	4b62      	ldr	r3, [pc, #392]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d102      	bne.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cca:	4b61      	ldr	r3, [pc, #388]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ccc:	623b      	str	r3, [r7, #32]
 8004cce:	e004      	b.n	8004cda <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d101      	bne.n	8004cda <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cd6:	4b5e      	ldr	r3, [pc, #376]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cd8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b0c      	cmp	r3, #12
 8004cde:	f040 80ac 	bne.w	8004e3a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004ce2:	4b59      	ldr	r3, [pc, #356]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004cec:	4b56      	ldr	r3, [pc, #344]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	0a1b      	lsrs	r3, r3, #8
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004cfa:	4b53      	ldr	r3, [pc, #332]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	091b      	lsrs	r3, r3, #4
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004d06:	4b50      	ldr	r3, [pc, #320]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	08db      	lsrs	r3, r3, #3
 8004d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	fb02 f303 	mul.w	r3, r2, r3
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 8086 	beq.w	8004e36 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d003      	beq.n	8004d38 <HAL_RCC_GetSysClockFreq+0xec>
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d022      	beq.n	8004d7c <HAL_RCC_GetSysClockFreq+0x130>
 8004d36:	e043      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d42:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004e54 <HAL_RCC_GetSysClockFreq+0x208>
 8004d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4a:	4b3f      	ldr	r3, [pc, #252]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d52:	ee07 3a90 	vmov	s15, r3
 8004d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004d5a:	ed97 6a01 	vldr	s12, [r7, #4]
 8004d5e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004e58 <HAL_RCC_GetSysClockFreq+0x20c>
 8004d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d76:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004d7a:	e046      	b.n	8004e0a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	eddf 6a33 	vldr	s13, [pc, #204]	; 8004e54 <HAL_RCC_GetSysClockFreq+0x208>
 8004d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8e:	4b2e      	ldr	r3, [pc, #184]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004d9e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004da2:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004e58 <HAL_RCC_GetSysClockFreq+0x20c>
 8004da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dba:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004dbe:	e024      	b.n	8004e0a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	ee07 3a90 	vmov	s15, r3
 8004dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd8:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de0:	ee07 3a90 	vmov	s15, r3
 8004de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004de8:	ed97 6a01 	vldr	s12, [r7, #4]
 8004dec:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8004e58 <HAL_RCC_GetSysClockFreq+0x20c>
 8004df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004df8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e04:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004e08:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004e0a:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0e:	0e1b      	lsrs	r3, r3, #24
 8004e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e14:	3301      	adds	r3, #1
 8004e16:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e2e:	ee17 3a90 	vmov	r3, s15
 8004e32:	623b      	str	r3, [r7, #32]
 8004e34:	e001      	b.n	8004e3a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	372c      	adds	r7, #44	; 0x2c
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	46020c00 	.word	0x46020c00
 8004e4c:	08009528 	.word	0x08009528
 8004e50:	00f42400 	.word	0x00f42400
 8004e54:	4b742400 	.word	0x4b742400
 8004e58:	46000000 	.word	0x46000000

08004e5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004e60:	f7ff fef4 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <HAL_RCC_GetHCLKFreq+0x28>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	4906      	ldr	r1, [pc, #24]	; (8004e88 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004e70:	5ccb      	ldrb	r3, [r1, r3]
 8004e72:	fa22 f303 	lsr.w	r3, r2, r3
 8004e76:	4a05      	ldr	r2, [pc, #20]	; (8004e8c <HAL_RCC_GetHCLKFreq+0x30>)
 8004e78:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004e7a:	4b04      	ldr	r3, [pc, #16]	; (8004e8c <HAL_RCC_GetHCLKFreq+0x30>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	46020c00 	.word	0x46020c00
 8004e88:	08009510 	.word	0x08009510
 8004e8c:	20000004 	.word	0x20000004

08004e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004e94:	f7ff ffe2 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	4903      	ldr	r1, [pc, #12]	; (8004eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea6:	5ccb      	ldrb	r3, [r1, r3]
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	46020c00 	.word	0x46020c00
 8004eb4:	08009520 	.word	0x08009520

08004eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004ebc:	f7ff ffce 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	0a1b      	lsrs	r3, r3, #8
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4903      	ldr	r1, [pc, #12]	; (8004edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	46020c00 	.word	0x46020c00
 8004edc:	08009520 	.word	0x08009520

08004ee0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004ee4:	f7ff ffba 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	091b      	lsrs	r3, r3, #4
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	4903      	ldr	r1, [pc, #12]	; (8004f04 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004ef6:	5ccb      	ldrb	r3, [r1, r3]
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	46020c00 	.word	0x46020c00
 8004f04:	08009520 	.word	0x08009520

08004f08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f10:	4b3e      	ldr	r3, [pc, #248]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f1e:	f7fe fd4f 	bl	80039c0 <HAL_PWREx_GetVoltageRange>
 8004f22:	6178      	str	r0, [r7, #20]
 8004f24:	e019      	b.n	8004f5a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f26:	4b39      	ldr	r3, [pc, #228]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2c:	4a37      	ldr	r2, [pc, #220]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f2e:	f043 0304 	orr.w	r3, r3, #4
 8004f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004f36:	4b35      	ldr	r3, [pc, #212]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f44:	f7fe fd3c 	bl	80039c0 <HAL_PWREx_GetVoltageRange>
 8004f48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f4a:	4b30      	ldr	r3, [pc, #192]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f50:	4a2e      	ldr	r2, [pc, #184]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004f52:	f023 0304 	bic.w	r3, r3, #4
 8004f56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f60:	d003      	beq.n	8004f6a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f68:	d109      	bne.n	8004f7e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f70:	d202      	bcs.n	8004f78 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004f72:	2301      	movs	r3, #1
 8004f74:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004f76:	e033      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004f7c:	e030      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f84:	d208      	bcs.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8c:	d102      	bne.n	8004f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004f8e:	2303      	movs	r3, #3
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	e025      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e035      	b.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9e:	d90f      	bls.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fac:	d902      	bls.n	8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004fae:	2300      	movs	r3, #0
 8004fb0:	613b      	str	r3, [r7, #16]
 8004fb2:	e015      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	e012      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	e00f      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fc6:	d109      	bne.n	8004fdc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fce:	d102      	bne.n	8004fd6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	e004      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	e001      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004fdc:	2301      	movs	r3, #1
 8004fde:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f023 020f 	bic.w	r2, r3, #15
 8004fe8:	4909      	ldr	r1, [pc, #36]	; (8005010 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d001      	beq.n	8005002 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	46020c00 	.word	0x46020c00
 8005010:	40022000 	.word	0x40022000

08005014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005018:	b0ba      	sub	sp, #232	; 0xe8
 800501a:	af00      	add	r7, sp, #0
 800501c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005020:	2300      	movs	r3, #0
 8005022:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005026:	2300      	movs	r3, #0
 8005028:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800502c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f002 0401 	and.w	r4, r2, #1
 8005038:	2500      	movs	r5, #0
 800503a:	ea54 0305 	orrs.w	r3, r4, r5
 800503e:	d00b      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005040:	4bcb      	ldr	r3, [pc, #812]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005046:	f023 0103 	bic.w	r1, r3, #3
 800504a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800504e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005050:	4ac7      	ldr	r2, [pc, #796]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005052:	430b      	orrs	r3, r1
 8005054:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005058:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	f002 0802 	and.w	r8, r2, #2
 8005064:	f04f 0900 	mov.w	r9, #0
 8005068:	ea58 0309 	orrs.w	r3, r8, r9
 800506c:	d00b      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800506e:	4bc0      	ldr	r3, [pc, #768]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005074:	f023 010c 	bic.w	r1, r3, #12
 8005078:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800507c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507e:	4abc      	ldr	r2, [pc, #752]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005080:	430b      	orrs	r3, r1
 8005082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f002 0a04 	and.w	sl, r2, #4
 8005092:	f04f 0b00 	mov.w	fp, #0
 8005096:	ea5a 030b 	orrs.w	r3, sl, fp
 800509a:	d00b      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800509c:	4bb4      	ldr	r3, [pc, #720]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800509e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050a2:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80050a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ac:	4ab0      	ldr	r2, [pc, #704]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050ae:	430b      	orrs	r3, r1
 80050b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f002 0308 	and.w	r3, r2, #8
 80050c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050c4:	2300      	movs	r3, #0
 80050c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80050ce:	460b      	mov	r3, r1
 80050d0:	4313      	orrs	r3, r2
 80050d2:	d00b      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80050d4:	4ba6      	ldr	r3, [pc, #664]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80050de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e4:	4aa2      	ldr	r2, [pc, #648]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050e6:	430b      	orrs	r3, r1
 80050e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f4:	f002 0310 	and.w	r3, r2, #16
 80050f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050fc:	2300      	movs	r3, #0
 80050fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005102:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005106:	460b      	mov	r3, r1
 8005108:	4313      	orrs	r3, r2
 800510a:	d00b      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800510c:	4b98      	ldr	r3, [pc, #608]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800510e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005112:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800511a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511c:	4a94      	ldr	r2, [pc, #592]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800511e:	430b      	orrs	r3, r1
 8005120:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f002 0320 	and.w	r3, r2, #32
 8005130:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005134:	2300      	movs	r3, #0
 8005136:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800513a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800513e:	460b      	mov	r3, r1
 8005140:	4313      	orrs	r3, r2
 8005142:	d00b      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005144:	4b8a      	ldr	r3, [pc, #552]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800514a:	f023 0107 	bic.w	r1, r3, #7
 800514e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005154:	4a86      	ldr	r2, [pc, #536]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005156:	430b      	orrs	r3, r1
 8005158:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800515c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800516c:	2300      	movs	r3, #0
 800516e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005172:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005176:	460b      	mov	r3, r1
 8005178:	4313      	orrs	r3, r2
 800517a:	d00b      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800517c:	4b7c      	ldr	r3, [pc, #496]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800517e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005182:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800518a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800518c:	4a78      	ldr	r2, [pc, #480]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800518e:	430b      	orrs	r3, r1
 8005190:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80051a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051a4:	2300      	movs	r3, #0
 80051a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051aa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051ae:	460b      	mov	r3, r1
 80051b0:	4313      	orrs	r3, r2
 80051b2:	d00b      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80051b4:	4b6e      	ldr	r3, [pc, #440]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c4:	4a6a      	ldr	r2, [pc, #424]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051c6:	430b      	orrs	r3, r1
 80051c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80051d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051dc:	2300      	movs	r3, #0
 80051de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80051e2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4313      	orrs	r3, r2
 80051ea:	d00b      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80051ec:	4b60      	ldr	r3, [pc, #384]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	4a5c      	ldr	r2, [pc, #368]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051fe:	430b      	orrs	r3, r1
 8005200:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005214:	2300      	movs	r3, #0
 8005216:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800521a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800521e:	460b      	mov	r3, r1
 8005220:	4313      	orrs	r3, r2
 8005222:	d00b      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005224:	4b52      	ldr	r3, [pc, #328]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800522a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800522e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005234:	4a4e      	ldr	r2, [pc, #312]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005236:	430b      	orrs	r3, r1
 8005238:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800523c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005248:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800524c:	2300      	movs	r3, #0
 800524e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005252:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005256:	460b      	mov	r3, r1
 8005258:	4313      	orrs	r3, r2
 800525a:	d00b      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800525c:	4b44      	ldr	r3, [pc, #272]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800525e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005262:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800526a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800526c:	4a40      	ldr	r2, [pc, #256]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800526e:	430b      	orrs	r3, r1
 8005270:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005284:	2300      	movs	r3, #0
 8005286:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800528a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800528e:	460b      	mov	r3, r1
 8005290:	4313      	orrs	r3, r2
 8005292:	d00b      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005294:	4b36      	ldr	r3, [pc, #216]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800529a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800529e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a4:	4a32      	ldr	r2, [pc, #200]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052a6:	430b      	orrs	r3, r1
 80052a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80052ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80052b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052bc:	2300      	movs	r3, #0
 80052be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80052c6:	460b      	mov	r3, r1
 80052c8:	4313      	orrs	r3, r2
 80052ca:	d00c      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80052cc:	4b28      	ldr	r3, [pc, #160]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052de:	4a24      	ldr	r2, [pc, #144]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052e0:	430b      	orrs	r3, r1
 80052e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80052f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80052f4:	2300      	movs	r3, #0
 80052f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80052fc:	460b      	mov	r3, r1
 80052fe:	4313      	orrs	r3, r2
 8005300:	d04f      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530a:	2b80      	cmp	r3, #128	; 0x80
 800530c:	d02d      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x356>
 800530e:	2b80      	cmp	r3, #128	; 0x80
 8005310:	d827      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005312:	2b60      	cmp	r3, #96	; 0x60
 8005314:	d02e      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005316:	2b60      	cmp	r3, #96	; 0x60
 8005318:	d823      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	d006      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x318>
 800531e:	2b40      	cmp	r3, #64	; 0x40
 8005320:	d81f      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005326:	2b20      	cmp	r3, #32
 8005328:	d011      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800532a:	e01a      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800532c:	4b10      	ldr	r3, [pc, #64]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005330:	4a0f      	ldr	r2, [pc, #60]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005336:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005338:	e01d      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800533a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800533e:	3308      	adds	r3, #8
 8005340:	4618      	mov	r0, r3
 8005342:	f002 f981 	bl	8007648 <RCCEx_PLL2_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800534c:	e013      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800534e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005352:	332c      	adds	r3, #44	; 0x2c
 8005354:	4618      	mov	r0, r3
 8005356:	f002 fa0f 	bl	8007778 <RCCEx_PLL3_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005360:	e009      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005368:	e005      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800536a:	bf00      	nop
 800536c:	e003      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800536e:	bf00      	nop
 8005370:	46020c00 	.word	0x46020c00
        break;
 8005374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005376:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10d      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800537e:	4bb6      	ldr	r3, [pc, #728]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005380:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005384:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8005388:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800538c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005390:	4ab1      	ldr	r2, [pc, #708]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005392:	430b      	orrs	r3, r1
 8005394:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005398:	e003      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800539e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80053ae:	673b      	str	r3, [r7, #112]	; 0x70
 80053b0:	2300      	movs	r3, #0
 80053b2:	677b      	str	r3, [r7, #116]	; 0x74
 80053b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80053b8:	460b      	mov	r3, r1
 80053ba:	4313      	orrs	r3, r2
 80053bc:	d053      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80053be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ca:	d033      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80053cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d0:	d82c      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80053d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053d6:	d02f      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80053d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053dc:	d826      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80053de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e2:	d008      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80053e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e8:	d820      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80053ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f2:	d011      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80053f4:	e01a      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053f6:	4b98      	ldr	r3, [pc, #608]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	4a97      	ldr	r2, [pc, #604]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80053fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005400:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005402:	e01a      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005404:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005408:	3308      	adds	r3, #8
 800540a:	4618      	mov	r0, r3
 800540c:	f002 f91c 	bl	8007648 <RCCEx_PLL2_Config>
 8005410:	4603      	mov	r3, r0
 8005412:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005416:	e010      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005418:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800541c:	332c      	adds	r3, #44	; 0x2c
 800541e:	4618      	mov	r0, r3
 8005420:	f002 f9aa 	bl	8007778 <RCCEx_PLL3_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800542a:	e006      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005432:	e002      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005434:	bf00      	nop
 8005436:	e000      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800543a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10d      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005442:	4b85      	ldr	r3, [pc, #532]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005444:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005448:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800544c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005454:	4a80      	ldr	r2, [pc, #512]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005456:	430b      	orrs	r3, r1
 8005458:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800545c:	e003      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005462:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800546a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005472:	66bb      	str	r3, [r7, #104]	; 0x68
 8005474:	2300      	movs	r3, #0
 8005476:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005478:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800547c:	460b      	mov	r3, r1
 800547e:	4313      	orrs	r3, r2
 8005480:	d046      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005486:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800548a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800548e:	d028      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005490:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005494:	d821      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005496:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800549a:	d022      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800549c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054a0:	d81b      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80054a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054a6:	d01c      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80054a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054ac:	d815      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80054ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b2:	d008      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80054b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b8:	d80f      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d011      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80054be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c2:	d00e      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80054c4:	e009      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ca:	3308      	adds	r3, #8
 80054cc:	4618      	mov	r0, r3
 80054ce:	f002 f8bb 	bl	8007648 <RCCEx_PLL2_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80054d8:	e004      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80054e0:	e000      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80054e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10d      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80054ec:	4b5a      	ldr	r3, [pc, #360]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80054ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054f2:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80054f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054fe:	4a56      	ldr	r2, [pc, #344]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005500:	430b      	orrs	r3, r1
 8005502:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005506:	e003      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005508:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800550c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005510:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800551c:	663b      	str	r3, [r7, #96]	; 0x60
 800551e:	2300      	movs	r3, #0
 8005520:	667b      	str	r3, [r7, #100]	; 0x64
 8005522:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005526:	460b      	mov	r3, r1
 8005528:	4313      	orrs	r3, r2
 800552a:	d03f      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800552c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005534:	2b04      	cmp	r3, #4
 8005536:	d81e      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005538:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	0800557f 	.word	0x0800557f
 8005544:	08005555 	.word	0x08005555
 8005548:	08005563 	.word	0x08005563
 800554c:	0800557f 	.word	0x0800557f
 8005550:	0800557f 	.word	0x0800557f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005554:	4b40      	ldr	r3, [pc, #256]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	4a3f      	ldr	r2, [pc, #252]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800555a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005560:	e00e      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005566:	332c      	adds	r3, #44	; 0x2c
 8005568:	4618      	mov	r0, r3
 800556a:	f002 f905 	bl	8007778 <RCCEx_PLL3_Config>
 800556e:	4603      	mov	r3, r0
 8005570:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005574:	e004      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800557c:	e000      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800557e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005580:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10d      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005588:	4b33      	ldr	r3, [pc, #204]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800558a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800558e:	f023 0107 	bic.w	r1, r3, #7
 8005592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	4a2f      	ldr	r2, [pc, #188]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800559c:	430b      	orrs	r3, r1
 800559e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80055a2:	e003      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80055a8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80055ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b4:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80055b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80055ba:	2300      	movs	r3, #0
 80055bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80055c2:	460b      	mov	r3, r1
 80055c4:	4313      	orrs	r3, r2
 80055c6:	d04d      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80055c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055d4:	d028      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80055d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055da:	d821      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80055dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055e0:	d024      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x618>
 80055e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055e6:	d81b      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80055e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ec:	d00e      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80055ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055f2:	d815      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01b      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80055f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fc:	d110      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055fe:	4b16      	ldr	r3, [pc, #88]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	4a15      	ldr	r2, [pc, #84]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005608:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800560a:	e012      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800560c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005610:	332c      	adds	r3, #44	; 0x2c
 8005612:	4618      	mov	r0, r3
 8005614:	f002 f8b0 	bl	8007778 <RCCEx_PLL3_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800561e:	e008      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005626:	e004      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005628:	bf00      	nop
 800562a:	e002      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800562c:	bf00      	nop
 800562e:	e000      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005630:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005632:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d110      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800563a:	4b07      	ldr	r3, [pc, #28]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800563c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005640:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005644:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800564c:	4a02      	ldr	r2, [pc, #8]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800564e:	430b      	orrs	r3, r1
 8005650:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005654:	e006      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005656:	bf00      	nop
 8005658:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005660:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005670:	653b      	str	r3, [r7, #80]	; 0x50
 8005672:	2300      	movs	r3, #0
 8005674:	657b      	str	r3, [r7, #84]	; 0x54
 8005676:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800567a:	460b      	mov	r3, r1
 800567c:	4313      	orrs	r3, r2
 800567e:	f000 80b5 	beq.w	80057ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005682:	2300      	movs	r3, #0
 8005684:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005688:	4b9d      	ldr	r3, [pc, #628]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800568a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	d113      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005696:	4b9a      	ldr	r3, [pc, #616]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800569c:	4a98      	ldr	r2, [pc, #608]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800569e:	f043 0304 	orr.w	r3, r3, #4
 80056a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80056a6:	4b96      	ldr	r3, [pc, #600]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80056be:	4b91      	ldr	r3, [pc, #580]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	4a90      	ldr	r2, [pc, #576]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056ca:	f7fc f97d 	bl	80019c8 <HAL_GetTick>
 80056ce:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80056d2:	e00b      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d4:	f7fc f978 	bl	80019c8 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d903      	bls.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80056ea:	e005      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80056ec:	4b85      	ldr	r3, [pc, #532]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80056ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0ed      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80056f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d165      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005700:	4b7f      	ldr	r3, [pc, #508]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005712:	2b00      	cmp	r3, #0
 8005714:	d023      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800571a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005722:	4293      	cmp	r3, r2
 8005724:	d01b      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005726:	4b76      	ldr	r3, [pc, #472]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800572c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005730:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005734:	4b72      	ldr	r3, [pc, #456]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800573a:	4a71      	ldr	r2, [pc, #452]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800573c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005740:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005744:	4b6e      	ldr	r3, [pc, #440]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800574a:	4a6d      	ldr	r2, [pc, #436]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800574c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005750:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005754:	4a6a      	ldr	r2, [pc, #424]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800575e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d019      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576a:	f7fc f92d 	bl	80019c8 <HAL_GetTick>
 800576e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005772:	e00d      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005774:	f7fc f928 	bl	80019c8 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800577e:	1ad2      	subs	r2, r2, r3
 8005780:	f241 3388 	movw	r3, #5000	; 0x1388
 8005784:	429a      	cmp	r2, r3
 8005786:	d903      	bls.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800578e:	e006      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005790:	4b5b      	ldr	r3, [pc, #364]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0ea      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800579e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10d      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80057a6:	4b56      	ldr	r3, [pc, #344]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80057a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80057b8:	4a51      	ldr	r2, [pc, #324]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80057ba:	430b      	orrs	r3, r1
 80057bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80057c0:	e008      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80057c6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80057ca:	e003      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80057d0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057d4:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d107      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057dc:	4b48      	ldr	r3, [pc, #288]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80057de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057e2:	4a47      	ldr	r2, [pc, #284]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80057e4:	f023 0304 	bic.w	r3, r3, #4
 80057e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80057ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80057f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80057fa:	2300      	movs	r3, #0
 80057fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057fe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005802:	460b      	mov	r3, r1
 8005804:	4313      	orrs	r3, r2
 8005806:	d042      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800580c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005810:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005814:	d022      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005816:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800581a:	d81b      	bhi.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800581c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005820:	d011      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005826:	d815      	bhi.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d019      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800582c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005830:	d110      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005836:	3308      	adds	r3, #8
 8005838:	4618      	mov	r0, r3
 800583a:	f001 ff05 	bl	8007648 <RCCEx_PLL2_Config>
 800583e:	4603      	mov	r3, r0
 8005840:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005844:	e00d      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005846:	4b2e      	ldr	r3, [pc, #184]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	4a2d      	ldr	r2, [pc, #180]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800584c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005850:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005852:	e006      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800585a:	e002      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800585c:	bf00      	nop
 800585e:	e000      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005860:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005862:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10d      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800586a:	4b25      	ldr	r3, [pc, #148]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800586c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005870:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005874:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005878:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800587c:	4a20      	ldr	r2, [pc, #128]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800587e:	430b      	orrs	r3, r1
 8005880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005884:	e003      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005886:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800588a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800588e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005896:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800589a:	643b      	str	r3, [r7, #64]	; 0x40
 800589c:	2300      	movs	r3, #0
 800589e:	647b      	str	r3, [r7, #68]	; 0x44
 80058a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80058a4:	460b      	mov	r3, r1
 80058a6:	4313      	orrs	r3, r2
 80058a8:	d032      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80058aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b6:	d00b      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80058b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058bc:	d804      	bhi.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d008      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80058c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c6:	d007      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80058ce:	e004      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80058d0:	bf00      	nop
 80058d2:	e002      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80058d4:	bf00      	nop
 80058d6:	e000      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80058d8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80058da:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d112      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80058e2:	4b07      	ldr	r3, [pc, #28]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80058e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058f4:	4a02      	ldr	r2, [pc, #8]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058f6:	430b      	orrs	r3, r1
 80058f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80058fc:	e008      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80058fe:	bf00      	nop
 8005900:	46020c00 	.word	0x46020c00
 8005904:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005908:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800590c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005910:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005918:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800591c:	63bb      	str	r3, [r7, #56]	; 0x38
 800591e:	2300      	movs	r3, #0
 8005920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005922:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005926:	460b      	mov	r3, r1
 8005928:	4313      	orrs	r3, r2
 800592a:	d00c      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800592c:	4b98      	ldr	r3, [pc, #608]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800592e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005932:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8005936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800593a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800593e:	4a94      	ldr	r2, [pc, #592]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005940:	430b      	orrs	r3, r1
 8005942:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005952:	633b      	str	r3, [r7, #48]	; 0x30
 8005954:	2300      	movs	r3, #0
 8005956:	637b      	str	r3, [r7, #52]	; 0x34
 8005958:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800595c:	460b      	mov	r3, r1
 800595e:	4313      	orrs	r3, r2
 8005960:	d019      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005966:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800596a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800596e:	d105      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005970:	4b87      	ldr	r3, [pc, #540]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	4a86      	ldr	r2, [pc, #536]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800597a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800597c:	4b84      	ldr	r3, [pc, #528]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800597e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005982:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800598a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800598e:	4a80      	ldr	r2, [pc, #512]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005990:	430b      	orrs	r3, r1
 8005992:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80059a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059a4:	2300      	movs	r3, #0
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80059ac:	460b      	mov	r3, r1
 80059ae:	4313      	orrs	r3, r2
 80059b0:	d00c      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80059b2:	4b77      	ldr	r3, [pc, #476]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059c4:	4972      	ldr	r1, [pc, #456]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80059cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80059d8:	623b      	str	r3, [r7, #32]
 80059da:	2300      	movs	r3, #0
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
 80059de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80059e2:	460b      	mov	r3, r1
 80059e4:	4313      	orrs	r3, r2
 80059e6:	d00c      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80059e8:	4b69      	ldr	r3, [pc, #420]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80059fa:	4965      	ldr	r1, [pc, #404]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005a0e:	61bb      	str	r3, [r7, #24]
 8005a10:	2300      	movs	r3, #0
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	d00c      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005a1e:	4b5c      	ldr	r3, [pc, #368]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a24:	f023 0218 	bic.w	r2, r3, #24
 8005a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a30:	4957      	ldr	r1, [pc, #348]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a40:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4313      	orrs	r3, r2
 8005a52:	d032      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005a54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a60:	d105      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a62:	4b4b      	ldr	r3, [pc, #300]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	4a4a      	ldr	r2, [pc, #296]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a6c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a7a:	d108      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a80:	3308      	adds	r3, #8
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fde0 	bl	8007648 <RCCEx_PLL2_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8005a8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10d      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005a96:	4b3e      	ldr	r3, [pc, #248]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005aa8:	4939      	ldr	r1, [pc, #228]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005ab0:	e003      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005ab6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005ac6:	60bb      	str	r3, [r7, #8]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	d03a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ae2:	d00e      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005ae4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ae8:	d815      	bhi.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d017      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005aee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005af2:	d110      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af4:	4b26      	ldr	r3, [pc, #152]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af8:	4a25      	ldr	r2, [pc, #148]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005afe:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005b00:	e00e      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b06:	3308      	adds	r3, #8
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f001 fd9d 	bl	8007648 <RCCEx_PLL2_Config>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005b14:	e004      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005b1c:	e000      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8005b1e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b20:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10d      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005b28:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3a:	4915      	ldr	r1, [pc, #84]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005b42:	e003      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b48:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005b4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005b58:	603b      	str	r3, [r7, #0]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	607b      	str	r3, [r7, #4]
 8005b5e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b62:	460b      	mov	r3, r1
 8005b64:	4313      	orrs	r3, r2
 8005b66:	d00c      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005b68:	4b09      	ldr	r3, [pc, #36]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b6e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b7a:	4905      	ldr	r1, [pc, #20]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005b82:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	37e8      	adds	r7, #232	; 0xe8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b90:	46020c00 	.word	0x46020c00

08005b94 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b089      	sub	sp, #36	; 0x24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005b9c:	4bac      	ldr	r3, [pc, #688]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005ba6:	4baa      	ldr	r3, [pc, #680]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005bb0:	4ba7      	ldr	r3, [pc, #668]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	0a1b      	lsrs	r3, r3, #8
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	3301      	adds	r3, #1
 8005bbc:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005bbe:	4ba4      	ldr	r3, [pc, #656]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	f003 0310 	and.w	r3, r3, #16
 8005bc6:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005bc8:	4ba1      	ldr	r3, [pc, #644]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	08db      	lsrs	r3, r3, #3
 8005bce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	fb02 f303 	mul.w	r3, r2, r3
 8005bd8:	ee07 3a90 	vmov	s15, r3
 8005bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 8123 	beq.w	8005e32 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d062      	beq.n	8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	f200 8081 	bhi.w	8005cfc <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d024      	beq.n	8005c4a <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d17a      	bne.n	8005cfc <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	ee07 3a90 	vmov	s15, r3
 8005c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c10:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c18:	4b8d      	ldr	r3, [pc, #564]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c20:	ee07 3a90 	vmov	s15, r3
 8005c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c28:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c2c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005c30:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c34:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c48:	e08f      	b.n	8005d6a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c4a:	4b81      	ldr	r3, [pc, #516]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8005c56:	4b7e      	ldr	r3, [pc, #504]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	0f1b      	lsrs	r3, r3, #28
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	e006      	b.n	8005c70 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8005c62:	4b7b      	ldr	r3, [pc, #492]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c68:	041b      	lsls	r3, r3, #16
 8005c6a:	0f1b      	lsrs	r3, r3, #28
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	4a7a      	ldr	r2, [pc, #488]	; (8005e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c76:	ee07 3a90 	vmov	s15, r3
 8005c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	ee07 3a90 	vmov	s15, r3
 8005c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c9a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cb6:	e058      	b.n	8005d6a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cca:	4b61      	ldr	r3, [pc, #388]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cde:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cfa:	e036      	b.n	8005d6a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005cfc:	4b54      	ldr	r3, [pc, #336]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8005d08:	4b51      	ldr	r3, [pc, #324]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	0f1b      	lsrs	r3, r3, #28
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	e006      	b.n	8005d22 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8005d14:	4b4e      	ldr	r3, [pc, #312]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	0f1b      	lsrs	r3, r3, #28
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	4a4e      	ldr	r2, [pc, #312]	; (8005e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d28:	ee07 3a90 	vmov	s15, r3
 8005d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d48:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d4c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005d50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d68:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005d6a:	4b39      	ldr	r3, [pc, #228]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d017      	beq.n	8005da6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d76:	4b36      	ldr	r3, [pc, #216]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7a:	0a5b      	lsrs	r3, r3, #9
 8005d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d80:	ee07 3a90 	vmov	s15, r3
 8005d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d8c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d90:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d9c:	ee17 2a90 	vmov	r2, s15
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e002      	b.n	8005dac <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005dac:	4b28      	ldr	r3, [pc, #160]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d017      	beq.n	8005de8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005db8:	4b25      	ldr	r3, [pc, #148]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbc:	0c1b      	lsrs	r3, r3, #16
 8005dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dce:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dde:	ee17 2a90 	vmov	r2, s15
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	e002      	b.n	8005dee <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005dee:	4b18      	ldr	r3, [pc, #96]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d017      	beq.n	8005e2a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005dfa:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfe:	0e1b      	lsrs	r3, r3, #24
 8005e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e04:	ee07 3a90 	vmov	s15, r3
 8005e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005e0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e10:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e14:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e20:	ee17 2a90 	vmov	r2, s15
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005e28:	e00c      	b.n	8005e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	609a      	str	r2, [r3, #8]
}
 8005e30:	e008      	b.n	8005e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	609a      	str	r2, [r3, #8]
}
 8005e44:	bf00      	nop
 8005e46:	3724      	adds	r7, #36	; 0x24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	46020c00 	.word	0x46020c00
 8005e54:	4b742400 	.word	0x4b742400
 8005e58:	46000000 	.word	0x46000000
 8005e5c:	08009528 	.word	0x08009528

08005e60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b089      	sub	sp, #36	; 0x24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005e68:	4bac      	ldr	r3, [pc, #688]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e70:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005e72:	4baa      	ldr	r3, [pc, #680]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005e7c:	4ba7      	ldr	r3, [pc, #668]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	0a1b      	lsrs	r3, r3, #8
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	3301      	adds	r3, #1
 8005e88:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005e8a:	4ba4      	ldr	r3, [pc, #656]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005e94:	4ba1      	ldr	r3, [pc, #644]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	08db      	lsrs	r3, r3, #3
 8005e9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	fb02 f303 	mul.w	r3, r2, r3
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eac:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 8123 	beq.w	80060fe <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d062      	beq.n	8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	f200 8081 	bhi.w	8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d024      	beq.n	8005f16 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d17a      	bne.n	8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	ee07 3a90 	vmov	s15, r3
 8005ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005edc:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006120 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8005ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee4:	4b8d      	ldr	r3, [pc, #564]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eec:	ee07 3a90 	vmov	s15, r3
 8005ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ef4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ef8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f14:	e08f      	b.n	8006036 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005f16:	4b81      	ldr	r3, [pc, #516]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d005      	beq.n	8005f2e <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8005f22:	4b7e      	ldr	r3, [pc, #504]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	0f1b      	lsrs	r3, r3, #28
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	e006      	b.n	8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8005f2e:	4b7b      	ldr	r3, [pc, #492]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005f30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f34:	041b      	lsls	r3, r3, #16
 8005f36:	0f1b      	lsrs	r3, r3, #28
 8005f38:	f003 030f 	and.w	r3, r3, #15
 8005f3c:	4a7a      	ldr	r2, [pc, #488]	; (8006128 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	ee07 3a90 	vmov	s15, r3
 8005f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f66:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f82:	e058      	b.n	8006036 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006120 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8005f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f96:	4b61      	ldr	r3, [pc, #388]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005faa:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fc6:	e036      	b.n	8006036 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005fc8:	4b54      	ldr	r3, [pc, #336]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8005fd4:	4b51      	ldr	r3, [pc, #324]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	0f1b      	lsrs	r3, r3, #28
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	e006      	b.n	8005fee <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8005fe0:	4b4e      	ldr	r3, [pc, #312]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005fe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fe6:	041b      	lsls	r3, r3, #16
 8005fe8:	0f1b      	lsrs	r3, r3, #28
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	4a4e      	ldr	r2, [pc, #312]	; (8006128 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff4:	ee07 3a90 	vmov	s15, r3
 8005ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006014:	ed97 6a02 	vldr	s12, [r7, #8]
 8006018:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800601c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006020:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006024:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006028:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800602c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006030:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006034:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006036:	4b39      	ldr	r3, [pc, #228]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d017      	beq.n	8006072 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006042:	4b36      	ldr	r3, [pc, #216]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006046:	0a5b      	lsrs	r3, r3, #9
 8006048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800604c:	ee07 3a90 	vmov	s15, r3
 8006050:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006058:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800605c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006068:	ee17 2a90 	vmov	r2, s15
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	e002      	b.n	8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006078:	4b28      	ldr	r3, [pc, #160]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d017      	beq.n	80060b4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006084:	4b25      	ldr	r3, [pc, #148]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006088:	0c1b      	lsrs	r3, r3, #16
 800608a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006096:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800609a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800609e:	edd7 6a07 	vldr	s13, [r7, #28]
 80060a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060aa:	ee17 2a90 	vmov	r2, s15
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	605a      	str	r2, [r3, #4]
 80060b2:	e002      	b.n	80060ba <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80060ba:	4b18      	ldr	r3, [pc, #96]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80060bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d017      	beq.n	80060f6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060c6:	4b15      	ldr	r3, [pc, #84]	; (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	0e1b      	lsrs	r3, r3, #24
 80060cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80060d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060dc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ec:	ee17 2a90 	vmov	r2, s15
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80060f4:	e00c      	b.n	8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	609a      	str	r2, [r3, #8]
}
 80060fc:	e008      	b.n	8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	609a      	str	r2, [r3, #8]
}
 8006110:	bf00      	nop
 8006112:	3724      	adds	r7, #36	; 0x24
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	46020c00 	.word	0x46020c00
 8006120:	4b742400 	.word	0x4b742400
 8006124:	46000000 	.word	0x46000000
 8006128:	08009528 	.word	0x08009528

0800612c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800612c:	b480      	push	{r7}
 800612e:	b089      	sub	sp, #36	; 0x24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006134:	4bac      	ldr	r3, [pc, #688]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800613e:	4baa      	ldr	r3, [pc, #680]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006148:	4ba7      	ldr	r3, [pc, #668]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	0a1b      	lsrs	r3, r3, #8
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	3301      	adds	r3, #1
 8006154:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006156:	4ba4      	ldr	r3, [pc, #656]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615a:	f003 0310 	and.w	r3, r3, #16
 800615e:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006160:	4ba1      	ldr	r3, [pc, #644]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006164:	08db      	lsrs	r3, r3, #3
 8006166:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	fb02 f303 	mul.w	r3, r2, r3
 8006170:	ee07 3a90 	vmov	s15, r3
 8006174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006178:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 8123 	beq.w	80063ca <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	2b03      	cmp	r3, #3
 8006188:	d062      	beq.n	8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b03      	cmp	r3, #3
 800618e:	f200 8081 	bhi.w	8006294 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d024      	beq.n	80061e2 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2b02      	cmp	r3, #2
 800619c:	d17a      	bne.n	8006294 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	ee07 3a90 	vmov	s15, r3
 80061a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a8:	eddf 6a90 	vldr	s13, [pc, #576]	; 80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80061ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b0:	4b8d      	ldr	r3, [pc, #564]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80061b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80061c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80061c4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80063f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80061c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80061d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061dc:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80061e0:	e08f      	b.n	8006302 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80061e2:	4b81      	ldr	r3, [pc, #516]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 80061ee:	4b7e      	ldr	r3, [pc, #504]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	0f1b      	lsrs	r3, r3, #28
 80061f4:	f003 030f 	and.w	r3, r3, #15
 80061f8:	e006      	b.n	8006208 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 80061fa:	4b7b      	ldr	r3, [pc, #492]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80061fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006200:	041b      	lsls	r3, r3, #16
 8006202:	0f1b      	lsrs	r3, r3, #28
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	4a7a      	ldr	r2, [pc, #488]	; (80063f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800620a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800622e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006232:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80063f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800623a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800623e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006242:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800624e:	e058      	b.n	8006302 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800625e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006262:	4b61      	ldr	r3, [pc, #388]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006272:	ed97 6a02 	vldr	s12, [r7, #8]
 8006276:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80063f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800627a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800627e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006286:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800628a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800628e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006292:	e036      	b.n	8006302 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006294:	4b54      	ldr	r3, [pc, #336]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 80062a0:	4b51      	ldr	r3, [pc, #324]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	0f1b      	lsrs	r3, r3, #28
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	e006      	b.n	80062ba <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 80062ac:	4b4e      	ldr	r3, [pc, #312]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80062ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062b2:	041b      	lsls	r3, r3, #16
 80062b4:	0f1b      	lsrs	r3, r3, #28
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	4a4e      	ldr	r2, [pc, #312]	; (80063f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80062bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	ee07 3a90 	vmov	s15, r3
 80062dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80062e4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80063f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80062e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80062f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006300:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006302:	4b39      	ldr	r3, [pc, #228]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d017      	beq.n	800633e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800630e:	4b36      	ldr	r3, [pc, #216]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006312:	0a5b      	lsrs	r3, r3, #9
 8006314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006320:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006324:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006328:	edd7 6a07 	vldr	s13, [r7, #28]
 800632c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006334:	ee17 2a90 	vmov	r2, s15
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	e002      	b.n	8006344 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006344:	4b28      	ldr	r3, [pc, #160]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d017      	beq.n	8006380 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006350:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006354:	0c1b      	lsrs	r3, r3, #16
 8006356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006366:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800636a:	edd7 6a07 	vldr	s13, [r7, #28]
 800636e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006376:	ee17 2a90 	vmov	r2, s15
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	605a      	str	r2, [r3, #4]
 800637e:	e002      	b.n	8006386 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006386:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d017      	beq.n	80063c2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006392:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006396:	0e1b      	lsrs	r3, r3, #24
 8006398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800639c:	ee07 3a90 	vmov	s15, r3
 80063a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80063a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063a8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80063ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80063b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063b8:	ee17 2a90 	vmov	r2, s15
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80063c0:	e00c      	b.n	80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	609a      	str	r2, [r3, #8]
}
 80063c8:	e008      	b.n	80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	609a      	str	r2, [r3, #8]
}
 80063dc:	bf00      	nop
 80063de:	3724      	adds	r7, #36	; 0x24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	46020c00 	.word	0x46020c00
 80063ec:	4b742400 	.word	0x4b742400
 80063f0:	46000000 	.word	0x46000000
 80063f4:	08009528 	.word	0x08009528

080063f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08e      	sub	sp, #56	; 0x38
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006406:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800640a:	430b      	orrs	r3, r1
 800640c:	d145      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800640e:	4ba7      	ldr	r3, [pc, #668]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006418:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800641a:	4ba4      	ldr	r3, [pc, #656]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800641c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b02      	cmp	r3, #2
 8006426:	d108      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800642e:	d104      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
 8006436:	f001 b8fc 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800643a:	4b9c      	ldr	r3, [pc, #624]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800643c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006448:	d114      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006450:	d110      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006452:	4b96      	ldr	r3, [pc, #600]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800645c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006460:	d103      	bne.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006462:	23fa      	movs	r3, #250	; 0xfa
 8006464:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006466:	f001 b8e4 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800646a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800646e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006470:	f001 b8df 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006474:	4b8d      	ldr	r3, [pc, #564]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006480:	d107      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006488:	d103      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800648a:	4b89      	ldr	r3, [pc, #548]	; (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800648c:	637b      	str	r3, [r7, #52]	; 0x34
 800648e:	f001 b8d0 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	637b      	str	r3, [r7, #52]	; 0x34
 8006496:	f001 b8cc 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800649a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800649e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80064a2:	430b      	orrs	r3, r1
 80064a4:	d151      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80064a6:	4b81      	ldr	r3, [pc, #516]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80064ac:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80064b0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	2b80      	cmp	r3, #128	; 0x80
 80064b6:	d035      	beq.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	2b80      	cmp	r3, #128	; 0x80
 80064bc:	d841      	bhi.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	2b60      	cmp	r3, #96	; 0x60
 80064c2:	d02a      	beq.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	2b60      	cmp	r3, #96	; 0x60
 80064c8:	d83b      	bhi.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	2b40      	cmp	r3, #64	; 0x40
 80064ce:	d009      	beq.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	2b40      	cmp	r3, #64	; 0x40
 80064d4:	d835      	bhi.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00c      	beq.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	2b20      	cmp	r3, #32
 80064e0:	d012      	beq.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80064e2:	e02e      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff fb53 	bl	8005b94 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064f2:	f001 b89e 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064f6:	f107 0318 	add.w	r3, r7, #24
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff fcb0 	bl	8005e60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006504:	f001 b895 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006508:	f107 030c 	add.w	r3, r7, #12
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fe0d 	bl	800612c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006516:	f001 b88c 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800651a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800651e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006520:	f001 b887 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006524:	4b61      	ldr	r3, [pc, #388]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800652c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006530:	d103      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006532:	4b60      	ldr	r3, [pc, #384]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006534:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006536:	f001 b87c 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800653e:	f001 b878 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006546:	f001 b874 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800654a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800654e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006552:	430b      	orrs	r3, r1
 8006554:	d158      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006556:	4b55      	ldr	r3, [pc, #340]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006558:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800655c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006560:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006568:	d03b      	beq.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006570:	d846      	bhi.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006578:	d02e      	beq.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006580:	d83e      	bhi.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006588:	d00b      	beq.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006590:	d836      	bhi.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00d      	beq.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800659e:	d012      	beq.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80065a0:	e02e      	b.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff faf4 	bl	8005b94 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065b0:	f001 b83f 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065b4:	f107 0318 	add.w	r3, r7, #24
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff fc51 	bl	8005e60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065c2:	f001 b836 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065c6:	f107 030c 	add.w	r3, r7, #12
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fdae 	bl	800612c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065d4:	f001 b82d 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80065d8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065de:	f001 b828 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065e2:	4b32      	ldr	r3, [pc, #200]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ee:	d103      	bne.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80065f0:	4b30      	ldr	r3, [pc, #192]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80065f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80065f4:	f001 b81d 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065fc:	f001 b819 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006604:	f001 b815 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800660c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006610:	430b      	orrs	r3, r1
 8006612:	d126      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006614:	4b25      	ldr	r3, [pc, #148]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006616:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800661a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800661e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006620:	4b22      	ldr	r3, [pc, #136]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800662c:	d106      	bne.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	2b00      	cmp	r3, #0
 8006632:	d103      	bne.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006634:	4b1f      	ldr	r3, [pc, #124]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006636:	637b      	str	r3, [r7, #52]	; 0x34
 8006638:	f000 bffb 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800663c:	4b1b      	ldr	r3, [pc, #108]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006648:	d107      	bne.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006650:	d103      	bne.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006652:	4b19      	ldr	r3, [pc, #100]	; (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006654:	637b      	str	r3, [r7, #52]	; 0x34
 8006656:	f000 bfec 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
 800665e:	f000 bfe8 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006666:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800666a:	430b      	orrs	r3, r1
 800666c:	d164      	bne.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800666e:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006674:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006678:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006680:	d03d      	beq.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006688:	d852      	bhi.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006690:	d014      	beq.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006698:	d84a      	bhi.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01f      	beq.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066a6:	d012      	beq.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80066a8:	e042      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80066aa:	bf00      	nop
 80066ac:	46020c00 	.word	0x46020c00
 80066b0:	0007a120 	.word	0x0007a120
 80066b4:	00f42400 	.word	0x00f42400
 80066b8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff fa67 	bl	8005b94 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066ca:	f000 bfb2 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ce:	f107 0318 	add.w	r3, r7, #24
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff fbc4 	bl	8005e60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066dc:	f000 bfa9 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80066e0:	4bab      	ldr	r3, [pc, #684]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ec:	d103      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80066ee:	4ba9      	ldr	r3, [pc, #676]	; (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80066f0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80066f2:	f000 bf9e 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066fa:	f000 bf9a 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066fe:	4ba4      	ldr	r3, [pc, #656]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d005      	beq.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800670a:	4ba1      	ldr	r3, [pc, #644]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	0e1b      	lsrs	r3, r3, #24
 8006710:	f003 030f 	and.w	r3, r3, #15
 8006714:	e006      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8006716:	4b9e      	ldr	r3, [pc, #632]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006718:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800671c:	041b      	lsls	r3, r3, #16
 800671e:	0e1b      	lsrs	r3, r3, #24
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	4a9c      	ldr	r2, [pc, #624]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800672a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800672c:	f000 bf81 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006734:	f000 bf7d 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800673c:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006740:	430b      	orrs	r3, r1
 8006742:	d175      	bne.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006744:	4b92      	ldr	r3, [pc, #584]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006746:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800674a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800674e:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	2b00      	cmp	r3, #0
 8006754:	d15b      	bne.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006756:	4b8e      	ldr	r3, [pc, #568]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800675c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006760:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006768:	d034      	beq.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006770:	d849      	bhi.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006778:	d00b      	beq.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006780:	d841      	bhi.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	2b00      	cmp	r3, #0
 8006786:	d016      	beq.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800678e:	d009      	beq.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006790:	e039      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff f9fc 	bl	8005b94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80067a0:	f000 bf47 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067a4:	f107 0318 	add.w	r3, r7, #24
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff fb59 	bl	8005e60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80067b2:	f000 bf3e 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80067b6:	4b76      	ldr	r3, [pc, #472]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c2:	d103      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 80067c4:	4b73      	ldr	r3, [pc, #460]	; (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80067c6:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80067c8:	f000 bf33 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80067d0:	f000 bf2f 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067d4:	4b6e      	ldr	r3, [pc, #440]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80067e0:	4b6b      	ldr	r3, [pc, #428]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	0e1b      	lsrs	r3, r3, #24
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	e006      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80067ec:	4b68      	ldr	r3, [pc, #416]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80067ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067f2:	041b      	lsls	r3, r3, #16
 80067f4:	0e1b      	lsrs	r3, r3, #24
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	4a67      	ldr	r2, [pc, #412]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80067fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006802:	f000 bf16 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800680a:	f000 bf12 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006814:	d108      	bne.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff f9ba 	bl	8005b94 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	637b      	str	r3, [r7, #52]	; 0x34
 8006824:	f000 bf05 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	637b      	str	r3, [r7, #52]	; 0x34
 800682c:	f000 bf01 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006834:	1e51      	subs	r1, r2, #1
 8006836:	430b      	orrs	r3, r1
 8006838:	d136      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800683a:	4b55      	ldr	r3, [pc, #340]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800683c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006840:	f003 0303 	and.w	r3, r3, #3
 8006844:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	2b00      	cmp	r3, #0
 800684a:	d104      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800684c:	f7fe fb34 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 8006850:	6378      	str	r0, [r7, #52]	; 0x34
 8006852:	f000 beee 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	2b01      	cmp	r3, #1
 800685a:	d104      	bne.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800685c:	f7fe f9f6 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8006860:	6378      	str	r0, [r7, #52]	; 0x34
 8006862:	f000 bee6 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006866:	4b4a      	ldr	r3, [pc, #296]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800686e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006872:	d106      	bne.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	2b02      	cmp	r3, #2
 8006878:	d103      	bne.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800687a:	4b48      	ldr	r3, [pc, #288]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800687c:	637b      	str	r3, [r7, #52]	; 0x34
 800687e:	f000 bed8 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006882:	4b43      	ldr	r3, [pc, #268]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b02      	cmp	r3, #2
 800688e:	d107      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	2b03      	cmp	r3, #3
 8006894:	d104      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8006896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800689a:	637b      	str	r3, [r7, #52]	; 0x34
 800689c:	f000 bec9 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	637b      	str	r3, [r7, #52]	; 0x34
 80068a4:	f000 bec5 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80068a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ac:	1e91      	subs	r1, r2, #2
 80068ae:	430b      	orrs	r3, r1
 80068b0:	d136      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80068b2:	4b37      	ldr	r3, [pc, #220]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80068b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068b8:	f003 030c 	and.w	r3, r3, #12
 80068bc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d104      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80068c4:	f7fe fae4 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 80068c8:	6378      	str	r0, [r7, #52]	; 0x34
 80068ca:	f000 beb2 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	2b04      	cmp	r3, #4
 80068d2:	d104      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068d4:	f7fe f9ba 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 80068d8:	6378      	str	r0, [r7, #52]	; 0x34
 80068da:	f000 beaa 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80068de:	4b2c      	ldr	r3, [pc, #176]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ea:	d106      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d103      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 80068f2:	4b2a      	ldr	r3, [pc, #168]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80068f4:	637b      	str	r3, [r7, #52]	; 0x34
 80068f6:	f000 be9c 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80068fa:	4b25      	ldr	r3, [pc, #148]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80068fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b02      	cmp	r3, #2
 8006906:	d107      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	2b0c      	cmp	r3, #12
 800690c:	d104      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800690e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006912:	637b      	str	r3, [r7, #52]	; 0x34
 8006914:	f000 be8d 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	637b      	str	r3, [r7, #52]	; 0x34
 800691c:	f000 be89 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006924:	1f11      	subs	r1, r2, #4
 8006926:	430b      	orrs	r3, r1
 8006928:	d13e      	bne.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800692a:	4b19      	ldr	r3, [pc, #100]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800692c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006930:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006934:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800693c:	f7fe faa8 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 8006940:	6378      	str	r0, [r7, #52]	; 0x34
 8006942:	f000 be76 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	2b10      	cmp	r3, #16
 800694a:	d104      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800694c:	f7fe f97e 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8006950:	6378      	str	r0, [r7, #52]	; 0x34
 8006952:	f000 be6e 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006956:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006962:	d106      	bne.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	2b20      	cmp	r3, #32
 8006968:	d103      	bne.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800696a:	4b0c      	ldr	r3, [pc, #48]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800696c:	637b      	str	r3, [r7, #52]	; 0x34
 800696e:	f000 be60 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006972:	4b07      	ldr	r3, [pc, #28]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b02      	cmp	r3, #2
 800697e:	d10f      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	2b30      	cmp	r3, #48	; 0x30
 8006984:	d10c      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8006986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800698a:	637b      	str	r3, [r7, #52]	; 0x34
 800698c:	f000 be51 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006990:	46020c00 	.word	0x46020c00
 8006994:	02dc6c00 	.word	0x02dc6c00
 8006998:	08009528 	.word	0x08009528
 800699c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	637b      	str	r3, [r7, #52]	; 0x34
 80069a4:	f000 be45 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80069a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ac:	f1a2 0108 	sub.w	r1, r2, #8
 80069b0:	430b      	orrs	r3, r1
 80069b2:	d136      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80069b4:	4b9f      	ldr	r3, [pc, #636]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069be:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80069c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069c6:	f7fe fa63 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 80069ca:	6378      	str	r0, [r7, #52]	; 0x34
 80069cc:	f000 be31 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	2b40      	cmp	r3, #64	; 0x40
 80069d4:	d104      	bne.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069d6:	f7fe f939 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 80069da:	6378      	str	r0, [r7, #52]	; 0x34
 80069dc:	f000 be29 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80069e0:	4b94      	ldr	r3, [pc, #592]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ec:	d106      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	2b80      	cmp	r3, #128	; 0x80
 80069f2:	d103      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 80069f4:	4b90      	ldr	r3, [pc, #576]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069f6:	637b      	str	r3, [r7, #52]	; 0x34
 80069f8:	f000 be1b 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80069fc:	4b8d      	ldr	r3, [pc, #564]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d107      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	2bc0      	cmp	r3, #192	; 0xc0
 8006a0e:	d104      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8006a10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
 8006a16:	f000 be0c 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1e:	f000 be08 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a26:	f1a2 0110 	sub.w	r1, r2, #16
 8006a2a:	430b      	orrs	r3, r1
 8006a2c:	d139      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006a2e:	4b81      	ldr	r3, [pc, #516]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a38:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d104      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a40:	f7fe fa26 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 8006a44:	6378      	str	r0, [r7, #52]	; 0x34
 8006a46:	f000 bdf4 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a50:	d104      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a52:	f7fe f8fb 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8006a56:	6378      	str	r0, [r7, #52]	; 0x34
 8006a58:	f000 bdeb 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006a5c:	4b75      	ldr	r3, [pc, #468]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a68:	d107      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a70:	d103      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8006a72:	4b71      	ldr	r3, [pc, #452]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
 8006a76:	f000 bddc 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006a7a:	4b6e      	ldr	r3, [pc, #440]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d108      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a8e:	d104      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8006a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a94:	637b      	str	r3, [r7, #52]	; 0x34
 8006a96:	f000 bdcc 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a9e:	f000 bdc8 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa6:	f1a2 0120 	sub.w	r1, r2, #32
 8006aaa:	430b      	orrs	r3, r1
 8006aac:	d158      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006aae:	4b61      	ldr	r3, [pc, #388]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d104      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006ac0:	f7fe fa0e 	bl	8004ee0 <HAL_RCC_GetPCLK3Freq>
 8006ac4:	6378      	str	r0, [r7, #52]	; 0x34
 8006ac6:	f000 bdb4 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d104      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ad0:	f7fe f8bc 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8006ad4:	6378      	str	r0, [r7, #52]	; 0x34
 8006ad6:	f000 bdac 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006ada:	4b56      	ldr	r3, [pc, #344]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae6:	d106      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d103      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8006aee:	4b52      	ldr	r3, [pc, #328]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006af0:	637b      	str	r3, [r7, #52]	; 0x34
 8006af2:	f000 bd9e 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006af6:	4b4f      	ldr	r3, [pc, #316]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d107      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d104      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8006b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b10:	f000 bd8f 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006b14:	4b47      	ldr	r3, [pc, #284]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d11b      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d118      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b26:	4b43      	ldr	r3, [pc, #268]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006b32:	4b40      	ldr	r3, [pc, #256]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	0e1b      	lsrs	r3, r3, #24
 8006b38:	f003 030f 	and.w	r3, r3, #15
 8006b3c:	e006      	b.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8006b3e:	4b3d      	ldr	r3, [pc, #244]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b44:	041b      	lsls	r3, r3, #16
 8006b46:	0e1b      	lsrs	r3, r3, #24
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	4a3b      	ldr	r2, [pc, #236]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b52:	637b      	str	r3, [r7, #52]	; 0x34
 8006b54:	f000 bd6d 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b5c:	f000 bd69 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b64:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	d169      	bne.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006b6c:	4b31      	ldr	r3, [pc, #196]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b72:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006b76:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7e:	d104      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b80:	f7fe f864 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8006b84:	6378      	str	r0, [r7, #52]	; 0x34
 8006b86:	f000 bd54 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b90:	d108      	bne.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b92:	f107 0318 	add.w	r3, r7, #24
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff f962 	bl	8005e60 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba0:	f000 bd47 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d104      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006baa:	f7fe f957 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8006bae:	6378      	str	r0, [r7, #52]	; 0x34
 8006bb0:	f000 bd3f 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006bba:	d118      	bne.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006bbc:	4b1d      	ldr	r3, [pc, #116]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d005      	beq.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006bc8:	4b1a      	ldr	r3, [pc, #104]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	0f1b      	lsrs	r3, r3, #28
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	e006      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006bd4:	4b17      	ldr	r3, [pc, #92]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bda:	041b      	lsls	r3, r3, #16
 8006bdc:	0f1b      	lsrs	r3, r3, #28
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	4a16      	ldr	r2, [pc, #88]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bea:	f000 bd22 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006bee:	4b11      	ldr	r3, [pc, #68]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bfa:	d107      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c02:	d103      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8006c04:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006c06:	637b      	str	r3, [r7, #52]	; 0x34
 8006c08:	f000 bd13 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006c0c:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c18:	d107      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c20:	d103      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8006c22:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006c24:	637b      	str	r3, [r7, #52]	; 0x34
 8006c26:	f000 bd04 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2e:	f000 bd00 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006c32:	bf00      	nop
 8006c34:	46020c00 	.word	0x46020c00
 8006c38:	00f42400 	.word	0x00f42400
 8006c3c:	08009528 	.word	0x08009528
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c44:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	d14e      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006c4c:	4ba8      	ldr	r3, [pc, #672]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d841      	bhi.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006c5e:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c64:	08006c9d 	.word	0x08006c9d
 8006c68:	08006c79 	.word	0x08006c79
 8006c6c:	08006c8b 	.word	0x08006c8b
 8006c70:	08006ca7 	.word	0x08006ca7
 8006c74:	08006cb1 	.word	0x08006cb1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe ff89 	bl	8005b94 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c86:	f000 bcd4 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c8a:	f107 030c 	add.w	r3, r7, #12
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff fa4c 	bl	800612c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c98:	f000 bccb 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006c9c:	f7fe f8de 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8006ca0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006ca2:	f000 bcc6 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006ca6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006caa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cac:	f000 bcc1 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cb0:	4b8f      	ldr	r3, [pc, #572]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8006cbc:	4b8c      	ldr	r3, [pc, #560]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	0e1b      	lsrs	r3, r3, #24
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	e006      	b.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006cc8:	4b89      	ldr	r3, [pc, #548]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cce:	041b      	lsls	r3, r3, #16
 8006cd0:	0e1b      	lsrs	r3, r3, #24
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	4a87      	ldr	r2, [pc, #540]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cde:	f000 bca8 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ce6:	f000 bca4 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cee:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006cf2:	430b      	orrs	r3, r1
 8006cf4:	d15d      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006cf6:	4b7e      	ldr	r3, [pc, #504]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cfc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006d00:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d08:	d036      	beq.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d10:	d84b      	bhi.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d18:	d029      	beq.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d20:	d843      	bhi.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d28:	d013      	beq.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d30:	d83b      	bhi.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d015      	beq.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3e:	d134      	bne.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fe ff25 	bl	8005b94 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d4e:	f000 bc70 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d52:	f107 030c 	add.w	r3, r7, #12
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff f9e8 	bl	800612c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d60:	f000 bc67 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006d64:	f7fe f87a 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8006d68:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006d6a:	f000 bc62 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d6e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006d72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d74:	f000 bc5d 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d78:	4b5d      	ldr	r3, [pc, #372]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006d84:	4b5a      	ldr	r3, [pc, #360]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	0e1b      	lsrs	r3, r3, #24
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	e006      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8006d90:	4b57      	ldr	r3, [pc, #348]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006d92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d96:	041b      	lsls	r3, r3, #16
 8006d98:	0e1b      	lsrs	r3, r3, #24
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	4a55      	ldr	r2, [pc, #340]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006da6:	f000 bc44 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dae:	f000 bc40 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db6:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	d14a      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006dbe:	4b4c      	ldr	r3, [pc, #304]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dc8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d104      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006dd0:	f7fe f85e 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 8006dd4:	6378      	str	r0, [r7, #52]	; 0x34
 8006dd6:	f000 bc2c 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de0:	d104      	bne.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006de2:	f7fd ff33 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8006de6:	6378      	str	r0, [r7, #52]	; 0x34
 8006de8:	f000 bc23 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006dec:	4b40      	ldr	r3, [pc, #256]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df8:	d107      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e00:	d103      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8006e02:	4b3d      	ldr	r3, [pc, #244]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006e04:	637b      	str	r3, [r7, #52]	; 0x34
 8006e06:	f000 bc14 	b.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006e0a:	4b39      	ldr	r3, [pc, #228]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d11b      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e1c:	d117      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e1e:	4b34      	ldr	r3, [pc, #208]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d005      	beq.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8006e2a:	4b31      	ldr	r3, [pc, #196]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	0e1b      	lsrs	r3, r3, #24
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	e006      	b.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006e36:	4b2e      	ldr	r3, [pc, #184]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e3c:	041b      	lsls	r3, r3, #16
 8006e3e:	0e1b      	lsrs	r3, r3, #24
 8006e40:	f003 030f 	and.w	r3, r3, #15
 8006e44:	4a2b      	ldr	r2, [pc, #172]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e4c:	e3f1      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	637b      	str	r3, [r7, #52]	; 0x34
 8006e52:	e3ee      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e58:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	d14d      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006e60:	4b23      	ldr	r3, [pc, #140]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e6a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d103      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e72:	f7fe f80d 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 8006e76:	6378      	str	r0, [r7, #52]	; 0x34
 8006e78:	e3db      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e80:	d103      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e82:	f7fd fee3 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8006e86:	6378      	str	r0, [r7, #52]	; 0x34
 8006e88:	e3d3      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006e8a:	4b19      	ldr	r3, [pc, #100]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e96:	d106      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e9e:	d102      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8006ea0:	4b15      	ldr	r3, [pc, #84]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea4:	e3c5      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006ea6:	4b12      	ldr	r3, [pc, #72]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b20      	cmp	r3, #32
 8006eb0:	d11b      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006eb8:	d117      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006eba:	4b0d      	ldr	r3, [pc, #52]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d005      	beq.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	0e1b      	lsrs	r3, r3, #24
 8006ecc:	f003 030f 	and.w	r3, r3, #15
 8006ed0:	e006      	b.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006ed2:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ed8:	041b      	lsls	r3, r3, #16
 8006eda:	0e1b      	lsrs	r3, r3, #24
 8006edc:	f003 030f 	and.w	r3, r3, #15
 8006ee0:	4a04      	ldr	r2, [pc, #16]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee8:	e3a3      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	637b      	str	r3, [r7, #52]	; 0x34
 8006eee:	e3a0      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006ef0:	46020c00 	.word	0x46020c00
 8006ef4:	08009528 	.word	0x08009528
 8006ef8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f00:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006f04:	430b      	orrs	r3, r1
 8006f06:	d148      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006f08:	4b9d      	ldr	r3, [pc, #628]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f12:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f16:	2bc0      	cmp	r3, #192	; 0xc0
 8006f18:	d024      	beq.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	2bc0      	cmp	r3, #192	; 0xc0
 8006f1e:	d839      	bhi.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	2b80      	cmp	r3, #128	; 0x80
 8006f24:	d00d      	beq.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	2b80      	cmp	r3, #128	; 0x80
 8006f2a:	d833      	bhi.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	2b40      	cmp	r3, #64	; 0x40
 8006f36:	d011      	beq.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006f38:	e02c      	b.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006f3a:	f7fd ffd1 	bl	8004ee0 <HAL_RCC_GetPCLK3Freq>
 8006f3e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f40:	e377      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f42:	4b8f      	ldr	r3, [pc, #572]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4e:	d102      	bne.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8006f50:	4b8c      	ldr	r3, [pc, #560]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006f52:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f54:	e36d      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f5a:	e36a      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006f5c:	f7fd fe76 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8006f60:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f62:	e366      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006f64:	4b86      	ldr	r3, [pc, #536]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8006f70:	4b83      	ldr	r3, [pc, #524]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	0f1b      	lsrs	r3, r3, #28
 8006f76:	f003 030f 	and.w	r3, r3, #15
 8006f7a:	e006      	b.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8006f7c:	4b80      	ldr	r3, [pc, #512]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f82:	041b      	lsls	r3, r3, #16
 8006f84:	0f1b      	lsrs	r3, r3, #28
 8006f86:	f003 030f 	and.w	r3, r3, #15
 8006f8a:	4a7f      	ldr	r2, [pc, #508]	; (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f92:	e34e      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f98:	e34b      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f9e:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8006fa2:	430b      	orrs	r3, r1
 8006fa4:	d147      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006fa6:	4b76      	ldr	r3, [pc, #472]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006fb0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d103      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006fb8:	f7fd ff6a 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 8006fbc:	6378      	str	r0, [r7, #52]	; 0x34
 8006fbe:	e338      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fc6:	d103      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006fc8:	f7fd fe40 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8006fcc:	6378      	str	r0, [r7, #52]	; 0x34
 8006fce:	e330      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006fd0:	4b6b      	ldr	r3, [pc, #428]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fdc:	d106      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe4:	d102      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8006fe6:	4b67      	ldr	r3, [pc, #412]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fea:	e322      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006fec:	4b64      	ldr	r3, [pc, #400]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d11b      	bne.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ffe:	d117      	bne.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007000:	4b5f      	ldr	r3, [pc, #380]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800700c:	4b5c      	ldr	r3, [pc, #368]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	0e1b      	lsrs	r3, r3, #24
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	e006      	b.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8007018:	4b59      	ldr	r3, [pc, #356]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800701a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800701e:	041b      	lsls	r3, r3, #16
 8007020:	0e1b      	lsrs	r3, r3, #24
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	4a58      	ldr	r2, [pc, #352]	; (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800702c:	637b      	str	r3, [r7, #52]	; 0x34
 800702e:	e300      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	637b      	str	r3, [r7, #52]	; 0x34
 8007034:	e2fd      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800703a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800703e:	430b      	orrs	r3, r1
 8007040:	d15b      	bne.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007042:	4b4f      	ldr	r3, [pc, #316]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800704c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	2b00      	cmp	r3, #0
 8007052:	d117      	bne.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007054:	4b4a      	ldr	r3, [pc, #296]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8007060:	4b47      	ldr	r3, [pc, #284]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	0e1b      	lsrs	r3, r3, #24
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	e006      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 800706c:	4b44      	ldr	r3, [pc, #272]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800706e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007072:	041b      	lsls	r3, r3, #16
 8007074:	0e1b      	lsrs	r3, r3, #24
 8007076:	f003 030f 	and.w	r3, r3, #15
 800707a:	4a43      	ldr	r2, [pc, #268]	; (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800707c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007080:	637b      	str	r3, [r7, #52]	; 0x34
 8007082:	e2d6      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007084:	4b3e      	ldr	r3, [pc, #248]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800708a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800708e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007092:	d112      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800709a:	d10e      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800709c:	4b38      	ldr	r3, [pc, #224]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800709e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070aa:	d102      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 80070ac:	23fa      	movs	r3, #250	; 0xfa
 80070ae:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070b0:	e2bf      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80070b2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80070b6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070b8:	e2bb      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80070ba:	4b31      	ldr	r3, [pc, #196]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c6:	d106      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ce:	d102      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 80070d0:	4b2c      	ldr	r3, [pc, #176]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80070d2:	637b      	str	r3, [r7, #52]	; 0x34
 80070d4:	e2ad      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80070d6:	4b2a      	ldr	r3, [pc, #168]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80070d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d107      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 80070e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070ea:	d103      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 80070ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070f0:	637b      	str	r3, [r7, #52]	; 0x34
 80070f2:	e29e      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	637b      	str	r3, [r7, #52]	; 0x34
 80070f8:	e29b      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80070fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070fe:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007102:	430b      	orrs	r3, r1
 8007104:	d162      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007106:	4b1e      	ldr	r3, [pc, #120]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800710c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007110:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	2b00      	cmp	r3, #0
 8007116:	d117      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007118:	4b19      	ldr	r3, [pc, #100]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d005      	beq.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007124:	4b16      	ldr	r3, [pc, #88]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	0e1b      	lsrs	r3, r3, #24
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	e006      	b.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007130:	4b13      	ldr	r3, [pc, #76]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007136:	041b      	lsls	r3, r3, #16
 8007138:	0e1b      	lsrs	r3, r3, #24
 800713a:	f003 030f 	and.w	r3, r3, #15
 800713e:	4a12      	ldr	r2, [pc, #72]	; (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007144:	637b      	str	r3, [r7, #52]	; 0x34
 8007146:	e274      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007148:	4b0d      	ldr	r3, [pc, #52]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800714a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800714e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007156:	d119      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800715e:	d115      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007160:	4b07      	ldr	r3, [pc, #28]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800716a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800716e:	d102      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8007170:	23fa      	movs	r3, #250	; 0xfa
 8007172:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007174:	e25d      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007176:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800717a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800717c:	e259      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800717e:	bf00      	nop
 8007180:	46020c00 	.word	0x46020c00
 8007184:	00f42400 	.word	0x00f42400
 8007188:	08009528 	.word	0x08009528
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800718c:	4b9d      	ldr	r3, [pc, #628]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007198:	d106      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071a0:	d102      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 80071a2:	4b99      	ldr	r3, [pc, #612]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80071a4:	637b      	str	r3, [r7, #52]	; 0x34
 80071a6:	e244      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80071a8:	4b96      	ldr	r3, [pc, #600]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80071aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d107      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071bc:	d103      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 80071be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071c2:	637b      	str	r3, [r7, #52]	; 0x34
 80071c4:	e235      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ca:	e232      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80071cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80071d4:	430b      	orrs	r3, r1
 80071d6:	d147      	bne.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80071d8:	4b8a      	ldr	r3, [pc, #552]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80071da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80071e2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d103      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80071ea:	f7fd fe51 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 80071ee:	6378      	str	r0, [r7, #52]	; 0x34
 80071f0:	e21f      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80071f2:	4b84      	ldr	r3, [pc, #528]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80071f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007200:	d112      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007208:	d10e      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800720a:	4b7e      	ldr	r3, [pc, #504]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800720c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007214:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007218:	d102      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800721a:	23fa      	movs	r3, #250	; 0xfa
 800721c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800721e:	e208      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007220:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007226:	e204      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007228:	4b76      	ldr	r3, [pc, #472]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007234:	d106      	bne.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800723c:	d102      	bne.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800723e:	4b72      	ldr	r3, [pc, #456]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007240:	637b      	str	r3, [r7, #52]	; 0x34
 8007242:	e1f6      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007244:	4b6f      	ldr	r3, [pc, #444]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b02      	cmp	r3, #2
 8007250:	d107      	bne.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007258:	d103      	bne.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800725a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800725e:	637b      	str	r3, [r7, #52]	; 0x34
 8007260:	e1e7      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
 8007266:	e1e4      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800726c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007270:	430b      	orrs	r3, r1
 8007272:	d12d      	bne.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007274:	4b63      	ldr	r3, [pc, #396]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800727a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800727e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007280:	4b60      	ldr	r3, [pc, #384]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800728c:	d105      	bne.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007290:	2b00      	cmp	r3, #0
 8007292:	d102      	bne.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8007294:	4b5c      	ldr	r3, [pc, #368]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007296:	637b      	str	r3, [r7, #52]	; 0x34
 8007298:	e1cb      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072a0:	d107      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fe fc74 	bl	8005b94 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80072ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ae:	637b      	str	r3, [r7, #52]	; 0x34
 80072b0:	e1bf      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072b8:	d107      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072ba:	f107 0318 	add.w	r3, r7, #24
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fe fdce 	bl	8005e60 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	637b      	str	r3, [r7, #52]	; 0x34
 80072c8:	e1b3      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	637b      	str	r3, [r7, #52]	; 0x34
 80072ce:	e1b0      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80072d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80072d8:	430b      	orrs	r3, r1
 80072da:	d14d      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80072dc:	4b49      	ldr	r3, [pc, #292]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80072de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80072e6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80072e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072ee:	d028      	beq.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80072f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072f6:	d83c      	bhi.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80072f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072fe:	d013      	beq.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007306:	d834      	bhi.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	2b00      	cmp	r3, #0
 800730c:	d004      	beq.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007314:	d004      	beq.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8007316:	e02c      	b.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007318:	f7fd fdce 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 800731c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800731e:	e188      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007320:	f7fd fc94 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8007324:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007326:	e184      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007328:	4b36      	ldr	r3, [pc, #216]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007334:	d102      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8007336:	4b34      	ldr	r3, [pc, #208]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007338:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800733a:	e17a      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007340:	e177      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007342:	4b30      	ldr	r3, [pc, #192]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800734e:	4b2d      	ldr	r3, [pc, #180]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	0e1b      	lsrs	r3, r3, #24
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	e006      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800735a:	4b2a      	ldr	r3, [pc, #168]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800735c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007360:	041b      	lsls	r3, r3, #16
 8007362:	0e1b      	lsrs	r3, r3, #24
 8007364:	f003 030f 	and.w	r3, r3, #15
 8007368:	4a28      	ldr	r2, [pc, #160]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800736a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800736e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007370:	e15f      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007376:	e15c      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800737c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8007380:	430b      	orrs	r3, r1
 8007382:	d154      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007384:	4b1f      	ldr	r3, [pc, #124]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800738a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800738e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007396:	d028      	beq.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800739e:	d843      	bhi.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073a6:	d013      	beq.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073ae:	d83b      	bhi.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d004      	beq.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073bc:	d004      	beq.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80073be:	e033      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80073c0:	f7fd fd66 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 80073c4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80073c6:	e134      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80073c8:	f7fd fc40 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 80073cc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80073ce:	e130      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073d0:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073dc:	d102      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80073de:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073e2:	e126      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073e8:	e123      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073ea:	4b06      	ldr	r3, [pc, #24]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00c      	beq.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 80073f6:	4b03      	ldr	r3, [pc, #12]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	0e1b      	lsrs	r3, r3, #24
 80073fc:	f003 030f 	and.w	r3, r3, #15
 8007400:	e00d      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8007402:	bf00      	nop
 8007404:	46020c00 	.word	0x46020c00
 8007408:	00f42400 	.word	0x00f42400
 800740c:	08009528 	.word	0x08009528
 8007410:	4b8a      	ldr	r3, [pc, #552]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007416:	041b      	lsls	r3, r3, #16
 8007418:	0e1b      	lsrs	r3, r3, #24
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	4a88      	ldr	r2, [pc, #544]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8007420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007424:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007426:	e104      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800742c:	e101      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800742e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007432:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8007436:	430b      	orrs	r3, r1
 8007438:	d16e      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800743a:	4b80      	ldr	r3, [pc, #512]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800743c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007440:	f003 0318 	and.w	r3, r3, #24
 8007444:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	2b18      	cmp	r3, #24
 800744a:	d862      	bhi.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800744c:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800744e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007452:	bf00      	nop
 8007454:	080074b9 	.word	0x080074b9
 8007458:	08007513 	.word	0x08007513
 800745c:	08007513 	.word	0x08007513
 8007460:	08007513 	.word	0x08007513
 8007464:	08007513 	.word	0x08007513
 8007468:	08007513 	.word	0x08007513
 800746c:	08007513 	.word	0x08007513
 8007470:	08007513 	.word	0x08007513
 8007474:	080074c1 	.word	0x080074c1
 8007478:	08007513 	.word	0x08007513
 800747c:	08007513 	.word	0x08007513
 8007480:	08007513 	.word	0x08007513
 8007484:	08007513 	.word	0x08007513
 8007488:	08007513 	.word	0x08007513
 800748c:	08007513 	.word	0x08007513
 8007490:	08007513 	.word	0x08007513
 8007494:	080074c9 	.word	0x080074c9
 8007498:	08007513 	.word	0x08007513
 800749c:	08007513 	.word	0x08007513
 80074a0:	08007513 	.word	0x08007513
 80074a4:	08007513 	.word	0x08007513
 80074a8:	08007513 	.word	0x08007513
 80074ac:	08007513 	.word	0x08007513
 80074b0:	08007513 	.word	0x08007513
 80074b4:	080074e3 	.word	0x080074e3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80074b8:	f7fd fd12 	bl	8004ee0 <HAL_RCC_GetPCLK3Freq>
 80074bc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80074be:	e0b8      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80074c0:	f7fd fbc4 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 80074c4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80074c6:	e0b4      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074c8:	4b5c      	ldr	r3, [pc, #368]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d4:	d102      	bne.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 80074d6:	4b5b      	ldr	r3, [pc, #364]	; (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074da:	e0aa      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074e0:	e0a7      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074e2:	4b56      	ldr	r3, [pc, #344]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d005      	beq.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80074ee:	4b53      	ldr	r3, [pc, #332]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	0e1b      	lsrs	r3, r3, #24
 80074f4:	f003 030f 	and.w	r3, r3, #15
 80074f8:	e006      	b.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80074fa:	4b50      	ldr	r3, [pc, #320]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80074fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007500:	041b      	lsls	r3, r3, #16
 8007502:	0e1b      	lsrs	r3, r3, #24
 8007504:	f003 030f 	and.w	r3, r3, #15
 8007508:	4a4d      	ldr	r2, [pc, #308]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800750a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800750e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007510:	e08f      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007516:	e08c      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800751c:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8007520:	430b      	orrs	r3, r1
 8007522:	d14c      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007524:	4b45      	ldr	r3, [pc, #276]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007526:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800752a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800752e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007536:	d013      	beq.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800753e:	d83b      	bhi.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007546:	d013      	beq.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8007548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800754e:	d833      	bhi.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	2b00      	cmp	r3, #0
 8007554:	d014      	beq.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800755c:	d014      	beq.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800755e:	e02b      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007560:	f107 0318 	add.w	r3, r7, #24
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe fc7b 	bl	8005e60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800756e:	e060      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe fb0d 	bl	8005b94 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800757e:	e058      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007580:	f7fd fb64 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8007584:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007586:	e054      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007588:	4b2c      	ldr	r3, [pc, #176]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8007594:	4b29      	ldr	r3, [pc, #164]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	0e1b      	lsrs	r3, r3, #24
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	e006      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80075a0:	4b26      	ldr	r3, [pc, #152]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80075a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075a6:	041b      	lsls	r3, r3, #16
 80075a8:	0e1b      	lsrs	r3, r3, #24
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	4a24      	ldr	r2, [pc, #144]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80075b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075b6:	e03c      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075bc:	e039      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80075be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c2:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80075c6:	430b      	orrs	r3, r1
 80075c8:	d131      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80075ca:	4b1c      	ldr	r3, [pc, #112]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80075cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80075d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075d4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80075d6:	4b19      	ldr	r3, [pc, #100]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80075d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d106      	bne.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d103      	bne.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 80075ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ee:	637b      	str	r3, [r7, #52]	; 0x34
 80075f0:	e01f      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80075f2:	4b12      	ldr	r3, [pc, #72]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80075f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007600:	d112      	bne.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007608:	d10e      	bne.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800760a:	4b0c      	ldr	r3, [pc, #48]	; (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800760c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007618:	d102      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800761a:	23fa      	movs	r3, #250	; 0xfa
 800761c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800761e:	e008      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007620:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007624:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007626:	e004      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	637b      	str	r3, [r7, #52]	; 0x34
 800762c:	e001      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800762e:	2300      	movs	r3, #0
 8007630:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8007632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007634:	4618      	mov	r0, r3
 8007636:	3738      	adds	r7, #56	; 0x38
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	46020c00 	.word	0x46020c00
 8007640:	08009528 	.word	0x08009528
 8007644:	00f42400 	.word	0x00f42400

08007648 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007650:	4b47      	ldr	r3, [pc, #284]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a46      	ldr	r2, [pc, #280]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 8007656:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800765a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800765c:	f7fa f9b4 	bl	80019c8 <HAL_GetTick>
 8007660:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007662:	e008      	b.n	8007676 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007664:	f7fa f9b0 	bl	80019c8 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	2b02      	cmp	r3, #2
 8007670:	d901      	bls.n	8007676 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e077      	b.n	8007766 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007676:	4b3e      	ldr	r3, [pc, #248]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1f0      	bne.n	8007664 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007682:	4b3b      	ldr	r3, [pc, #236]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800768a:	f023 0303 	bic.w	r3, r3, #3
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6811      	ldr	r1, [r2, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	6852      	ldr	r2, [r2, #4]
 8007696:	3a01      	subs	r2, #1
 8007698:	0212      	lsls	r2, r2, #8
 800769a:	430a      	orrs	r2, r1
 800769c:	4934      	ldr	r1, [pc, #208]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	62cb      	str	r3, [r1, #44]	; 0x2c
 80076a2:	4b33      	ldr	r3, [pc, #204]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 80076a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076a6:	4b33      	ldr	r3, [pc, #204]	; (8007774 <RCCEx_PLL2_Config+0x12c>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6892      	ldr	r2, [r2, #8]
 80076ae:	3a01      	subs	r2, #1
 80076b0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	68d2      	ldr	r2, [r2, #12]
 80076b8:	3a01      	subs	r2, #1
 80076ba:	0252      	lsls	r2, r2, #9
 80076bc:	b292      	uxth	r2, r2
 80076be:	4311      	orrs	r1, r2
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	6912      	ldr	r2, [r2, #16]
 80076c4:	3a01      	subs	r2, #1
 80076c6:	0412      	lsls	r2, r2, #16
 80076c8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80076cc:	4311      	orrs	r1, r2
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	6952      	ldr	r2, [r2, #20]
 80076d2:	3a01      	subs	r2, #1
 80076d4:	0612      	lsls	r2, r2, #24
 80076d6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80076da:	430a      	orrs	r2, r1
 80076dc:	4924      	ldr	r1, [pc, #144]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80076e2:	4b23      	ldr	r3, [pc, #140]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	f023 020c 	bic.w	r2, r3, #12
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	4920      	ldr	r1, [pc, #128]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80076f4:	4b1e      	ldr	r3, [pc, #120]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 80076f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a1b      	ldr	r3, [r3, #32]
 80076fc:	491c      	ldr	r1, [pc, #112]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007702:	4b1b      	ldr	r3, [pc, #108]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	4a1a      	ldr	r2, [pc, #104]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 8007708:	f023 0310 	bic.w	r3, r3, #16
 800770c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800770e:	4b18      	ldr	r3, [pc, #96]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007716:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	69d2      	ldr	r2, [r2, #28]
 800771e:	00d2      	lsls	r2, r2, #3
 8007720:	4913      	ldr	r1, [pc, #76]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 8007722:	4313      	orrs	r3, r2
 8007724:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007726:	4b12      	ldr	r3, [pc, #72]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	4a11      	ldr	r2, [pc, #68]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 800772c:	f043 0310 	orr.w	r3, r3, #16
 8007730:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007732:	4b0f      	ldr	r3, [pc, #60]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a0e      	ldr	r2, [pc, #56]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 8007738:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800773c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800773e:	f7fa f943 	bl	80019c8 <HAL_GetTick>
 8007742:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007744:	e008      	b.n	8007758 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007746:	f7fa f93f 	bl	80019c8 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d901      	bls.n	8007758 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e006      	b.n	8007766 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007758:	4b05      	ldr	r3, [pc, #20]	; (8007770 <RCCEx_PLL2_Config+0x128>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0f0      	beq.n	8007746 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007764:	2300      	movs	r3, #0

}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	46020c00 	.word	0x46020c00
 8007774:	80800000 	.word	0x80800000

08007778 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007780:	4b47      	ldr	r3, [pc, #284]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a46      	ldr	r2, [pc, #280]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 8007786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800778a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800778c:	f7fa f91c 	bl	80019c8 <HAL_GetTick>
 8007790:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007792:	e008      	b.n	80077a6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007794:	f7fa f918 	bl	80019c8 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d901      	bls.n	80077a6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e077      	b.n	8007896 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077a6:	4b3e      	ldr	r3, [pc, #248]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1f0      	bne.n	8007794 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80077b2:	4b3b      	ldr	r3, [pc, #236]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 80077b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80077ba:	f023 0303 	bic.w	r3, r3, #3
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	6811      	ldr	r1, [r2, #0]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6852      	ldr	r2, [r2, #4]
 80077c6:	3a01      	subs	r2, #1
 80077c8:	0212      	lsls	r2, r2, #8
 80077ca:	430a      	orrs	r2, r1
 80077cc:	4934      	ldr	r1, [pc, #208]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	630b      	str	r3, [r1, #48]	; 0x30
 80077d2:	4b33      	ldr	r3, [pc, #204]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 80077d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077d6:	4b33      	ldr	r3, [pc, #204]	; (80078a4 <RCCEx_PLL3_Config+0x12c>)
 80077d8:	4013      	ands	r3, r2
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	6892      	ldr	r2, [r2, #8]
 80077de:	3a01      	subs	r2, #1
 80077e0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	68d2      	ldr	r2, [r2, #12]
 80077e8:	3a01      	subs	r2, #1
 80077ea:	0252      	lsls	r2, r2, #9
 80077ec:	b292      	uxth	r2, r2
 80077ee:	4311      	orrs	r1, r2
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	6912      	ldr	r2, [r2, #16]
 80077f4:	3a01      	subs	r2, #1
 80077f6:	0412      	lsls	r2, r2, #16
 80077f8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80077fc:	4311      	orrs	r1, r2
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	6952      	ldr	r2, [r2, #20]
 8007802:	3a01      	subs	r2, #1
 8007804:	0612      	lsls	r2, r2, #24
 8007806:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800780a:	430a      	orrs	r2, r1
 800780c:	4924      	ldr	r1, [pc, #144]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 800780e:	4313      	orrs	r3, r2
 8007810:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007812:	4b23      	ldr	r3, [pc, #140]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	f023 020c 	bic.w	r2, r3, #12
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	4920      	ldr	r1, [pc, #128]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 8007820:	4313      	orrs	r3, r2
 8007822:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007824:	4b1e      	ldr	r3, [pc, #120]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 8007826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	491c      	ldr	r1, [pc, #112]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 800782e:	4313      	orrs	r3, r2
 8007830:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007832:	4b1b      	ldr	r3, [pc, #108]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 8007834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007836:	4a1a      	ldr	r2, [pc, #104]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 8007838:	f023 0310 	bic.w	r3, r3, #16
 800783c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800783e:	4b18      	ldr	r3, [pc, #96]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 8007840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007846:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	69d2      	ldr	r2, [r2, #28]
 800784e:	00d2      	lsls	r2, r2, #3
 8007850:	4913      	ldr	r1, [pc, #76]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 8007852:	4313      	orrs	r3, r2
 8007854:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007856:	4b12      	ldr	r3, [pc, #72]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 8007858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785a:	4a11      	ldr	r2, [pc, #68]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 800785c:	f043 0310 	orr.w	r3, r3, #16
 8007860:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007862:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a0e      	ldr	r2, [pc, #56]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 8007868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800786c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800786e:	f7fa f8ab 	bl	80019c8 <HAL_GetTick>
 8007872:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007874:	e008      	b.n	8007888 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007876:	f7fa f8a7 	bl	80019c8 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	2b02      	cmp	r3, #2
 8007882:	d901      	bls.n	8007888 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e006      	b.n	8007896 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007888:	4b05      	ldr	r3, [pc, #20]	; (80078a0 <RCCEx_PLL3_Config+0x128>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d0f0      	beq.n	8007876 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	46020c00 	.word	0x46020c00
 80078a4:	80800000 	.word	0x80800000

080078a8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e03e      	b.n	800793c <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f7f9 ff60 	bl	8001798 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3308      	adds	r3, #8
 80078e0:	4619      	mov	r1, r3
 80078e2:	4610      	mov	r0, r2
 80078e4:	f000 fcda 	bl	800829c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	461a      	mov	r2, r3
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	f000 fda2 	bl	800843c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6858      	ldr	r0, [r3, #4]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	6879      	ldr	r1, [r7, #4]
 8007906:	f000 fdeb 	bl	80084e0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	6892      	ldr	r2, [r2, #8]
 8007912:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	6892      	ldr	r2, [r2, #8]
 800791e:	f041 0101 	orr.w	r1, r1, #1
 8007922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007926:	4b07      	ldr	r3, [pc, #28]	; (8007944 <HAL_SRAM_Init+0x9c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a06      	ldr	r2, [pc, #24]	; (8007944 <HAL_SRAM_Init+0x9c>)
 800792c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007930:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	420d0400 	.word	0x420d0400

08007948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e042      	b.n	80079e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007960:	2b00      	cmp	r3, #0
 8007962:	d106      	bne.n	8007972 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7f9 fdc9 	bl	8001504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2224      	movs	r2, #36	; 0x24
 8007976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 0201 	bic.w	r2, r2, #1
 8007988:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f82c 	bl	80079e8 <UART_SetConfig>
 8007990:	4603      	mov	r3, r0
 8007992:	2b01      	cmp	r3, #1
 8007994:	d101      	bne.n	800799a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e022      	b.n	80079e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f9c2 	bl	8007d2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0201 	orr.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fa49 	bl	8007e70 <UART_CheckIdleState>
 80079de:	4603      	mov	r3, r0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079ec:	b094      	sub	sp, #80	; 0x50
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	4b7e      	ldr	r3, [pc, #504]	; (8007bf8 <UART_SetConfig+0x210>)
 80079fe:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4977      	ldr	r1, [pc, #476]	; (8007bfc <UART_SetConfig+0x214>)
 8007a20:	4019      	ands	r1, r3
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a38:	68d9      	ldr	r1, [r3, #12]
 8007a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	ea40 0301 	orr.w	r3, r0, r1
 8007a42:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4b6a      	ldr	r3, [pc, #424]	; (8007bf8 <UART_SetConfig+0x210>)
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d009      	beq.n	8007a68 <UART_SetConfig+0x80>
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	4b69      	ldr	r3, [pc, #420]	; (8007c00 <UART_SetConfig+0x218>)
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d004      	beq.n	8007a68 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a60:	6a1a      	ldr	r2, [r3, #32]
 8007a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a64:	4313      	orrs	r3, r2
 8007a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007a72:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a7c:	430b      	orrs	r3, r1
 8007a7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a86:	f023 000f 	bic.w	r0, r3, #15
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	ea40 0301 	orr.w	r3, r0, r1
 8007a96:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	4b59      	ldr	r3, [pc, #356]	; (8007c04 <UART_SetConfig+0x21c>)
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d102      	bne.n	8007aa8 <UART_SetConfig+0xc0>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aa6:	e029      	b.n	8007afc <UART_SetConfig+0x114>
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	4b56      	ldr	r3, [pc, #344]	; (8007c08 <UART_SetConfig+0x220>)
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d102      	bne.n	8007ab8 <UART_SetConfig+0xd0>
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ab6:	e021      	b.n	8007afc <UART_SetConfig+0x114>
 8007ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	4b53      	ldr	r3, [pc, #332]	; (8007c0c <UART_SetConfig+0x224>)
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d102      	bne.n	8007ac8 <UART_SetConfig+0xe0>
 8007ac2:	2304      	movs	r3, #4
 8007ac4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ac6:	e019      	b.n	8007afc <UART_SetConfig+0x114>
 8007ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	4b50      	ldr	r3, [pc, #320]	; (8007c10 <UART_SetConfig+0x228>)
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d102      	bne.n	8007ad8 <UART_SetConfig+0xf0>
 8007ad2:	2308      	movs	r3, #8
 8007ad4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ad6:	e011      	b.n	8007afc <UART_SetConfig+0x114>
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	4b4d      	ldr	r3, [pc, #308]	; (8007c14 <UART_SetConfig+0x22c>)
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d102      	bne.n	8007ae8 <UART_SetConfig+0x100>
 8007ae2:	2310      	movs	r3, #16
 8007ae4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae6:	e009      	b.n	8007afc <UART_SetConfig+0x114>
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	4b42      	ldr	r3, [pc, #264]	; (8007bf8 <UART_SetConfig+0x210>)
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d102      	bne.n	8007af8 <UART_SetConfig+0x110>
 8007af2:	2320      	movs	r3, #32
 8007af4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007af6:	e001      	b.n	8007afc <UART_SetConfig+0x114>
 8007af8:	2300      	movs	r3, #0
 8007afa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	4b3d      	ldr	r3, [pc, #244]	; (8007bf8 <UART_SetConfig+0x210>)
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d005      	beq.n	8007b12 <UART_SetConfig+0x12a>
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	4b3d      	ldr	r3, [pc, #244]	; (8007c00 <UART_SetConfig+0x218>)
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	f040 8085 	bne.w	8007c1c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b14:	2200      	movs	r2, #0
 8007b16:	623b      	str	r3, [r7, #32]
 8007b18:	627a      	str	r2, [r7, #36]	; 0x24
 8007b1a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007b1e:	f7fe fc6b 	bl	80063f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b22:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 80e8 	beq.w	8007cfc <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	4a39      	ldr	r2, [pc, #228]	; (8007c18 <UART_SetConfig+0x230>)
 8007b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b36:	461a      	mov	r2, r3
 8007b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b3e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	4613      	mov	r3, r2
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	4413      	add	r3, r2
 8007b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d305      	bcc.n	8007b5c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d903      	bls.n	8007b64 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007b62:	e048      	b.n	8007bf6 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b66:	2200      	movs	r2, #0
 8007b68:	61bb      	str	r3, [r7, #24]
 8007b6a:	61fa      	str	r2, [r7, #28]
 8007b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	4a29      	ldr	r2, [pc, #164]	; (8007c18 <UART_SetConfig+0x230>)
 8007b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	2200      	movs	r2, #0
 8007b7a:	613b      	str	r3, [r7, #16]
 8007b7c:	617a      	str	r2, [r7, #20]
 8007b7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007b82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b86:	f7f8 fb75 	bl	8000274 <__aeabi_uldivmod>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4610      	mov	r0, r2
 8007b90:	4619      	mov	r1, r3
 8007b92:	f04f 0200 	mov.w	r2, #0
 8007b96:	f04f 0300 	mov.w	r3, #0
 8007b9a:	020b      	lsls	r3, r1, #8
 8007b9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ba0:	0202      	lsls	r2, r0, #8
 8007ba2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ba4:	6849      	ldr	r1, [r1, #4]
 8007ba6:	0849      	lsrs	r1, r1, #1
 8007ba8:	2000      	movs	r0, #0
 8007baa:	460c      	mov	r4, r1
 8007bac:	4605      	mov	r5, r0
 8007bae:	eb12 0804 	adds.w	r8, r2, r4
 8007bb2:	eb43 0905 	adc.w	r9, r3, r5
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	60bb      	str	r3, [r7, #8]
 8007bbe:	60fa      	str	r2, [r7, #12]
 8007bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bc4:	4640      	mov	r0, r8
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	f7f8 fb54 	bl	8000274 <__aeabi_uldivmod>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bda:	d308      	bcc.n	8007bee <UART_SetConfig+0x206>
 8007bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007be2:	d204      	bcs.n	8007bee <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007bea:	60da      	str	r2, [r3, #12]
 8007bec:	e003      	b.n	8007bf6 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007bf4:	e082      	b.n	8007cfc <UART_SetConfig+0x314>
 8007bf6:	e081      	b.n	8007cfc <UART_SetConfig+0x314>
 8007bf8:	46002400 	.word	0x46002400
 8007bfc:	cfff69f3 	.word	0xcfff69f3
 8007c00:	56002400 	.word	0x56002400
 8007c04:	40013800 	.word	0x40013800
 8007c08:	40004400 	.word	0x40004400
 8007c0c:	40004800 	.word	0x40004800
 8007c10:	40004c00 	.word	0x40004c00
 8007c14:	40005000 	.word	0x40005000
 8007c18:	080095e8 	.word	0x080095e8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c24:	d13c      	bne.n	8007ca0 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c28:	2200      	movs	r2, #0
 8007c2a:	603b      	str	r3, [r7, #0]
 8007c2c:	607a      	str	r2, [r7, #4]
 8007c2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c32:	f7fe fbe1 	bl	80063f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c36:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d05e      	beq.n	8007cfc <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	4a39      	ldr	r2, [pc, #228]	; (8007d28 <UART_SetConfig+0x340>)
 8007c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c50:	005a      	lsls	r2, r3, #1
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	085b      	lsrs	r3, r3, #1
 8007c58:	441a      	add	r2, r3
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c62:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c66:	2b0f      	cmp	r3, #15
 8007c68:	d916      	bls.n	8007c98 <UART_SetConfig+0x2b0>
 8007c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c70:	d212      	bcs.n	8007c98 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f023 030f 	bic.w	r3, r3, #15
 8007c7a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c7e:	085b      	lsrs	r3, r3, #1
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007c94:	60da      	str	r2, [r3, #12]
 8007c96:	e031      	b.n	8007cfc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007c9e:	e02d      	b.n	8007cfc <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	469a      	mov	sl, r3
 8007ca6:	4693      	mov	fp, r2
 8007ca8:	4650      	mov	r0, sl
 8007caa:	4659      	mov	r1, fp
 8007cac:	f7fe fba4 	bl	80063f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007cb0:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d021      	beq.n	8007cfc <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	4a1a      	ldr	r2, [pc, #104]	; (8007d28 <UART_SetConfig+0x340>)
 8007cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	085b      	lsrs	r3, r3, #1
 8007cd0:	441a      	add	r2, r3
 8007cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cda:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cde:	2b0f      	cmp	r3, #15
 8007ce0:	d909      	bls.n	8007cf6 <UART_SetConfig+0x30e>
 8007ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce8:	d205      	bcs.n	8007cf6 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	60da      	str	r2, [r3, #12]
 8007cf4:	e002      	b.n	8007cfc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d06:	2201      	movs	r2, #1
 8007d08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	2200      	movs	r2, #0
 8007d10:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	2200      	movs	r2, #0
 8007d16:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007d18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3750      	adds	r7, #80	; 0x50
 8007d20:	46bd      	mov	sp, r7
 8007d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d26:	bf00      	nop
 8007d28:	080095e8 	.word	0x080095e8

08007d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00a      	beq.n	8007d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	f003 0308 	and.w	r3, r3, #8
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00a      	beq.n	8007dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc0:	f003 0310 	and.w	r3, r3, #16
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01a      	beq.n	8007e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e2a:	d10a      	bne.n	8007e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	605a      	str	r2, [r3, #4]
  }
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af02      	add	r7, sp, #8
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e80:	f7f9 fda2 	bl	80019c8 <HAL_GetTick>
 8007e84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0308 	and.w	r3, r3, #8
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d10e      	bne.n	8007eb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f82f 	bl	8007f06 <UART_WaitOnFlagUntilTimeout>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e025      	b.n	8007efe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d10e      	bne.n	8007ede <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f819 	bl	8007f06 <UART_WaitOnFlagUntilTimeout>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e00f      	b.n	8007efe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b09c      	sub	sp, #112	; 0x70
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	603b      	str	r3, [r7, #0]
 8007f12:	4613      	mov	r3, r2
 8007f14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f16:	e0a9      	b.n	800806c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1e:	f000 80a5 	beq.w	800806c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f22:	f7f9 fd51 	bl	80019c8 <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d302      	bcc.n	8007f38 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d140      	bne.n	8007fba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f4c:	667b      	str	r3, [r7, #100]	; 0x64
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f5e:	e841 2300 	strex	r3, r2, [r1]
 8007f62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e6      	bne.n	8007f38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3308      	adds	r3, #8
 8007f70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	f023 0301 	bic.w	r3, r3, #1
 8007f80:	663b      	str	r3, [r7, #96]	; 0x60
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3308      	adds	r3, #8
 8007f88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e5      	bne.n	8007f6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e069      	b.n	800808e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d051      	beq.n	800806c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fd6:	d149      	bne.n	800806c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fe0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	e853 3f00 	ldrex	r3, [r3]
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008000:	637b      	str	r3, [r7, #52]	; 0x34
 8008002:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008004:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008008:	e841 2300 	strex	r3, r2, [r1]
 800800c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e6      	bne.n	8007fe2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3308      	adds	r3, #8
 800801a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	613b      	str	r3, [r7, #16]
   return(result);
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f023 0301 	bic.w	r3, r3, #1
 800802a:	66bb      	str	r3, [r7, #104]	; 0x68
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3308      	adds	r3, #8
 8008032:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008034:	623a      	str	r2, [r7, #32]
 8008036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008038:	69f9      	ldr	r1, [r7, #28]
 800803a:	6a3a      	ldr	r2, [r7, #32]
 800803c:	e841 2300 	strex	r3, r2, [r1]
 8008040:	61bb      	str	r3, [r7, #24]
   return(result);
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e5      	bne.n	8008014 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2220      	movs	r2, #32
 800804c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2220      	movs	r2, #32
 8008054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2220      	movs	r2, #32
 800805c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e010      	b.n	800808e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	69da      	ldr	r2, [r3, #28]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	4013      	ands	r3, r2
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	429a      	cmp	r2, r3
 800807a:	bf0c      	ite	eq
 800807c:	2301      	moveq	r3, #1
 800807e:	2300      	movne	r3, #0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	461a      	mov	r2, r3
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	429a      	cmp	r2, r3
 8008088:	f43f af46 	beq.w	8007f18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3770      	adds	r7, #112	; 0x70
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008096:	b480      	push	{r7}
 8008098:	b085      	sub	sp, #20
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d101      	bne.n	80080ac <HAL_UARTEx_DisableFifoMode+0x16>
 80080a8:	2302      	movs	r3, #2
 80080aa:	e027      	b.n	80080fc <HAL_UARTEx_DisableFifoMode+0x66>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2224      	movs	r2, #36	; 0x24
 80080b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0201 	bic.w	r2, r2, #1
 80080d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008118:	2b01      	cmp	r3, #1
 800811a:	d101      	bne.n	8008120 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800811c:	2302      	movs	r3, #2
 800811e:	e02d      	b.n	800817c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2224      	movs	r2, #36	; 0x24
 800812c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0201 	bic.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	430a      	orrs	r2, r1
 800815a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f84f 	bl	8008200 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2220      	movs	r2, #32
 800816e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008198:	2302      	movs	r3, #2
 800819a:	e02d      	b.n	80081f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2224      	movs	r2, #36	; 0x24
 80081a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 0201 	bic.w	r2, r2, #1
 80081c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f811 	bl	8008200 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800820c:	2b00      	cmp	r3, #0
 800820e:	d108      	bne.n	8008222 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008220:	e031      	b.n	8008286 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008222:	2308      	movs	r3, #8
 8008224:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008226:	2308      	movs	r3, #8
 8008228:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	0e5b      	lsrs	r3, r3, #25
 8008232:	b2db      	uxtb	r3, r3
 8008234:	f003 0307 	and.w	r3, r3, #7
 8008238:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	0f5b      	lsrs	r3, r3, #29
 8008242:	b2db      	uxtb	r3, r3
 8008244:	f003 0307 	and.w	r3, r3, #7
 8008248:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	7b3a      	ldrb	r2, [r7, #12]
 800824e:	4911      	ldr	r1, [pc, #68]	; (8008294 <UARTEx_SetNbDataToProcess+0x94>)
 8008250:	5c8a      	ldrb	r2, [r1, r2]
 8008252:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008256:	7b3a      	ldrb	r2, [r7, #12]
 8008258:	490f      	ldr	r1, [pc, #60]	; (8008298 <UARTEx_SetNbDataToProcess+0x98>)
 800825a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800825c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008260:	b29a      	uxth	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	7b7a      	ldrb	r2, [r7, #13]
 800826c:	4909      	ldr	r1, [pc, #36]	; (8008294 <UARTEx_SetNbDataToProcess+0x94>)
 800826e:	5c8a      	ldrb	r2, [r1, r2]
 8008270:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008274:	7b7a      	ldrb	r2, [r7, #13]
 8008276:	4908      	ldr	r1, [pc, #32]	; (8008298 <UARTEx_SetNbDataToProcess+0x98>)
 8008278:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800827a:	fb93 f3f2 	sdiv	r3, r3, r2
 800827e:	b29a      	uxth	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008286:	bf00      	nop
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	08009600 	.word	0x08009600
 8008298:	08009608 	.word	0x08009608

0800829c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	6812      	ldr	r2, [r2, #0]
 80082b4:	f023 0101 	bic.w	r1, r3, #1
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	2b08      	cmp	r3, #8
 80082c4:	d102      	bne.n	80082cc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80082c6:	2340      	movs	r3, #64	; 0x40
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	e001      	b.n	80082d0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80082dc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80082e2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80082e8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80082ee:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80082f4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80082fa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008300:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8008306:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800830c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8008312:	4313      	orrs	r3, r2
 8008314:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	4313      	orrs	r3, r2
 800831e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	4313      	orrs	r3, r2
 8008328:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	4313      	orrs	r3, r2
 8008332:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	4313      	orrs	r3, r2
 800833c:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800833e:	4b3e      	ldr	r3, [pc, #248]	; (8008438 <FMC_NORSRAM_Init+0x19c>)
 8008340:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008348:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008350:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8008358:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008360:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	43db      	mvns	r3, r3
 8008370:	ea02 0103 	and.w	r1, r2, r3
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	4319      	orrs	r1, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800838a:	d10c      	bne.n	80083a6 <FMC_NORSRAM_Init+0x10a>
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d008      	beq.n	80083a6 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a0:	431a      	orrs	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d006      	beq.n	80083bc <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d12f      	bne.n	8008426 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	0c1b      	lsrs	r3, r3, #16
 80083cc:	041b      	lsls	r3, r3, #16
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80083d2:	431a      	orrs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d014      	beq.n	800840a <FMC_NORSRAM_Init+0x16e>
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d819      	bhi.n	8008418 <FMC_NORSRAM_Init+0x17c>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <FMC_NORSRAM_Init+0x152>
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d007      	beq.n	80083fc <FMC_NORSRAM_Init+0x160>
 80083ec:	e014      	b.n	8008418 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	621a      	str	r2, [r3, #32]
        break;
 80083fa:	e015      	b.n	8008428 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a1b      	ldr	r3, [r3, #32]
 8008400:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	621a      	str	r2, [r3, #32]
        break;
 8008408:	e00e      	b.n	8008428 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	621a      	str	r2, [r3, #32]
        break;
 8008416:	e007      	b.n	8008428 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	621a      	str	r2, [r3, #32]
        break;
 8008424:	e000      	b.n	8008428 <FMC_NORSRAM_Init+0x18c>
    }
  }
 8008426:	bf00      	nop

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	371c      	adds	r7, #28
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	0008fb7f 	.word	0x0008fb7f

0800843c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	431a      	orrs	r2, r3
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	021b      	lsls	r3, r3, #8
 8008464:	431a      	orrs	r2, r3
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	079b      	lsls	r3, r3, #30
 800846c:	431a      	orrs	r2, r3
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	041b      	lsls	r3, r3, #16
 8008474:	431a      	orrs	r2, r3
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	3b01      	subs	r3, #1
 800847c:	051b      	lsls	r3, r3, #20
 800847e:	431a      	orrs	r2, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	3b02      	subs	r3, #2
 8008486:	061b      	lsls	r3, r3, #24
 8008488:	ea42 0103 	orr.w	r1, r2, r3
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	3201      	adds	r2, #1
 8008494:	4319      	orrs	r1, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084a8:	d113      	bne.n	80084d2 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80084b2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	051b      	lsls	r3, r3, #20
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	4313      	orrs	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	431a      	orrs	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	371c      	adds	r7, #28
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
 80084ec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084f4:	d121      	bne.n	800853a <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fe:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	6819      	ldr	r1, [r3, #0]
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	011b      	lsls	r3, r3, #4
 800850c:	4319      	orrs	r1, r3
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	021b      	lsls	r3, r3, #8
 8008514:	4319      	orrs	r1, r3
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	079b      	lsls	r3, r3, #30
 800851c:	4319      	orrs	r1, r3
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	4319      	orrs	r1, r3
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	041b      	lsls	r3, r3, #16
 800852a:	430b      	orrs	r3, r1
 800852c:	ea42 0103 	orr.w	r1, r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008538:	e005      	b.n	8008546 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008554:	b480      	push	{r7}
 8008556:	b08b      	sub	sp, #44	; 0x2c
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	fa93 f3a3 	rbit	r3, r3
 800856e:	613b      	str	r3, [r7, #16]
  return result;
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800857a:	2320      	movs	r3, #32
 800857c:	e003      	b.n	8008586 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	fab3 f383 	clz	r3, r3
 8008584:	b2db      	uxtb	r3, r3
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	2103      	movs	r1, #3
 800858a:	fa01 f303 	lsl.w	r3, r1, r3
 800858e:	43db      	mvns	r3, r3
 8008590:	401a      	ands	r2, r3
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	fa93 f3a3 	rbit	r3, r3
 800859c:	61fb      	str	r3, [r7, #28]
  return result;
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80085a8:	2320      	movs	r3, #32
 80085aa:	e003      	b.n	80085b4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	fab3 f383 	clz	r3, r3
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	fa01 f303 	lsl.w	r3, r1, r3
 80085bc:	431a      	orrs	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	601a      	str	r2, [r3, #0]
}
 80085c2:	bf00      	nop
 80085c4:	372c      	adds	r7, #44	; 0x2c
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b085      	sub	sp, #20
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	43db      	mvns	r3, r3
 80085e2:	401a      	ands	r2, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	fb01 f303 	mul.w	r3, r1, r3
 80085ec:	431a      	orrs	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	605a      	str	r2, [r3, #4]
}
 80085f2:	bf00      	nop
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80085fe:	b480      	push	{r7}
 8008600:	b08b      	sub	sp, #44	; 0x2c
 8008602:	af00      	add	r7, sp, #0
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	689a      	ldr	r2, [r3, #8]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	fa93 f3a3 	rbit	r3, r3
 8008618:	613b      	str	r3, [r7, #16]
  return result;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008624:	2320      	movs	r3, #32
 8008626:	e003      	b.n	8008630 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	fab3 f383 	clz	r3, r3
 800862e:	b2db      	uxtb	r3, r3
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	2103      	movs	r1, #3
 8008634:	fa01 f303 	lsl.w	r3, r1, r3
 8008638:	43db      	mvns	r3, r3
 800863a:	401a      	ands	r2, r3
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	fa93 f3a3 	rbit	r3, r3
 8008646:	61fb      	str	r3, [r7, #28]
  return result;
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008652:	2320      	movs	r3, #32
 8008654:	e003      	b.n	800865e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	fab3 f383 	clz	r3, r3
 800865c:	b2db      	uxtb	r3, r3
 800865e:	005b      	lsls	r3, r3, #1
 8008660:	6879      	ldr	r1, [r7, #4]
 8008662:	fa01 f303 	lsl.w	r3, r1, r3
 8008666:	431a      	orrs	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800866c:	bf00      	nop
 800866e:	372c      	adds	r7, #44	; 0x2c
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008678:	b480      	push	{r7}
 800867a:	b08b      	sub	sp, #44	; 0x2c
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	68da      	ldr	r2, [r3, #12]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	fa93 f3a3 	rbit	r3, r3
 8008692:	613b      	str	r3, [r7, #16]
  return result;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800869e:	2320      	movs	r3, #32
 80086a0:	e003      	b.n	80086aa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	fab3 f383 	clz	r3, r3
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	2103      	movs	r1, #3
 80086ae:	fa01 f303 	lsl.w	r3, r1, r3
 80086b2:	43db      	mvns	r3, r3
 80086b4:	401a      	ands	r2, r3
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	fa93 f3a3 	rbit	r3, r3
 80086c0:	61fb      	str	r3, [r7, #28]
  return result;
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80086cc:	2320      	movs	r3, #32
 80086ce:	e003      	b.n	80086d8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	fab3 f383 	clz	r3, r3
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	fa01 f303 	lsl.w	r3, r1, r3
 80086e0:	431a      	orrs	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	60da      	str	r2, [r3, #12]
}
 80086e6:	bf00      	nop
 80086e8:	372c      	adds	r7, #44	; 0x2c
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b08b      	sub	sp, #44	; 0x2c
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6a1a      	ldr	r2, [r3, #32]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	fa93 f3a3 	rbit	r3, r3
 800870c:	613b      	str	r3, [r7, #16]
  return result;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008718:	2320      	movs	r3, #32
 800871a:	e003      	b.n	8008724 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	fab3 f383 	clz	r3, r3
 8008722:	b2db      	uxtb	r3, r3
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	210f      	movs	r1, #15
 8008728:	fa01 f303 	lsl.w	r3, r1, r3
 800872c:	43db      	mvns	r3, r3
 800872e:	401a      	ands	r2, r3
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	fa93 f3a3 	rbit	r3, r3
 800873a:	61fb      	str	r3, [r7, #28]
  return result;
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008746:	2320      	movs	r3, #32
 8008748:	e003      	b.n	8008752 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	fab3 f383 	clz	r3, r3
 8008750:	b2db      	uxtb	r3, r3
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	fa01 f303 	lsl.w	r3, r1, r3
 800875a:	431a      	orrs	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008760:	bf00      	nop
 8008762:	372c      	adds	r7, #44	; 0x2c
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800876c:	b480      	push	{r7}
 800876e:	b08b      	sub	sp, #44	; 0x2c
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	0a1b      	lsrs	r3, r3, #8
 8008780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	fa93 f3a3 	rbit	r3, r3
 8008788:	613b      	str	r3, [r7, #16]
  return result;
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008794:	2320      	movs	r3, #32
 8008796:	e003      	b.n	80087a0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	fab3 f383 	clz	r3, r3
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	210f      	movs	r1, #15
 80087a4:	fa01 f303 	lsl.w	r3, r1, r3
 80087a8:	43db      	mvns	r3, r3
 80087aa:	401a      	ands	r2, r3
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	0a1b      	lsrs	r3, r3, #8
 80087b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	fa93 f3a3 	rbit	r3, r3
 80087b8:	61fb      	str	r3, [r7, #28]
  return result;
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80087c4:	2320      	movs	r3, #32
 80087c6:	e003      	b.n	80087d0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	fab3 f383 	clz	r3, r3
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	fa01 f303 	lsl.w	r3, r1, r3
 80087d8:	431a      	orrs	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80087de:	bf00      	nop
 80087e0:	372c      	adds	r7, #44	; 0x2c
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b08a      	sub	sp, #40	; 0x28
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	fa93 f3a3 	rbit	r3, r3
 8008800:	617b      	str	r3, [r7, #20]
  return result;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <LL_GPIO_Init+0x26>
    return 32U;
 800880c:	2320      	movs	r3, #32
 800880e:	e003      	b.n	8008818 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	fab3 f383 	clz	r3, r3
 8008816:	b2db      	uxtb	r3, r3
 8008818:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800881a:	e050      	b.n	80088be <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	2101      	movs	r1, #1
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	fa01 f303 	lsl.w	r3, r1, r3
 8008828:	4013      	ands	r3, r2
 800882a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d042      	beq.n	80088b8 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	461a      	mov	r2, r3
 8008838:	6a39      	ldr	r1, [r7, #32]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff fe8a 	bl	8008554 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d003      	beq.n	8008850 <LL_GPIO_Init+0x66>
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	2b02      	cmp	r3, #2
 800884e:	d106      	bne.n	800885e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	461a      	mov	r2, r3
 8008856:	6a39      	ldr	r1, [r7, #32]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff fed0 	bl	80085fe <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	461a      	mov	r2, r3
 8008864:	6a39      	ldr	r1, [r7, #32]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff ff06 	bl	8008678 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d121      	bne.n	80088b8 <LL_GPIO_Init+0xce>
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	fa93 f3a3 	rbit	r3, r3
 800887e:	60bb      	str	r3, [r7, #8]
  return result;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <LL_GPIO_Init+0xa4>
    return 32U;
 800888a:	2320      	movs	r3, #32
 800888c:	e003      	b.n	8008896 <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	fab3 f383 	clz	r3, r3
 8008894:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8008896:	2b07      	cmp	r3, #7
 8008898:	d807      	bhi.n	80088aa <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	461a      	mov	r2, r3
 80088a0:	6a39      	ldr	r1, [r7, #32]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7ff ff25 	bl	80086f2 <LL_GPIO_SetAFPin_0_7>
 80088a8:	e006      	b.n	80088b8 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	461a      	mov	r2, r3
 80088b0:	6a39      	ldr	r1, [r7, #32]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff ff5a 	bl	800876c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	3301      	adds	r3, #1
 80088bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	fa22 f303 	lsr.w	r3, r2, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1a7      	bne.n	800881c <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d003      	beq.n	80088dc <LL_GPIO_Init+0xf2>
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d107      	bne.n	80088ec <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	6819      	ldr	r1, [r3, #0]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	461a      	mov	r2, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff fe71 	bl	80085ce <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3728      	adds	r7, #40	; 0x28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088f6:	b084      	sub	sp, #16
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	f107 001c 	add.w	r0, r7, #28
 8008904:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fd8f 	bl	8009438 <USB_CoreReset>
 800891a:	4603      	mov	r3, r0
 800891c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800891e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008920:	2b00      	cmp	r3, #0
 8008922:	d106      	bne.n	8008932 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008928:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	639a      	str	r2, [r3, #56]	; 0x38
 8008930:	e005      	b.n	800893e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 800893e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800894a:	b004      	add	sp, #16
 800894c:	4770      	bx	lr
	...

08008950 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008950:	b480      	push	{r7}
 8008952:	b087      	sub	sp, #28
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	4613      	mov	r3, r2
 800895c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	2b02      	cmp	r3, #2
 8008962:	d165      	bne.n	8008a30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	4a41      	ldr	r2, [pc, #260]	; (8008a6c <USB_SetTurnaroundTime+0x11c>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d906      	bls.n	800897a <USB_SetTurnaroundTime+0x2a>
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4a40      	ldr	r2, [pc, #256]	; (8008a70 <USB_SetTurnaroundTime+0x120>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d202      	bcs.n	800897a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008974:	230f      	movs	r3, #15
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	e062      	b.n	8008a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4a3c      	ldr	r2, [pc, #240]	; (8008a70 <USB_SetTurnaroundTime+0x120>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d306      	bcc.n	8008990 <USB_SetTurnaroundTime+0x40>
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	4a3b      	ldr	r2, [pc, #236]	; (8008a74 <USB_SetTurnaroundTime+0x124>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d202      	bcs.n	8008990 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800898a:	230e      	movs	r3, #14
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	e057      	b.n	8008a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	4a38      	ldr	r2, [pc, #224]	; (8008a74 <USB_SetTurnaroundTime+0x124>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d306      	bcc.n	80089a6 <USB_SetTurnaroundTime+0x56>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4a37      	ldr	r2, [pc, #220]	; (8008a78 <USB_SetTurnaroundTime+0x128>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d202      	bcs.n	80089a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80089a0:	230d      	movs	r3, #13
 80089a2:	617b      	str	r3, [r7, #20]
 80089a4:	e04c      	b.n	8008a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	4a33      	ldr	r2, [pc, #204]	; (8008a78 <USB_SetTurnaroundTime+0x128>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d306      	bcc.n	80089bc <USB_SetTurnaroundTime+0x6c>
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	4a32      	ldr	r2, [pc, #200]	; (8008a7c <USB_SetTurnaroundTime+0x12c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d802      	bhi.n	80089bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80089b6:	230c      	movs	r3, #12
 80089b8:	617b      	str	r3, [r7, #20]
 80089ba:	e041      	b.n	8008a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	4a2f      	ldr	r2, [pc, #188]	; (8008a7c <USB_SetTurnaroundTime+0x12c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d906      	bls.n	80089d2 <USB_SetTurnaroundTime+0x82>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4a2e      	ldr	r2, [pc, #184]	; (8008a80 <USB_SetTurnaroundTime+0x130>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d802      	bhi.n	80089d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80089cc:	230b      	movs	r3, #11
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	e036      	b.n	8008a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	4a2a      	ldr	r2, [pc, #168]	; (8008a80 <USB_SetTurnaroundTime+0x130>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d906      	bls.n	80089e8 <USB_SetTurnaroundTime+0x98>
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	4a29      	ldr	r2, [pc, #164]	; (8008a84 <USB_SetTurnaroundTime+0x134>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d802      	bhi.n	80089e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80089e2:	230a      	movs	r3, #10
 80089e4:	617b      	str	r3, [r7, #20]
 80089e6:	e02b      	b.n	8008a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	4a26      	ldr	r2, [pc, #152]	; (8008a84 <USB_SetTurnaroundTime+0x134>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d906      	bls.n	80089fe <USB_SetTurnaroundTime+0xae>
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	4a25      	ldr	r2, [pc, #148]	; (8008a88 <USB_SetTurnaroundTime+0x138>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d202      	bcs.n	80089fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80089f8:	2309      	movs	r3, #9
 80089fa:	617b      	str	r3, [r7, #20]
 80089fc:	e020      	b.n	8008a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	4a21      	ldr	r2, [pc, #132]	; (8008a88 <USB_SetTurnaroundTime+0x138>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d306      	bcc.n	8008a14 <USB_SetTurnaroundTime+0xc4>
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	4a20      	ldr	r2, [pc, #128]	; (8008a8c <USB_SetTurnaroundTime+0x13c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d802      	bhi.n	8008a14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008a0e:	2308      	movs	r3, #8
 8008a10:	617b      	str	r3, [r7, #20]
 8008a12:	e015      	b.n	8008a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4a1d      	ldr	r2, [pc, #116]	; (8008a8c <USB_SetTurnaroundTime+0x13c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d906      	bls.n	8008a2a <USB_SetTurnaroundTime+0xda>
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	4a1c      	ldr	r2, [pc, #112]	; (8008a90 <USB_SetTurnaroundTime+0x140>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d202      	bcs.n	8008a2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008a24:	2307      	movs	r3, #7
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	e00a      	b.n	8008a40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008a2a:	2306      	movs	r3, #6
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	e007      	b.n	8008a40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d102      	bne.n	8008a3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008a36:	2309      	movs	r3, #9
 8008a38:	617b      	str	r3, [r7, #20]
 8008a3a:	e001      	b.n	8008a40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008a3c:	2309      	movs	r3, #9
 8008a3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	029b      	lsls	r3, r3, #10
 8008a54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	371c      	adds	r7, #28
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	00d8acbf 	.word	0x00d8acbf
 8008a70:	00e4e1c0 	.word	0x00e4e1c0
 8008a74:	00f42400 	.word	0x00f42400
 8008a78:	01067380 	.word	0x01067380
 8008a7c:	011a499f 	.word	0x011a499f
 8008a80:	01312cff 	.word	0x01312cff
 8008a84:	014ca43f 	.word	0x014ca43f
 8008a88:	016e3600 	.word	0x016e3600
 8008a8c:	01a6ab1f 	.word	0x01a6ab1f
 8008a90:	01e84800 	.word	0x01e84800

08008a94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f023 0201 	bic.w	r2, r3, #1
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b084      	sub	sp, #16
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ad2:	78fb      	ldrb	r3, [r7, #3]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d115      	bne.n	8008b04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ae4:	2001      	movs	r0, #1
 8008ae6:	f7f8 ff7b 	bl	80019e0 <HAL_Delay>
      ms++;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3301      	adds	r3, #1
 8008aee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fc11 	bl	8009318 <USB_GetMode>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d01e      	beq.n	8008b3a <USB_SetCurrentMode+0x84>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b31      	cmp	r3, #49	; 0x31
 8008b00:	d9f0      	bls.n	8008ae4 <USB_SetCurrentMode+0x2e>
 8008b02:	e01a      	b.n	8008b3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b04:	78fb      	ldrb	r3, [r7, #3]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d115      	bne.n	8008b36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b16:	2001      	movs	r0, #1
 8008b18:	f7f8 ff62 	bl	80019e0 <HAL_Delay>
      ms++;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fbf8 	bl	8009318 <USB_GetMode>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d005      	beq.n	8008b3a <USB_SetCurrentMode+0x84>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b31      	cmp	r3, #49	; 0x31
 8008b32:	d9f0      	bls.n	8008b16 <USB_SetCurrentMode+0x60>
 8008b34:	e001      	b.n	8008b3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e005      	b.n	8008b46 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2b32      	cmp	r3, #50	; 0x32
 8008b3e:	d101      	bne.n	8008b44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e000      	b.n	8008b46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b50:	b084      	sub	sp, #16
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b086      	sub	sp, #24
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	613b      	str	r3, [r7, #16]
 8008b6e:	e009      	b.n	8008b84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	3340      	adds	r3, #64	; 0x40
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	3301      	adds	r3, #1
 8008b82:	613b      	str	r3, [r7, #16]
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	2b0e      	cmp	r3, #14
 8008b88:	d9f2      	bls.n	8008b70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d11c      	bne.n	8008bca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b9e:	f043 0302 	orr.w	r3, r3, #2
 8008ba2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	e005      	b.n	8008bd6 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bdc:	461a      	mov	r2, r3
 8008bde:	2300      	movs	r3, #0
 8008be0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be8:	4619      	mov	r1, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	680b      	ldr	r3, [r1, #0]
 8008bf4:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008bf6:	2103      	movs	r1, #3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f95b 	bl	8008eb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008bfe:	2110      	movs	r1, #16
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f8f3 	bl	8008dec <USB_FlushTxFifo>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f91f 	bl	8008e54 <USB_FlushRxFifo>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c26:	461a      	mov	r2, r3
 8008c28:	2300      	movs	r3, #0
 8008c2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c32:	461a      	mov	r2, r3
 8008c34:	2300      	movs	r3, #0
 8008c36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3e:	461a      	mov	r2, r3
 8008c40:	2300      	movs	r3, #0
 8008c42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c44:	2300      	movs	r3, #0
 8008c46:	613b      	str	r3, [r7, #16]
 8008c48:	e043      	b.n	8008cd2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c60:	d118      	bne.n	8008c94 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10a      	bne.n	8008c7e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c74:	461a      	mov	r2, r3
 8008c76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	e013      	b.n	8008ca6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	e008      	b.n	8008ca6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	015a      	lsls	r2, r3, #5
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008cca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	613b      	str	r3, [r7, #16]
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d3b7      	bcc.n	8008c4a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cda:	2300      	movs	r3, #0
 8008cdc:	613b      	str	r3, [r7, #16]
 8008cde:	e043      	b.n	8008d68 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cf6:	d118      	bne.n	8008d2a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10a      	bne.n	8008d14 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	e013      	b.n	8008d3c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d20:	461a      	mov	r2, r3
 8008d22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	e008      	b.n	8008d3c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d36:	461a      	mov	r2, r3
 8008d38:	2300      	movs	r3, #0
 8008d3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d48:	461a      	mov	r2, r3
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	3301      	adds	r3, #1
 8008d66:	613b      	str	r3, [r7, #16]
 8008d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d3b7      	bcc.n	8008ce0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d105      	bne.n	8008da4 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	f043 0210 	orr.w	r2, r3, #16
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	699a      	ldr	r2, [r3, #24]
 8008da8:	4b0f      	ldr	r3, [pc, #60]	; (8008de8 <USB_DevInit+0x298>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d005      	beq.n	8008dc2 <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	f043 0208 	orr.w	r2, r3, #8
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d107      	bne.n	8008dd8 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dd0:	f043 0304 	orr.w	r3, r3, #4
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008de4:	b004      	add	sp, #16
 8008de6:	4770      	bx	lr
 8008de8:	803c3800 	.word	0x803c3800

08008dec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	4a13      	ldr	r2, [pc, #76]	; (8008e50 <USB_FlushTxFifo+0x64>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d901      	bls.n	8008e0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e01b      	b.n	8008e44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	daf2      	bge.n	8008dfa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	019b      	lsls	r3, r3, #6
 8008e1c:	f043 0220 	orr.w	r2, r3, #32
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3301      	adds	r3, #1
 8008e28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4a08      	ldr	r2, [pc, #32]	; (8008e50 <USB_FlushTxFifo+0x64>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d901      	bls.n	8008e36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e006      	b.n	8008e44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b20      	cmp	r3, #32
 8008e40:	d0f0      	beq.n	8008e24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	00030d40 	.word	0x00030d40

08008e54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3301      	adds	r3, #1
 8008e64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	4a11      	ldr	r2, [pc, #68]	; (8008eb0 <USB_FlushRxFifo+0x5c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d901      	bls.n	8008e72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e018      	b.n	8008ea4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	daf2      	bge.n	8008e60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2210      	movs	r2, #16
 8008e82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3301      	adds	r3, #1
 8008e88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	4a08      	ldr	r2, [pc, #32]	; (8008eb0 <USB_FlushRxFifo+0x5c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d901      	bls.n	8008e96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e006      	b.n	8008ea4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	f003 0310 	and.w	r3, r3, #16
 8008e9e:	2b10      	cmp	r3, #16
 8008ea0:	d0f0      	beq.n	8008e84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3714      	adds	r7, #20
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	00030d40 	.word	0x00030d40

08008eb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	68f9      	ldr	r1, [r7, #12]
 8008ed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b087      	sub	sp, #28
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f003 0306 	and.w	r3, r3, #6
 8008efe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d102      	bne.n	8008f0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008f06:	2300      	movs	r3, #0
 8008f08:	75fb      	strb	r3, [r7, #23]
 8008f0a:	e00a      	b.n	8008f22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d002      	beq.n	8008f18 <USB_GetDevSpeed+0x32>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b06      	cmp	r3, #6
 8008f16:	d102      	bne.n	8008f1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008f18:	2302      	movs	r3, #2
 8008f1a:	75fb      	strb	r3, [r7, #23]
 8008f1c:	e001      	b.n	8008f22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008f1e:	230f      	movs	r3, #15
 8008f20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	371c      	adds	r7, #28
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b087      	sub	sp, #28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	785b      	ldrb	r3, [r3, #1]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d14a      	bne.n	8008fe4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f66:	f040 8086 	bne.w	8009076 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	7812      	ldrb	r2, [r2, #0]
 8008f7e:	0151      	lsls	r1, r2, #5
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	440a      	add	r2, r1
 8008f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f8c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	7812      	ldrb	r2, [r2, #0]
 8008fa2:	0151      	lsls	r1, r2, #5
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	440a      	add	r2, r1
 8008fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f242 7210 	movw	r2, #10000	; 0x2710
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d902      	bls.n	8008fc8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8008fc6:	e056      	b.n	8009076 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fe0:	d0e7      	beq.n	8008fb2 <USB_EPStopXfer+0x82>
 8008fe2:	e048      	b.n	8009076 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ffc:	d13b      	bne.n	8009076 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	015a      	lsls	r2, r3, #5
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	4413      	add	r3, r2
 8009008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	7812      	ldrb	r2, [r2, #0]
 8009012:	0151      	lsls	r1, r2, #5
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	440a      	add	r2, r1
 8009018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800901c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009020:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	7812      	ldrb	r2, [r2, #0]
 8009036:	0151      	lsls	r1, r2, #5
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	440a      	add	r2, r1
 800903c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009040:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009044:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3301      	adds	r3, #1
 800904a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009052:	4293      	cmp	r3, r2
 8009054:	d902      	bls.n	800905c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	75fb      	strb	r3, [r7, #23]
          break;
 800905a:	e00c      	b.n	8009076 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	015a      	lsls	r2, r3, #5
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	4413      	add	r3, r2
 8009066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009074:	d0e7      	beq.n	8009046 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009076:	7dfb      	ldrb	r3, [r7, #23]
}
 8009078:	4618      	mov	r0, r3
 800907a:	371c      	adds	r7, #28
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009084:	b480      	push	{r7}
 8009086:	b089      	sub	sp, #36	; 0x24
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	4611      	mov	r1, r2
 8009090:	461a      	mov	r2, r3
 8009092:	460b      	mov	r3, r1
 8009094:	71fb      	strb	r3, [r7, #7]
 8009096:	4613      	mov	r3, r2
 8009098:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80090a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d123      	bne.n	80090f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80090aa:	88bb      	ldrh	r3, [r7, #4]
 80090ac:	3303      	adds	r3, #3
 80090ae:	089b      	lsrs	r3, r3, #2
 80090b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80090b2:	2300      	movs	r3, #0
 80090b4:	61bb      	str	r3, [r7, #24]
 80090b6:	e018      	b.n	80090ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	031a      	lsls	r2, r3, #12
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c4:	461a      	mov	r2, r3
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	3301      	adds	r3, #1
 80090d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	3301      	adds	r3, #1
 80090d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	3301      	adds	r3, #1
 80090dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	3301      	adds	r3, #1
 80090e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	3301      	adds	r3, #1
 80090e8:	61bb      	str	r3, [r7, #24]
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d3e2      	bcc.n	80090b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3724      	adds	r7, #36	; 0x24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009100:	b480      	push	{r7}
 8009102:	b08b      	sub	sp, #44	; 0x2c
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	4613      	mov	r3, r2
 800910c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009116:	88fb      	ldrh	r3, [r7, #6]
 8009118:	089b      	lsrs	r3, r3, #2
 800911a:	b29b      	uxth	r3, r3
 800911c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800911e:	88fb      	ldrh	r3, [r7, #6]
 8009120:	f003 0303 	and.w	r3, r3, #3
 8009124:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009126:	2300      	movs	r3, #0
 8009128:	623b      	str	r3, [r7, #32]
 800912a:	e014      	b.n	8009156 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	601a      	str	r2, [r3, #0]
    pDest++;
 8009138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913a:	3301      	adds	r3, #1
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	3301      	adds	r3, #1
 8009142:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	3301      	adds	r3, #1
 8009148:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	3301      	adds	r3, #1
 800914e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009150:	6a3b      	ldr	r3, [r7, #32]
 8009152:	3301      	adds	r3, #1
 8009154:	623b      	str	r3, [r7, #32]
 8009156:	6a3a      	ldr	r2, [r7, #32]
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	429a      	cmp	r2, r3
 800915c:	d3e6      	bcc.n	800912c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800915e:	8bfb      	ldrh	r3, [r7, #30]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d01e      	beq.n	80091a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009164:	2300      	movs	r3, #0
 8009166:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800916e:	461a      	mov	r2, r3
 8009170:	f107 0310 	add.w	r3, r7, #16
 8009174:	6812      	ldr	r2, [r2, #0]
 8009176:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	b2db      	uxtb	r3, r3
 800917e:	00db      	lsls	r3, r3, #3
 8009180:	fa22 f303 	lsr.w	r3, r2, r3
 8009184:	b2da      	uxtb	r2, r3
 8009186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009188:	701a      	strb	r2, [r3, #0]
      i++;
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	3301      	adds	r3, #1
 800918e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	3301      	adds	r3, #1
 8009194:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009196:	8bfb      	ldrh	r3, [r7, #30]
 8009198:	3b01      	subs	r3, #1
 800919a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800919c:	8bfb      	ldrh	r3, [r7, #30]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1ea      	bne.n	8009178 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80091a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	372c      	adds	r7, #44	; 0x2c
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091ca:	f023 0303 	bic.w	r3, r3, #3
 80091ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091de:	f043 0302 	orr.w	r3, r3, #2
 80091e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr

080091f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80091f2:	b480      	push	{r7}
 80091f4:	b085      	sub	sp, #20
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	4013      	ands	r3, r2
 8009208:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800920a:	68fb      	ldr	r3, [r7, #12]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3714      	adds	r7, #20
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	4013      	ands	r3, r2
 800923a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	0c1b      	lsrs	r3, r3, #16
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	4013      	ands	r3, r2
 800926e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	b29b      	uxth	r3, r3
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	460b      	mov	r3, r1
 800928a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009290:	78fb      	ldrb	r3, [r7, #3]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	4013      	ands	r3, r2
 80092ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80092ae:	68bb      	ldr	r3, [r7, #8]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092de:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	f003 030f 	and.w	r3, r3, #15
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	fa22 f303 	lsr.w	r3, r2, r3
 80092ec:	01db      	lsls	r3, r3, #7
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80092f6:	78fb      	ldrb	r3, [r7, #3]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	4013      	ands	r3, r2
 8009308:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800930a:	68bb      	ldr	r3, [r7, #8]
}
 800930c:	4618      	mov	r0, r3
 800930e:	371c      	adds	r7, #28
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	f003 0301 	and.w	r3, r3, #1
}
 8009328:	4618      	mov	r0, r3
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800934e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009352:	f023 0307 	bic.w	r3, r3, #7
 8009356:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800936a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
	...

0800937c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800937c:	b480      	push	{r7}
 800937e:	b087      	sub	sp, #28
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	460b      	mov	r3, r1
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	333c      	adds	r3, #60	; 0x3c
 8009392:	3304      	adds	r3, #4
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	4a26      	ldr	r2, [pc, #152]	; (8009434 <USB_EP0_OutStart+0xb8>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d90a      	bls.n	80093b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093b0:	d101      	bne.n	80093b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	e037      	b.n	8009426 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093bc:	461a      	mov	r2, r3
 80093be:	2300      	movs	r3, #0
 80093c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093e4:	f043 0318 	orr.w	r3, r3, #24
 80093e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80093fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80093fe:	7afb      	ldrb	r3, [r7, #11]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d10f      	bne.n	8009424 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940a:	461a      	mov	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	697a      	ldr	r2, [r7, #20]
 800941a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800941e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009422:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	371c      	adds	r7, #28
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	4f54300a 	.word	0x4f54300a

08009438 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3301      	adds	r3, #1
 8009448:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4a13      	ldr	r2, [pc, #76]	; (800949c <USB_CoreReset+0x64>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d901      	bls.n	8009456 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e01b      	b.n	800948e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	2b00      	cmp	r3, #0
 800945c:	daf2      	bge.n	8009444 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f043 0201 	orr.w	r2, r3, #1
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3301      	adds	r3, #1
 8009472:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4a09      	ldr	r2, [pc, #36]	; (800949c <USB_CoreReset+0x64>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d901      	bls.n	8009480 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	e006      	b.n	800948e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	2b01      	cmp	r3, #1
 800948a:	d0f0      	beq.n	800946e <USB_CoreReset+0x36>

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	00030d40 	.word	0x00030d40

080094a0 <__libc_init_array>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	4d0d      	ldr	r5, [pc, #52]	; (80094d8 <__libc_init_array+0x38>)
 80094a4:	2600      	movs	r6, #0
 80094a6:	4c0d      	ldr	r4, [pc, #52]	; (80094dc <__libc_init_array+0x3c>)
 80094a8:	1b64      	subs	r4, r4, r5
 80094aa:	10a4      	asrs	r4, r4, #2
 80094ac:	42a6      	cmp	r6, r4
 80094ae:	d109      	bne.n	80094c4 <__libc_init_array+0x24>
 80094b0:	4d0b      	ldr	r5, [pc, #44]	; (80094e0 <__libc_init_array+0x40>)
 80094b2:	2600      	movs	r6, #0
 80094b4:	4c0b      	ldr	r4, [pc, #44]	; (80094e4 <__libc_init_array+0x44>)
 80094b6:	f000 f81f 	bl	80094f8 <_init>
 80094ba:	1b64      	subs	r4, r4, r5
 80094bc:	10a4      	asrs	r4, r4, #2
 80094be:	42a6      	cmp	r6, r4
 80094c0:	d105      	bne.n	80094ce <__libc_init_array+0x2e>
 80094c2:	bd70      	pop	{r4, r5, r6, pc}
 80094c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c8:	3601      	adds	r6, #1
 80094ca:	4798      	blx	r3
 80094cc:	e7ee      	b.n	80094ac <__libc_init_array+0xc>
 80094ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d2:	3601      	adds	r6, #1
 80094d4:	4798      	blx	r3
 80094d6:	e7f2      	b.n	80094be <__libc_init_array+0x1e>
 80094d8:	08009618 	.word	0x08009618
 80094dc:	08009618 	.word	0x08009618
 80094e0:	08009618 	.word	0x08009618
 80094e4:	0800961c 	.word	0x0800961c

080094e8 <memset>:
 80094e8:	4402      	add	r2, r0
 80094ea:	4603      	mov	r3, r0
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d100      	bne.n	80094f2 <memset+0xa>
 80094f0:	4770      	bx	lr
 80094f2:	f803 1b01 	strb.w	r1, [r3], #1
 80094f6:	e7f9      	b.n	80094ec <memset+0x4>

080094f8 <_init>:
 80094f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fa:	bf00      	nop
 80094fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fe:	bc08      	pop	{r3}
 8009500:	469e      	mov	lr, r3
 8009502:	4770      	bx	lr

08009504 <_fini>:
 8009504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009506:	bf00      	nop
 8009508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950a:	bc08      	pop	{r3}
 800950c:	469e      	mov	lr, r3
 800950e:	4770      	bx	lr
