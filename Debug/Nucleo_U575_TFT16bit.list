
Nucleo_U575_TFT16bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009490  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080096c4  080096c4  000196c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080097c4  080097c4  000197c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080097cc  080097cc  000197cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080097d0  080097d0  000197d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000d  20000000  080097d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006a4  20000010  080097e1  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200006b4  080097e1  000206b4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0002000d  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d02c  00000000  00000000  00020043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000034fd  00000000  00000000  0003d06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001378  00000000  00000000  00040570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001250  00000000  00000000  000418e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003af5f  00000000  00000000  00042b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000195c0  00000000  00000000  0007da97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00164240  00000000  00000000  00097057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fb297  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000052ec  00000000  00000000  001fb2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000010 	.word	0x20000010
 8000250:	00000000 	.word	0x00000000
 8000254:	080096ac 	.word	0x080096ac

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000014 	.word	0x20000014
 8000270:	080096ac 	.word	0x080096ac

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <FMCSRAMInit>:

	// set to the maximum of the two
	timing->AddressSetupTime = (addset1 > addset2) ? addset1 : addset2;
}

void FMCSRAMInit(ExternalSRAMSpecStruct * sramSpec, uint8_t bank) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b0a0      	sub	sp, #128	; 0x80
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
	/* FMC configuration */
	SRAM_HandleTypeDef sram;
	FMC_NORSRAM_TimingTypeDef timing = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2220      	movs	r2, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f009 f877 	bl	800969c <memset>

	sram.Instance = FMC_NORSRAM_DEVICE;
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <FMCSRAMInit+0xc4>)
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
	sram.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80005b2:	4b2a      	ldr	r3, [pc, #168]	; (800065c <FMCSRAMInit+0xc8>)
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (bank==1) {
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d102      	bne.n	80005c2 <FMCSRAMInit+0x2e>
		sram.Init.NSBank = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
 80005c0:	e005      	b.n	80005ce <FMCSRAMInit+0x3a>
	} else {
		sram.Init.NSBank = 1 << (bank-1);
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	2201      	movs	r2, #1
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if (sramSpec -> dataSize == 8) {
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b08      	cmp	r3, #8
 80005d4:	d102      	bne.n	80005dc <FMCSRAMInit+0x48>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80005d6:	2300      	movs	r3, #0
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005da:	e008      	b.n	80005ee <FMCSRAMInit+0x5a>
	} else if (sramSpec -> dataSize == 16) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b10      	cmp	r3, #16
 80005e2:	d102      	bne.n	80005ea <FMCSRAMInit+0x56>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005e4:	2310      	movs	r3, #16
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005e8:	e001      	b.n	80005ee <FMCSRAMInit+0x5a>
	} else {
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 80005ea:	2320      	movs	r3, #32
 80005ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	sram.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	637b      	str	r3, [r7, #52]	; 0x34
	sram.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80005f2:	2300      	movs	r3, #0
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
	sram.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	643b      	str	r3, [r7, #64]	; 0x40
	sram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
	sram.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80005fe:	2300      	movs	r3, #0
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
	sram.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
	sram.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	653b      	str	r3, [r7, #80]	; 0x50
	sram.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	657b      	str	r3, [r7, #84]	; 0x54
	sram.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	65bb      	str	r3, [r7, #88]	; 0x58
	sram.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	65fb      	str	r3, [r7, #92]	; 0x5c
	sram.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000618:	2300      	movs	r3, #0
 800061a:	663b      	str	r3, [r7, #96]	; 0x60
	sram.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 800061c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000620:	667b      	str	r3, [r7, #100]	; 0x64
	sram.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000622:	2300      	movs	r3, #0
 8000624:	66bb      	str	r3, [r7, #104]	; 0x68

	/* Timing */
	timing.BusTurnAroundDuration = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
	timing.AccessMode = FMC_ACCESS_MODE_A;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	; 0x24

	timing.AddressSetupTime = 6; //MAX_ADDSET_TIME;
 800062e:	2306      	movs	r3, #6
 8000630:	60bb      	str	r3, [r7, #8]
	timing.DataSetupTime = 6;//MAX_DATAST_TIME;
 8000632:	2306      	movs	r3, #6
 8000634:	613b      	str	r3, [r7, #16]

	//FMCComputeAddsetDatast(sramSpec, &timing);

	if (HAL_SRAM_Init(&sram, &timing, NULL) != HAL_OK)
 8000636:	f107 0108 	add.w	r1, r7, #8
 800063a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800063e:	2200      	movs	r2, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f007 fa0b 	bl	8007a5c <HAL_SRAM_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <FMCSRAMInit+0xbc>
	{
		FMC_Error_Handler( );
 800064c:	f000 f808 	bl	8000660 <FMC_Error_Handler>
	}

#if MEM_SWAPPING
	HAL_EnableFMCMemorySwapping();
#endif
}
 8000650:	bf00      	nop
 8000652:	3780      	adds	r7, #128	; 0x80
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	420d0400 	.word	0x420d0400
 800065c:	420d0504 	.word	0x420d0504

08000660 <FMC_Error_Handler>:

void FMC_Error_Handler() {
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
	...

08000670 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800067a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800067e:	4909      	ldr	r1, [pc, #36]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4313      	orrs	r3, r2
 8000684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800068a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4013      	ands	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000694:	68fb      	ldr	r3, [r7, #12]
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	46020c00 	.word	0x46020c00

080006a8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80006b6:	4909      	ldr	r1, [pc, #36]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4013      	ands	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006cc:	68fb      	ldr	r3, [r7, #12]
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	46020c00 	.word	0x46020c00

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f001 f9d2 	bl	8001a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f85e 	bl	80007a8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80006ec:	f000 f8c0 	bl	8000870 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f000 fa28 	bl	8000b44 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006f4:	f000 f8ca 	bl	800088c <MX_ADC1_Init>
  MX_UCPD1_Init();
 80006f8:	f000 f90c 	bl	8000914 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 80006fc:	f000 f940 	bl	8000980 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000700:	f000 f98a 	bl	8000a18 <MX_USB_OTG_FS_PCD_Init>
  MX_FMC_Init();
 8000704:	f000 f9b4 	bl	8000a70 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  ST7789V_init();
 8000708:	f000 fb5c 	bl	8000dc4 <ST7789V_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	2180      	movs	r1, #128	; 0x80
 8000710:	4822      	ldr	r0, [pc, #136]	; (800079c <main+0xbc>)
 8000712:	f002 f921 	bl	8002958 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071a:	f001 fa3b 	bl	8001b94 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	481e      	ldr	r0, [pc, #120]	; (800079c <main+0xbc>)
 8000724:	f002 f918 	bl	8002958 <HAL_GPIO_WritePin>

	  ST7789V_fill(COLOR_BLUE);
 8000728:	201f      	movs	r0, #31
 800072a:	f000 fc89 	bl	8001040 <ST7789V_fill>
	  //HAL_Delay(2000);
	  ST7789V_fill(COLOR_GREEN);
 800072e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000732:	f000 fc85 	bl	8001040 <ST7789V_fill>
	  //HAL_Delay(2000);;
	  ST7789V_fill(COLOR_RED);
 8000736:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800073a:	f000 fc81 	bl	8001040 <ST7789V_fill>
	  //HAL_Delay(5000);

	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 800073e:	2201      	movs	r2, #1
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	4817      	ldr	r0, [pc, #92]	; (80007a0 <main+0xc0>)
 8000744:	f002 f908 	bl	8002958 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000748:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074c:	f001 fa22 	bl	8001b94 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	4812      	ldr	r0, [pc, #72]	; (80007a0 <main+0xc0>)
 8000756:	f002 f8ff 	bl	8002958 <HAL_GPIO_WritePin>


	  ST7789V_drawCircle(80, 100, 20, COLOR_WHITE);
 800075a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800075e:	2214      	movs	r2, #20
 8000760:	2164      	movs	r1, #100	; 0x64
 8000762:	2050      	movs	r0, #80	; 0x50
 8000764:	f000 fcac 	bl	80010c0 <ST7789V_drawCircle>
	  //HAL_Delay(1000);
	  ST7789V_fillCircle(80, 100, 15, COLOR_BLACK);
 8000768:	2300      	movs	r3, #0
 800076a:	220f      	movs	r2, #15
 800076c:	2164      	movs	r1, #100	; 0x64
 800076e:	2050      	movs	r0, #80	; 0x50
 8000770:	f000 fe1d 	bl	80013ae <ST7789V_fillCircle>
	  //HAL_Delay(3000);
	  ST7789V_fill(COLOR_WHITE);
 8000774:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000778:	f000 fc62 	bl	8001040 <ST7789V_fill>
	  //HAL_Delay(10000);

	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800077c:	2201      	movs	r2, #1
 800077e:	2104      	movs	r1, #4
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <main+0xc4>)
 8000782:	f002 f8e9 	bl	8002958 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000786:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078a:	f001 fa03 	bl	8001b94 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2104      	movs	r1, #4
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <main+0xc4>)
 8000794:	f002 f8e0 	bl	8002958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 8000798:	e7b8      	b.n	800070c <main+0x2c>
 800079a:	bf00      	nop
 800079c:	42020400 	.word	0x42020400
 80007a0:	42020800 	.word	0x42020800
 80007a4:	42021800 	.word	0x42021800

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09e      	sub	sp, #120	; 0x78
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	2260      	movs	r2, #96	; 0x60
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f008 ff70 	bl	800969c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
 80007ca:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007cc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80007d0:	f003 f95c 	bl	8003a8c <HAL_PWREx_ControlVoltageScaling>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x36>
  {
    Error_Handler();
 80007da:	f000 fa9d 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80007de:	2332      	movs	r3, #50	; 0x32
 80007e0:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ee:	2310      	movs	r3, #16
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007f2:	2301      	movs	r3, #1
 80007f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007f6:	2310      	movs	r3, #16
 80007f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80007fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000800:	2302      	movs	r3, #2
 8000802:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000804:	2301      	movs	r3, #1
 8000806:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000810:	2350      	movs	r3, #80	; 0x50
 8000812:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000814:	2302      	movs	r3, #2
 8000816:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000818:	2302      	movs	r3, #2
 800081a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000820:	2300      	movs	r3, #0
 8000822:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	4618      	mov	r0, r3
 800082e:	f003 fa1f 	bl	8003c70 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000838:	f000 fa6e 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	231f      	movs	r3, #31
 800083e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2303      	movs	r3, #3
 8000842:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	2104      	movs	r1, #4
 8000858:	4618      	mov	r0, r3
 800085a:	f004 f8df 	bl	8004a1c <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000864:	f000 fa58 	bl	8000d18 <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3778      	adds	r7, #120	; 0x78
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000874:	f003 f9ec 	bl	8003c50 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000878:	2002      	movs	r0, #2
 800087a:	f003 f989 	bl	8003b90 <HAL_PWREx_ConfigSupply>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000884:	f000 fa48 	bl	8000d18 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_ADC1_Init+0x80>)
 8000892:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <MX_ADC1_Init+0x84>)
 8000894:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_ADC1_Init+0x80>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_ADC1_Init+0x80>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_ADC1_Init+0x80>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_ADC1_Init+0x80>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_ADC1_Init+0x80>)
 80008b0:	2204      	movs	r2, #4
 80008b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_ADC1_Init+0x80>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_ADC1_Init+0x80>)
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_ADC1_Init+0x80>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_ADC1_Init+0x80>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_ADC1_Init+0x80>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_ADC1_Init+0x80>)
 80008da:	2200      	movs	r2, #0
 80008dc:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_ADC1_Init+0x80>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_ADC1_Init+0x80>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_ADC1_Init+0x80>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_ADC1_Init+0x80>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_ADC1_Init+0x80>)
 80008fa:	f001 fa4b 	bl	8001d94 <HAL_ADC_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000904:	f000 fa08 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000002c 	.word	0x2000002c
 8000910:	42028000 	.word	0x42028000

08000914 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	463b      	mov	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800092a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800092e:	f7ff febb 	bl	80006a8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000932:	2002      	movs	r0, #2
 8000934:	f7ff fe9c 	bl	8000670 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fe99 	bl	8000670 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800093e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000942:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000944:	2303      	movs	r3, #3
 8000946:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000948:	2300      	movs	r3, #0
 800094a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <MX_UCPD1_Init+0x64>)
 8000952:	f008 f824 	bl	800899e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800095a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800095c:	2303      	movs	r3, #3
 800095e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_UCPD1_Init+0x68>)
 800096a:	f008 f818 	bl	800899e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	42020400 	.word	0x42020400
 800097c:	42020000 	.word	0x42020000

08000980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 8000986:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <MX_USART1_UART_Init+0x94>)
 8000988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c8:	4811      	ldr	r0, [pc, #68]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 80009ca:	f007 f897 	bl	8007afc <HAL_UART_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 f9a0 	bl	8000d18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 80009dc:	f007 fc6e 	bl	80082bc <HAL_UARTEx_SetTxFifoThreshold>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009e6:	f000 f997 	bl	8000d18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ea:	2100      	movs	r1, #0
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 80009ee:	f007 fca3 	bl	8008338 <HAL_UARTEx_SetRxFifoThreshold>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009f8:	f000 f98e 	bl	8000d18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_USART1_UART_Init+0x90>)
 80009fe:	f007 fc24 	bl	800824a <HAL_UARTEx_DisableFifoMode>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a08:	f000 f986 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200000b8 	.word	0x200000b8
 8000a14:	40013800 	.word	0x40013800

08000a18 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a1e:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x54>)
 8000a20:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a24:	2206      	movs	r2, #6
 8000a26:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a54:	f001 ff98 	bl	8002988 <HAL_PCD_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8000a5e:	f000 f95b 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000148 	.word	0x20000148
 8000a6c:	42040000 	.word	0x42040000

08000a70 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a76:	463b      	mov	r3, r7
 8000a78:	2220      	movs	r2, #32
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fe0d 	bl	800969c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000a84:	4a2d      	ldr	r2, [pc, #180]	; (8000b3c <MX_FMC_Init+0xcc>)
 8000a86:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000a88:	4b2b      	ldr	r3, [pc, #172]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000a8a:	4a2d      	ldr	r2, [pc, #180]	; (8000b40 <MX_FMC_Init+0xd0>)
 8000a8c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000a8e:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000aa0:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000aa2:	2210      	movs	r2, #16
 8000aa4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000aa6:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000aba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000ae0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ae4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000afa:	230f      	movs	r3, #15
 8000afc:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000afe:	230f      	movs	r3, #15
 8000b00:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000b02:	23ff      	movs	r3, #255	; 0xff
 8000b04:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000b0e:	2310      	movs	r3, #16
 8000b10:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000b12:	2311      	movs	r3, #17
 8000b14:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000b22:	f006 ff9b 	bl	8007a5c <HAL_SRAM_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_FMC_Init+0xc0>
  {
    Error_Handler( );
 8000b2c:	f000 f8f4 	bl	8000d18 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000654 	.word	0x20000654
 8000b3c:	420d0400 	.word	0x420d0400
 8000b40:	420d0504 	.word	0x420d0504

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5a:	4b69      	ldr	r3, [pc, #420]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b60:	4a67      	ldr	r2, [pc, #412]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b6a:	4b65      	ldr	r3, [pc, #404]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	61bb      	str	r3, [r7, #24]
 8000b76:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b78:	4b61      	ldr	r3, [pc, #388]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b7e:	4a60      	ldr	r2, [pc, #384]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b88:	4b5d      	ldr	r3, [pc, #372]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b5a      	ldr	r3, [pc, #360]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b9c:	4a58      	ldr	r2, [pc, #352]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ba6:	4b56      	ldr	r3, [pc, #344]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb4:	4b52      	ldr	r3, [pc, #328]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bba:	4a51      	ldr	r2, [pc, #324]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bc4:	4b4e      	ldr	r3, [pc, #312]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd2:	4b4b      	ldr	r3, [pc, #300]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bd8:	4a49      	ldr	r2, [pc, #292]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000be2:	4b47      	ldr	r3, [pc, #284]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b43      	ldr	r3, [pc, #268]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bf6:	4a42      	ldr	r2, [pc, #264]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c00:	4b3f      	ldr	r3, [pc, #252]	; (8000d00 <MX_GPIO_Init+0x1bc>)
 8000c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2104      	movs	r1, #4
 8000c12:	483c      	ldr	r0, [pc, #240]	; (8000d04 <MX_GPIO_Init+0x1c0>)
 8000c14:	f001 fea0 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	483a      	ldr	r0, [pc, #232]	; (8000d08 <MX_GPIO_Init+0x1c4>)
 8000c1e:	f001 fe9b 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	4839      	ldr	r0, [pc, #228]	; (8000d0c <MX_GPIO_Init+0x1c8>)
 8000c28:	f001 fe96 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	21a0      	movs	r1, #160	; 0xa0
 8000c30:	4837      	ldr	r0, [pc, #220]	; (8000d10 <MX_GPIO_Init+0x1cc>)
 8000c32:	f001 fe91 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FMC_RESET_Pin */
  GPIO_InitStruct.Pin = FMC_RESET_Pin;
 8000c36:	2304      	movs	r3, #4
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FMC_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	482d      	ldr	r0, [pc, #180]	; (8000d04 <MX_GPIO_Init+0x1c0>)
 8000c4e:	f001 fcab 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c58:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <MX_GPIO_Init+0x1d0>)
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4829      	ldr	r0, [pc, #164]	; (8000d0c <MX_GPIO_Init+0x1c8>)
 8000c68:	f001 fc9e 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000c6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4823      	ldr	r0, [pc, #140]	; (8000d10 <MX_GPIO_Init+0x1cc>)
 8000c82:	f001 fc91 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c86:	2304      	movs	r3, #4
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c92:	2302      	movs	r3, #2
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	481a      	ldr	r0, [pc, #104]	; (8000d08 <MX_GPIO_Init+0x1c4>)
 8000c9e:	f001 fc83 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4814      	ldr	r0, [pc, #80]	; (8000d0c <MX_GPIO_Init+0x1c8>)
 8000cba:	f001 fc75 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480e      	ldr	r0, [pc, #56]	; (8000d10 <MX_GPIO_Init+0x1cc>)
 8000cd6:	f001 fc67 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4807      	ldr	r0, [pc, #28]	; (8000d10 <MX_GPIO_Init+0x1cc>)
 8000cf2:	f001 fc59 	bl	80025a8 <HAL_GPIO_Init>

}
 8000cf6:	bf00      	nop
 8000cf8:	3730      	adds	r7, #48	; 0x30
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	46020c00 	.word	0x46020c00
 8000d04:	42021000 	.word	0x42021000
 8000d08:	42021800 	.word	0x42021800
 8000d0c:	42020800 	.word	0x42020800
 8000d10:	42020400 	.word	0x42020400
 8000d14:	10210000 	.word	0x10210000

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <ST7789V_writeRegister32>:
	ST7789V_SEND_COMMAND(r);
	ST7789V_SEND_DATA(d >> 8);
	ST7789V_SEND_DATA(d);
}

static void ST7789V_writeRegister32(uint8_t r, uint32_t d) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
	ST7789V_SEND_COMMAND(r);
 8000d30:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d34:	79fa      	ldrb	r2, [r7, #7]
 8000d36:	b292      	uxth	r2, r2
 8000d38:	801a      	strh	r2, [r3, #0]
	ST7789V_SEND_DATA(d >> 24);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	0e1a      	lsrs	r2, r3, #24
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <ST7789V_writeRegister32+0x48>)
 8000d40:	b292      	uxth	r2, r2
 8000d42:	801a      	strh	r2, [r3, #0]
	ST7789V_SEND_DATA(d >> 16);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	0c1a      	lsrs	r2, r3, #16
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <ST7789V_writeRegister32+0x48>)
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	801a      	strh	r2, [r3, #0]
	ST7789V_SEND_DATA((d >> 8));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	0a1a      	lsrs	r2, r3, #8
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <ST7789V_writeRegister32+0x48>)
 8000d54:	b292      	uxth	r2, r2
 8000d56:	801a      	strh	r2, [r3, #0]
	ST7789V_SEND_DATA(d);
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <ST7789V_writeRegister32+0x48>)
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	b292      	uxth	r2, r2
 8000d5e:	801a      	strh	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	60080000 	.word	0x60080000

08000d70 <ST7789V_setCursorPosition>:

void ST7789V_setCursorPosition(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4604      	mov	r4, r0
 8000d78:	4608      	mov	r0, r1
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4623      	mov	r3, r4
 8000d80:	80fb      	strh	r3, [r7, #6]
 8000d82:	4603      	mov	r3, r0
 8000d84:	80bb      	strh	r3, [r7, #4]
 8000d86:	460b      	mov	r3, r1
 8000d88:	807b      	strh	r3, [r7, #2]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	803b      	strh	r3, [r7, #0]
  uint32_t t;
  t = (x0 << 16) | x1;
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	041a      	lsls	r2, r3, #16
 8000d92:	887b      	ldrh	r3, [r7, #2]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]
  ST7789V_writeRegister32(ST7789V_CASET, t);
 8000d98:	68f9      	ldr	r1, [r7, #12]
 8000d9a:	202a      	movs	r0, #42	; 0x2a
 8000d9c:	f7ff ffc2 	bl	8000d24 <ST7789V_writeRegister32>
  t = (y0 << 16) | y1;
 8000da0:	88bb      	ldrh	r3, [r7, #4]
 8000da2:	041a      	lsls	r2, r3, #16
 8000da4:	883b      	ldrh	r3, [r7, #0]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  ST7789V_writeRegister32(ST7789V_RASET, t);
 8000daa:	68f9      	ldr	r1, [r7, #12]
 8000dac:	202b      	movs	r0, #43	; 0x2b
 8000dae:	f7ff ffb9 	bl	8000d24 <ST7789V_writeRegister32>
  ST7789V_SEND_COMMAND (ST7789V_RAMWR);
 8000db2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000db6:	222c      	movs	r2, #44	; 0x2c
 8000db8:	801a      	strh	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd90      	pop	{r4, r7, pc}
	...

08000dc4 <ST7789V_init>:
	/* invert area */
	ST7789V_SEND_COMMAND(ST7789V_INVON);
}

void ST7789V_init(void)
 {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
   ExternalSRAMSpecStruct ST7789VSpec = {
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	f8c3 2003 	str.w	r2, [r3, #3]
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	703b      	strb	r3, [r7, #0]
 8000dd8:	2332      	movs	r3, #50	; 0x32
 8000dda:	713b      	strb	r3, [r7, #4]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	71bb      	strb	r3, [r7, #6]
		   //.tCycWrite = 66,
		   .writeOnly = 1

   };

   FMCSRAMInit(&ST7789VSpec, ST7789V_SRAM_BANK);
 8000de0:	463b      	mov	r3, r7
 8000de2:	2101      	movs	r1, #1
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fbd5 	bl	8000594 <FMCSRAMInit>

   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	2104      	movs	r1, #4
 8000dee:	4882      	ldr	r0, [pc, #520]	; (8000ff8 <ST7789V_init+0x234>)
 8000df0:	f001 fdb2 	bl	8002958 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f000 fecd 	bl	8001b94 <HAL_Delay>
   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	487e      	ldr	r0, [pc, #504]	; (8000ff8 <ST7789V_init+0x234>)
 8000e00:	f001 fdaa 	bl	8002958 <HAL_GPIO_WritePin>
   HAL_Delay(10);
 8000e04:	200a      	movs	r0, #10
 8000e06:	f000 fec5 	bl	8001b94 <HAL_Delay>
   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	487a      	ldr	r0, [pc, #488]	; (8000ff8 <ST7789V_init+0x234>)
 8000e10:	f001 fda2 	bl	8002958 <HAL_GPIO_WritePin>
   HAL_Delay(120);
 8000e14:	2078      	movs	r0, #120	; 0x78
 8000e16:	f000 febd 	bl	8001b94 <HAL_Delay>

   ST7789V_SEND_COMMAND(ST7789V_SLPOUT);
 8000e1a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000e1e:	2211      	movs	r2, #17
 8000e20:	801a      	strh	r2, [r3, #0]
   HAL_Delay(120);
 8000e22:	2078      	movs	r0, #120	; 0x78
 8000e24:	f000 feb6 	bl	8001b94 <HAL_Delay>

   ST7789V_SEND_COMMAND(ST7789V_MADCTL); //Memory data acccess control
 8000e28:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000e2c:	2236      	movs	r2, #54	; 0x36
 8000e2e:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000e30:	4b72      	ldr	r3, [pc, #456]	; (8000ffc <ST7789V_init+0x238>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_PORCTRL); //Porch Setting
 8000e36:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000e3a:	22b2      	movs	r2, #178	; 0xb2
 8000e3c:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0C);
 8000e3e:	4b6f      	ldr	r3, [pc, #444]	; (8000ffc <ST7789V_init+0x238>)
 8000e40:	220c      	movs	r2, #12
 8000e42:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0C);
 8000e44:	4b6d      	ldr	r3, [pc, #436]	; (8000ffc <ST7789V_init+0x238>)
 8000e46:	220c      	movs	r2, #12
 8000e48:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000e4a:	4b6c      	ldr	r3, [pc, #432]	; (8000ffc <ST7789V_init+0x238>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x33);
 8000e50:	4b6a      	ldr	r3, [pc, #424]	; (8000ffc <ST7789V_init+0x238>)
 8000e52:	2233      	movs	r2, #51	; 0x33
 8000e54:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x33);
 8000e56:	4b69      	ldr	r3, [pc, #420]	; (8000ffc <ST7789V_init+0x238>)
 8000e58:	2233      	movs	r2, #51	; 0x33
 8000e5a:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_GCTRL); //Gate Control
 8000e5c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000e60:	22b7      	movs	r2, #183	; 0xb7
 8000e62:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x70); //VGH, VGL
 8000e64:	4b65      	ldr	r3, [pc, #404]	; (8000ffc <ST7789V_init+0x238>)
 8000e66:	2270      	movs	r2, #112	; 0x70
 8000e68:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_VCOMS);
 8000e6a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000e6e:	22bb      	movs	r2, #187	; 0xbb
 8000e70:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x3A);
 8000e72:	4b62      	ldr	r3, [pc, #392]	; (8000ffc <ST7789V_init+0x238>)
 8000e74:	223a      	movs	r2, #58	; 0x3a
 8000e76:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_LCMCTRL);
 8000e78:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000e7c:	22c0      	movs	r2, #192	; 0xc0
 8000e7e:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x2C);
 8000e80:	4b5e      	ldr	r3, [pc, #376]	; (8000ffc <ST7789V_init+0x238>)
 8000e82:	222c      	movs	r2, #44	; 0x2c
 8000e84:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_VDVVRHEN);
 8000e86:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000e8a:	22c2      	movs	r2, #194	; 0xc2
 8000e8c:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x01);
 8000e8e:	4b5b      	ldr	r3, [pc, #364]	; (8000ffc <ST7789V_init+0x238>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_VRHS);
 8000e94:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000e98:	22c3      	movs	r2, #195	; 0xc3
 8000e9a:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x14);
 8000e9c:	4b57      	ldr	r3, [pc, #348]	; (8000ffc <ST7789V_init+0x238>)
 8000e9e:	2214      	movs	r2, #20
 8000ea0:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_VDVS);
 8000ea2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ea6:	22c4      	movs	r2, #196	; 0xc4
 8000ea8:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x20);
 8000eaa:	4b54      	ldr	r3, [pc, #336]	; (8000ffc <ST7789V_init+0x238>)
 8000eac:	2220      	movs	r2, #32
 8000eae:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_FRCTRL2);
 8000eb0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000eb4:	22c6      	movs	r2, #198	; 0xc6
 8000eb6:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0F); //60Hz 0A
 8000eb8:	4b50      	ldr	r3, [pc, #320]	; (8000ffc <ST7789V_init+0x238>)
 8000eba:	220f      	movs	r2, #15
 8000ebc:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_PWCTRL1);
 8000ebe:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ec2:	22d0      	movs	r2, #208	; 0xd0
 8000ec4:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0xA4);
 8000ec6:	4b4d      	ldr	r3, [pc, #308]	; (8000ffc <ST7789V_init+0x238>)
 8000ec8:	22a4      	movs	r2, #164	; 0xa4
 8000eca:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0xA1); //AVDD VCL
 8000ecc:	4b4b      	ldr	r3, [pc, #300]	; (8000ffc <ST7789V_init+0x238>)
 8000ece:	22a1      	movs	r2, #161	; 0xa1
 8000ed0:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_PVGAMCTRL);
 8000ed2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ed6:	22e0      	movs	r2, #224	; 0xe0
 8000ed8:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0xD0);
 8000eda:	4b48      	ldr	r3, [pc, #288]	; (8000ffc <ST7789V_init+0x238>)
 8000edc:	22d0      	movs	r2, #208	; 0xd0
 8000ede:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x07);
 8000ee0:	4b46      	ldr	r3, [pc, #280]	; (8000ffc <ST7789V_init+0x238>)
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0D);
 8000ee6:	4b45      	ldr	r3, [pc, #276]	; (8000ffc <ST7789V_init+0x238>)
 8000ee8:	220d      	movs	r2, #13
 8000eea:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x09);
 8000eec:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <ST7789V_init+0x238>)
 8000eee:	2209      	movs	r2, #9
 8000ef0:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x08);
 8000ef2:	4b42      	ldr	r3, [pc, #264]	; (8000ffc <ST7789V_init+0x238>)
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x25);
 8000ef8:	4b40      	ldr	r3, [pc, #256]	; (8000ffc <ST7789V_init+0x238>)
 8000efa:	2225      	movs	r2, #37	; 0x25
 8000efc:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x28);
 8000efe:	4b3f      	ldr	r3, [pc, #252]	; (8000ffc <ST7789V_init+0x238>)
 8000f00:	2228      	movs	r2, #40	; 0x28
 8000f02:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x53);
 8000f04:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <ST7789V_init+0x238>)
 8000f06:	2253      	movs	r2, #83	; 0x53
 8000f08:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x39);
 8000f0a:	4b3c      	ldr	r3, [pc, #240]	; (8000ffc <ST7789V_init+0x238>)
 8000f0c:	2239      	movs	r2, #57	; 0x39
 8000f0e:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x12);
 8000f10:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <ST7789V_init+0x238>)
 8000f12:	2212      	movs	r2, #18
 8000f14:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0B);
 8000f16:	4b39      	ldr	r3, [pc, #228]	; (8000ffc <ST7789V_init+0x238>)
 8000f18:	220b      	movs	r2, #11
 8000f1a:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0A);
 8000f1c:	4b37      	ldr	r3, [pc, #220]	; (8000ffc <ST7789V_init+0x238>)
 8000f1e:	220a      	movs	r2, #10
 8000f20:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x17);
 8000f22:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <ST7789V_init+0x238>)
 8000f24:	2217      	movs	r2, #23
 8000f26:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x34);
 8000f28:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <ST7789V_init+0x238>)
 8000f2a:	2234      	movs	r2, #52	; 0x34
 8000f2c:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_NVGAMCTRL);
 8000f2e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f32:	22e1      	movs	r2, #225	; 0xe1
 8000f34:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0xD0);
 8000f36:	4b31      	ldr	r3, [pc, #196]	; (8000ffc <ST7789V_init+0x238>)
 8000f38:	22d0      	movs	r2, #208	; 0xd0
 8000f3a:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x07);
 8000f3c:	4b2f      	ldr	r3, [pc, #188]	; (8000ffc <ST7789V_init+0x238>)
 8000f3e:	2207      	movs	r2, #7
 8000f40:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0D);
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <ST7789V_init+0x238>)
 8000f44:	220d      	movs	r2, #13
 8000f46:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x09);
 8000f48:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <ST7789V_init+0x238>)
 8000f4a:	2209      	movs	r2, #9
 8000f4c:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x09);
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <ST7789V_init+0x238>)
 8000f50:	2209      	movs	r2, #9
 8000f52:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x25);
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <ST7789V_init+0x238>)
 8000f56:	2225      	movs	r2, #37	; 0x25
 8000f58:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x29);
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <ST7789V_init+0x238>)
 8000f5c:	2229      	movs	r2, #41	; 0x29
 8000f5e:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x35);
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <ST7789V_init+0x238>)
 8000f62:	2235      	movs	r2, #53	; 0x35
 8000f64:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x39);
 8000f66:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <ST7789V_init+0x238>)
 8000f68:	2239      	movs	r2, #57	; 0x39
 8000f6a:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x13);
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <ST7789V_init+0x238>)
 8000f6e:	2213      	movs	r2, #19
 8000f70:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0A);
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <ST7789V_init+0x238>)
 8000f74:	220a      	movs	r2, #10
 8000f76:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0A);
 8000f78:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <ST7789V_init+0x238>)
 8000f7a:	220a      	movs	r2, #10
 8000f7c:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x16);
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <ST7789V_init+0x238>)
 8000f80:	2216      	movs	r2, #22
 8000f82:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x34);
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <ST7789V_init+0x238>)
 8000f86:	2234      	movs	r2, #52	; 0x34
 8000f88:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_INVON);
 8000f8a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f8e:	2221      	movs	r2, #33	; 0x21
 8000f90:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_COLMOD);
 8000f92:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f96:	223a      	movs	r2, #58	; 0x3a
 8000f98:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x55); //65K colors, 16 bit/px
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <ST7789V_init+0x238>)
 8000f9c:	2255      	movs	r2, #85	; 0x55
 8000f9e:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_CASET);
 8000fa0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000fa4:	222a      	movs	r2, #42	; 0x2a
 8000fa6:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <ST7789V_init+0x238>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <ST7789V_init+0x238>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <ST7789V_init+0x238>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0xEF);
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <ST7789V_init+0x238>)
 8000fbc:	22ef      	movs	r2, #239	; 0xef
 8000fbe:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_RASET);
 8000fc0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000fc4:	222b      	movs	r2, #43	; 0x2b
 8000fc6:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <ST7789V_init+0x238>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <ST7789V_init+0x238>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x01);
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <ST7789V_init+0x238>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x3F);
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <ST7789V_init+0x238>)
 8000fdc:	223f      	movs	r2, #63	; 0x3f
 8000fde:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_DISPON);
 8000fe0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000fe4:	2229      	movs	r2, #41	; 0x29
 8000fe6:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8000fe8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000fec:	222c      	movs	r2, #44	; 0x2c
 8000fee:	801a      	strh	r2, [r3, #0]
 }
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	42021000 	.word	0x42021000
 8000ffc:	60080000 	.word	0x60080000

08001000 <ST7789V_drawPixel>:

void ST7789V_drawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
 800100a:	460b      	mov	r3, r1
 800100c:	80bb      	strh	r3, [r7, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	807b      	strh	r3, [r7, #2]
	ST7789V_setCursorPosition(x, y, x, y);
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	88fa      	ldrh	r2, [r7, #6]
 8001016:	88b9      	ldrh	r1, [r7, #4]
 8001018:	88f8      	ldrh	r0, [r7, #6]
 800101a:	f7ff fea9 	bl	8000d70 <ST7789V_setCursorPosition>
	ST7789V_SEND_DATA(color>>8);
 800101e:	4a07      	ldr	r2, [pc, #28]	; (800103c <ST7789V_drawPixel+0x3c>)
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	0a1b      	lsrs	r3, r3, #8
 8001024:	b29b      	uxth	r3, r3
 8001026:	8013      	strh	r3, [r2, #0]
	ST7789V_SEND_DATA(color&0xFF);
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <ST7789V_drawPixel+0x3c>)
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	b292      	uxth	r2, r2
 8001030:	801a      	strh	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	60080000 	.word	0x60080000

08001040 <ST7789V_fill>:

void ST7789V_fill(uint16_t color) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ST7789V_PIXEL_COUNT;
 800104a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800104e:	60fb      	str	r3, [r7, #12]
	
	if(rotationNum==1 || rotationNum==3)
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <ST7789V_fill+0x78>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d003      	beq.n	8001060 <ST7789V_fill+0x20>
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <ST7789V_fill+0x78>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b03      	cmp	r3, #3
 800105e:	d107      	bne.n	8001070 <ST7789V_fill+0x30>
	{
		ST7789V_setCursorPosition(0, 0,   ST7789V_WIDTH -1, ST7789V_HEIGHT -1);
 8001060:	f240 133f 	movw	r3, #319	; 0x13f
 8001064:	22ef      	movs	r2, #239	; 0xef
 8001066:	2100      	movs	r1, #0
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff fe81 	bl	8000d70 <ST7789V_setCursorPosition>
 800106e:	e00e      	b.n	800108e <ST7789V_fill+0x4e>
	}
	else if(rotationNum==2 || rotationNum==4)
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <ST7789V_fill+0x78>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d003      	beq.n	8001080 <ST7789V_fill+0x40>
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <ST7789V_fill+0x78>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b04      	cmp	r3, #4
 800107e:	d106      	bne.n	800108e <ST7789V_fill+0x4e>
	{
		ST7789V_setCursorPosition(0, 0, ST7789V_HEIGHT -1, ST7789V_WIDTH -1);
 8001080:	23ef      	movs	r3, #239	; 0xef
 8001082:	f240 123f 	movw	r2, #319	; 0x13f
 8001086:	2100      	movs	r1, #0
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff fe71 	bl	8000d70 <ST7789V_setCursorPosition>
	}
	
	while (n) {
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00d      	beq.n	80010b0 <ST7789V_fill+0x70>
	   n--;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3b01      	subs	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
       ST7789V_SEND_DATA(color>>8);
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <ST7789V_fill+0x7c>)
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	8013      	strh	r3, [r2, #0]
	   ST7789V_SEND_DATA(color&0xff);
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <ST7789V_fill+0x7c>)
 80010a6:	88fa      	ldrh	r2, [r7, #6]
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	b292      	uxth	r2, r2
 80010ac:	801a      	strh	r2, [r3, #0]
	while (n) {
 80010ae:	e7ee      	b.n	800108e <ST7789V_fill+0x4e>
	}
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000000 	.word	0x20000000
 80010bc:	60080000 	.word	0x60080000

080010c0 <ST7789V_drawCircle>:
			ST7789V_SEND_DATA(color&0xff);
	}
}

void ST7789V_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4604      	mov	r4, r0
 80010c8:	4608      	mov	r0, r1
 80010ca:	4611      	mov	r1, r2
 80010cc:	461a      	mov	r2, r3
 80010ce:	4623      	mov	r3, r4
 80010d0:	80fb      	strh	r3, [r7, #6]
 80010d2:	4603      	mov	r3, r0
 80010d4:	80bb      	strh	r3, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	807b      	strh	r3, [r7, #2]
 80010da:	4613      	mov	r3, r2
 80010dc:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 80010de:	887b      	ldrh	r3, [r7, #2]
 80010e0:	f1c3 0301 	rsb	r3, r3, #1
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	461a      	mov	r2, r3
 80010f0:	03d2      	lsls	r2, r2, #15
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	81fb      	strh	r3, [r7, #14]

  ST7789V_drawPixel(x0  , y0+r, color);
 8001102:	88ba      	ldrh	r2, [r7, #4]
 8001104:	887b      	ldrh	r3, [r7, #2]
 8001106:	4413      	add	r3, r2
 8001108:	b299      	uxth	r1, r3
 800110a:	883a      	ldrh	r2, [r7, #0]
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff76 	bl	8001000 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0  , y0-r, color);
 8001114:	88ba      	ldrh	r2, [r7, #4]
 8001116:	887b      	ldrh	r3, [r7, #2]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	b299      	uxth	r1, r3
 800111c:	883a      	ldrh	r2, [r7, #0]
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff6d 	bl	8001000 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0+r, y0  , color);
 8001126:	88fa      	ldrh	r2, [r7, #6]
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	4413      	add	r3, r2
 800112c:	b29b      	uxth	r3, r3
 800112e:	883a      	ldrh	r2, [r7, #0]
 8001130:	88b9      	ldrh	r1, [r7, #4]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff64 	bl	8001000 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0-r, y0  , color);
 8001138:	88fa      	ldrh	r2, [r7, #6]
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	b29b      	uxth	r3, r3
 8001140:	883a      	ldrh	r2, [r7, #0]
 8001142:	88b9      	ldrh	r1, [r7, #4]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5b 	bl	8001000 <ST7789V_drawPixel>

  while (x<y) {
 800114a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800114e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001152:	429a      	cmp	r2, r3
 8001154:	f280 8083 	bge.w	800125e <ST7789V_drawCircle+0x19e>
    if (f >= 0) {
 8001158:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800115c:	2b00      	cmp	r3, #0
 800115e:	db0e      	blt.n	800117e <ST7789V_drawCircle+0xbe>
      y--;
 8001160:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001164:	b29b      	uxth	r3, r3
 8001166:	3b01      	subs	r3, #1
 8001168:	b29b      	uxth	r3, r3
 800116a:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 800116c:	8a7b      	ldrh	r3, [r7, #18]
 800116e:	3302      	adds	r3, #2
 8001170:	b29b      	uxth	r3, r3
 8001172:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8001174:	8afa      	ldrh	r2, [r7, #22]
 8001176:	8a7b      	ldrh	r3, [r7, #18]
 8001178:	4413      	add	r3, r2
 800117a:	b29b      	uxth	r3, r3
 800117c:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 800117e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001182:	b29b      	uxth	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800118a:	8abb      	ldrh	r3, [r7, #20]
 800118c:	3302      	adds	r3, #2
 800118e:	b29b      	uxth	r3, r3
 8001190:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8001192:	8afa      	ldrh	r2, [r7, #22]
 8001194:	8abb      	ldrh	r3, [r7, #20]
 8001196:	4413      	add	r3, r2
 8001198:	b29b      	uxth	r3, r3
 800119a:	82fb      	strh	r3, [r7, #22]
  
    ST7789V_drawPixel(x0 + x, y0 + y, color);
 800119c:	8a3a      	ldrh	r2, [r7, #16]
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	4413      	add	r3, r2
 80011a2:	b298      	uxth	r0, r3
 80011a4:	89fa      	ldrh	r2, [r7, #14]
 80011a6:	88bb      	ldrh	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	883a      	ldrh	r2, [r7, #0]
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff ff26 	bl	8001000 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 + y, color);
 80011b4:	8a3b      	ldrh	r3, [r7, #16]
 80011b6:	88fa      	ldrh	r2, [r7, #6]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	b298      	uxth	r0, r3
 80011bc:	89fa      	ldrh	r2, [r7, #14]
 80011be:	88bb      	ldrh	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	883a      	ldrh	r2, [r7, #0]
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff ff1a 	bl	8001000 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + x, y0 - y, color);
 80011cc:	8a3a      	ldrh	r2, [r7, #16]
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	4413      	add	r3, r2
 80011d2:	b298      	uxth	r0, r3
 80011d4:	89fb      	ldrh	r3, [r7, #14]
 80011d6:	88ba      	ldrh	r2, [r7, #4]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	b29b      	uxth	r3, r3
 80011dc:	883a      	ldrh	r2, [r7, #0]
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff ff0e 	bl	8001000 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 - y, color);
 80011e4:	8a3b      	ldrh	r3, [r7, #16]
 80011e6:	88fa      	ldrh	r2, [r7, #6]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	b298      	uxth	r0, r3
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	88ba      	ldrh	r2, [r7, #4]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	883a      	ldrh	r2, [r7, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff ff02 	bl	8001000 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 + x, color);
 80011fc:	89fa      	ldrh	r2, [r7, #14]
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	4413      	add	r3, r2
 8001202:	b298      	uxth	r0, r3
 8001204:	8a3a      	ldrh	r2, [r7, #16]
 8001206:	88bb      	ldrh	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	b29b      	uxth	r3, r3
 800120c:	883a      	ldrh	r2, [r7, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fef6 	bl	8001000 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 + x, color);
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	88fa      	ldrh	r2, [r7, #6]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	b298      	uxth	r0, r3
 800121c:	8a3a      	ldrh	r2, [r7, #16]
 800121e:	88bb      	ldrh	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	b29b      	uxth	r3, r3
 8001224:	883a      	ldrh	r2, [r7, #0]
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff feea 	bl	8001000 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 - x, color);
 800122c:	89fa      	ldrh	r2, [r7, #14]
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	4413      	add	r3, r2
 8001232:	b298      	uxth	r0, r3
 8001234:	8a3b      	ldrh	r3, [r7, #16]
 8001236:	88ba      	ldrh	r2, [r7, #4]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	b29b      	uxth	r3, r3
 800123c:	883a      	ldrh	r2, [r7, #0]
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fede 	bl	8001000 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 - x, color);
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	88fa      	ldrh	r2, [r7, #6]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	b298      	uxth	r0, r3
 800124c:	8a3b      	ldrh	r3, [r7, #16]
 800124e:	88ba      	ldrh	r2, [r7, #4]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	b29b      	uxth	r3, r3
 8001254:	883a      	ldrh	r2, [r7, #0]
 8001256:	4619      	mov	r1, r3
 8001258:	f7ff fed2 	bl	8001000 <ST7789V_drawPixel>
  while (x<y) {
 800125c:	e775      	b.n	800114a <ST7789V_drawCircle+0x8a>
  }
}
 800125e:	bf00      	nop
 8001260:	371c      	adds	r7, #28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd90      	pop	{r4, r7, pc}

08001266 <fillCircleHelper>:
      ST7789V_drawPixel(x0 - x, y0 - y, color);
    }
  }
}
static void fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color)
{
 8001266:	b590      	push	{r4, r7, lr}
 8001268:	b087      	sub	sp, #28
 800126a:	af00      	add	r7, sp, #0
 800126c:	4604      	mov	r4, r0
 800126e:	4608      	mov	r0, r1
 8001270:	4611      	mov	r1, r2
 8001272:	461a      	mov	r2, r3
 8001274:	4623      	mov	r3, r4
 8001276:	80fb      	strh	r3, [r7, #6]
 8001278:	4603      	mov	r3, r0
 800127a:	80bb      	strh	r3, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
 8001280:	4613      	mov	r3, r2
 8001282:	707b      	strb	r3, [r7, #1]
  int16_t f     = 1 - r;
 8001284:	887b      	ldrh	r3, [r7, #2]
 8001286:	f1c3 0301 	rsb	r3, r3, #1
 800128a:	b29b      	uxth	r3, r3
 800128c:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 800128e:	2301      	movs	r3, #1
 8001290:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	461a      	mov	r2, r3
 8001296:	03d2      	lsls	r2, r2, #15
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	b29b      	uxth	r3, r3
 800129e:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 80012a8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80012ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	da78      	bge.n	80013a6 <fillCircleHelper+0x140>
    if (f >= 0) {
 80012b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0e      	blt.n	80012da <fillCircleHelper+0x74>
      y--;
 80012bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3b01      	subs	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 80012c8:	8a7b      	ldrh	r3, [r7, #18]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 80012d0:	8afa      	ldrh	r2, [r7, #22]
 80012d2:	8a7b      	ldrh	r3, [r7, #18]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 80012da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	3301      	adds	r3, #1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 80012e6:	8abb      	ldrh	r3, [r7, #20]
 80012e8:	3302      	adds	r3, #2
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 80012ee:	8afa      	ldrh	r2, [r7, #22]
 80012f0:	8abb      	ldrh	r3, [r7, #20]
 80012f2:	4413      	add	r3, r2
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d025      	beq.n	800134e <fillCircleHelper+0xe8>
      ST7789V_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8001302:	8a3a      	ldrh	r2, [r7, #16]
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	4413      	add	r3, r2
 8001308:	b298      	uxth	r0, r3
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	88ba      	ldrh	r2, [r7, #4]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	b299      	uxth	r1, r3
 8001312:	89fb      	ldrh	r3, [r7, #14]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	b29a      	uxth	r2, r3
 8001318:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800131a:	4413      	add	r3, r2
 800131c:	b29b      	uxth	r3, r3
 800131e:	3301      	adds	r3, #1
 8001320:	b29a      	uxth	r2, r3
 8001322:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001324:	f000 f8fc 	bl	8001520 <ST7789V_drawFastVLine>
      ST7789V_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001328:	89fa      	ldrh	r2, [r7, #14]
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	4413      	add	r3, r2
 800132e:	b298      	uxth	r0, r3
 8001330:	8a3b      	ldrh	r3, [r7, #16]
 8001332:	88ba      	ldrh	r2, [r7, #4]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	b299      	uxth	r1, r3
 8001338:	8a3b      	ldrh	r3, [r7, #16]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	b29a      	uxth	r2, r3
 800133e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001340:	4413      	add	r3, r2
 8001342:	b29b      	uxth	r3, r3
 8001344:	3301      	adds	r3, #1
 8001346:	b29a      	uxth	r2, r3
 8001348:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800134a:	f000 f8e9 	bl	8001520 <ST7789V_drawFastVLine>
    }
    if (cornername & 0x2) {
 800134e:	787b      	ldrb	r3, [r7, #1]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0a7      	beq.n	80012a8 <fillCircleHelper+0x42>
      ST7789V_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001358:	8a3b      	ldrh	r3, [r7, #16]
 800135a:	88fa      	ldrh	r2, [r7, #6]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	b298      	uxth	r0, r3
 8001360:	89fb      	ldrh	r3, [r7, #14]
 8001362:	88ba      	ldrh	r2, [r7, #4]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	b299      	uxth	r1, r3
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	b29a      	uxth	r2, r3
 800136e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001370:	4413      	add	r3, r2
 8001372:	b29b      	uxth	r3, r3
 8001374:	3301      	adds	r3, #1
 8001376:	b29a      	uxth	r2, r3
 8001378:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800137a:	f000 f8d1 	bl	8001520 <ST7789V_drawFastVLine>
      ST7789V_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800137e:	89fb      	ldrh	r3, [r7, #14]
 8001380:	88fa      	ldrh	r2, [r7, #6]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	b298      	uxth	r0, r3
 8001386:	8a3b      	ldrh	r3, [r7, #16]
 8001388:	88ba      	ldrh	r2, [r7, #4]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	b299      	uxth	r1, r3
 800138e:	8a3b      	ldrh	r3, [r7, #16]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	b29a      	uxth	r2, r3
 8001394:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001396:	4413      	add	r3, r2
 8001398:	b29b      	uxth	r3, r3
 800139a:	3301      	adds	r3, #1
 800139c:	b29a      	uxth	r2, r3
 800139e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013a0:	f000 f8be 	bl	8001520 <ST7789V_drawFastVLine>
  while (x<y) {
 80013a4:	e780      	b.n	80012a8 <fillCircleHelper+0x42>
    }
  }
}
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd90      	pop	{r4, r7, pc}

080013ae <ST7789V_fillCircle>:

void ST7789V_fillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)
{
 80013ae:	b590      	push	{r4, r7, lr}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af02      	add	r7, sp, #8
 80013b4:	4604      	mov	r4, r0
 80013b6:	4608      	mov	r0, r1
 80013b8:	4611      	mov	r1, r2
 80013ba:	461a      	mov	r2, r3
 80013bc:	4623      	mov	r3, r4
 80013be:	80fb      	strh	r3, [r7, #6]
 80013c0:	4603      	mov	r3, r0
 80013c2:	80bb      	strh	r3, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	803b      	strh	r3, [r7, #0]
  ST7789V_drawFastVLine(x0, y0-r, 2*r+1, color);
 80013cc:	88ba      	ldrh	r2, [r7, #4]
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	b299      	uxth	r1, r3
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	3301      	adds	r3, #1
 80013dc:	b29a      	uxth	r2, r3
 80013de:	883b      	ldrh	r3, [r7, #0]
 80013e0:	88f8      	ldrh	r0, [r7, #6]
 80013e2:	f000 f89d 	bl	8001520 <ST7789V_drawFastVLine>
  fillCircleHelper(x0, y0, r, 3, 0, color);
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	88b9      	ldrh	r1, [r7, #4]
 80013ea:	88f8      	ldrh	r0, [r7, #6]
 80013ec:	883b      	ldrh	r3, [r7, #0]
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	2300      	movs	r3, #0
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2303      	movs	r3, #3
 80013f6:	f7ff ff36 	bl	8001266 <fillCircleHelper>
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd90      	pop	{r4, r7, pc}

08001402 <ST7789V_drawLine>:

void ST7789V_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8001402:	b590      	push	{r4, r7, lr}
 8001404:	b087      	sub	sp, #28
 8001406:	af00      	add	r7, sp, #0
 8001408:	4604      	mov	r4, r0
 800140a:	4608      	mov	r0, r1
 800140c:	4611      	mov	r1, r2
 800140e:	461a      	mov	r2, r3
 8001410:	4623      	mov	r3, r4
 8001412:	80fb      	strh	r3, [r7, #6]
 8001414:	4603      	mov	r3, r0
 8001416:	80bb      	strh	r3, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001420:	883b      	ldrh	r3, [r7, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	88bb      	ldrh	r3, [r7, #4]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800142c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	4619      	mov	r1, r3
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	1acb      	subs	r3, r1, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	bfb8      	it	lt
 800143c:	425b      	neglt	r3, r3
 800143e:	429a      	cmp	r2, r3
 8001440:	bfcc      	ite	gt
 8001442:	2301      	movgt	r3, #1
 8001444:	2300      	movle	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	827b      	strh	r3, [r7, #18]
  if (steep) {
 800144a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00b      	beq.n	800146a <ST7789V_drawLine+0x68>
	std::swap(x0, y0);
 8001452:	1d3a      	adds	r2, r7, #4
 8001454:	1dbb      	adds	r3, r7, #6
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f000 f88d 	bl	8001578 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(x1, y1);
 800145e:	463a      	mov	r2, r7
 8001460:	1cbb      	adds	r3, r7, #2
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f887 	bl	8001578 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  if (x0 > x1) {
 800146a:	88fa      	ldrh	r2, [r7, #6]
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	429a      	cmp	r2, r3
 8001470:	d90b      	bls.n	800148a <ST7789V_drawLine+0x88>
	std::swap(x0, x1);
 8001472:	1cba      	adds	r2, r7, #2
 8001474:	1dbb      	adds	r3, r7, #6
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f000 f87d 	bl	8001578 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(y0, y1);
 800147e:	463a      	mov	r2, r7
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f000 f877 	bl	8001578 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  uint16_t dx, dy;
  dx = x1 - x0;
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8001492:	883b      	ldrh	r3, [r7, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	88bb      	ldrh	r3, [r7, #4]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	bfb8      	it	lt
 800149e:	425b      	neglt	r3, r3
 80014a0:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx>>1;
 80014a2:	8a3b      	ldrh	r3, [r7, #16]
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	82fb      	strh	r3, [r7, #22]
  int16_t ystep;

  if (y0 < y1) {
 80014aa:	88ba      	ldrh	r2, [r7, #4]
 80014ac:	883b      	ldrh	r3, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d202      	bcs.n	80014b8 <ST7789V_drawLine+0xb6>
    ystep = 1;
 80014b2:	2301      	movs	r3, #1
 80014b4:	82bb      	strh	r3, [r7, #20]
 80014b6:	e002      	b.n	80014be <ST7789V_drawLine+0xbc>
  } else {
    ystep = -1;
 80014b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014bc:	82bb      	strh	r3, [r7, #20]
  }

  for (; x0<=x1; x0++) {
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d828      	bhi.n	8001518 <ST7789V_drawLine+0x116>
    if (steep) {
 80014c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d006      	beq.n	80014dc <ST7789V_drawLine+0xda>
      ST7789V_drawPixel(y0, x0, color);
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	88f9      	ldrh	r1, [r7, #6]
 80014d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fd93 	bl	8001000 <ST7789V_drawPixel>
 80014da:	e005      	b.n	80014e8 <ST7789V_drawLine+0xe6>
    } else {
      ST7789V_drawPixel(x0, y0, color);
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	88b9      	ldrh	r1, [r7, #4]
 80014e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fd8c 	bl	8001000 <ST7789V_drawPixel>
    }
    err -= dy;
 80014e8:	8afa      	ldrh	r2, [r7, #22]
 80014ea:	89fb      	ldrh	r3, [r7, #14]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	82fb      	strh	r3, [r7, #22]
    if (err < 0) {
 80014f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	da09      	bge.n	800150e <ST7789V_drawLine+0x10c>
      y0 += ystep;
 80014fa:	88ba      	ldrh	r2, [r7, #4]
 80014fc:	8abb      	ldrh	r3, [r7, #20]
 80014fe:	4413      	add	r3, r2
 8001500:	b29b      	uxth	r3, r3
 8001502:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8001504:	8afa      	ldrh	r2, [r7, #22]
 8001506:	8a3b      	ldrh	r3, [r7, #16]
 8001508:	4413      	add	r3, r2
 800150a:	b29b      	uxth	r3, r3
 800150c:	82fb      	strh	r3, [r7, #22]
  for (; x0<=x1; x0++) {
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	3301      	adds	r3, #1
 8001512:	b29b      	uxth	r3, r3
 8001514:	80fb      	strh	r3, [r7, #6]
 8001516:	e7d2      	b.n	80014be <ST7789V_drawLine+0xbc>
    }
  }
}	
 8001518:	bf00      	nop
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}

08001520 <ST7789V_drawFastVLine>:
{
	ST7789V_drawLine(x, y, x+w-1, y, color);
}

void ST7789V_drawFastVLine(uint16_t x, uint16_t y, uint16_t h, uint16_t color)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b085      	sub	sp, #20
 8001524:	af02      	add	r7, sp, #8
 8001526:	4604      	mov	r4, r0
 8001528:	4608      	mov	r0, r1
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4623      	mov	r3, r4
 8001530:	80fb      	strh	r3, [r7, #6]
 8001532:	4603      	mov	r3, r0
 8001534:	80bb      	strh	r3, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	807b      	strh	r3, [r7, #2]
 800153a:	4613      	mov	r3, r2
 800153c:	803b      	strh	r3, [r7, #0]
	ST7789V_drawLine(x, y, x, y+h-1, color);
 800153e:	88ba      	ldrh	r2, [r7, #4]
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	4413      	add	r3, r2
 8001544:	b29b      	uxth	r3, r3
 8001546:	3b01      	subs	r3, #1
 8001548:	b29c      	uxth	r4, r3
 800154a:	88fa      	ldrh	r2, [r7, #6]
 800154c:	88b9      	ldrh	r1, [r7, #4]
 800154e:	88f8      	ldrh	r0, [r7, #6]
 8001550:	883b      	ldrh	r3, [r7, #0]
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	4623      	mov	r3, r4
 8001556:	f7ff ff54 	bl	8001402 <ST7789V_drawLine>
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}

08001562 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffed 	bl	8001562 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8001588:	4603      	mov	r3, r0
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	81fb      	strh	r3, [r7, #14]
      __a = _GLIBCXX_MOVE(__b);
 800158e:	6838      	ldr	r0, [r7, #0]
 8001590:	f7ff ffe7 	bl	8001562 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8001594:	4603      	mov	r3, r0
 8001596:	881a      	ldrh	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	801a      	strh	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800159c:	f107 030e 	add.w	r3, r7, #14
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ffde 	bl	8001562 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 80015a6:	4603      	mov	r3, r0
 80015a8:	881a      	ldrh	r2, [r3, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	801a      	strh	r2, [r3, #0]
    }
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_MspInit+0x34>)
 80015c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c4:	4a09      	ldr	r2, [pc, #36]	; (80015ec <HAL_MspInit+0x34>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <HAL_MspInit+0x34>)
 80015d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80015dc:	2004      	movs	r0, #4
 80015de:	f000 ffa3 	bl	8002528 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	46020c00 	.word	0x46020c00

080015f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b0bc      	sub	sp, #240	; 0xf0
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	22c8      	movs	r2, #200	; 0xc8
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f008 f843 	bl	800969c <memset>
  if(hadc->Instance==ADC1)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a24      	ldr	r2, [pc, #144]	; (80016ac <HAL_ADC_MspInit+0xbc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d140      	bne.n	80016a2 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001620:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800162c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4618      	mov	r0, r3
 800163a:	f003 fdc5 	bl	80051c8 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001644:	f7ff fb68 	bl	8000d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_ADC_MspInit+0xc0>)
 800164a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <HAL_ADC_MspInit+0xc0>)
 8001650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001654:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_ADC_MspInit+0xc0>)
 800165a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800165e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_ADC_MspInit+0xc0>)
 8001668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800166c:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <HAL_ADC_MspInit+0xc0>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_ADC_MspInit+0xc0>)
 8001678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001684:	2304      	movs	r3, #4
 8001686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800168a:	2303      	movs	r3, #3
 800168c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <HAL_ADC_MspInit+0xc4>)
 800169e:	f000 ff83 	bl	80025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016a2:	bf00      	nop
 80016a4:	37f0      	adds	r7, #240	; 0xf0
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	42028000 	.word	0x42028000
 80016b0:	46020c00 	.word	0x46020c00
 80016b4:	42020800 	.word	0x42020800

080016b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b0bc      	sub	sp, #240	; 0xf0
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	22c8      	movs	r2, #200	; 0xc8
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f007 ffdf 	bl	800969c <memset>
  if(huart->Instance==USART1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a26      	ldr	r2, [pc, #152]	; (800177c <HAL_UART_MspInit+0xc4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d145      	bne.n	8001774 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016e8:	f04f 0201 	mov.w	r2, #1
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016f4:	2300      	movs	r3, #0
 80016f6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fd63 	bl	80051c8 <HAL_RCCEx_PeriphCLKConfig>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001708:	f7ff fb06 	bl	8000d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_UART_MspInit+0xc8>)
 800170e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001712:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <HAL_UART_MspInit+0xc8>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_UART_MspInit+0xc8>)
 800171e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_UART_MspInit+0xc8>)
 800172c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001730:	4a13      	ldr	r2, [pc, #76]	; (8001780 <HAL_UART_MspInit+0xc8>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_UART_MspInit+0xc8>)
 800173c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001748:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800174c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001756:	2302      	movs	r3, #2
 8001758:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001762:	2307      	movs	r3, #7
 8001764:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800176c:	4619      	mov	r1, r3
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <HAL_UART_MspInit+0xcc>)
 8001770:	f000 ff1a 	bl	80025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001774:	bf00      	nop
 8001776:	37f0      	adds	r7, #240	; 0xf0
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40013800 	.word	0x40013800
 8001780:	46020c00 	.word	0x46020c00
 8001784:	42020000 	.word	0x42020000

08001788 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b0be      	sub	sp, #248	; 0xf8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a0:	f107 0318 	add.w	r3, r7, #24
 80017a4:	22c8      	movs	r2, #200	; 0xc8
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f007 ff77 	bl	800969c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a3c      	ldr	r2, [pc, #240]	; (80018a4 <HAL_PCD_MspInit+0x11c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d171      	bne.n	800189c <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80017b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ca:	f107 0318 	add.w	r3, r7, #24
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 fcfa 	bl	80051c8 <HAL_RCCEx_PeriphCLKConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 80017da:	f7ff fa9d 	bl	8000d18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <HAL_PCD_MspInit+0x120>)
 80017e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017e4:	4a30      	ldr	r2, [pc, #192]	; (80018a8 <HAL_PCD_MspInit+0x120>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017ee:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <HAL_PCD_MspInit+0x120>)
 80017f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80017fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001800:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001816:	230a      	movs	r3, #10
 8001818:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001820:	4619      	mov	r1, r3
 8001822:	4822      	ldr	r0, [pc, #136]	; (80018ac <HAL_PCD_MspInit+0x124>)
 8001824:	f000 fec0 	bl	80025a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <HAL_PCD_MspInit+0x120>)
 800182a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800182e:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_PCD_MspInit+0x120>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001834:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_PCD_MspInit+0x120>)
 800183a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800183e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_PCD_MspInit+0x120>)
 8001848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d119      	bne.n	8001888 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_PCD_MspInit+0x120>)
 8001856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185a:	4a13      	ldr	r2, [pc, #76]	; (80018a8 <HAL_PCD_MspInit+0x120>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_PCD_MspInit+0x120>)
 8001866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001872:	f002 f9dd 	bl	8003c30 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_PCD_MspInit+0x120>)
 8001878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_PCD_MspInit+0x120>)
 800187e:	f023 0304 	bic.w	r3, r3, #4
 8001882:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001886:	e001      	b.n	800188c <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001888:	f002 f9d2 	bl	8003c30 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	2049      	movs	r0, #73	; 0x49
 8001892:	f000 fe54 	bl	800253e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001896:	2049      	movs	r0, #73	; 0x49
 8001898:	f000 fe6b 	bl	8002572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800189c:	bf00      	nop
 800189e:	37f8      	adds	r7, #248	; 0xf8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	42040000 	.word	0x42040000
 80018a8:	46020c00 	.word	0x46020c00
 80018ac:	42020000 	.word	0x42020000

080018b0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_FMC_MspInit+0x8c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d132      	bne.n	8001932 <HAL_FMC_MspInit+0x82>
    return;
  }
  FMC_Initialized = 1;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_FMC_MspInit+0x8c>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_FMC_MspInit+0x90>)
 80018d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d8:	4a19      	ldr	r2, [pc, #100]	; (8001940 <HAL_FMC_MspInit+0x90>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_FMC_MspInit+0x90>)
 80018e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80018f0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80018f4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001902:	230c      	movs	r3, #12
 8001904:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	4619      	mov	r1, r3
 800190a:	480e      	ldr	r0, [pc, #56]	; (8001944 <HAL_FMC_MspInit+0x94>)
 800190c:	f000 fe4c 	bl	80025a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001910:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8001914:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001922:	230c      	movs	r3, #12
 8001924:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	4619      	mov	r1, r3
 800192a:	4807      	ldr	r0, [pc, #28]	; (8001948 <HAL_FMC_MspInit+0x98>)
 800192c:	f000 fe3c 	bl	80025a8 <HAL_GPIO_Init>
 8001930:	e000      	b.n	8001934 <HAL_FMC_MspInit+0x84>
    return;
 8001932:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200006ac 	.word	0x200006ac
 8001940:	46020c00 	.word	0x46020c00
 8001944:	42021000 	.word	0x42021000
 8001948:	42020c00 	.word	0x42020c00

0800194c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001954:	f7ff ffac 	bl	80018b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <NMI_Handler+0x4>

08001966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196a:	e7fe      	b.n	800196a <HardFault_Handler+0x4>

0800196c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <MemManage_Handler+0x4>

08001972 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <BusFault_Handler+0x4>

08001978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <UsageFault_Handler+0x4>

0800197e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ac:	f000 f8d2 	bl	8001b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <OTG_FS_IRQHandler+0x10>)
 80019ba:	f001 f909 	bl	8002bd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000148 	.word	0x20000148

080019c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <SystemInit+0x68>)
 80019ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d2:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <SystemInit+0x68>)
 80019d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <SystemInit+0x6c>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <SystemInit+0x6c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <SystemInit+0x6c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <SystemInit+0x6c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <SystemInit+0x6c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <SystemInit+0x6c>)
 80019fa:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019fe:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a02:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <SystemInit+0x6c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <SystemInit+0x6c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <SystemInit+0x6c>)
 8001a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <SystemInit+0x6c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <SystemInit+0x68>)
 8001a1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a22:	609a      	str	r2, [r3, #8]
  #endif
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00
 8001a34:	46020c00 	.word	0x46020c00

08001a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a3e:	e003      	b.n	8001a48 <LoopCopyDataInit>

08001a40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a46:	3104      	adds	r1, #4

08001a48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a48:	480b      	ldr	r0, [pc, #44]	; (8001a78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a50:	d3f6      	bcc.n	8001a40 <CopyDataInit>
	ldr	r2, =_sbss
 8001a52:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a54:	e002      	b.n	8001a5c <LoopFillZerobss>

08001a56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a58:	f842 3b04 	str.w	r3, [r2], #4

08001a5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <LoopForever+0x16>)
	cmp	r2, r3
 8001a5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a60:	d3f9      	bcc.n	8001a56 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a62:	f7ff ffb1 	bl	80019c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a66:	f007 fdf5 	bl	8009654 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a6a:	f7fe fe39 	bl	80006e0 <main>

08001a6e <LoopForever>:

LoopForever:
    b LoopForever
 8001a6e:	e7fe      	b.n	8001a6e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001a70:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001a74:	080097d4 	.word	0x080097d4
	ldr	r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a7c:	2000000d 	.word	0x2000000d
	ldr	r2, =_sbss
 8001a80:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001a84:	200006b4 	.word	0x200006b4

08001a88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC1_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_Init+0x4c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_Init+0x4c>)
 8001a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 fd43 	bl	8002528 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001aa2:	f003 f9ad 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_Init+0x50>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	490b      	ldr	r1, [pc, #44]	; (8001ae0 <HAL_Init+0x54>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_Init+0x58>)
 8001aba:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001abc:	2000      	movs	r0, #0
 8001abe:	f000 f813 	bl	8001ae8 <HAL_InitTick>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e002      	b.n	8001ad2 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001acc:	f7ff fd74 	bl	80015b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	46020c00 	.word	0x46020c00
 8001ae0:	080096c4 	.word	0x080096c4
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_InitTick+0x60>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e021      	b.n	8001b40 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <HAL_InitTick+0x64>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_InitTick+0x60>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fd3b 	bl	800258e <HAL_SYSTICK_Config>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00e      	b.n	8001b40 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b0f      	cmp	r3, #15
 8001b26:	d80a      	bhi.n	8001b3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f000 fd05 	bl	800253e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b34:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <HAL_InitTick+0x68>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	2000000c 	.word	0x2000000c
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	20000008 	.word	0x20000008

08001b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x20>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x24>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <HAL_IncTick+0x24>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	2000000c 	.word	0x2000000c
 8001b78:	200006b0 	.word	0x200006b0

08001b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_GetTick+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	200006b0 	.word	0x200006b0

08001b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b9c:	f7ff ffee 	bl	8001b7c <HAL_GetTick>
 8001ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bac:	d005      	beq.n	8001bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_Delay+0x44>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bba:	bf00      	nop
 8001bbc:	f7ff ffde 	bl	8001b7c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d8f7      	bhi.n	8001bbc <HAL_Delay+0x28>
  {
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000000c 	.word	0x2000000c

08001bdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	601a      	str	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c10:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	2a00      	cmp	r2, #0
 8001c2c:	d002      	beq.n	8001c34 <LL_ADC_SetGainCompensation+0x32>
 8001c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c32:	e000      	b.n	8001c36 <LL_ADC_SetGainCompensation+0x34>
 8001c34:	2200      	movs	r2, #0
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	695a      	ldr	r2, [r3, #20]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2107      	movs	r1, #7
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	401a      	ands	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	431a      	orrs	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6093      	str	r3, [r2, #8]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cbe:	d101      	bne.n	8001cc4 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ce2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	609a      	str	r2, [r3, #8]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d0e:	d101      	bne.n	8001d14 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <LL_ADC_IsEnabled+0x18>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_ADC_IsEnabled+0x1a>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d101      	bne.n	8001d60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d101      	bne.n	8001d86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e2e3      	b.n	800237c <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a92      	ldr	r2, [pc, #584]	; (800200c <HAL_ADC_Init+0x278>)
 8001dc2:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d109      	bne.n	8001de0 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff fc0f 	bl	80015f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff60 	bl	8001caa <LL_ADC_IsDeepPowerDownEnabled>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d004      	beq.n	8001dfa <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff46 	bl	8001c86 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff7b 	bl	8001cfa <LL_ADC_IsInternalRegulatorEnabled>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d115      	bne.n	8001e36 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff5f 	bl	8001cd2 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e14:	4b7e      	ldr	r3, [pc, #504]	; (8002010 <HAL_ADC_Init+0x27c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	099b      	lsrs	r3, r3, #6
 8001e1a:	4a7e      	ldr	r2, [pc, #504]	; (8002014 <HAL_ADC_Init+0x280>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	099b      	lsrs	r3, r3, #6
 8001e22:	3301      	adds	r3, #1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e28:	e002      	b.n	8001e30 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f9      	bne.n	8001e2a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff5d 	bl	8001cfa <LL_ADC_IsInternalRegulatorEnabled>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10e      	bne.n	8001e64 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e4a:	f043 0210 	orr.w	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff6d 	bl	8001d48 <LL_ADC_REG_IsConversionOngoing>
 8001e6e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 8274 	bne.w	8002366 <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f040 8270 	bne.w	8002366 <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e8a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e8e:	f043 0202 	orr.w	r2, r3, #2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff41 	bl	8001d22 <LL_ADC_IsEnabled>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d14e      	bne.n	8001f44 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a58      	ldr	r2, [pc, #352]	; (800200c <HAL_ADC_Init+0x278>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d028      	beq.n	8001f02 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a58      	ldr	r2, [pc, #352]	; (8002018 <HAL_ADC_Init+0x284>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d109      	bne.n	8001ece <HAL_ADC_Init+0x13a>
 8001eba:	4857      	ldr	r0, [pc, #348]	; (8002018 <HAL_ADC_Init+0x284>)
 8001ebc:	f7ff ff31 	bl	8001d22 <LL_ADC_IsEnabled>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	bf0c      	ite	eq
 8001ec6:	2301      	moveq	r3, #1
 8001ec8:	2300      	movne	r3, #0
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	e008      	b.n	8001ee0 <HAL_ADC_Init+0x14c>
 8001ece:	484f      	ldr	r0, [pc, #316]	; (800200c <HAL_ADC_Init+0x278>)
 8001ed0:	f7ff ff27 	bl	8001d22 <LL_ADC_IsEnabled>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	bf0c      	ite	eq
 8001eda:	2301      	moveq	r3, #1
 8001edc:	2300      	movne	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d02f      	beq.n	8001f44 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a4b      	ldr	r2, [pc, #300]	; (8002018 <HAL_ADC_Init+0x284>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_Init+0x15e>
 8001eee:	4a4b      	ldr	r2, [pc, #300]	; (800201c <HAL_ADC_Init+0x288>)
 8001ef0:	e000      	b.n	8001ef4 <HAL_ADC_Init+0x160>
 8001ef2:	4a4b      	ldr	r2, [pc, #300]	; (8002020 <HAL_ADC_Init+0x28c>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f7ff fe6e 	bl	8001bdc <LL_ADC_SetCommonClock>
 8001f00:	e020      	b.n	8001f44 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f023 010c 	bic.w	r1, r3, #12
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d005      	beq.n	8001f24 <HAL_ADC_Init+0x190>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	e000      	b.n	8001f26 <HAL_ADC_Init+0x192>
 8001f24:	230c      	movs	r3, #12
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001f2e:	4b3c      	ldr	r3, [pc, #240]	; (8002020 <HAL_ADC_Init+0x28c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f3e:	4938      	ldr	r1, [pc, #224]	; (8002020 <HAL_ADC_Init+0x28c>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a30      	ldr	r2, [pc, #192]	; (800200c <HAL_ADC_Init+0x278>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d010      	beq.n	8001f70 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f54:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001f5a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001f60:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f68:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	623b      	str	r3, [r7, #32]
 8001f6e:	e030      	b.n	8001fd2 <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7f1b      	ldrb	r3, [r3, #28]
 8001f74:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f7c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f7e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f84:	2a00      	cmp	r2, #0
 8001f86:	d002      	beq.n	8001f8e <HAL_ADC_Init+0x1fa>
 8001f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f8c:	e000      	b.n	8001f90 <HAL_ADC_Init+0x1fc>
 8001f8e:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f90:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001f96:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	da04      	bge.n	8001faa <HAL_ADC_Init+0x216>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fa8:	e001      	b.n	8001fae <HAL_ADC_Init+0x21a>
 8001faa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8001fae:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4918      	ldr	r1, [pc, #96]	; (8002018 <HAL_ADC_Init+0x284>)
 8001fb6:	428b      	cmp	r3, r1
 8001fb8:	d103      	bne.n	8001fc2 <HAL_ADC_Init+0x22e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc0:	e003      	b.n	8001fca <HAL_ADC_Init+0x236>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001fca:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fcc:	6a3a      	ldr	r2, [r7, #32]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d12f      	bne.n	800203c <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <HAL_ADC_Init+0x278>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d007      	beq.n	8001ff6 <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	3b01      	subs	r3, #1
 8001fec:	045b      	lsls	r3, r3, #17
 8001fee:	6a3a      	ldr	r2, [r7, #32]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	e022      	b.n	800203c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d111      	bne.n	8002024 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	623b      	str	r3, [r7, #32]
 8002008:	e018      	b.n	800203c <HAL_ADC_Init+0x2a8>
 800200a:	bf00      	nop
 800200c:	46021000 	.word	0x46021000
 8002010:	20000004 	.word	0x20000004
 8002014:	053e2d63 	.word	0x053e2d63
 8002018:	42028000 	.word	0x42028000
 800201c:	42028308 	.word	0x42028308
 8002020:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a93      	ldr	r2, [pc, #588]	; (8002290 <HAL_ADC_Init+0x4fc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d018      	beq.n	8002078 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002052:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205a:	4313      	orrs	r3, r2
 800205c:	6a3a      	ldr	r2, [r7, #32]
 800205e:	4313      	orrs	r3, r2
 8002060:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	4b8a      	ldr	r3, [pc, #552]	; (8002294 <HAL_ADC_Init+0x500>)
 800206a:	4013      	ands	r3, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	6a39      	ldr	r1, [r7, #32]
 8002072:	430b      	orrs	r3, r1
 8002074:	60d3      	str	r3, [r2, #12]
 8002076:	e033      	b.n	80020e0 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207c:	2b00      	cmp	r3, #0
 800207e:	d009      	beq.n	8002094 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208c:	4313      	orrs	r3, r2
 800208e:	6a3a      	ldr	r2, [r7, #32]
 8002090:	4313      	orrs	r3, r2
 8002092:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 800209e:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	6a39      	ldr	r1, [r7, #32]
 80020a8:	430b      	orrs	r3, r1
 80020aa:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1a      	ldr	r2, [r3, #32]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a6a      	ldr	r2, [pc, #424]	; (8002290 <HAL_ADC_Init+0x4fc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	f000 8093 	beq.w	8002212 <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fe29 	bl	8001d48 <LL_ADC_REG_IsConversionOngoing>
 80020f6:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fe36 	bl	8001d6e <LL_ADC_INJ_IsConversionOngoing>
 8002102:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d161      	bne.n	80021ce <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d15e      	bne.n	80021ce <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7f1b      	ldrb	r3, [r3, #28]
 8002114:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	495f      	ldr	r1, [pc, #380]	; (8002298 <HAL_ADC_Init+0x504>)
 800211c:	428b      	cmp	r3, r1
 800211e:	d102      	bne.n	8002126 <HAL_ADC_Init+0x392>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	e002      	b.n	800212c <HAL_ADC_Init+0x398>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800212c:	4313      	orrs	r3, r2
 800212e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	6a39      	ldr	r1, [r7, #32]
 8002144:	430b      	orrs	r3, r1
 8002146:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f7ff fd51 	bl	8001c02 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002166:	2b01      	cmp	r3, #1
 8002168:	d11e      	bne.n	80021a8 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216e:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	4b49      	ldr	r3, [pc, #292]	; (800229c <HAL_ADC_Init+0x508>)
 8002178:	4013      	ands	r3, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800217e:	0411      	lsls	r1, r2, #16
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002184:	4311      	orrs	r1, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800218a:	4311      	orrs	r1, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002190:	4311      	orrs	r1, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002196:	0892      	lsrs	r2, r2, #2
 8002198:	430a      	orrs	r2, r1
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	611a      	str	r2, [r3, #16]
 80021a6:	e007      	b.n	80021b8 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10c      	bne.n	80021f0 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f023 010f 	bic.w	r1, r3, #15
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	1e5a      	subs	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30
 80021ee:	e007      	b.n	8002200 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 020f 	bic.w	r2, r2, #15
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002204:	f023 0303 	bic.w	r3, r3, #3
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002210:	e0b2      	b.n	8002378 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800221a:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8002220:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8002226:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	4313      	orrs	r3, r2
 800222c:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002234:	2b01      	cmp	r3, #1
 8002236:	d103      	bne.n	8002240 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <HAL_ADC_Init+0x50c>)
 8002248:	4013      	ands	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	69f9      	ldr	r1, [r7, #28]
 8002250:	430b      	orrs	r3, r1
 8002252:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225c:	461a      	mov	r2, r3
 800225e:	2100      	movs	r1, #0
 8002260:	f7ff fcf2 	bl	8001c48 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226c:	461a      	mov	r2, r3
 800226e:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8002272:	f7ff fce9 	bl	8001c48 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d112      	bne.n	80022a4 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f062 020f 	orn	r2, r2, #15
 800228c:	629a      	str	r2, [r3, #40]	; 0x28
 800228e:	e044      	b.n	800231a <HAL_ADC_Init+0x586>
 8002290:	46021000 	.word	0x46021000
 8002294:	fff0c013 	.word	0xfff0c013
 8002298:	42028000 	.word	0x42028000
 800229c:	fc00f81e 	.word	0xfc00f81e
 80022a0:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022ac:	d135      	bne.n	800231a <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	e00d      	b.n	80022d0 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	fa22 f303 	lsr.w	r3, r2, r3
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	2b0f      	cmp	r3, #15
 80022c8:	d006      	beq.n	80022d8 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2b07      	cmp	r3, #7
 80022d4:	d9ee      	bls.n	80022b4 <HAL_ADC_Init+0x520>
 80022d6:	e000      	b.n	80022da <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 80022d8:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d108      	bne.n	80022f2 <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f062 020f 	orn	r2, r2, #15
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
 80022f0:	e013      	b.n	800231a <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	3b01      	subs	r3, #1
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	f003 031c 	and.w	r3, r3, #28
 8002304:	f06f 020f 	mvn.w	r2, #15
 8002308:	fa02 f103 	lsl.w	r1, r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	4b18      	ldr	r3, [pc, #96]	; (8002384 <HAL_ADC_Init+0x5f0>)
 8002322:	4013      	ands	r3, r2
 8002324:	6a3a      	ldr	r2, [r7, #32]
 8002326:	429a      	cmp	r2, r3
 8002328:	d10b      	bne.n	8002342 <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002334:	f023 0303 	bic.w	r3, r3, #3
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002340:	e01a      	b.n	8002378 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002346:	f023 0312 	bic.w	r3, r3, #18
 800234a:	f043 0210 	orr.w	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002364:	e008      	b.n	8002378 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800236a:	f043 0210 	orr.w	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800237c:	4618      	mov	r0, r3
 800237e:	3728      	adds	r7, #40	; 0x28
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	833ffff3 	.word	0x833ffff3

08002388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	db0b      	blt.n	8002416 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	4907      	ldr	r1, [pc, #28]	; (8002424 <__NVIC_EnableIRQ+0x38>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2001      	movs	r0, #1
 800240e:	fa00 f202 	lsl.w	r2, r0, r2
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	db0a      	blt.n	8002452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	490c      	ldr	r1, [pc, #48]	; (8002474 <__NVIC_SetPriority+0x4c>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	440b      	add	r3, r1
 800244c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002450:	e00a      	b.n	8002468 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4908      	ldr	r1, [pc, #32]	; (8002478 <__NVIC_SetPriority+0x50>)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3b04      	subs	r3, #4
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	440b      	add	r3, r1
 8002466:	761a      	strb	r2, [r3, #24]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f1c3 0307 	rsb	r3, r3, #7
 8002496:	2b04      	cmp	r3, #4
 8002498:	bf28      	it	cs
 800249a:	2304      	movcs	r3, #4
 800249c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d902      	bls.n	80024ac <NVIC_EncodePriority+0x30>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3b03      	subs	r3, #3
 80024aa:	e000      	b.n	80024ae <NVIC_EncodePriority+0x32>
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	f04f 32ff 	mov.w	r2, #4294967295
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	401a      	ands	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43d9      	mvns	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	4313      	orrs	r3, r2
         );
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	; 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f4:	d301      	bcc.n	80024fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00f      	b.n	800251a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <SysTick_Config+0x40>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002502:	210f      	movs	r1, #15
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f7ff ff8e 	bl	8002428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <SysTick_Config+0x40>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <SysTick_Config+0x40>)
 8002514:	2207      	movs	r2, #7
 8002516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	e000e010 	.word	0xe000e010

08002528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff29 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800254c:	f7ff ff40 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 8002550:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	6978      	ldr	r0, [r7, #20]
 8002558:	f7ff ff90 	bl	800247c <NVIC_EncodePriority>
 800255c:	4602      	mov	r2, r0
 800255e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff5f 	bl	8002428 <__NVIC_SetPriority>
}
 800256a:	bf00      	nop
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff33 	bl	80023ec <__NVIC_EnableIRQ>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ffa4 	bl	80024e4 <SysTick_Config>
 800259c:	4603      	mov	r3, r0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80025ba:	e1ba      	b.n	8002932 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	2101      	movs	r1, #1
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	4013      	ands	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 81aa 	beq.w	800292c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a55      	ldr	r2, [pc, #340]	; (8002730 <HAL_GPIO_Init+0x188>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d15d      	bne.n	800269c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80025e6:	2201      	movs	r2, #1
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0201 	and.w	r2, r3, #1
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	4313      	orrs	r3, r2
 8002608:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002610:	4a48      	ldr	r2, [pc, #288]	; (8002734 <HAL_GPIO_Init+0x18c>)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002618:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800261a:	4a46      	ldr	r2, [pc, #280]	; (8002734 <HAL_GPIO_Init+0x18c>)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	3208      	adds	r2, #8
 800262e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002632:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	4013      	ands	r3, r2
 8002648:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220b      	movs	r2, #11
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	4313      	orrs	r3, r2
 800265c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	08da      	lsrs	r2, r3, #3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	3208      	adds	r2, #8
 8002666:	69f9      	ldr	r1, [r7, #28]
 8002668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	4013      	ands	r3, r2
 8002682:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2202      	movs	r2, #2
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	4313      	orrs	r3, r2
 8002692:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e067      	b.n	800276c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x104>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b12      	cmp	r3, #18
 80026aa:	d145      	bne.n	8002738 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	08da      	lsrs	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3208      	adds	r2, #8
 80026b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	220f      	movs	r2, #15
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f003 020f 	and.w	r2, r3, #15
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	08da      	lsrs	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3208      	adds	r2, #8
 80026f2:	69f9      	ldr	r1, [r7, #28]
 80026f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	4013      	ands	r3, r2
 800270e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0203 	and.w	r2, r3, #3
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	4313      	orrs	r3, r2
 8002724:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e01e      	b.n	800276c <HAL_GPIO_Init+0x1c4>
 800272e:	bf00      	nop
 8002730:	46020000 	.word	0x46020000
 8002734:	0800971c 	.word	0x0800971c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	4013      	ands	r3, r2
 800274e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0203 	and.w	r2, r3, #3
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	4313      	orrs	r3, r2
 8002764:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d00b      	beq.n	800278c <HAL_GPIO_Init+0x1e4>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d007      	beq.n	800278c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002780:	2b11      	cmp	r3, #17
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b12      	cmp	r3, #18
 800278a:	d130      	bne.n	80027ee <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80027c2:	2201      	movs	r2, #1
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 0201 	and.w	r2, r3, #1
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d017      	beq.n	8002826 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	2203      	movs	r2, #3
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	4013      	ands	r3, r2
 800280c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	4313      	orrs	r3, r2
 800281e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d07c      	beq.n	800292c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002832:	4a47      	ldr	r2, [pc, #284]	; (8002950 <HAL_GPIO_Init+0x3a8>)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3318      	adds	r3, #24
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	4013      	ands	r3, r2
 8002854:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	0a9a      	lsrs	r2, r3, #10
 800285a:	4b3e      	ldr	r3, [pc, #248]	; (8002954 <HAL_GPIO_Init+0x3ac>)
 800285c:	4013      	ands	r3, r2
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	f002 0203 	and.w	r2, r2, #3
 8002864:	00d2      	lsls	r2, r2, #3
 8002866:	4093      	lsls	r3, r2
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	4313      	orrs	r3, r2
 800286c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800286e:	4938      	ldr	r1, [pc, #224]	; (8002950 <HAL_GPIO_Init+0x3a8>)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3318      	adds	r3, #24
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800287c:	4b34      	ldr	r3, [pc, #208]	; (8002950 <HAL_GPIO_Init+0x3a8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	43db      	mvns	r3, r3
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	4013      	ands	r3, r2
 800288a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80028a0:	4a2b      	ldr	r2, [pc, #172]	; (8002950 <HAL_GPIO_Init+0x3a8>)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80028a6:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <HAL_GPIO_Init+0x3a8>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80028ca:	4a21      	ldr	r2, [pc, #132]	; (8002950 <HAL_GPIO_Init+0x3a8>)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <HAL_GPIO_Init+0x3a8>)
 80028d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	4013      	ands	r3, r2
 80028e0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80028f6:	4a16      	ldr	r2, [pc, #88]	; (8002950 <HAL_GPIO_Init+0x3a8>)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <HAL_GPIO_Init+0x3a8>)
 8002900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002904:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	43db      	mvns	r3, r3
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	4013      	ands	r3, r2
 800290e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4313      	orrs	r3, r2
 8002922:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002924:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <HAL_GPIO_Init+0x3a8>)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	3301      	adds	r3, #1
 8002930:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	f47f ae3d 	bne.w	80025bc <HAL_GPIO_Init+0x14>
  }
}
 8002942:	bf00      	nop
 8002944:	bf00      	nop
 8002946:	3724      	adds	r7, #36	; 0x24
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	46022000 	.word	0x46022000
 8002954:	002f7f7f 	.word	0x002f7f7f

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002974:	e002      	b.n	800297c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298a:	b08f      	sub	sp, #60	; 0x3c
 800298c:	af0a      	add	r7, sp, #40	; 0x28
 800298e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e116      	b.n	8002bc8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d106      	bne.n	80029ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7fe fee7 	bl	8001788 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2203      	movs	r2, #3
 80029be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f006 f935 	bl	8008c48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	687e      	ldr	r6, [r7, #4]
 80029e6:	466d      	mov	r5, sp
 80029e8:	f106 0410 	add.w	r4, r6, #16
 80029ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80029fc:	1d33      	adds	r3, r6, #4
 80029fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a00:	6838      	ldr	r0, [r7, #0]
 8002a02:	f006 f852 	bl	8008aaa <USB_CoreInit>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0d7      	b.n	8002bc8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f006 f923 	bl	8008c6a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]
 8002a28:	e04a      	b.n	8002ac0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a2a:	7bfa      	ldrb	r2, [r7, #15]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	333d      	adds	r3, #61	; 0x3d
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	333c      	adds	r3, #60	; 0x3c
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	b298      	uxth	r0, r3
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	3344      	adds	r3, #68	; 0x44
 8002a66:	4602      	mov	r2, r0
 8002a68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3340      	adds	r3, #64	; 0x40
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3348      	adds	r3, #72	; 0x48
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	334c      	adds	r3, #76	; 0x4c
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002aa6:	7bfa      	ldrb	r2, [r7, #15]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3354      	adds	r3, #84	; 0x54
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	3301      	adds	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d3af      	bcc.n	8002a2a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	e044      	b.n	8002b5a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	3301      	adds	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d3b5      	bcc.n	8002ad0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	687e      	ldr	r6, [r7, #4]
 8002b6c:	466d      	mov	r5, sp
 8002b6e:	f106 0410 	add.w	r4, r6, #16
 8002b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b82:	1d33      	adds	r3, r6, #4
 8002b84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b86:	6838      	ldr	r0, [r7, #0]
 8002b88:	f006 f8bc 	bl	8008d04 <USB_DevInit>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e014      	b.n	8002bc8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 ff38 	bl	8003a2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f006 fbcf 	bl	8009364 <USB_DevDisconnect>

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b08d      	sub	sp, #52	; 0x34
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f006 fc70 	bl	80094cc <USB_GetMode>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 84b7 	bne.w	8003562 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f006 fbd4 	bl	80093a6 <USB_ReadInterrupts>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 84ad 	beq.w	8003560 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f006 fbc1 	bl	80093a6 <USB_ReadInterrupts>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d107      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f002 0202 	and.w	r2, r2, #2
 8002c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f006 fbaf 	bl	80093a6 <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d161      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0210 	bic.w	r2, r2, #16
 8002c60:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f003 020f 	and.w	r2, r3, #15
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3304      	adds	r3, #4
 8002c80:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	0c5b      	lsrs	r3, r3, #17
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d124      	bne.n	8002cd8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d035      	beq.n	8002d06 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ca4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	6a38      	ldr	r0, [r7, #32]
 8002cae:	f006 fb01 	bl	80092b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cbe:	441a      	add	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	6a1a      	ldr	r2, [r3, #32]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cd0:	441a      	add	r2, r3
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	621a      	str	r2, [r3, #32]
 8002cd6:	e016      	b.n	8002d06 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	0c5b      	lsrs	r3, r3, #17
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	2b06      	cmp	r3, #6
 8002ce2:	d110      	bne.n	8002d06 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cea:	2208      	movs	r2, #8
 8002cec:	4619      	mov	r1, r3
 8002cee:	6a38      	ldr	r0, [r7, #32]
 8002cf0:	f006 fae0 	bl	80092b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	6a1a      	ldr	r2, [r3, #32]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d00:	441a      	add	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0210 	orr.w	r2, r2, #16
 8002d14:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f006 fb43 	bl	80093a6 <USB_ReadInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d2a:	f040 80a7 	bne.w	8002e7c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f006 fb48 	bl	80093cc <USB_ReadDevAllOutEpInterrupt>
 8002d3c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d3e:	e099      	b.n	8002e74 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 808e 	beq.w	8002e68 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f006 fb6c 	bl	8009434 <USB_ReadDevOutEPInterrupt>
 8002d5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00c      	beq.n	8002d82 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d74:	461a      	mov	r2, r3
 8002d76:	2301      	movs	r3, #1
 8002d78:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fd27 	bl	80037d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00c      	beq.n	8002da6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fdfd 	bl	80039a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2310      	movs	r3, #16
 8002dc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d030      	beq.n	8002e2e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd4:	2b80      	cmp	r3, #128	; 0x80
 8002dd6:	d109      	bne.n	8002dec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3304      	adds	r3, #4
 8002e00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	78db      	ldrb	r3, [r3, #3]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d108      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	4619      	mov	r1, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fbf0 	bl	80035fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e44:	461a      	mov	r2, r3
 8002e46:	2320      	movs	r3, #32
 8002e48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d009      	beq.n	8002e68 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e60:	461a      	mov	r2, r3
 8002e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f47f af62 	bne.w	8002d40 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f006 fa90 	bl	80093a6 <USB_ReadInterrupts>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e90:	f040 80db 	bne.w	800304a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f006 fab1 	bl	8009400 <USB_ReadDevAllInEpInterrupt>
 8002e9e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002ea4:	e0cd      	b.n	8003042 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80c2 	beq.w	8003036 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f006 fad7 	bl	8009470 <USB_ReadDevInEPInterrupt>
 8002ec2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d057      	beq.n	8002f7e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69f9      	ldr	r1, [r7, #28]
 8002eea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002eee:	4013      	ands	r3, r2
 8002ef0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002efe:	461a      	mov	r2, r3
 8002f00:	2301      	movs	r3, #1
 8002f02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d132      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	334c      	adds	r3, #76	; 0x4c
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4403      	add	r3, r0
 8002f2c:	3348      	adds	r3, #72	; 0x48
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4419      	add	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4403      	add	r3, r0
 8002f40:	334c      	adds	r3, #76	; 0x4c
 8002f42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d113      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x3a2>
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	3354      	adds	r3, #84	; 0x54
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d108      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	f006 fadf 	bl	8009530 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	4619      	mov	r1, r3
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fb01 	bl	8003580 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f94:	461a      	mov	r2, r3
 8002f96:	2308      	movs	r3, #8
 8002f98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2340      	movs	r3, #64	; 0x40
 8002fd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d023      	beq.n	8003024 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fde:	6a38      	ldr	r0, [r7, #32]
 8002fe0:	f005 ffde 	bl	8008fa0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	3338      	adds	r3, #56	; 0x38
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	78db      	ldrb	r3, [r3, #3]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d108      	bne.n	8003012 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2200      	movs	r2, #0
 8003004:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	b2db      	uxtb	r3, r3
 800300a:	4619      	mov	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fb01 	bl	8003614 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301e:	461a      	mov	r2, r3
 8003020:	2302      	movs	r3, #2
 8003022:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800302e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fb40 	bl	80036b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	3301      	adds	r3, #1
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	f47f af2e 	bne.w	8002ea6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f006 f9a9 	bl	80093a6 <USB_ReadInterrupts>
 8003054:	4603      	mov	r3, r0
 8003056:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800305a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800305e:	d122      	bne.n	80030a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800307a:	2b01      	cmp	r3, #1
 800307c:	d108      	bne.n	8003090 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003086:	2100      	movs	r1, #0
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fcf3 	bl	8003a74 <HAL_PCDEx_LPM_Callback>
 800308e:	e002      	b.n	8003096 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 faa9 	bl	80035e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f006 f97b 	bl	80093a6 <USB_ReadInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ba:	d112      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d102      	bne.n	80030d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 fa81 	bl	80035d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f006 f95d 	bl	80093a6 <USB_ReadInterrupts>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030f6:	d121      	bne.n	800313c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003106:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800310e:	2b00      	cmp	r3, #0
 8003110:	d111      	bne.n	8003136 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	f003 020f 	and.w	r2, r3, #15
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800312c:	2101      	movs	r1, #1
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fca0 	bl	8003a74 <HAL_PCDEx_LPM_Callback>
 8003134:	e002      	b.n	800313c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fa4c 	bl	80035d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f006 f930 	bl	80093a6 <USB_ReadInterrupts>
 8003146:	4603      	mov	r3, r0
 8003148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003150:	f040 80b7 	bne.w	80032c2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2110      	movs	r1, #16
 800316e:	4618      	mov	r0, r3
 8003170:	f005 ff16 	bl	8008fa0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003174:	2300      	movs	r3, #0
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003178:	e046      	b.n	8003208 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003186:	461a      	mov	r2, r3
 8003188:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800318c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800319e:	0151      	lsls	r1, r2, #5
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	440a      	add	r2, r1
 80031a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ba:	461a      	mov	r2, r3
 80031bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031d2:	0151      	lsls	r1, r2, #5
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	440a      	add	r2, r1
 80031d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f2:	0151      	lsls	r1, r2, #5
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	440a      	add	r2, r1
 80031f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003200:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	3301      	adds	r3, #1
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800320e:	429a      	cmp	r2, r3
 8003210:	d3b3      	bcc.n	800317a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003220:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003224:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	2b00      	cmp	r3, #0
 800322c:	d016      	beq.n	800325c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800323e:	f043 030b 	orr.w	r3, r3, #11
 8003242:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003254:	f043 030b 	orr.w	r3, r3, #11
 8003258:	6453      	str	r3, [r2, #68]	; 0x44
 800325a:	e015      	b.n	8003288 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800326a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800326e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003272:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003282:	f043 030b 	orr.w	r3, r3, #11
 8003286:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003296:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800329a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032ac:	461a      	mov	r2, r3
 80032ae:	f006 f93f 	bl	8009530 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80032c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f006 f86d 	bl	80093a6 <USB_ReadInterrupts>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d6:	d124      	bne.n	8003322 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f006 f903 	bl	80094e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f005 fed7 	bl	800909a <USB_GetDevSpeed>
 80032ec:	4603      	mov	r3, r0
 80032ee:	461a      	mov	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681c      	ldr	r4, [r3, #0]
 80032f8:	f001 fe8a 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 80032fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	4620      	mov	r0, r4
 8003308:	f005 fbfc 	bl	8008b04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f957 	bl	80035c0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003320:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f006 f83d 	bl	80093a6 <USB_ReadInterrupts>
 800332c:	4603      	mov	r3, r0
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b08      	cmp	r3, #8
 8003334:	d10a      	bne.n	800334c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f938 	bl	80035ac <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f002 0208 	and.w	r2, r2, #8
 800334a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f006 f828 	bl	80093a6 <USB_ReadInterrupts>
 8003356:	4603      	mov	r3, r0
 8003358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335c:	2b80      	cmp	r3, #128	; 0x80
 800335e:	d122      	bne.n	80033a6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800336c:	2301      	movs	r3, #1
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
 8003370:	e014      	b.n	800339c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d105      	bne.n	8003396 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	b2db      	uxtb	r3, r3
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f95f 	bl	8003654 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	3301      	adds	r3, #1
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d3e5      	bcc.n	8003372 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f005 fffb 	bl	80093a6 <USB_ReadInterrupts>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ba:	d13b      	bne.n	8003434 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033bc:	2301      	movs	r3, #1
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
 80033c0:	e02b      	b.n	800341a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	3340      	adds	r3, #64	; 0x40
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d115      	bne.n	8003414 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80033e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	da12      	bge.n	8003414 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	333f      	adds	r3, #63	; 0x3f
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800340a:	b2db      	uxtb	r3, r3
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f920 	bl	8003654 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	3301      	adds	r3, #1
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	429a      	cmp	r2, r3
 8003422:	d3ce      	bcc.n	80033c2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003432:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f005 ffb4 	bl	80093a6 <USB_ReadInterrupts>
 800343e:	4603      	mov	r3, r0
 8003440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003444:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003448:	d155      	bne.n	80034f6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800344a:	2301      	movs	r3, #1
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
 800344e:	e045      	b.n	80034dc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d12e      	bne.n	80034d6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003478:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800347a:	2b00      	cmp	r3, #0
 800347c:	da2b      	bge.n	80034d6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800348a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800348e:	429a      	cmp	r2, r3
 8003490:	d121      	bne.n	80034d6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10a      	bne.n	80034d6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034d2:	6053      	str	r3, [r2, #4]
            break;
 80034d4:	e007      	b.n	80034e6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	3301      	adds	r3, #1
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d3b4      	bcc.n	8003450 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80034f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f005 ff53 	bl	80093a6 <USB_ReadInterrupts>
 8003500:	4603      	mov	r3, r0
 8003502:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350a:	d10a      	bne.n	8003522 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f88d 	bl	800362c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003520:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f005 ff3d 	bl	80093a6 <USB_ReadInterrupts>
 800352c:	4603      	mov	r3, r0
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b04      	cmp	r3, #4
 8003534:	d115      	bne.n	8003562 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f879 	bl	8003640 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	e000      	b.n	8003562 <HAL_PCD_IRQHandler+0x992>
      return;
 8003560:	bf00      	nop
    }
  }
}
 8003562:	3734      	adds	r7, #52	; 0x34
 8003564:	46bd      	mov	sp, r7
 8003566:	bd90      	pop	{r4, r7, pc}

08003568 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003664:	2b00      	cmp	r3, #0
 8003666:	da0c      	bge.n	8003682 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	f003 020f 	and.w	r2, r3, #15
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	3338      	adds	r3, #56	; 0x38
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	4413      	add	r3, r2
 800367c:	3304      	adds	r3, #4
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	e00c      	b.n	800369c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	f003 020f 	and.w	r2, r3, #15
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	3304      	adds	r3, #4
 800369a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68f9      	ldr	r1, [r7, #12]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f005 fd1e 	bl	80090e4 <USB_EPStopXfer>
 80036a8:	4603      	mov	r3, r0
 80036aa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036ac:	7afb      	ldrb	r3, [r7, #11]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b08a      	sub	sp, #40	; 0x28
 80036ba:	af02      	add	r7, sp, #8
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	3338      	adds	r3, #56	; 0x38
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	4413      	add	r3, r2
 80036da:	3304      	adds	r3, #4
 80036dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1a      	ldr	r2, [r3, #32]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d901      	bls.n	80036ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e06c      	b.n	80037c8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	429a      	cmp	r2, r3
 8003702:	d902      	bls.n	800370a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3303      	adds	r3, #3
 800370e:	089b      	lsrs	r3, r3, #2
 8003710:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003712:	e02b      	b.n	800376c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	699a      	ldr	r2, [r3, #24]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	429a      	cmp	r2, r3
 8003728:	d902      	bls.n	8003730 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	3303      	adds	r3, #3
 8003734:	089b      	lsrs	r3, r3, #2
 8003736:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6919      	ldr	r1, [r3, #16]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	b2da      	uxtb	r2, r3
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003748:	b2db      	uxtb	r3, r3
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	4603      	mov	r3, r0
 800374e:	6978      	ldr	r0, [r7, #20]
 8003750:	f005 fd72 	bl	8009238 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	441a      	add	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1a      	ldr	r2, [r3, #32]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	441a      	add	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	b29b      	uxth	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	429a      	cmp	r2, r3
 8003780:	d809      	bhi.n	8003796 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a1a      	ldr	r2, [r3, #32]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800378a:	429a      	cmp	r2, r3
 800378c:	d203      	bcs.n	8003796 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1be      	bne.n	8003714 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d811      	bhi.n	80037c6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	2201      	movs	r2, #1
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	6939      	ldr	r1, [r7, #16]
 80037be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037c2:	4013      	ands	r3, r2
 80037c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3720      	adds	r7, #32
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	333c      	adds	r3, #60	; 0x3c
 80037e8:	3304      	adds	r3, #4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d17b      	bne.n	80038fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d015      	beq.n	800383c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	4a61      	ldr	r2, [pc, #388]	; (8003998 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	f240 80b9 	bls.w	800398c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80b3 	beq.w	800398c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003832:	461a      	mov	r2, r3
 8003834:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003838:	6093      	str	r3, [r2, #8]
 800383a:	e0a7      	b.n	800398c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003852:	461a      	mov	r2, r3
 8003854:	2320      	movs	r3, #32
 8003856:	6093      	str	r3, [r2, #8]
 8003858:	e098      	b.n	800398c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003860:	2b00      	cmp	r3, #0
 8003862:	f040 8093 	bne.w	800398c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	4a4b      	ldr	r2, [pc, #300]	; (8003998 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d90f      	bls.n	800388e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003884:	461a      	mov	r2, r3
 8003886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800388a:	6093      	str	r3, [r2, #8]
 800388c:	e07e      	b.n	800398c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4413      	add	r3, r2
 80038a0:	3304      	adds	r3, #4
 80038a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	0159      	lsls	r1, r3, #5
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	440b      	add	r3, r1
 80038b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ba:	1ad2      	subs	r2, r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038d8:	461a      	mov	r2, r3
 80038da:	2101      	movs	r1, #1
 80038dc:	f005 fe28 	bl	8009530 <USB_EP0_OutStart>
 80038e0:	e006      	b.n	80038f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	441a      	add	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	4619      	mov	r1, r3
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff fe36 	bl	8003568 <HAL_PCD_DataOutStageCallback>
 80038fc:	e046      	b.n	800398c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	4a26      	ldr	r2, [pc, #152]	; (800399c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d124      	bne.n	8003950 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391c:	461a      	mov	r2, r3
 800391e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003922:	6093      	str	r3, [r2, #8]
 8003924:	e032      	b.n	800398c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393c:	461a      	mov	r2, r3
 800393e:	2320      	movs	r3, #32
 8003940:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff fe0d 	bl	8003568 <HAL_PCD_DataOutStageCallback>
 800394e:	e01d      	b.n	800398c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d114      	bne.n	8003980 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d108      	bne.n	8003980 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003978:	461a      	mov	r2, r3
 800397a:	2100      	movs	r1, #0
 800397c:	f005 fdd8 	bl	8009530 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	4619      	mov	r1, r3
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff fdee 	bl	8003568 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	4f54300a 	.word	0x4f54300a
 800399c:	4f54310a 	.word	0x4f54310a

080039a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	333c      	adds	r3, #60	; 0x3c
 80039b8:	3304      	adds	r3, #4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a15      	ldr	r2, [pc, #84]	; (8003a28 <PCD_EP_OutSetupPacket_int+0x88>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d90e      	bls.n	80039f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ec:	461a      	mov	r2, r3
 80039ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff fdcf 	bl	8003598 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <PCD_EP_OutSetupPacket_int+0x88>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d90c      	bls.n	8003a1c <PCD_EP_OutSetupPacket_int+0x7c>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d108      	bne.n	8003a1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a14:	461a      	mov	r2, r3
 8003a16:	2101      	movs	r1, #1
 8003a18:	f005 fd8a 	bl	8009530 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	4f54300a 	.word	0x4f54300a

08003a2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	f043 0303 	orr.w	r3, r3, #3
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003a94:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a9c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d101      	bne.n	8003aaa <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e057      	b.n	8003b5a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab0:	d90a      	bls.n	8003ac8 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003ab2:	4b2d      	ldr	r3, [pc, #180]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac4:	60d3      	str	r3, [r2, #12]
 8003ac6:	e007      	b.n	8003ad8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003ac8:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ad0:	4925      	ldr	r1, [pc, #148]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003ad8:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a24      	ldr	r2, [pc, #144]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	2232      	movs	r2, #50	; 0x32
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	4a21      	ldr	r2, [pc, #132]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	3301      	adds	r3, #1
 8003af4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003af6:	e002      	b.n	8003afe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003afe:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d102      	bne.n	8003b10 <HAL_PWREx_ControlVoltageScaling+0x84>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f3      	bne.n	8003af8 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01b      	beq.n	8003b4e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003b16:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	099b      	lsrs	r3, r3, #6
 8003b22:	2232      	movs	r2, #50	; 0x32
 8003b24:	fb02 f303 	mul.w	r3, r2, r3
 8003b28:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	099b      	lsrs	r3, r3, #6
 8003b30:	3301      	adds	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003b34:	e002      	b.n	8003b3c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d102      	bne.n	8003b4e <HAL_PWREx_ControlVoltageScaling+0xc2>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f3      	bne.n	8003b36 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e000      	b.n	8003b5a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	46020800 	.word	0x46020800
 8003b6c:	20000004 	.word	0x20000004
 8003b70:	10624dd3 	.word	0x10624dd3

08003b74 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <HAL_PWREx_GetVoltageRange+0x18>)
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	46020800 	.word	0x46020800

08003b90 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003b98:	4b22      	ldr	r3, [pc, #136]	; (8003c24 <HAL_PWREx_ConfigSupply+0x94>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a22      	ldr	r2, [pc, #136]	; (8003c28 <HAL_PWREx_ConfigSupply+0x98>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	099b      	lsrs	r3, r3, #6
 8003ba4:	2232      	movs	r2, #50	; 0x32
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	4a1f      	ldr	r2, [pc, #124]	; (8003c28 <HAL_PWREx_ConfigSupply+0x98>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	099b      	lsrs	r3, r3, #6
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d113      	bne.n	8003be4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <HAL_PWREx_ConfigSupply+0x9c>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4a1a      	ldr	r2, [pc, #104]	; (8003c2c <HAL_PWREx_ConfigSupply+0x9c>)
 8003bc2:	f023 0302 	bic.w	r3, r3, #2
 8003bc6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003bc8:	e002      	b.n	8003bd0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003bd0:	4b16      	ldr	r3, [pc, #88]	; (8003c2c <HAL_PWREx_ConfigSupply+0x9c>)
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d116      	bne.n	8003c0a <HAL_PWREx_ConfigSupply+0x7a>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f3      	bne.n	8003bca <HAL_PWREx_ConfigSupply+0x3a>
 8003be2:	e012      	b.n	8003c0a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_PWREx_ConfigSupply+0x9c>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <HAL_PWREx_ConfigSupply+0x9c>)
 8003bea:	f043 0302 	orr.w	r3, r3, #2
 8003bee:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003bf0:	e002      	b.n	8003bf8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <HAL_PWREx_ConfigSupply+0x9c>)
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <HAL_PWREx_ConfigSupply+0x7a>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f3      	bne.n	8003bf2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e000      	b.n	8003c16 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000004 	.word	0x20000004
 8003c28:	10624dd3 	.word	0x10624dd3
 8003c2c:	46020800 	.word	0x46020800

08003c30 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	6113      	str	r3, [r2, #16]
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	46020800 	.word	0x46020800

08003c50 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003c5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c5e:	6113      	str	r3, [r2, #16]
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	46020800 	.word	0x46020800

08003c70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08e      	sub	sp, #56	; 0x38
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f000 bec3 	b.w	8004a10 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c8a:	4b9c      	ldr	r3, [pc, #624]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c94:	4b99      	ldr	r3, [pc, #612]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8172 	beq.w	8003f90 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x52>
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	f040 80e4 	bne.w	8003e82 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f040 80e0 	bne.w	8003e82 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cc2:	4b8e      	ldr	r3, [pc, #568]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d006      	beq.n	8003cdc <HAL_RCC_OscConfig+0x6c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f000 be9a 	b.w	8004a10 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ce0:	4b86      	ldr	r3, [pc, #536]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x86>
 8003cec:	4b83      	ldr	r3, [pc, #524]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003cf4:	e005      	b.n	8003d02 <HAL_RCC_OscConfig+0x92>
 8003cf6:	4b81      	ldr	r3, [pc, #516]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003cf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cfc:	041b      	lsls	r3, r3, #16
 8003cfe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d255      	bcs.n	8003db2 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	4618      	mov	r0, r3
 8003d12:	f001 f9d3 	bl	80050bc <RCC_SetFlashLatencyFromMSIRange>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f000 be77 	b.w	8004a10 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003d22:	4b76      	ldr	r3, [pc, #472]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	4a75      	ldr	r2, [pc, #468]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003d28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d2c:	6093      	str	r3, [r2, #8]
 8003d2e:	4b73      	ldr	r3, [pc, #460]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	4970      	ldr	r1, [pc, #448]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003d48:	d309      	bcc.n	8003d5e <HAL_RCC_OscConfig+0xee>
 8003d4a:	4b6c      	ldr	r3, [pc, #432]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f023 021f 	bic.w	r2, r3, #31
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	4969      	ldr	r1, [pc, #420]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60cb      	str	r3, [r1, #12]
 8003d5c:	e07e      	b.n	8003e5c <HAL_RCC_OscConfig+0x1ec>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	da0a      	bge.n	8003d7c <HAL_RCC_OscConfig+0x10c>
 8003d66:	4b65      	ldr	r3, [pc, #404]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	015b      	lsls	r3, r3, #5
 8003d74:	4961      	ldr	r1, [pc, #388]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60cb      	str	r3, [r1, #12]
 8003d7a:	e06f      	b.n	8003e5c <HAL_RCC_OscConfig+0x1ec>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d84:	d30a      	bcc.n	8003d9c <HAL_RCC_OscConfig+0x12c>
 8003d86:	4b5d      	ldr	r3, [pc, #372]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	029b      	lsls	r3, r3, #10
 8003d94:	4959      	ldr	r1, [pc, #356]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60cb      	str	r3, [r1, #12]
 8003d9a:	e05f      	b.n	8003e5c <HAL_RCC_OscConfig+0x1ec>
 8003d9c:	4b57      	ldr	r3, [pc, #348]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	03db      	lsls	r3, r3, #15
 8003daa:	4954      	ldr	r1, [pc, #336]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60cb      	str	r3, [r1, #12]
 8003db0:	e054      	b.n	8003e5c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003db2:	4b52      	ldr	r3, [pc, #328]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	4a51      	ldr	r2, [pc, #324]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003db8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dbc:	6093      	str	r3, [r2, #8]
 8003dbe:	4b4f      	ldr	r3, [pc, #316]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	494c      	ldr	r1, [pc, #304]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003dd8:	d309      	bcc.n	8003dee <HAL_RCC_OscConfig+0x17e>
 8003dda:	4b48      	ldr	r3, [pc, #288]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f023 021f 	bic.w	r2, r3, #31
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	4945      	ldr	r1, [pc, #276]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60cb      	str	r3, [r1, #12]
 8003dec:	e028      	b.n	8003e40 <HAL_RCC_OscConfig+0x1d0>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	da0a      	bge.n	8003e0c <HAL_RCC_OscConfig+0x19c>
 8003df6:	4b41      	ldr	r3, [pc, #260]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	015b      	lsls	r3, r3, #5
 8003e04:	493d      	ldr	r1, [pc, #244]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60cb      	str	r3, [r1, #12]
 8003e0a:	e019      	b.n	8003e40 <HAL_RCC_OscConfig+0x1d0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e14:	d30a      	bcc.n	8003e2c <HAL_RCC_OscConfig+0x1bc>
 8003e16:	4b39      	ldr	r3, [pc, #228]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	029b      	lsls	r3, r3, #10
 8003e24:	4935      	ldr	r1, [pc, #212]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60cb      	str	r3, [r1, #12]
 8003e2a:	e009      	b.n	8003e40 <HAL_RCC_OscConfig+0x1d0>
 8003e2c:	4b33      	ldr	r3, [pc, #204]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	03db      	lsls	r3, r3, #15
 8003e3a:	4930      	ldr	r1, [pc, #192]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 f936 	bl	80050bc <RCC_SetFlashLatencyFromMSIRange>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f000 bdda 	b.w	8004a10 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003e5c:	f001 f8d8 	bl	8005010 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e60:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <HAL_RCC_OscConfig+0x290>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd fe3f 	bl	8001ae8 <HAL_InitTick>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 808a 	beq.w	8003f8e <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8003e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e7e:	f000 bdc7 	b.w	8004a10 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d066      	beq.n	8003f58 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003e8a:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1b      	ldr	r2, [pc, #108]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003e96:	f7fd fe71 	bl	8001b7c <HAL_GetTick>
 8003e9a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003e9c:	e009      	b.n	8003eb2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e9e:	f7fd fe6d 	bl	8001b7c <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d902      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	f000 bdaf 	b.w	8004a10 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0ef      	beq.n	8003e9e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	4a0e      	ldr	r2, [pc, #56]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003ec4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ec8:	6093      	str	r3, [r2, #8]
 8003eca:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	4909      	ldr	r1, [pc, #36]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003ee4:	d30e      	bcc.n	8003f04 <HAL_RCC_OscConfig+0x294>
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f023 021f 	bic.w	r2, r3, #31
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	4902      	ldr	r1, [pc, #8]	; (8003efc <HAL_RCC_OscConfig+0x28c>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60cb      	str	r3, [r1, #12]
 8003ef8:	e04a      	b.n	8003f90 <HAL_RCC_OscConfig+0x320>
 8003efa:	bf00      	nop
 8003efc:	46020c00 	.word	0x46020c00
 8003f00:	20000008 	.word	0x20000008
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	da0a      	bge.n	8003f22 <HAL_RCC_OscConfig+0x2b2>
 8003f0c:	4b9b      	ldr	r3, [pc, #620]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	015b      	lsls	r3, r3, #5
 8003f1a:	4998      	ldr	r1, [pc, #608]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60cb      	str	r3, [r1, #12]
 8003f20:	e036      	b.n	8003f90 <HAL_RCC_OscConfig+0x320>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2a:	d30a      	bcc.n	8003f42 <HAL_RCC_OscConfig+0x2d2>
 8003f2c:	4b93      	ldr	r3, [pc, #588]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	029b      	lsls	r3, r3, #10
 8003f3a:	4990      	ldr	r1, [pc, #576]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60cb      	str	r3, [r1, #12]
 8003f40:	e026      	b.n	8003f90 <HAL_RCC_OscConfig+0x320>
 8003f42:	4b8e      	ldr	r3, [pc, #568]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	03db      	lsls	r3, r3, #15
 8003f50:	498a      	ldr	r1, [pc, #552]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60cb      	str	r3, [r1, #12]
 8003f56:	e01b      	b.n	8003f90 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003f58:	4b88      	ldr	r3, [pc, #544]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a87      	ldr	r2, [pc, #540]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f64:	f7fd fe0a 	bl	8001b7c <HAL_GetTick>
 8003f68:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003f6a:	e009      	b.n	8003f80 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f6c:	f7fd fe06 	bl	8001b7c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d902      	bls.n	8003f80 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	f000 bd48 	b.w	8004a10 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003f80:	4b7e      	ldr	r3, [pc, #504]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1ef      	bne.n	8003f6c <HAL_RCC_OscConfig+0x2fc>
 8003f8c:	e000      	b.n	8003f90 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8094 	beq.w	80040c6 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x340>
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	2b0c      	cmp	r3, #12
 8003fa8:	d110      	bne.n	8003fcc <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d10d      	bne.n	8003fcc <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb0:	4b72      	ldr	r3, [pc, #456]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 8083 	beq.w	80040c4 <HAL_RCC_OscConfig+0x454>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d17e      	bne.n	80040c4 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f000 bd22 	b.w	8004a10 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd4:	d106      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x374>
 8003fd6:	4b69      	ldr	r3, [pc, #420]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a68      	ldr	r2, [pc, #416]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e041      	b.n	8004068 <HAL_RCC_OscConfig+0x3f8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fec:	d112      	bne.n	8004014 <HAL_RCC_OscConfig+0x3a4>
 8003fee:	4b63      	ldr	r3, [pc, #396]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a62      	ldr	r2, [pc, #392]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b60      	ldr	r3, [pc, #384]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a5f      	ldr	r2, [pc, #380]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004000:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	4b5d      	ldr	r3, [pc, #372]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a5c      	ldr	r2, [pc, #368]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 800400c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	e029      	b.n	8004068 <HAL_RCC_OscConfig+0x3f8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800401c:	d112      	bne.n	8004044 <HAL_RCC_OscConfig+0x3d4>
 800401e:	4b57      	ldr	r3, [pc, #348]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a56      	ldr	r2, [pc, #344]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	4b54      	ldr	r3, [pc, #336]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a53      	ldr	r2, [pc, #332]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	4b51      	ldr	r3, [pc, #324]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a50      	ldr	r2, [pc, #320]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e011      	b.n	8004068 <HAL_RCC_OscConfig+0x3f8>
 8004044:	4b4d      	ldr	r3, [pc, #308]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a4c      	ldr	r2, [pc, #304]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 800404a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	4b4a      	ldr	r3, [pc, #296]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a49      	ldr	r2, [pc, #292]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	4b47      	ldr	r3, [pc, #284]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a46      	ldr	r2, [pc, #280]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004062:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d014      	beq.n	800409a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8004070:	f7fd fd84 	bl	8001b7c <HAL_GetTick>
 8004074:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004076:	e009      	b.n	800408c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004078:	f7fd fd80 	bl	8001b7c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b64      	cmp	r3, #100	; 0x64
 8004084:	d902      	bls.n	800408c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	f000 bcc2 	b.w	8004a10 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800408c:	4b3b      	ldr	r3, [pc, #236]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0ef      	beq.n	8004078 <HAL_RCC_OscConfig+0x408>
 8004098:	e015      	b.n	80040c6 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800409a:	f7fd fd6f 	bl	8001b7c <HAL_GetTick>
 800409e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040a0:	e009      	b.n	80040b6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a2:	f7fd fd6b 	bl	8001b7c <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b64      	cmp	r3, #100	; 0x64
 80040ae:	d902      	bls.n	80040b6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	f000 bcad 	b.w	8004a10 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040b6:	4b31      	ldr	r3, [pc, #196]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1ef      	bne.n	80040a2 <HAL_RCC_OscConfig+0x432>
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d066      	beq.n	80041a0 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_OscConfig+0x474>
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d11a      	bne.n	8004114 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d117      	bne.n	8004114 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e4:	4b25      	ldr	r3, [pc, #148]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d006      	beq.n	80040fe <HAL_RCC_OscConfig+0x48e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f000 bc89 	b.w	8004a10 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80040fe:	4b1f      	ldr	r3, [pc, #124]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	491b      	ldr	r1, [pc, #108]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 800410e:	4313      	orrs	r3, r2
 8004110:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004112:	e045      	b.n	80041a0 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d024      	beq.n	8004166 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800411c:	4b17      	ldr	r3, [pc, #92]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a16      	ldr	r2, [pc, #88]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004126:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004128:	f7fd fd28 	bl	8001b7c <HAL_GetTick>
 800412c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412e:	e009      	b.n	8004144 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004130:	f7fd fd24 	bl	8001b7c <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d902      	bls.n	8004144 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	f000 bc66 	b.w	8004a10 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004144:	4b0d      	ldr	r3, [pc, #52]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0ef      	beq.n	8004130 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	4907      	ldr	r1, [pc, #28]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004160:	4313      	orrs	r3, r2
 8004162:	610b      	str	r3, [r1, #16]
 8004164:	e01c      	b.n	80041a0 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a04      	ldr	r2, [pc, #16]	; (800417c <HAL_RCC_OscConfig+0x50c>)
 800416c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004170:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004172:	f7fd fd03 	bl	8001b7c <HAL_GetTick>
 8004176:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004178:	e00c      	b.n	8004194 <HAL_RCC_OscConfig+0x524>
 800417a:	bf00      	nop
 800417c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004180:	f7fd fcfc 	bl	8001b7c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d902      	bls.n	8004194 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	f000 bc3e 	b.w	8004a10 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004194:	4baf      	ldr	r3, [pc, #700]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1ef      	bne.n	8004180 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80c7 	beq.w	800433c <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b4:	4ba7      	ldr	r3, [pc, #668]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80041b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d111      	bne.n	80041e6 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c2:	4ba4      	ldr	r3, [pc, #656]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80041c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c8:	4aa2      	ldr	r2, [pc, #648]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80041ca:	f043 0304 	orr.w	r3, r3, #4
 80041ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80041d2:	4ba0      	ldr	r3, [pc, #640]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80041d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80041e6:	4b9c      	ldr	r3, [pc, #624]	; (8004458 <HAL_RCC_OscConfig+0x7e8>)
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d118      	bne.n	8004224 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80041f2:	4b99      	ldr	r3, [pc, #612]	; (8004458 <HAL_RCC_OscConfig+0x7e8>)
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	4a98      	ldr	r2, [pc, #608]	; (8004458 <HAL_RCC_OscConfig+0x7e8>)
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fe:	f7fd fcbd 	bl	8001b7c <HAL_GetTick>
 8004202:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004206:	f7fd fcb9 	bl	8001b7c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e3fb      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004218:	4b8f      	ldr	r3, [pc, #572]	; (8004458 <HAL_RCC_OscConfig+0x7e8>)
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d05f      	beq.n	80042ec <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800422c:	4b89      	ldr	r3, [pc, #548]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 800422e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004232:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699a      	ldr	r2, [r3, #24]
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423e:	429a      	cmp	r2, r3
 8004240:	d037      	beq.n	80042b2 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d006      	beq.n	800425a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e3da      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01b      	beq.n	800429c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8004264:	4b7b      	ldr	r3, [pc, #492]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 8004266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800426a:	4a7a      	ldr	r2, [pc, #488]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 800426c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004270:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8004274:	f7fd fc82 	bl	8001b7c <HAL_GetTick>
 8004278:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427c:	f7fd fc7e 	bl	8001b7c <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e3c0      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800428e:	4b71      	ldr	r3, [pc, #452]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 8004290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ef      	bne.n	800427c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800429c:	4b6d      	ldr	r3, [pc, #436]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 800429e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	496a      	ldr	r1, [pc, #424]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80042b2:	4b68      	ldr	r3, [pc, #416]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80042b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042b8:	4a66      	ldr	r2, [pc, #408]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80042ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80042c2:	f7fd fc5b 	bl	8001b7c <HAL_GetTick>
 80042c6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ca:	f7fd fc57 	bl	8001b7c <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e399      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80042dc:	4b5d      	ldr	r3, [pc, #372]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80042de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0ef      	beq.n	80042ca <HAL_RCC_OscConfig+0x65a>
 80042ea:	e01b      	b.n	8004324 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80042ec:	4b59      	ldr	r3, [pc, #356]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80042ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042f2:	4a58      	ldr	r2, [pc, #352]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80042f4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80042f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80042fc:	f7fd fc3e 	bl	8001b7c <HAL_GetTick>
 8004300:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004304:	f7fd fc3a 	bl	8001b7c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e37c      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004316:	4b4f      	ldr	r3, [pc, #316]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 8004318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800431c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1ef      	bne.n	8004304 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004324:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004328:	2b01      	cmp	r3, #1
 800432a:	d107      	bne.n	800433c <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800432c:	4b49      	ldr	r3, [pc, #292]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 800432e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004332:	4a48      	ldr	r2, [pc, #288]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 8004334:	f023 0304 	bic.w	r3, r3, #4
 8004338:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8112 	beq.w	800456e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800434a:	2300      	movs	r3, #0
 800434c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004350:	4b40      	ldr	r3, [pc, #256]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 8004352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d111      	bne.n	8004382 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435e:	4b3d      	ldr	r3, [pc, #244]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 8004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004364:	4a3b      	ldr	r2, [pc, #236]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 8004366:	f043 0304 	orr.w	r3, r3, #4
 800436a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800436e:	4b39      	ldr	r3, [pc, #228]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 8004370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800437c:	2301      	movs	r3, #1
 800437e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004382:	4b35      	ldr	r3, [pc, #212]	; (8004458 <HAL_RCC_OscConfig+0x7e8>)
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d118      	bne.n	80043c0 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800438e:	4b32      	ldr	r3, [pc, #200]	; (8004458 <HAL_RCC_OscConfig+0x7e8>)
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	4a31      	ldr	r2, [pc, #196]	; (8004458 <HAL_RCC_OscConfig+0x7e8>)
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439a:	f7fd fbef 	bl	8001b7c <HAL_GetTick>
 800439e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a2:	f7fd fbeb 	bl	8001b7c <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e32d      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80043b4:	4b28      	ldr	r3, [pc, #160]	; (8004458 <HAL_RCC_OscConfig+0x7e8>)
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01f      	beq.n	800440c <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d010      	beq.n	80043fa <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80043d8:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80043da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043de:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80043e0:	f043 0304 	orr.w	r3, r3, #4
 80043e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80043e8:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80043ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043ee:	4a19      	ldr	r2, [pc, #100]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80043f8:	e018      	b.n	800442c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 80043fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004400:	4a14      	ldr	r2, [pc, #80]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800440a:	e00f      	b.n	800442c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 800440e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004412:	4a10      	ldr	r2, [pc, #64]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 8004414:	f023 0301 	bic.w	r3, r3, #1
 8004418:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800441c:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 800441e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004422:	4a0c      	ldr	r2, [pc, #48]	; (8004454 <HAL_RCC_OscConfig+0x7e4>)
 8004424:	f023 0304 	bic.w	r3, r3, #4
 8004428:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d058      	beq.n	80044e6 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8004434:	f7fd fba2 	bl	8001b7c <HAL_GetTick>
 8004438:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800443a:	e00f      	b.n	800445c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443c:	f7fd fb9e 	bl	8001b7c <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d906      	bls.n	800445c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e2de      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
 8004452:	bf00      	nop
 8004454:	46020c00 	.word	0x46020c00
 8004458:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800445c:	4b9c      	ldr	r3, [pc, #624]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 800445e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0e8      	beq.n	800443c <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004472:	2b00      	cmp	r3, #0
 8004474:	d01b      	beq.n	80044ae <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004476:	4b96      	ldr	r3, [pc, #600]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800447c:	4a94      	ldr	r2, [pc, #592]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 800447e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004482:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004486:	e00a      	b.n	800449e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004488:	f7fd fb78 	bl	8001b7c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f241 3288 	movw	r2, #5000	; 0x1388
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e2b8      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800449e:	4b8c      	ldr	r3, [pc, #560]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 80044a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0ed      	beq.n	8004488 <HAL_RCC_OscConfig+0x818>
 80044ac:	e053      	b.n	8004556 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80044ae:	4b88      	ldr	r3, [pc, #544]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 80044b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044b4:	4a86      	ldr	r2, [pc, #536]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 80044b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c0:	f7fd fb5c 	bl	8001b7c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e29c      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044d6:	4b7e      	ldr	r3, [pc, #504]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 80044d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1ed      	bne.n	80044c0 <HAL_RCC_OscConfig+0x850>
 80044e4:	e037      	b.n	8004556 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80044e6:	f7fd fb49 	bl	8001b7c <HAL_GetTick>
 80044ea:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044ec:	e00a      	b.n	8004504 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ee:	f7fd fb45 	bl	8001b7c <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e285      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004504:	4b72      	ldr	r3, [pc, #456]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1ed      	bne.n	80044ee <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004512:	4b6f      	ldr	r3, [pc, #444]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01a      	beq.n	8004556 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004520:	4b6b      	ldr	r3, [pc, #428]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004526:	4a6a      	ldr	r2, [pc, #424]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800452c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004530:	e00a      	b.n	8004548 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004532:	f7fd fb23 	bl	8001b7c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e263      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004548:	4b61      	ldr	r3, [pc, #388]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 800454a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800454e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1ed      	bne.n	8004532 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004556:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800455a:	2b01      	cmp	r3, #1
 800455c:	d107      	bne.n	800456e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455e:	4b5c      	ldr	r3, [pc, #368]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004564:	4a5a      	ldr	r2, [pc, #360]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004566:	f023 0304 	bic.w	r3, r3, #4
 800456a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d036      	beq.n	80045e8 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d019      	beq.n	80045b6 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004582:	4b53      	ldr	r3, [pc, #332]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a52      	ldr	r2, [pc, #328]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800458c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800458e:	f7fd faf5 	bl	8001b7c <HAL_GetTick>
 8004592:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004596:	f7fd faf1 	bl	8001b7c <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e233      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80045a8:	4b49      	ldr	r3, [pc, #292]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x926>
 80045b4:	e018      	b.n	80045e8 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80045b6:	4b46      	ldr	r3, [pc, #280]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a45      	ldr	r2, [pc, #276]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 80045bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045c0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80045c2:	f7fd fadb 	bl	8001b7c <HAL_GetTick>
 80045c6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ca:	f7fd fad7 	bl	8001b7c <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e219      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80045dc:	4b3c      	ldr	r3, [pc, #240]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f0      	bne.n	80045ca <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d036      	beq.n	8004662 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d019      	beq.n	8004630 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80045fc:	4b34      	ldr	r3, [pc, #208]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a33      	ldr	r2, [pc, #204]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004606:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004608:	f7fd fab8 	bl	8001b7c <HAL_GetTick>
 800460c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004610:	f7fd fab4 	bl	8001b7c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e1f6      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004622:	4b2b      	ldr	r3, [pc, #172]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x9a0>
 800462e:	e018      	b.n	8004662 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004630:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a26      	ldr	r2, [pc, #152]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800463a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800463c:	f7fd fa9e 	bl	8001b7c <HAL_GetTick>
 8004640:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004644:	f7fd fa9a 	bl	8001b7c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e1dc      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004656:	4b1e      	ldr	r3, [pc, #120]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d07f      	beq.n	800476e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	2b00      	cmp	r3, #0
 8004674:	d062      	beq.n	800473c <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004676:	4b16      	ldr	r3, [pc, #88]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 800467c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004680:	6093      	str	r3, [r2, #8]
 8004682:	4b13      	ldr	r3, [pc, #76]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	4910      	ldr	r1, [pc, #64]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 8004690:	4313      	orrs	r3, r2
 8004692:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800469c:	d309      	bcc.n	80046b2 <HAL_RCC_OscConfig+0xa42>
 800469e:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f023 021f 	bic.w	r2, r3, #31
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	4909      	ldr	r1, [pc, #36]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60cb      	str	r3, [r1, #12]
 80046b0:	e02a      	b.n	8004708 <HAL_RCC_OscConfig+0xa98>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	da0c      	bge.n	80046d4 <HAL_RCC_OscConfig+0xa64>
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	015b      	lsls	r3, r3, #5
 80046c8:	4901      	ldr	r1, [pc, #4]	; (80046d0 <HAL_RCC_OscConfig+0xa60>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60cb      	str	r3, [r1, #12]
 80046ce:	e01b      	b.n	8004708 <HAL_RCC_OscConfig+0xa98>
 80046d0:	46020c00 	.word	0x46020c00
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046dc:	d30a      	bcc.n	80046f4 <HAL_RCC_OscConfig+0xa84>
 80046de:	4ba5      	ldr	r3, [pc, #660]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	029b      	lsls	r3, r3, #10
 80046ec:	49a1      	ldr	r1, [pc, #644]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60cb      	str	r3, [r1, #12]
 80046f2:	e009      	b.n	8004708 <HAL_RCC_OscConfig+0xa98>
 80046f4:	4b9f      	ldr	r3, [pc, #636]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	03db      	lsls	r3, r3, #15
 8004702:	499c      	ldr	r1, [pc, #624]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004704:	4313      	orrs	r3, r2
 8004706:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004708:	4b9a      	ldr	r3, [pc, #616]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a99      	ldr	r2, [pc, #612]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 800470e:	f043 0310 	orr.w	r3, r3, #16
 8004712:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004714:	f7fd fa32 	bl	8001b7c <HAL_GetTick>
 8004718:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800471c:	f7fd fa2e 	bl	8001b7c <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e170      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800472e:	4b91      	ldr	r3, [pc, #580]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0f0      	beq.n	800471c <HAL_RCC_OscConfig+0xaac>
 800473a:	e018      	b.n	800476e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800473c:	4b8d      	ldr	r3, [pc, #564]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a8c      	ldr	r2, [pc, #560]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004742:	f023 0310 	bic.w	r3, r3, #16
 8004746:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004748:	f7fd fa18 	bl	8001b7c <HAL_GetTick>
 800474c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004750:	f7fd fa14 	bl	8001b7c <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e156      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004762:	4b84      	ldr	r3, [pc, #528]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 814b 	beq.w	8004a0e <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004778:	2300      	movs	r3, #0
 800477a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800477e:	4b7d      	ldr	r3, [pc, #500]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	2b0c      	cmp	r3, #12
 8004788:	f000 80fa 	beq.w	8004980 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	2b02      	cmp	r3, #2
 8004792:	f040 80cc 	bne.w	800492e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004796:	4b77      	ldr	r3, [pc, #476]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a76      	ldr	r2, [pc, #472]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 800479c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80047a2:	f7fd f9eb 	bl	8001b7c <HAL_GetTick>
 80047a6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047aa:	f7fd f9e7 	bl	8001b7c <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e129      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047bc:	4b6d      	ldr	r3, [pc, #436]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1f0      	bne.n	80047aa <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c8:	4b6a      	ldr	r3, [pc, #424]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80047ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d111      	bne.n	80047fa <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80047d6:	4b67      	ldr	r3, [pc, #412]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80047d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047dc:	4a65      	ldr	r2, [pc, #404]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80047de:	f043 0304 	orr.w	r3, r3, #4
 80047e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80047e6:	4b63      	ldr	r3, [pc, #396]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80047e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80047fa:	4b5f      	ldr	r3, [pc, #380]	; (8004978 <HAL_RCC_OscConfig+0xd08>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004802:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004806:	d102      	bne.n	800480e <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800480e:	4b5a      	ldr	r3, [pc, #360]	; (8004978 <HAL_RCC_OscConfig+0xd08>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	4a59      	ldr	r2, [pc, #356]	; (8004978 <HAL_RCC_OscConfig+0xd08>)
 8004814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004818:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800481a:	4b56      	ldr	r3, [pc, #344]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800482e:	3a01      	subs	r2, #1
 8004830:	0212      	lsls	r2, r2, #8
 8004832:	4311      	orrs	r1, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004838:	430a      	orrs	r2, r1
 800483a:	494e      	ldr	r1, [pc, #312]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 800483c:	4313      	orrs	r3, r2
 800483e:	628b      	str	r3, [r1, #40]	; 0x28
 8004840:	4b4c      	ldr	r3, [pc, #304]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004844:	4b4d      	ldr	r3, [pc, #308]	; (800497c <HAL_RCC_OscConfig+0xd0c>)
 8004846:	4013      	ands	r3, r2
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800484c:	3a01      	subs	r2, #1
 800484e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004856:	3a01      	subs	r2, #1
 8004858:	0252      	lsls	r2, r2, #9
 800485a:	b292      	uxth	r2, r2
 800485c:	4311      	orrs	r1, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004862:	3a01      	subs	r2, #1
 8004864:	0412      	lsls	r2, r2, #16
 8004866:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800486a:	4311      	orrs	r1, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004870:	3a01      	subs	r2, #1
 8004872:	0612      	lsls	r2, r2, #24
 8004874:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004878:	430a      	orrs	r2, r1
 800487a:	493e      	ldr	r1, [pc, #248]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 800487c:	4313      	orrs	r3, r2
 800487e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004880:	4b3c      	ldr	r3, [pc, #240]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	4a3b      	ldr	r2, [pc, #236]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004886:	f023 0310 	bic.w	r3, r3, #16
 800488a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800488c:	4b39      	ldr	r3, [pc, #228]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004894:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800489c:	00d2      	lsls	r2, r2, #3
 800489e:	4935      	ldr	r1, [pc, #212]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80048a4:	4b33      	ldr	r3, [pc, #204]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80048a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a8:	4a32      	ldr	r2, [pc, #200]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80048aa:	f043 0310 	orr.w	r3, r3, #16
 80048ae:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80048b0:	4b30      	ldr	r3, [pc, #192]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f023 020c 	bic.w	r2, r3, #12
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	492d      	ldr	r1, [pc, #180]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80048c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d105      	bne.n	80048d6 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80048ca:	4b2b      	ldr	r3, [pc, #172]	; (8004978 <HAL_RCC_OscConfig+0xd08>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	4a2a      	ldr	r2, [pc, #168]	; (8004978 <HAL_RCC_OscConfig+0xd08>)
 80048d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d4:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80048d6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d107      	bne.n	80048ee <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80048de:	4b25      	ldr	r3, [pc, #148]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80048e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e4:	4a23      	ldr	r2, [pc, #140]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80048e6:	f023 0304 	bic.w	r3, r3, #4
 80048ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048ee:	4b21      	ldr	r3, [pc, #132]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80048f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f2:	4a20      	ldr	r2, [pc, #128]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80048f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80048fa:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1d      	ldr	r2, [pc, #116]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004900:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004904:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004906:	f7fd f939 	bl	8001b7c <HAL_GetTick>
 800490a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490e:	f7fd f935 	bl	8001b7c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e077      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004920:	4b14      	ldr	r3, [pc, #80]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0xc9e>
 800492c:	e06f      	b.n	8004a0e <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800492e:	4b11      	ldr	r3, [pc, #68]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a10      	ldr	r2, [pc, #64]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004934:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004938:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800493a:	f7fd f91f 	bl	8001b7c <HAL_GetTick>
 800493e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004942:	f7fd f91b 	bl	8001b7c <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e05d      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004954:	4b07      	ldr	r3, [pc, #28]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f0      	bne.n	8004942 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004960:	4b04      	ldr	r3, [pc, #16]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	4a03      	ldr	r2, [pc, #12]	; (8004974 <HAL_RCC_OscConfig+0xd04>)
 8004966:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	6293      	str	r3, [r2, #40]	; 0x28
 8004970:	e04d      	b.n	8004a0e <HAL_RCC_OscConfig+0xd9e>
 8004972:	bf00      	nop
 8004974:	46020c00 	.word	0x46020c00
 8004978:	46020800 	.word	0x46020800
 800497c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004980:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <HAL_RCC_OscConfig+0xda8>)
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004986:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <HAL_RCC_OscConfig+0xda8>)
 8004988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	2b01      	cmp	r3, #1
 8004992:	d03a      	beq.n	8004a0a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f003 0203 	and.w	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800499e:	429a      	cmp	r2, r3
 80049a0:	d133      	bne.n	8004a0a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	0a1b      	lsrs	r3, r3, #8
 80049a6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d12a      	bne.n	8004a0a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	0b1b      	lsrs	r3, r3, #12
 80049b8:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d122      	bne.n	8004a0a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ce:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d11a      	bne.n	8004a0a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	0a5b      	lsrs	r3, r3, #9
 80049d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d111      	bne.n	8004a0a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d108      	bne.n	8004a0a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	0e1b      	lsrs	r3, r3, #24
 80049fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a04:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d001      	beq.n	8004a0e <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3738      	adds	r7, #56	; 0x38
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	46020c00 	.word	0x46020c00

08004a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e1d9      	b.n	8004de4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a30:	4b9b      	ldr	r3, [pc, #620]	; (8004ca0 <HAL_RCC_ClockConfig+0x284>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d910      	bls.n	8004a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3e:	4b98      	ldr	r3, [pc, #608]	; (8004ca0 <HAL_RCC_ClockConfig+0x284>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 020f 	bic.w	r2, r3, #15
 8004a46:	4996      	ldr	r1, [pc, #600]	; (8004ca0 <HAL_RCC_ClockConfig+0x284>)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4e:	4b94      	ldr	r3, [pc, #592]	; (8004ca0 <HAL_RCC_ClockConfig+0x284>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d001      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e1c1      	b.n	8004de4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d010      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	4b8c      	ldr	r3, [pc, #560]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d908      	bls.n	8004a8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004a7c:	4b89      	ldr	r3, [pc, #548]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	4986      	ldr	r1, [pc, #536]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d012      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	4b81      	ldr	r3, [pc, #516]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	091b      	lsrs	r3, r3, #4
 8004aa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d909      	bls.n	8004ac0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004aac:	4b7d      	ldr	r3, [pc, #500]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	497a      	ldr	r1, [pc, #488]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d010      	beq.n	8004aee <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	4b74      	ldr	r3, [pc, #464]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d908      	bls.n	8004aee <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004adc:	4b71      	ldr	r3, [pc, #452]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	496e      	ldr	r1, [pc, #440]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d010      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	4b69      	ldr	r3, [pc, #420]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d908      	bls.n	8004b1c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004b0a:	4b66      	ldr	r3, [pc, #408]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f023 020f 	bic.w	r2, r3, #15
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	4963      	ldr	r1, [pc, #396]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 80d2 	beq.w	8004cce <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d143      	bne.n	8004bbe <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b36:	4b5b      	ldr	r3, [pc, #364]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d110      	bne.n	8004b66 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004b44:	4b57      	ldr	r3, [pc, #348]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b4a:	4a56      	ldr	r2, [pc, #344]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004b4c:	f043 0304 	orr.w	r3, r3, #4
 8004b50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004b54:	4b53      	ldr	r3, [pc, #332]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004b62:	2301      	movs	r3, #1
 8004b64:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004b66:	f7fd f809 	bl	8001b7c <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004b6c:	4b4e      	ldr	r3, [pc, #312]	; (8004ca8 <HAL_RCC_ClockConfig+0x28c>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00f      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004b7a:	f7fc ffff 	bl	8001b7c <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e12b      	b.n	8004de4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004b8c:	4b46      	ldr	r3, [pc, #280]	; (8004ca8 <HAL_RCC_ClockConfig+0x28c>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d107      	bne.n	8004bae <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004b9e:	4b41      	ldr	r3, [pc, #260]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ba4:	4a3f      	ldr	r2, [pc, #252]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004ba6:	f023 0304 	bic.w	r3, r3, #4
 8004baa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004bae:	4b3d      	ldr	r3, [pc, #244]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d121      	bne.n	8004bfe <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e112      	b.n	8004de4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d107      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bc6:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d115      	bne.n	8004bfe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e106      	b.n	8004de4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d107      	bne.n	8004bee <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004bde:	4b31      	ldr	r3, [pc, #196]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e0fa      	b.n	8004de4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bee:	4b2d      	ldr	r3, [pc, #180]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e0f2      	b.n	8004de4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004bfe:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f023 0203 	bic.w	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	4926      	ldr	r1, [pc, #152]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004c10:	f7fc ffb4 	bl	8001b7c <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d112      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c1e:	e00a      	b.n	8004c36 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c20:	f7fc ffac 	bl	8001b7c <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e0d6      	b.n	8004de4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c36:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f003 030c 	and.w	r3, r3, #12
 8004c3e:	2b0c      	cmp	r3, #12
 8004c40:	d1ee      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x204>
 8004c42:	e044      	b.n	8004cce <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d112      	bne.n	8004c72 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c4c:	e00a      	b.n	8004c64 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c4e:	f7fc ff95 	bl	8001b7c <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e0bf      	b.n	8004de4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d1ee      	bne.n	8004c4e <HAL_RCC_ClockConfig+0x232>
 8004c70:	e02d      	b.n	8004cce <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d123      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7c:	f7fc ff7e 	bl	8001b7c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e0a8      	b.n	8004de4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c92:	4b04      	ldr	r3, [pc, #16]	; (8004ca4 <HAL_RCC_ClockConfig+0x288>)
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1ee      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x260>
 8004c9e:	e016      	b.n	8004cce <HAL_RCC_ClockConfig+0x2b2>
 8004ca0:	40022000 	.word	0x40022000
 8004ca4:	46020c00 	.word	0x46020c00
 8004ca8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cac:	f7fc ff66 	bl	8001b7c <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e090      	b.n	8004de4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cc2:	4b4a      	ldr	r3, [pc, #296]	; (8004dec <HAL_RCC_ClockConfig+0x3d0>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d1ee      	bne.n	8004cac <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d010      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	4b43      	ldr	r3, [pc, #268]	; (8004dec <HAL_RCC_ClockConfig+0x3d0>)
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d208      	bcs.n	8004cfc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004cea:	4b40      	ldr	r3, [pc, #256]	; (8004dec <HAL_RCC_ClockConfig+0x3d0>)
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f023 020f 	bic.w	r2, r3, #15
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	493d      	ldr	r1, [pc, #244]	; (8004dec <HAL_RCC_ClockConfig+0x3d0>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfc:	4b3c      	ldr	r3, [pc, #240]	; (8004df0 <HAL_RCC_ClockConfig+0x3d4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d210      	bcs.n	8004d2c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0a:	4b39      	ldr	r3, [pc, #228]	; (8004df0 <HAL_RCC_ClockConfig+0x3d4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f023 020f 	bic.w	r2, r3, #15
 8004d12:	4937      	ldr	r1, [pc, #220]	; (8004df0 <HAL_RCC_ClockConfig+0x3d4>)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1a:	4b35      	ldr	r3, [pc, #212]	; (8004df0 <HAL_RCC_ClockConfig+0x3d4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d001      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e05b      	b.n	8004de4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d010      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <HAL_RCC_ClockConfig+0x3d0>)
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d208      	bcs.n	8004d5a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004d48:	4b28      	ldr	r3, [pc, #160]	; (8004dec <HAL_RCC_ClockConfig+0x3d0>)
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4925      	ldr	r1, [pc, #148]	; (8004dec <HAL_RCC_ClockConfig+0x3d0>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d012      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	4b20      	ldr	r3, [pc, #128]	; (8004dec <HAL_RCC_ClockConfig+0x3d0>)
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	091b      	lsrs	r3, r3, #4
 8004d70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d209      	bcs.n	8004d8c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004d78:	4b1c      	ldr	r3, [pc, #112]	; (8004dec <HAL_RCC_ClockConfig+0x3d0>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	4919      	ldr	r1, [pc, #100]	; (8004dec <HAL_RCC_ClockConfig+0x3d0>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d010      	beq.n	8004dba <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	695a      	ldr	r2, [r3, #20]
 8004d9c:	4b13      	ldr	r3, [pc, #76]	; (8004dec <HAL_RCC_ClockConfig+0x3d0>)
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d208      	bcs.n	8004dba <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004da8:	4b10      	ldr	r3, [pc, #64]	; (8004dec <HAL_RCC_ClockConfig+0x3d0>)
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	490d      	ldr	r1, [pc, #52]	; (8004dec <HAL_RCC_ClockConfig+0x3d0>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004dba:	f000 f821 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <HAL_RCC_ClockConfig+0x3d0>)
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	490a      	ldr	r1, [pc, #40]	; (8004df4 <HAL_RCC_ClockConfig+0x3d8>)
 8004dca:	5ccb      	ldrb	r3, [r1, r3]
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd0:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <HAL_RCC_ClockConfig+0x3dc>)
 8004dd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004dd4:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <HAL_RCC_ClockConfig+0x3e0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fc fe85 	bl	8001ae8 <HAL_InitTick>
 8004dde:	4603      	mov	r3, r0
 8004de0:	73fb      	strb	r3, [r7, #15]

  return status;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	46020c00 	.word	0x46020c00
 8004df0:	40022000 	.word	0x40022000
 8004df4:	080096c4 	.word	0x080096c4
 8004df8:	20000004 	.word	0x20000004
 8004dfc:	20000008 	.word	0x20000008

08004e00 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b08b      	sub	sp, #44	; 0x2c
 8004e04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e0e:	4b7b      	ldr	r3, [pc, #492]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f003 030c 	and.w	r3, r3, #12
 8004e16:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e18:	4b78      	ldr	r3, [pc, #480]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_GetSysClockFreq+0x34>
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	2b0c      	cmp	r3, #12
 8004e2c:	d121      	bne.n	8004e72 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d11e      	bne.n	8004e72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004e34:	4b71      	ldr	r3, [pc, #452]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d107      	bne.n	8004e50 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004e40:	4b6e      	ldr	r3, [pc, #440]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e46:	0b1b      	lsrs	r3, r3, #12
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4e:	e005      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004e50:	4b6a      	ldr	r3, [pc, #424]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	0f1b      	lsrs	r3, r3, #28
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e5c:	4a68      	ldr	r2, [pc, #416]	; (8005000 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d110      	bne.n	8004e8e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e70:	e00d      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e72:	4b62      	ldr	r3, [pc, #392]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d102      	bne.n	8004e84 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e7e:	4b61      	ldr	r3, [pc, #388]	; (8005004 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e80:	623b      	str	r3, [r7, #32]
 8004e82:	e004      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d101      	bne.n	8004e8e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e8a:	4b5e      	ldr	r3, [pc, #376]	; (8005004 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e8c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	2b0c      	cmp	r3, #12
 8004e92:	f040 80ac 	bne.w	8004fee <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004e96:	4b59      	ldr	r3, [pc, #356]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004ea0:	4b56      	ldr	r3, [pc, #344]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	0a1b      	lsrs	r3, r3, #8
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004eae:	4b53      	ldr	r3, [pc, #332]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	091b      	lsrs	r3, r3, #4
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004eba:	4b50      	ldr	r3, [pc, #320]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	08db      	lsrs	r3, r3, #3
 8004ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	fb02 f303 	mul.w	r3, r2, r3
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8086 	beq.w	8004fea <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d003      	beq.n	8004eec <HAL_RCC_GetSysClockFreq+0xec>
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d022      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x130>
 8004eea:	e043      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef6:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005008 <HAL_RCC_GetSysClockFreq+0x208>
 8004efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efe:	4b3f      	ldr	r3, [pc, #252]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f0e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004f12:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800500c <HAL_RCC_GetSysClockFreq+0x20c>
 8004f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004f2e:	e046      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005008 <HAL_RCC_GetSysClockFreq+0x208>
 8004f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f42:	4b2e      	ldr	r3, [pc, #184]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f52:	ed97 6a01 	vldr	s12, [r7, #4]
 8004f56:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800500c <HAL_RCC_GetSysClockFreq+0x20c>
 8004f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004f72:	e024      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	ee07 3a90 	vmov	s15, r3
 8004f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8c:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f9c:	ed97 6a01 	vldr	s12, [r7, #4]
 8004fa0:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800500c <HAL_RCC_GetSysClockFreq+0x20c>
 8004fa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004fac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004fbc:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc2:	0e1b      	lsrs	r3, r3, #24
 8004fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc8:	3301      	adds	r3, #1
 8004fca:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe2:	ee17 3a90 	vmov	r3, s15
 8004fe6:	623b      	str	r3, [r7, #32]
 8004fe8:	e001      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8004fee:	6a3b      	ldr	r3, [r7, #32]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	372c      	adds	r7, #44	; 0x2c
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	46020c00 	.word	0x46020c00
 8005000:	080096dc 	.word	0x080096dc
 8005004:	00f42400 	.word	0x00f42400
 8005008:	4b742400 	.word	0x4b742400
 800500c:	46000000 	.word	0x46000000

08005010 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005014:	f7ff fef4 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8005018:	4602      	mov	r2, r0
 800501a:	4b07      	ldr	r3, [pc, #28]	; (8005038 <HAL_RCC_GetHCLKFreq+0x28>)
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	4906      	ldr	r1, [pc, #24]	; (800503c <HAL_RCC_GetHCLKFreq+0x2c>)
 8005024:	5ccb      	ldrb	r3, [r1, r3]
 8005026:	fa22 f303 	lsr.w	r3, r2, r3
 800502a:	4a05      	ldr	r2, [pc, #20]	; (8005040 <HAL_RCC_GetHCLKFreq+0x30>)
 800502c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800502e:	4b04      	ldr	r3, [pc, #16]	; (8005040 <HAL_RCC_GetHCLKFreq+0x30>)
 8005030:	681b      	ldr	r3, [r3, #0]
}
 8005032:	4618      	mov	r0, r3
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	46020c00 	.word	0x46020c00
 800503c:	080096c4 	.word	0x080096c4
 8005040:	20000004 	.word	0x20000004

08005044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005048:	f7ff ffe2 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 800504c:	4602      	mov	r2, r0
 800504e:	4b05      	ldr	r3, [pc, #20]	; (8005064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	091b      	lsrs	r3, r3, #4
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	4903      	ldr	r1, [pc, #12]	; (8005068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800505a:	5ccb      	ldrb	r3, [r1, r3]
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005060:	4618      	mov	r0, r3
 8005062:	bd80      	pop	{r7, pc}
 8005064:	46020c00 	.word	0x46020c00
 8005068:	080096d4 	.word	0x080096d4

0800506c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005070:	f7ff ffce 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 8005074:	4602      	mov	r2, r0
 8005076:	4b05      	ldr	r3, [pc, #20]	; (800508c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	0a1b      	lsrs	r3, r3, #8
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	4903      	ldr	r1, [pc, #12]	; (8005090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005082:	5ccb      	ldrb	r3, [r1, r3]
 8005084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005088:	4618      	mov	r0, r3
 800508a:	bd80      	pop	{r7, pc}
 800508c:	46020c00 	.word	0x46020c00
 8005090:	080096d4 	.word	0x080096d4

08005094 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005098:	f7ff ffba 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 800509c:	4602      	mov	r2, r0
 800509e:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <HAL_RCC_GetPCLK3Freq+0x20>)
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	091b      	lsrs	r3, r3, #4
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	4903      	ldr	r1, [pc, #12]	; (80050b8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80050aa:	5ccb      	ldrb	r3, [r1, r3]
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	46020c00 	.word	0x46020c00
 80050b8:	080096d4 	.word	0x080096d4

080050bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050c4:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80050c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050d2:	f7fe fd4f 	bl	8003b74 <HAL_PWREx_GetVoltageRange>
 80050d6:	6178      	str	r0, [r7, #20]
 80050d8:	e019      	b.n	800510e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050da:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80050dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e0:	4a37      	ldr	r2, [pc, #220]	; (80051c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80050e2:	f043 0304 	orr.w	r3, r3, #4
 80050e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80050ea:	4b35      	ldr	r3, [pc, #212]	; (80051c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80050ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050f8:	f7fe fd3c 	bl	8003b74 <HAL_PWREx_GetVoltageRange>
 80050fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050fe:	4b30      	ldr	r3, [pc, #192]	; (80051c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005104:	4a2e      	ldr	r2, [pc, #184]	; (80051c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005106:	f023 0304 	bic.w	r3, r3, #4
 800510a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005114:	d003      	beq.n	800511e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800511c:	d109      	bne.n	8005132 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005124:	d202      	bcs.n	800512c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005126:	2301      	movs	r3, #1
 8005128:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800512a:	e033      	b.n	8005194 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005130:	e030      	b.n	8005194 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005138:	d208      	bcs.n	800514c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005140:	d102      	bne.n	8005148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005142:	2303      	movs	r3, #3
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	e025      	b.n	8005194 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e035      	b.n	80051b8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005152:	d90f      	bls.n	8005174 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005160:	d902      	bls.n	8005168 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005162:	2300      	movs	r3, #0
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	e015      	b.n	8005194 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005168:	2301      	movs	r3, #1
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	e012      	b.n	8005194 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800516e:	2300      	movs	r3, #0
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	e00f      	b.n	8005194 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800517a:	d109      	bne.n	8005190 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005182:	d102      	bne.n	800518a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005184:	2301      	movs	r3, #1
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	e004      	b.n	8005194 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800518a:	2302      	movs	r3, #2
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	e001      	b.n	8005194 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005190:	2301      	movs	r3, #1
 8005192:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005194:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f023 020f 	bic.w	r2, r3, #15
 800519c:	4909      	ldr	r1, [pc, #36]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80051a4:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d001      	beq.n	80051b6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	46020c00 	.word	0x46020c00
 80051c4:	40022000 	.word	0x40022000

080051c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80051c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051cc:	b0ba      	sub	sp, #232	; 0xe8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051d4:	2300      	movs	r3, #0
 80051d6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051da:	2300      	movs	r3, #0
 80051dc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f002 0401 	and.w	r4, r2, #1
 80051ec:	2500      	movs	r5, #0
 80051ee:	ea54 0305 	orrs.w	r3, r4, r5
 80051f2:	d00b      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80051f4:	4bcb      	ldr	r3, [pc, #812]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051fa:	f023 0103 	bic.w	r1, r3, #3
 80051fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005204:	4ac7      	ldr	r2, [pc, #796]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005206:	430b      	orrs	r3, r1
 8005208:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800520c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f002 0802 	and.w	r8, r2, #2
 8005218:	f04f 0900 	mov.w	r9, #0
 800521c:	ea58 0309 	orrs.w	r3, r8, r9
 8005220:	d00b      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005222:	4bc0      	ldr	r3, [pc, #768]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005228:	f023 010c 	bic.w	r1, r3, #12
 800522c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005232:	4abc      	ldr	r2, [pc, #752]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005234:	430b      	orrs	r3, r1
 8005236:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800523a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	f002 0a04 	and.w	sl, r2, #4
 8005246:	f04f 0b00 	mov.w	fp, #0
 800524a:	ea5a 030b 	orrs.w	r3, sl, fp
 800524e:	d00b      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005250:	4bb4      	ldr	r3, [pc, #720]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005256:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800525a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800525e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005260:	4ab0      	ldr	r2, [pc, #704]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005262:	430b      	orrs	r3, r1
 8005264:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005268:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	f002 0308 	and.w	r3, r2, #8
 8005274:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005278:	2300      	movs	r3, #0
 800527a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800527e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005282:	460b      	mov	r3, r1
 8005284:	4313      	orrs	r3, r2
 8005286:	d00b      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005288:	4ba6      	ldr	r3, [pc, #664]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800528a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800528e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005298:	4aa2      	ldr	r2, [pc, #648]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800529a:	430b      	orrs	r3, r1
 800529c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	f002 0310 	and.w	r3, r2, #16
 80052ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052b0:	2300      	movs	r3, #0
 80052b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4313      	orrs	r3, r2
 80052be:	d00b      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80052c0:	4b98      	ldr	r3, [pc, #608]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d0:	4a94      	ldr	r2, [pc, #592]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052d2:	430b      	orrs	r3, r1
 80052d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	f002 0320 	and.w	r3, r2, #32
 80052e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052e8:	2300      	movs	r3, #0
 80052ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80052ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80052f2:	460b      	mov	r3, r1
 80052f4:	4313      	orrs	r3, r2
 80052f6:	d00b      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80052f8:	4b8a      	ldr	r3, [pc, #552]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052fe:	f023 0107 	bic.w	r1, r3, #7
 8005302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005308:	4a86      	ldr	r2, [pc, #536]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800530a:	430b      	orrs	r3, r1
 800530c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005310:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800531c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005320:	2300      	movs	r3, #0
 8005322:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005326:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800532a:	460b      	mov	r3, r1
 800532c:	4313      	orrs	r3, r2
 800532e:	d00b      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005330:	4b7c      	ldr	r3, [pc, #496]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005336:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800533a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800533e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005340:	4a78      	ldr	r2, [pc, #480]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005342:	430b      	orrs	r3, r1
 8005344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005348:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005354:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800535e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005362:	460b      	mov	r3, r1
 8005364:	4313      	orrs	r3, r2
 8005366:	d00b      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005368:	4b6e      	ldr	r3, [pc, #440]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800536a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800536e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005378:	4a6a      	ldr	r2, [pc, #424]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800537a:	430b      	orrs	r3, r1
 800537c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005380:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800538c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005390:	2300      	movs	r3, #0
 8005392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005396:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800539a:	460b      	mov	r3, r1
 800539c:	4313      	orrs	r3, r2
 800539e:	d00b      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80053a0:	4b60      	ldr	r3, [pc, #384]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80053aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	4a5c      	ldr	r2, [pc, #368]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053b2:	430b      	orrs	r3, r1
 80053b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80053c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053c8:	2300      	movs	r3, #0
 80053ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80053d2:	460b      	mov	r3, r1
 80053d4:	4313      	orrs	r3, r2
 80053d6:	d00b      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80053d8:	4b52      	ldr	r3, [pc, #328]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053de:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80053e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053e8:	4a4e      	ldr	r2, [pc, #312]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ea:	430b      	orrs	r3, r1
 80053ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80053fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005400:	2300      	movs	r3, #0
 8005402:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005406:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800540a:	460b      	mov	r3, r1
 800540c:	4313      	orrs	r3, r2
 800540e:	d00b      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005410:	4b44      	ldr	r3, [pc, #272]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005416:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800541a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800541e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005420:	4a40      	ldr	r2, [pc, #256]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005422:	430b      	orrs	r3, r1
 8005424:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005428:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005438:	2300      	movs	r3, #0
 800543a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800543e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005442:	460b      	mov	r3, r1
 8005444:	4313      	orrs	r3, r2
 8005446:	d00b      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005448:	4b36      	ldr	r3, [pc, #216]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800544a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800544e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8005452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005458:	4a32      	ldr	r2, [pc, #200]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800545a:	430b      	orrs	r3, r1
 800545c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005460:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800546c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005470:	2300      	movs	r3, #0
 8005472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005476:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800547a:	460b      	mov	r3, r1
 800547c:	4313      	orrs	r3, r2
 800547e:	d00c      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005480:	4b28      	ldr	r3, [pc, #160]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005486:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800548a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800548e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005492:	4a24      	ldr	r2, [pc, #144]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005494:	430b      	orrs	r3, r1
 8005496:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800549a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80054a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80054a8:	2300      	movs	r3, #0
 80054aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80054b0:	460b      	mov	r3, r1
 80054b2:	4313      	orrs	r3, r2
 80054b4:	d04f      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80054b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054be:	2b80      	cmp	r3, #128	; 0x80
 80054c0:	d02d      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d827      	bhi.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80054c6:	2b60      	cmp	r3, #96	; 0x60
 80054c8:	d02e      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80054ca:	2b60      	cmp	r3, #96	; 0x60
 80054cc:	d823      	bhi.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80054ce:	2b40      	cmp	r3, #64	; 0x40
 80054d0:	d006      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d81f      	bhi.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x326>
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d011      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80054de:	e01a      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054e0:	4b10      	ldr	r3, [pc, #64]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e4:	4a0f      	ldr	r2, [pc, #60]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ea:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80054ec:	e01d      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054f2:	3308      	adds	r3, #8
 80054f4:	4618      	mov	r0, r3
 80054f6:	f002 f981 	bl	80077fc <RCCEx_PLL2_Config>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005500:	e013      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005506:	332c      	adds	r3, #44	; 0x2c
 8005508:	4618      	mov	r0, r3
 800550a:	f002 fa0f 	bl	800792c <RCCEx_PLL3_Config>
 800550e:	4603      	mov	r3, r0
 8005510:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005514:	e009      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800551c:	e005      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800551e:	bf00      	nop
 8005520:	e003      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005522:	bf00      	nop
 8005524:	46020c00 	.word	0x46020c00
        break;
 8005528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800552a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10d      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005532:	4bb6      	ldr	r3, [pc, #728]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005534:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005538:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800553c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005544:	4ab1      	ldr	r2, [pc, #708]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005546:	430b      	orrs	r3, r1
 8005548:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800554c:	e003      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005552:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005562:	673b      	str	r3, [r7, #112]	; 0x70
 8005564:	2300      	movs	r3, #0
 8005566:	677b      	str	r3, [r7, #116]	; 0x74
 8005568:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800556c:	460b      	mov	r3, r1
 800556e:	4313      	orrs	r3, r2
 8005570:	d053      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800557a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800557e:	d033      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005584:	d82c      	bhi.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558a:	d02f      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x424>
 800558c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005590:	d826      	bhi.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005596:	d008      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800559c:	d820      	bhi.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80055a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a6:	d011      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80055a8:	e01a      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055aa:	4b98      	ldr	r3, [pc, #608]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	4a97      	ldr	r2, [pc, #604]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80055b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80055b6:	e01a      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055bc:	3308      	adds	r3, #8
 80055be:	4618      	mov	r0, r3
 80055c0:	f002 f91c 	bl	80077fc <RCCEx_PLL2_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80055ca:	e010      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055d0:	332c      	adds	r3, #44	; 0x2c
 80055d2:	4618      	mov	r0, r3
 80055d4:	f002 f9aa 	bl	800792c <RCCEx_PLL3_Config>
 80055d8:	4603      	mov	r3, r0
 80055da:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80055de:	e006      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80055e6:	e002      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80055e8:	bf00      	nop
 80055ea:	e000      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80055ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10d      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80055f6:	4b85      	ldr	r3, [pc, #532]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80055f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80055fc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005600:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005608:	4a80      	ldr	r2, [pc, #512]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800560a:	430b      	orrs	r3, r1
 800560c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005610:	e003      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005612:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005616:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800561a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005626:	66bb      	str	r3, [r7, #104]	; 0x68
 8005628:	2300      	movs	r3, #0
 800562a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800562c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005630:	460b      	mov	r3, r1
 8005632:	4313      	orrs	r3, r2
 8005634:	d046      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800563a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800563e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005642:	d028      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005644:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005648:	d821      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800564a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800564e:	d022      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005654:	d81b      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005656:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800565a:	d01c      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800565c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005660:	d815      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005666:	d008      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800566c:	d80f      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d011      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005676:	d00e      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005678:	e009      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800567a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800567e:	3308      	adds	r3, #8
 8005680:	4618      	mov	r0, r3
 8005682:	f002 f8bb 	bl	80077fc <RCCEx_PLL2_Config>
 8005686:	4603      	mov	r3, r0
 8005688:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800568c:	e004      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005694:	e000      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8005696:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005698:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10d      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80056a0:	4b5a      	ldr	r3, [pc, #360]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80056a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056a6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80056aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80056b2:	4a56      	ldr	r2, [pc, #344]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80056b4:	430b      	orrs	r3, r1
 80056b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80056ba:	e003      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056bc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80056c0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80056c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80056d0:	663b      	str	r3, [r7, #96]	; 0x60
 80056d2:	2300      	movs	r3, #0
 80056d4:	667b      	str	r3, [r7, #100]	; 0x64
 80056d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80056da:	460b      	mov	r3, r1
 80056dc:	4313      	orrs	r3, r2
 80056de:	d03f      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80056e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d81e      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x562>
 80056ec:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80056ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f2:	bf00      	nop
 80056f4:	08005733 	.word	0x08005733
 80056f8:	08005709 	.word	0x08005709
 80056fc:	08005717 	.word	0x08005717
 8005700:	08005733 	.word	0x08005733
 8005704:	08005733 	.word	0x08005733
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005708:	4b40      	ldr	r3, [pc, #256]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	4a3f      	ldr	r2, [pc, #252]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800570e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005712:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005714:	e00e      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800571a:	332c      	adds	r3, #44	; 0x2c
 800571c:	4618      	mov	r0, r3
 800571e:	f002 f905 	bl	800792c <RCCEx_PLL3_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005728:	e004      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005730:	e000      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8005732:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005734:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10d      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800573c:	4b33      	ldr	r3, [pc, #204]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800573e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005742:	f023 0107 	bic.w	r1, r3, #7
 8005746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574e:	4a2f      	ldr	r2, [pc, #188]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005750:	430b      	orrs	r3, r1
 8005752:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005756:	e003      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005758:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800575c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005760:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800576c:	65bb      	str	r3, [r7, #88]	; 0x58
 800576e:	2300      	movs	r3, #0
 8005770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005772:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005776:	460b      	mov	r3, r1
 8005778:	4313      	orrs	r3, r2
 800577a:	d04d      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800577c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005784:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005788:	d028      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x614>
 800578a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800578e:	d821      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005790:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005794:	d024      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005796:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800579a:	d81b      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800579c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a0:	d00e      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80057a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a6:	d815      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01b      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80057ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b0:	d110      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057b2:	4b16      	ldr	r3, [pc, #88]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	4a15      	ldr	r2, [pc, #84]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80057b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057bc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80057be:	e012      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057c4:	332c      	adds	r3, #44	; 0x2c
 80057c6:	4618      	mov	r0, r3
 80057c8:	f002 f8b0 	bl	800792c <RCCEx_PLL3_Config>
 80057cc:	4603      	mov	r3, r0
 80057ce:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80057d2:	e008      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80057da:	e004      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80057dc:	bf00      	nop
 80057de:	e002      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80057e0:	bf00      	nop
 80057e2:	e000      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80057e4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80057e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d110      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80057ee:	4b07      	ldr	r3, [pc, #28]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80057f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057f4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80057f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005800:	4a02      	ldr	r2, [pc, #8]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005802:	430b      	orrs	r3, r1
 8005804:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005808:	e006      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800580a:	bf00      	nop
 800580c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005810:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005814:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005818:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005824:	653b      	str	r3, [r7, #80]	; 0x50
 8005826:	2300      	movs	r3, #0
 8005828:	657b      	str	r3, [r7, #84]	; 0x54
 800582a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800582e:	460b      	mov	r3, r1
 8005830:	4313      	orrs	r3, r2
 8005832:	f000 80b5 	beq.w	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005836:	2300      	movs	r3, #0
 8005838:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800583c:	4b9d      	ldr	r3, [pc, #628]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800583e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d113      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800584a:	4b9a      	ldr	r3, [pc, #616]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800584c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005850:	4a98      	ldr	r2, [pc, #608]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005852:	f043 0304 	orr.w	r3, r3, #4
 8005856:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800585a:	4b96      	ldr	r3, [pc, #600]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800585c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005868:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800586c:	2301      	movs	r3, #1
 800586e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005872:	4b91      	ldr	r3, [pc, #580]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005876:	4a90      	ldr	r2, [pc, #576]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800587e:	f7fc f97d 	bl	8001b7c <HAL_GetTick>
 8005882:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005886:	e00b      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005888:	f7fc f978 	bl	8001b7c <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d903      	bls.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800589e:	e005      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80058a0:	4b85      	ldr	r3, [pc, #532]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0ed      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80058ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d165      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058b4:	4b7f      	ldr	r3, [pc, #508]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80058c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d023      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80058ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01b      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058da:	4b76      	ldr	r3, [pc, #472]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058e8:	4b72      	ldr	r3, [pc, #456]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058ee:	4a71      	ldr	r2, [pc, #452]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058f8:	4b6e      	ldr	r3, [pc, #440]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058fe:	4a6d      	ldr	r2, [pc, #436]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005904:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005908:	4a6a      	ldr	r2, [pc, #424]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800590a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d019      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591e:	f7fc f92d 	bl	8001b7c <HAL_GetTick>
 8005922:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005926:	e00d      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005928:	f7fc f928 	bl	8001b7c <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005932:	1ad2      	subs	r2, r2, r3
 8005934:	f241 3388 	movw	r3, #5000	; 0x1388
 8005938:	429a      	cmp	r2, r3
 800593a:	d903      	bls.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8005942:	e006      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005944:	4b5b      	ldr	r3, [pc, #364]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0ea      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005952:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800595a:	4b56      	ldr	r3, [pc, #344]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800595c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005960:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005968:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800596c:	4a51      	ldr	r2, [pc, #324]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800596e:	430b      	orrs	r3, r1
 8005970:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005974:	e008      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005976:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800597a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800597e:	e003      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005984:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005988:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800598c:	2b01      	cmp	r3, #1
 800598e:	d107      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005990:	4b48      	ldr	r3, [pc, #288]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005996:	4a47      	ldr	r2, [pc, #284]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005998:	f023 0304 	bic.w	r3, r3, #4
 800599c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80059a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80059ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80059ae:	2300      	movs	r3, #0
 80059b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80059b6:	460b      	mov	r3, r1
 80059b8:	4313      	orrs	r3, r2
 80059ba:	d042      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80059bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059c4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80059c8:	d022      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80059ca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80059ce:	d81b      	bhi.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80059d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059d4:	d011      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x832>
 80059d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059da:	d815      	bhi.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d019      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80059e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059e4:	d110      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059ea:	3308      	adds	r3, #8
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 ff05 	bl	80077fc <RCCEx_PLL2_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80059f8:	e00d      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059fa:	4b2e      	ldr	r3, [pc, #184]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	4a2d      	ldr	r2, [pc, #180]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a04:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005a06:	e006      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005a0e:	e002      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005a10:	bf00      	nop
 8005a12:	e000      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005a14:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005a16:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10d      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005a1e:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a24:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a30:	4a20      	ldr	r2, [pc, #128]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a32:	430b      	orrs	r3, r1
 8005a34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a38:	e003      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a3e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a50:	2300      	movs	r3, #0
 8005a52:	647b      	str	r3, [r7, #68]	; 0x44
 8005a54:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	d032      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a6a:	d00b      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a70:	d804      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7a:	d007      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005a82:	e004      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005a84:	bf00      	nop
 8005a86:	e002      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005a88:	bf00      	nop
 8005a8a:	e000      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005a8c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005a8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d112      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005a96:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005aa8:	4a02      	ldr	r2, [pc, #8]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005ab2:	bf00      	nop
 8005ab4:	46020c00 	.word	0x46020c00
 8005ab8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005ac0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005ac4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005ada:	460b      	mov	r3, r1
 8005adc:	4313      	orrs	r3, r2
 8005ade:	d00c      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005ae0:	4b98      	ldr	r3, [pc, #608]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ae2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ae6:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8005aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005af2:	4a94      	ldr	r2, [pc, #592]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005af4:	430b      	orrs	r3, r1
 8005af6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b02:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005b06:	633b      	str	r3, [r7, #48]	; 0x30
 8005b08:	2300      	movs	r3, #0
 8005b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005b10:	460b      	mov	r3, r1
 8005b12:	4313      	orrs	r3, r2
 8005b14:	d019      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b22:	d105      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b24:	4b87      	ldr	r3, [pc, #540]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b28:	4a86      	ldr	r2, [pc, #536]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b2e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005b30:	4b84      	ldr	r3, [pc, #528]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b36:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b42:	4a80      	ldr	r2, [pc, #512]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b44:	430b      	orrs	r3, r1
 8005b46:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b58:	2300      	movs	r3, #0
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005b60:	460b      	mov	r3, r1
 8005b62:	4313      	orrs	r3, r2
 8005b64:	d00c      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005b66:	4b77      	ldr	r3, [pc, #476]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b78:	4972      	ldr	r1, [pc, #456]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005b80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005b8c:	623b      	str	r3, [r7, #32]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
 8005b92:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005b96:	460b      	mov	r3, r1
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	d00c      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005b9c:	4b69      	ldr	r3, [pc, #420]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ba2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005baa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005bae:	4965      	ldr	r1, [pc, #404]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	d00c      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005bd2:	4b5c      	ldr	r3, [pc, #368]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bd8:	f023 0218 	bic.w	r2, r3, #24
 8005bdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005be0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005be4:	4957      	ldr	r1, [pc, #348]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005bec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf4:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c02:	460b      	mov	r3, r1
 8005c04:	4313      	orrs	r3, r2
 8005c06:	d032      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005c08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c14:	d105      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c16:	4b4b      	ldr	r3, [pc, #300]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	4a4a      	ldr	r2, [pc, #296]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c20:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c2e:	d108      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c34:	3308      	adds	r3, #8
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 fde0 	bl	80077fc <RCCEx_PLL2_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8005c42:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10d      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005c4a:	4b3e      	ldr	r3, [pc, #248]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c5c:	4939      	ldr	r1, [pc, #228]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005c64:	e003      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c66:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c6a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005c7a:	60bb      	str	r3, [r7, #8]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005c84:	460b      	mov	r3, r1
 8005c86:	4313      	orrs	r3, r2
 8005c88:	d03a      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c96:	d00e      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c9c:	d815      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d017      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005ca2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ca6:	d110      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca8:	4b26      	ldr	r3, [pc, #152]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	4a25      	ldr	r2, [pc, #148]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005cb4:	e00e      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cba:	3308      	adds	r3, #8
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f001 fd9d 	bl	80077fc <RCCEx_PLL2_Config>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005cc8:	e004      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005cd0:	e000      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8005cd2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005cd4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10d      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005cdc:	4b19      	ldr	r3, [pc, #100]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ce2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cee:	4915      	ldr	r1, [pc, #84]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005cf6:	e003      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005cfc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005d00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	607b      	str	r3, [r7, #4]
 8005d12:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d16:	460b      	mov	r3, r1
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	d00c      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005d1c:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d22:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d2e:	4905      	ldr	r1, [pc, #20]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005d36:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	37e8      	adds	r7, #232	; 0xe8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d44:	46020c00 	.word	0x46020c00

08005d48 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b089      	sub	sp, #36	; 0x24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005d50:	4bac      	ldr	r3, [pc, #688]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d58:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005d5a:	4baa      	ldr	r3, [pc, #680]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005d64:	4ba7      	ldr	r3, [pc, #668]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d68:	0a1b      	lsrs	r3, r3, #8
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	3301      	adds	r3, #1
 8005d70:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005d72:	4ba4      	ldr	r3, [pc, #656]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	f003 0310 	and.w	r3, r3, #16
 8005d7a:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005d7c:	4ba1      	ldr	r3, [pc, #644]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	08db      	lsrs	r3, r3, #3
 8005d82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	fb02 f303 	mul.w	r3, r2, r3
 8005d8c:	ee07 3a90 	vmov	s15, r3
 8005d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d94:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 8123 	beq.w	8005fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d062      	beq.n	8005e6c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	f200 8081 	bhi.w	8005eb0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d024      	beq.n	8005dfe <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d17a      	bne.n	8005eb0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	ee07 3a90 	vmov	s15, r3
 8005dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc4:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006008 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005dc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dcc:	4b8d      	ldr	r3, [pc, #564]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd4:	ee07 3a90 	vmov	s15, r3
 8005dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ddc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005de0:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800600c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005de4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dfc:	e08f      	b.n	8005f1e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005dfe:	4b81      	ldr	r3, [pc, #516]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d005      	beq.n	8005e16 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8005e0a:	4b7e      	ldr	r3, [pc, #504]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	0f1b      	lsrs	r3, r3, #28
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	e006      	b.n	8005e24 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8005e16:	4b7b      	ldr	r3, [pc, #492]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e1c:	041b      	lsls	r3, r3, #16
 8005e1e:	0f1b      	lsrs	r3, r3, #28
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	4a7a      	ldr	r2, [pc, #488]	; (8006010 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	ee07 3a90 	vmov	s15, r3
 8005e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e4e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800600c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e6a:	e058      	b.n	8005f1e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e76:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006008 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7e:	4b61      	ldr	r3, [pc, #388]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e92:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800600c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eae:	e036      	b.n	8005f1e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005eb0:	4b54      	ldr	r3, [pc, #336]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8005ebc:	4b51      	ldr	r3, [pc, #324]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	0f1b      	lsrs	r3, r3, #28
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	e006      	b.n	8005ed6 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8005ec8:	4b4e      	ldr	r3, [pc, #312]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ece:	041b      	lsls	r3, r3, #16
 8005ed0:	0f1b      	lsrs	r3, r3, #28
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	4a4e      	ldr	r2, [pc, #312]	; (8006010 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f00:	eddf 5a42 	vldr	s11, [pc, #264]	; 800600c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005f04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f1c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005f1e:	4b39      	ldr	r3, [pc, #228]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d017      	beq.n	8005f5a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005f2a:	4b36      	ldr	r3, [pc, #216]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2e:	0a5b      	lsrs	r3, r3, #9
 8005f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f34:	ee07 3a90 	vmov	s15, r3
 8005f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f40:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f50:	ee17 2a90 	vmov	r2, s15
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	e002      	b.n	8005f60 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005f60:	4b28      	ldr	r3, [pc, #160]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d017      	beq.n	8005f9c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005f6c:	4b25      	ldr	r3, [pc, #148]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f70:	0c1b      	lsrs	r3, r3, #16
 8005f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005f7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f82:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005f86:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f92:	ee17 2a90 	vmov	r2, s15
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	605a      	str	r2, [r3, #4]
 8005f9a:	e002      	b.n	8005fa2 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005fa2:	4b18      	ldr	r3, [pc, #96]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d017      	beq.n	8005fde <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005fae:	4b15      	ldr	r3, [pc, #84]	; (8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	0e1b      	lsrs	r3, r3, #24
 8005fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb8:	ee07 3a90 	vmov	s15, r3
 8005fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd4:	ee17 2a90 	vmov	r2, s15
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005fdc:	e00c      	b.n	8005ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	609a      	str	r2, [r3, #8]
}
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	609a      	str	r2, [r3, #8]
}
 8005ff8:	bf00      	nop
 8005ffa:	3724      	adds	r7, #36	; 0x24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	46020c00 	.word	0x46020c00
 8006008:	4b742400 	.word	0x4b742400
 800600c:	46000000 	.word	0x46000000
 8006010:	080096dc 	.word	0x080096dc

08006014 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006014:	b480      	push	{r7}
 8006016:	b089      	sub	sp, #36	; 0x24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800601c:	4bac      	ldr	r3, [pc, #688]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800601e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006024:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006026:	4baa      	ldr	r3, [pc, #680]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	f003 0303 	and.w	r3, r3, #3
 800602e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006030:	4ba7      	ldr	r3, [pc, #668]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	0a1b      	lsrs	r3, r3, #8
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	3301      	adds	r3, #1
 800603c:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800603e:	4ba4      	ldr	r3, [pc, #656]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006048:	4ba1      	ldr	r3, [pc, #644]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	08db      	lsrs	r3, r3, #3
 800604e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	fb02 f303 	mul.w	r3, r2, r3
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006060:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 8123 	beq.w	80062b2 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b03      	cmp	r3, #3
 8006070:	d062      	beq.n	8006138 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b03      	cmp	r3, #3
 8006076:	f200 8081 	bhi.w	800617c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d024      	beq.n	80060ca <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d17a      	bne.n	800617c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006090:	eddf 6a90 	vldr	s13, [pc, #576]	; 80062d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006098:	4b8d      	ldr	r3, [pc, #564]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800609a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80060a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80060ac:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80060b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80060b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80060b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80060c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060c8:	e08f      	b.n	80061ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80060ca:	4b81      	ldr	r3, [pc, #516]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 80060d6:	4b7e      	ldr	r3, [pc, #504]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	0f1b      	lsrs	r3, r3, #28
 80060dc:	f003 030f 	and.w	r3, r3, #15
 80060e0:	e006      	b.n	80060f0 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 80060e2:	4b7b      	ldr	r3, [pc, #492]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80060e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060e8:	041b      	lsls	r3, r3, #16
 80060ea:	0f1b      	lsrs	r3, r3, #28
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	4a7a      	ldr	r2, [pc, #488]	; (80062dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80060f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	ee07 3a90 	vmov	s15, r3
 8006104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006116:	ed97 6a02 	vldr	s12, [r7, #8]
 800611a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800611e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800612a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800612e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006136:	e058      	b.n	80061ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	eddf 6a64 	vldr	s13, [pc, #400]	; 80062d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614a:	4b61      	ldr	r3, [pc, #388]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800614c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800615a:	ed97 6a02 	vldr	s12, [r7, #8]
 800615e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006162:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006166:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800616a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800616e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800617a:	e036      	b.n	80061ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800617c:	4b54      	ldr	r3, [pc, #336]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8006188:	4b51      	ldr	r3, [pc, #324]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	0f1b      	lsrs	r3, r3, #28
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	e006      	b.n	80061a2 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8006194:	4b4e      	ldr	r3, [pc, #312]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006196:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800619a:	041b      	lsls	r3, r3, #16
 800619c:	0f1b      	lsrs	r3, r3, #28
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	4a4e      	ldr	r2, [pc, #312]	; (80062dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80061a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a8:	ee07 3a90 	vmov	s15, r3
 80061ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	ee07 3a90 	vmov	s15, r3
 80061b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	ee07 3a90 	vmov	s15, r3
 80061c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80061cc:	eddf 5a42 	vldr	s11, [pc, #264]	; 80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80061d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80061e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061e8:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80061ea:	4b39      	ldr	r3, [pc, #228]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d017      	beq.n	8006226 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80061f6:	4b36      	ldr	r3, [pc, #216]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80061f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fa:	0a5b      	lsrs	r3, r3, #9
 80061fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006200:	ee07 3a90 	vmov	s15, r3
 8006204:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800620c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006210:	edd7 6a07 	vldr	s13, [r7, #28]
 8006214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800621c:	ee17 2a90 	vmov	r2, s15
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	e002      	b.n	800622c <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800622c:	4b28      	ldr	r3, [pc, #160]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d017      	beq.n	8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006238:	4b25      	ldr	r3, [pc, #148]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800623a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623c:	0c1b      	lsrs	r3, r3, #16
 800623e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800624a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800624e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006252:	edd7 6a07 	vldr	s13, [r7, #28]
 8006256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800625a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800625e:	ee17 2a90 	vmov	r2, s15
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	605a      	str	r2, [r3, #4]
 8006266:	e002      	b.n	800626e <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800626e:	4b18      	ldr	r3, [pc, #96]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d017      	beq.n	80062aa <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800627a:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800627c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627e:	0e1b      	lsrs	r3, r3, #24
 8006280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006284:	ee07 3a90 	vmov	s15, r3
 8006288:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800628c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006290:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006294:	edd7 6a07 	vldr	s13, [r7, #28]
 8006298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800629c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062a0:	ee17 2a90 	vmov	r2, s15
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80062a8:	e00c      	b.n	80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	e008      	b.n	80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	609a      	str	r2, [r3, #8]
}
 80062c4:	bf00      	nop
 80062c6:	3724      	adds	r7, #36	; 0x24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	46020c00 	.word	0x46020c00
 80062d4:	4b742400 	.word	0x4b742400
 80062d8:	46000000 	.word	0x46000000
 80062dc:	080096dc 	.word	0x080096dc

080062e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b089      	sub	sp, #36	; 0x24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80062e8:	4bac      	ldr	r3, [pc, #688]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80062ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80062f2:	4baa      	ldr	r3, [pc, #680]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80062fc:	4ba7      	ldr	r3, [pc, #668]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	0a1b      	lsrs	r3, r3, #8
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	3301      	adds	r3, #1
 8006308:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800630a:	4ba4      	ldr	r3, [pc, #656]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006314:	4ba1      	ldr	r3, [pc, #644]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006318:	08db      	lsrs	r3, r3, #3
 800631a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	fb02 f303 	mul.w	r3, r2, r3
 8006324:	ee07 3a90 	vmov	s15, r3
 8006328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8123 	beq.w	800657e <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b03      	cmp	r3, #3
 800633c:	d062      	beq.n	8006404 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b03      	cmp	r3, #3
 8006342:	f200 8081 	bhi.w	8006448 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d024      	beq.n	8006396 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d17a      	bne.n	8006448 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	ee07 3a90 	vmov	s15, r3
 8006358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635c:	eddf 6a90 	vldr	s13, [pc, #576]	; 80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006364:	4b8d      	ldr	r3, [pc, #564]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800636c:	ee07 3a90 	vmov	s15, r3
 8006370:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006374:	ed97 6a02 	vldr	s12, [r7, #8]
 8006378:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80065a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800637c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006380:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006384:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006388:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800638c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006390:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8006394:	e08f      	b.n	80064b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006396:	4b81      	ldr	r3, [pc, #516]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d005      	beq.n	80063ae <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 80063a2:	4b7e      	ldr	r3, [pc, #504]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	0f1b      	lsrs	r3, r3, #28
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	e006      	b.n	80063bc <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 80063ae:	4b7b      	ldr	r3, [pc, #492]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80063b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063b4:	041b      	lsls	r3, r3, #16
 80063b6:	0f1b      	lsrs	r3, r3, #28
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	4a7a      	ldr	r2, [pc, #488]	; (80065a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80063be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	ee07 3a90 	vmov	s15, r3
 80063d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80063e6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80065a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80063ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80063fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006402:	e058      	b.n	80064b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80065a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006416:	4b61      	ldr	r3, [pc, #388]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006426:	ed97 6a02 	vldr	s12, [r7, #8]
 800642a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80065a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800642e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006432:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800643a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800643e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006446:	e036      	b.n	80064b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006448:	4b54      	ldr	r3, [pc, #336]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8006454:	4b51      	ldr	r3, [pc, #324]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	0f1b      	lsrs	r3, r3, #28
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	e006      	b.n	800646e <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8006460:	4b4e      	ldr	r3, [pc, #312]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006462:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006466:	041b      	lsls	r3, r3, #16
 8006468:	0f1b      	lsrs	r3, r3, #28
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	4a4e      	ldr	r2, [pc, #312]	; (80065a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006494:	ed97 6a02 	vldr	s12, [r7, #8]
 8006498:	eddf 5a42 	vldr	s11, [pc, #264]	; 80065a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800649c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80064ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064b4:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80064b6:	4b39      	ldr	r3, [pc, #228]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d017      	beq.n	80064f2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80064c2:	4b36      	ldr	r3, [pc, #216]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80064c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c6:	0a5b      	lsrs	r3, r3, #9
 80064c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064cc:	ee07 3a90 	vmov	s15, r3
 80064d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80064d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064d8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80064dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80064e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064e8:	ee17 2a90 	vmov	r2, s15
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	e002      	b.n	80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80064f8:	4b28      	ldr	r3, [pc, #160]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80064fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d017      	beq.n	8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006504:	4b25      	ldr	r3, [pc, #148]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006508:	0c1b      	lsrs	r3, r3, #16
 800650a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800651a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800651e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800652a:	ee17 2a90 	vmov	r2, s15
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	e002      	b.n	800653a <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800653a:	4b18      	ldr	r3, [pc, #96]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d017      	beq.n	8006576 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006546:	4b15      	ldr	r3, [pc, #84]	; (800659c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654a:	0e1b      	lsrs	r3, r3, #24
 800654c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006550:	ee07 3a90 	vmov	s15, r3
 8006554:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800655c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006560:	edd7 6a07 	vldr	s13, [r7, #28]
 8006564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800656c:	ee17 2a90 	vmov	r2, s15
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006574:	e00c      	b.n	8006590 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	609a      	str	r2, [r3, #8]
}
 800657c:	e008      	b.n	8006590 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	609a      	str	r2, [r3, #8]
}
 8006590:	bf00      	nop
 8006592:	3724      	adds	r7, #36	; 0x24
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	46020c00 	.word	0x46020c00
 80065a0:	4b742400 	.word	0x4b742400
 80065a4:	46000000 	.word	0x46000000
 80065a8:	080096dc 	.word	0x080096dc

080065ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08e      	sub	sp, #56	; 0x38
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80065b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ba:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80065be:	430b      	orrs	r3, r1
 80065c0:	d145      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80065c2:	4ba7      	ldr	r3, [pc, #668]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065cc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80065ce:	4ba4      	ldr	r3, [pc, #656]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d108      	bne.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e2:	d104      	bne.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80065e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065e8:	637b      	str	r3, [r7, #52]	; 0x34
 80065ea:	f001 b8fc 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80065ee:	4b9c      	ldr	r3, [pc, #624]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065fc:	d114      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006604:	d110      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006606:	4b96      	ldr	r3, [pc, #600]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800660c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006614:	d103      	bne.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006616:	23fa      	movs	r3, #250	; 0xfa
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800661a:	f001 b8e4 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800661e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006624:	f001 b8df 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006628:	4b8d      	ldr	r3, [pc, #564]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006634:	d107      	bne.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800663c:	d103      	bne.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800663e:	4b89      	ldr	r3, [pc, #548]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006640:	637b      	str	r3, [r7, #52]	; 0x34
 8006642:	f001 b8d0 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	637b      	str	r3, [r7, #52]	; 0x34
 800664a:	f001 b8cc 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800664e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006652:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006656:	430b      	orrs	r3, r1
 8006658:	d151      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800665a:	4b81      	ldr	r3, [pc, #516]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800665c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006660:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006664:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	2b80      	cmp	r3, #128	; 0x80
 800666a:	d035      	beq.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	2b80      	cmp	r3, #128	; 0x80
 8006670:	d841      	bhi.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	2b60      	cmp	r3, #96	; 0x60
 8006676:	d02a      	beq.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	2b60      	cmp	r3, #96	; 0x60
 800667c:	d83b      	bhi.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	2b40      	cmp	r3, #64	; 0x40
 8006682:	d009      	beq.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	d835      	bhi.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00c      	beq.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006692:	2b20      	cmp	r3, #32
 8006694:	d012      	beq.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006696:	e02e      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff fb53 	bl	8005d48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066a6:	f001 b89e 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066aa:	f107 0318 	add.w	r3, r7, #24
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fcb0 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066b8:	f001 b895 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066bc:	f107 030c 	add.w	r3, r7, #12
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff fe0d 	bl	80062e0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066ca:	f001 b88c 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80066ce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80066d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066d4:	f001 b887 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066d8:	4b61      	ldr	r3, [pc, #388]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e4:	d103      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80066e6:	4b60      	ldr	r3, [pc, #384]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80066ea:	f001 b87c 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066f2:	f001 b878 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066fa:	f001 b874 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80066fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006702:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006706:	430b      	orrs	r3, r1
 8006708:	d158      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800670a:	4b55      	ldr	r3, [pc, #340]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800670c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006714:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671c:	d03b      	beq.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006724:	d846      	bhi.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800672c:	d02e      	beq.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006734:	d83e      	bhi.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800673c:	d00b      	beq.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006744:	d836      	bhi.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00d      	beq.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006752:	d012      	beq.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006754:	e02e      	b.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff faf4 	bl	8005d48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006764:	f001 b83f 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006768:	f107 0318 	add.w	r3, r7, #24
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff fc51 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006776:	f001 b836 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800677a:	f107 030c 	add.w	r3, r7, #12
 800677e:	4618      	mov	r0, r3
 8006780:	f7ff fdae 	bl	80062e0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006788:	f001 b82d 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800678c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006790:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006792:	f001 b828 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006796:	4b32      	ldr	r3, [pc, #200]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800679e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a2:	d103      	bne.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80067a4:	4b30      	ldr	r3, [pc, #192]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80067a6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80067a8:	f001 b81d 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067b0:	f001 b819 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067b8:	f001 b815 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80067bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067c0:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80067c4:	430b      	orrs	r3, r1
 80067c6:	d126      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80067c8:	4b25      	ldr	r3, [pc, #148]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80067ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d2:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80067d4:	4b22      	ldr	r3, [pc, #136]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e0:	d106      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d103      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80067e8:	4b1f      	ldr	r3, [pc, #124]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80067ea:	637b      	str	r3, [r7, #52]	; 0x34
 80067ec:	f000 bffb 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80067f0:	4b1b      	ldr	r3, [pc, #108]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fc:	d107      	bne.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006804:	d103      	bne.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006806:	4b19      	ldr	r3, [pc, #100]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006808:	637b      	str	r3, [r7, #52]	; 0x34
 800680a:	f000 bfec 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	637b      	str	r3, [r7, #52]	; 0x34
 8006812:	f000 bfe8 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800681a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800681e:	430b      	orrs	r3, r1
 8006820:	d164      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006822:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006828:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800682c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006834:	d03d      	beq.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800683c:	d852      	bhi.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006844:	d014      	beq.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800684c:	d84a      	bhi.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01f      	beq.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800685a:	d012      	beq.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800685c:	e042      	b.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800685e:	bf00      	nop
 8006860:	46020c00 	.word	0x46020c00
 8006864:	0007a120 	.word	0x0007a120
 8006868:	00f42400 	.word	0x00f42400
 800686c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff fa67 	bl	8005d48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800687e:	f000 bfb2 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006882:	f107 0318 	add.w	r3, r7, #24
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fbc4 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006890:	f000 bfa9 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006894:	4bab      	ldr	r3, [pc, #684]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800689c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a0:	d103      	bne.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80068a2:	4ba9      	ldr	r3, [pc, #676]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80068a4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068a6:	f000 bf9e 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068ae:	f000 bf9a 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068b2:	4ba4      	ldr	r3, [pc, #656]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d005      	beq.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80068be:	4ba1      	ldr	r3, [pc, #644]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	0e1b      	lsrs	r3, r3, #24
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	e006      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80068ca:	4b9e      	ldr	r3, [pc, #632]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80068cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068d0:	041b      	lsls	r3, r3, #16
 80068d2:	0e1b      	lsrs	r3, r3, #24
 80068d4:	f003 030f 	and.w	r3, r3, #15
 80068d8:	4a9c      	ldr	r2, [pc, #624]	; (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80068da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068e0:	f000 bf81 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068e8:	f000 bf7d 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80068ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068f0:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80068f4:	430b      	orrs	r3, r1
 80068f6:	d175      	bne.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80068f8:	4b92      	ldr	r3, [pc, #584]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80068fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80068fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006902:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	2b00      	cmp	r3, #0
 8006908:	d15b      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800690a:	4b8e      	ldr	r3, [pc, #568]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800690c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006910:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006914:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800691c:	d034      	beq.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006924:	d849      	bhi.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800692c:	d00b      	beq.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006934:	d841      	bhi.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	2b00      	cmp	r3, #0
 800693a:	d016      	beq.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006942:	d009      	beq.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006944:	e039      	b.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff f9fc 	bl	8005d48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006954:	f000 bf47 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006958:	f107 0318 	add.w	r3, r7, #24
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff fb59 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006966:	f000 bf3e 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800696a:	4b76      	ldr	r3, [pc, #472]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006976:	d103      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8006978:	4b73      	ldr	r3, [pc, #460]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800697a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800697c:	f000 bf33 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006984:	f000 bf2f 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006988:	4b6e      	ldr	r3, [pc, #440]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8006994:	4b6b      	ldr	r3, [pc, #428]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	0e1b      	lsrs	r3, r3, #24
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	e006      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80069a0:	4b68      	ldr	r3, [pc, #416]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80069a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80069a6:	041b      	lsls	r3, r3, #16
 80069a8:	0e1b      	lsrs	r3, r3, #24
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	4a67      	ldr	r2, [pc, #412]	; (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80069b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80069b6:	f000 bf16 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80069be:	f000 bf12 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069c8:	d108      	bne.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff f9ba 	bl	8005d48 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	637b      	str	r3, [r7, #52]	; 0x34
 80069d8:	f000 bf05 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	637b      	str	r3, [r7, #52]	; 0x34
 80069e0:	f000 bf01 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80069e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e8:	1e51      	subs	r1, r2, #1
 80069ea:	430b      	orrs	r3, r1
 80069ec:	d136      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80069ee:	4b55      	ldr	r3, [pc, #340]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80069f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d104      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006a00:	f7fe fb34 	bl	800506c <HAL_RCC_GetPCLK2Freq>
 8006a04:	6378      	str	r0, [r7, #52]	; 0x34
 8006a06:	f000 beee 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d104      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a10:	f7fe f9f6 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8006a14:	6378      	str	r0, [r7, #52]	; 0x34
 8006a16:	f000 bee6 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006a1a:	4b4a      	ldr	r3, [pc, #296]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a26:	d106      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d103      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8006a2e:	4b48      	ldr	r3, [pc, #288]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
 8006a32:	f000 bed8 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006a36:	4b43      	ldr	r3, [pc, #268]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d107      	bne.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d104      	bne.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8006a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a50:	f000 bec9 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	637b      	str	r3, [r7, #52]	; 0x34
 8006a58:	f000 bec5 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a60:	1e91      	subs	r1, r2, #2
 8006a62:	430b      	orrs	r3, r1
 8006a64:	d136      	bne.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006a66:	4b37      	ldr	r3, [pc, #220]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a6c:	f003 030c 	and.w	r3, r3, #12
 8006a70:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a78:	f7fe fae4 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 8006a7c:	6378      	str	r0, [r7, #52]	; 0x34
 8006a7e:	f000 beb2 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d104      	bne.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a88:	f7fe f9ba 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8006a8c:	6378      	str	r0, [r7, #52]	; 0x34
 8006a8e:	f000 beaa 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006a92:	4b2c      	ldr	r3, [pc, #176]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a9e:	d106      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d103      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8006aa6:	4b2a      	ldr	r3, [pc, #168]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aaa:	f000 be9c 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006aae:	4b25      	ldr	r3, [pc, #148]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d107      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	2b0c      	cmp	r3, #12
 8006ac0:	d104      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8006ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac8:	f000 be8d 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad0:	f000 be89 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad8:	1f11      	subs	r1, r2, #4
 8006ada:	430b      	orrs	r3, r1
 8006adc:	d13e      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006ade:	4b19      	ldr	r3, [pc, #100]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ae4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ae8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d104      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006af0:	f7fe faa8 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 8006af4:	6378      	str	r0, [r7, #52]	; 0x34
 8006af6:	f000 be76 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	2b10      	cmp	r3, #16
 8006afe:	d104      	bne.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b00:	f7fe f97e 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8006b04:	6378      	str	r0, [r7, #52]	; 0x34
 8006b06:	f000 be6e 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006b0a:	4b0e      	ldr	r3, [pc, #56]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b16:	d106      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	d103      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8006b1e:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006b20:	637b      	str	r3, [r7, #52]	; 0x34
 8006b22:	f000 be60 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006b26:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d10f      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	2b30      	cmp	r3, #48	; 0x30
 8006b38:	d10c      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8006b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b40:	f000 be51 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006b44:	46020c00 	.word	0x46020c00
 8006b48:	02dc6c00 	.word	0x02dc6c00
 8006b4c:	080096dc 	.word	0x080096dc
 8006b50:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	637b      	str	r3, [r7, #52]	; 0x34
 8006b58:	f000 be45 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b60:	f1a2 0108 	sub.w	r1, r2, #8
 8006b64:	430b      	orrs	r3, r1
 8006b66:	d136      	bne.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006b68:	4b9f      	ldr	r3, [pc, #636]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b72:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d104      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b7a:	f7fe fa63 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 8006b7e:	6378      	str	r0, [r7, #52]	; 0x34
 8006b80:	f000 be31 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	2b40      	cmp	r3, #64	; 0x40
 8006b88:	d104      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b8a:	f7fe f939 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8006b8e:	6378      	str	r0, [r7, #52]	; 0x34
 8006b90:	f000 be29 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006b94:	4b94      	ldr	r3, [pc, #592]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba0:	d106      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	2b80      	cmp	r3, #128	; 0x80
 8006ba6:	d103      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8006ba8:	4b90      	ldr	r3, [pc, #576]	; (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
 8006bac:	f000 be1b 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006bb0:	4b8d      	ldr	r3, [pc, #564]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d107      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	2bc0      	cmp	r3, #192	; 0xc0
 8006bc2:	d104      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8006bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bca:	f000 be0c 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd2:	f000 be08 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006bd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bda:	f1a2 0110 	sub.w	r1, r2, #16
 8006bde:	430b      	orrs	r3, r1
 8006be0:	d139      	bne.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006be2:	4b81      	ldr	r3, [pc, #516]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d104      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006bf4:	f7fe fa26 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 8006bf8:	6378      	str	r0, [r7, #52]	; 0x34
 8006bfa:	f000 bdf4 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c04:	d104      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c06:	f7fe f8fb 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8006c0a:	6378      	str	r0, [r7, #52]	; 0x34
 8006c0c:	f000 bdeb 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006c10:	4b75      	ldr	r3, [pc, #468]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c1c:	d107      	bne.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c24:	d103      	bne.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8006c26:	4b71      	ldr	r3, [pc, #452]	; (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006c28:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2a:	f000 bddc 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006c2e:	4b6e      	ldr	r3, [pc, #440]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d108      	bne.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c42:	d104      	bne.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8006c44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c48:	637b      	str	r3, [r7, #52]	; 0x34
 8006c4a:	f000 bdcc 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
 8006c52:	f000 bdc8 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c5a:	f1a2 0120 	sub.w	r1, r2, #32
 8006c5e:	430b      	orrs	r3, r1
 8006c60:	d158      	bne.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006c62:	4b61      	ldr	r3, [pc, #388]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d104      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006c74:	f7fe fa0e 	bl	8005094 <HAL_RCC_GetPCLK3Freq>
 8006c78:	6378      	str	r0, [r7, #52]	; 0x34
 8006c7a:	f000 bdb4 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d104      	bne.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c84:	f7fe f8bc 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8006c88:	6378      	str	r0, [r7, #52]	; 0x34
 8006c8a:	f000 bdac 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006c8e:	4b56      	ldr	r3, [pc, #344]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9a:	d106      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d103      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8006ca2:	4b52      	ldr	r3, [pc, #328]	; (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca6:	f000 bd9e 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006caa:	4b4f      	ldr	r3, [pc, #316]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d107      	bne.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d104      	bne.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8006cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc4:	f000 bd8f 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006cc8:	4b47      	ldr	r3, [pc, #284]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	d11b      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d118      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cda:	4b43      	ldr	r3, [pc, #268]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006ce6:	4b40      	ldr	r3, [pc, #256]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	0e1b      	lsrs	r3, r3, #24
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	e006      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8006cf2:	4b3d      	ldr	r3, [pc, #244]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006cf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cf8:	041b      	lsls	r3, r3, #16
 8006cfa:	0e1b      	lsrs	r3, r3, #24
 8006cfc:	f003 030f 	and.w	r3, r3, #15
 8006d00:	4a3b      	ldr	r2, [pc, #236]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34
 8006d08:	f000 bd6d 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d10:	f000 bd69 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d18:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	d169      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006d20:	4b31      	ldr	r3, [pc, #196]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d26:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006d2a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d32:	d104      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d34:	f7fe f864 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8006d38:	6378      	str	r0, [r7, #52]	; 0x34
 8006d3a:	f000 bd54 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d44:	d108      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d46:	f107 0318 	add.w	r3, r7, #24
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7ff f962 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	637b      	str	r3, [r7, #52]	; 0x34
 8006d54:	f000 bd47 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d104      	bne.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006d5e:	f7fe f957 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 8006d62:	6378      	str	r0, [r7, #52]	; 0x34
 8006d64:	f000 bd3f 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006d6e:	d118      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006d70:	4b1d      	ldr	r3, [pc, #116]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006d7c:	4b1a      	ldr	r3, [pc, #104]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	0f1b      	lsrs	r3, r3, #28
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	e006      	b.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006d88:	4b17      	ldr	r3, [pc, #92]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d8e:	041b      	lsls	r3, r3, #16
 8006d90:	0f1b      	lsrs	r3, r3, #28
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	4a16      	ldr	r2, [pc, #88]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d9e:	f000 bd22 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006da2:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dae:	d107      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006db6:	d103      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8006db8:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006dba:	637b      	str	r3, [r7, #52]	; 0x34
 8006dbc:	f000 bd13 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006dc0:	4b09      	ldr	r3, [pc, #36]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dcc:	d107      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dd4:	d103      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8006dd6:	4b05      	ldr	r3, [pc, #20]	; (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dda:	f000 bd04 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
 8006de2:	f000 bd00 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006de6:	bf00      	nop
 8006de8:	46020c00 	.word	0x46020c00
 8006dec:	00f42400 	.word	0x00f42400
 8006df0:	080096dc 	.word	0x080096dc
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006df8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	d14e      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006e00:	4ba8      	ldr	r3, [pc, #672]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d841      	bhi.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006e12:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e51 	.word	0x08006e51
 8006e1c:	08006e2d 	.word	0x08006e2d
 8006e20:	08006e3f 	.word	0x08006e3f
 8006e24:	08006e5b 	.word	0x08006e5b
 8006e28:	08006e65 	.word	0x08006e65
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fe ff89 	bl	8005d48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e3a:	f000 bcd4 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e3e:	f107 030c 	add.w	r3, r7, #12
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff fa4c 	bl	80062e0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e4c:	f000 bccb 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006e50:	f7fe f8de 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 8006e54:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006e56:	f000 bcc6 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006e5a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e60:	f000 bcc1 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e64:	4b8f      	ldr	r3, [pc, #572]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8006e70:	4b8c      	ldr	r3, [pc, #560]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	0e1b      	lsrs	r3, r3, #24
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	e006      	b.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006e7c:	4b89      	ldr	r3, [pc, #548]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e82:	041b      	lsls	r3, r3, #16
 8006e84:	0e1b      	lsrs	r3, r3, #24
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	4a87      	ldr	r2, [pc, #540]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e92:	f000 bca8 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e9a:	f000 bca4 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea2:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	d15d      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006eaa:	4b7e      	ldr	r3, [pc, #504]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006eb0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006eb4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ebc:	d036      	beq.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ec4:	d84b      	bhi.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ecc:	d029      	beq.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ed4:	d843      	bhi.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006edc:	d013      	beq.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee4:	d83b      	bhi.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d015      	beq.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef2:	d134      	bne.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fe ff25 	bl	8005d48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f02:	f000 bc70 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f06:	f107 030c 	add.w	r3, r7, #12
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff f9e8 	bl	80062e0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f14:	f000 bc67 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006f18:	f7fe f87a 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 8006f1c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f1e:	f000 bc62 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006f22:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006f26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f28:	f000 bc5d 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f2c:	4b5d      	ldr	r3, [pc, #372]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006f38:	4b5a      	ldr	r3, [pc, #360]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	0e1b      	lsrs	r3, r3, #24
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	e006      	b.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8006f44:	4b57      	ldr	r3, [pc, #348]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f4a:	041b      	lsls	r3, r3, #16
 8006f4c:	0e1b      	lsrs	r3, r3, #24
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	4a55      	ldr	r2, [pc, #340]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f5a:	f000 bc44 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f62:	f000 bc40 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f6a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006f6e:	430b      	orrs	r3, r1
 8006f70:	d14a      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006f72:	4b4c      	ldr	r3, [pc, #304]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f7c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f84:	f7fe f85e 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 8006f88:	6378      	str	r0, [r7, #52]	; 0x34
 8006f8a:	f000 bc2c 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f94:	d104      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f96:	f7fd ff33 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8006f9a:	6378      	str	r0, [r7, #52]	; 0x34
 8006f9c:	f000 bc23 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006fa0:	4b40      	ldr	r3, [pc, #256]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fac:	d107      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fb4:	d103      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8006fb6:	4b3d      	ldr	r3, [pc, #244]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fba:	f000 bc14 	b.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006fbe:	4b39      	ldr	r3, [pc, #228]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d11b      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fd0:	d117      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fd2:	4b34      	ldr	r3, [pc, #208]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d005      	beq.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8006fde:	4b31      	ldr	r3, [pc, #196]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	0e1b      	lsrs	r3, r3, #24
 8006fe4:	f003 030f 	and.w	r3, r3, #15
 8006fe8:	e006      	b.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006fea:	4b2e      	ldr	r3, [pc, #184]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ff0:	041b      	lsls	r3, r3, #16
 8006ff2:	0e1b      	lsrs	r3, r3, #24
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	4a2b      	ldr	r2, [pc, #172]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8007000:	e3f1      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	637b      	str	r3, [r7, #52]	; 0x34
 8007006:	e3ee      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800700c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007010:	430b      	orrs	r3, r1
 8007012:	d14d      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007014:	4b23      	ldr	r3, [pc, #140]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800701a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800701e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007022:	2b00      	cmp	r3, #0
 8007024:	d103      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007026:	f7fe f80d 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 800702a:	6378      	str	r0, [r7, #52]	; 0x34
 800702c:	e3db      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007034:	d103      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007036:	f7fd fee3 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 800703a:	6378      	str	r0, [r7, #52]	; 0x34
 800703c:	e3d3      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800703e:	4b19      	ldr	r3, [pc, #100]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800704a:	d106      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007052:	d102      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8007054:	4b15      	ldr	r3, [pc, #84]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007056:	637b      	str	r3, [r7, #52]	; 0x34
 8007058:	e3c5      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800705a:	4b12      	ldr	r3, [pc, #72]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b20      	cmp	r3, #32
 8007064:	d11b      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800706c:	d117      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800706e:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d005      	beq.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 800707a:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	0e1b      	lsrs	r3, r3, #24
 8007080:	f003 030f 	and.w	r3, r3, #15
 8007084:	e006      	b.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007086:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800708c:	041b      	lsls	r3, r3, #16
 800708e:	0e1b      	lsrs	r3, r3, #24
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	4a04      	ldr	r2, [pc, #16]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800709a:	637b      	str	r3, [r7, #52]	; 0x34
 800709c:	e3a3      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	637b      	str	r3, [r7, #52]	; 0x34
 80070a2:	e3a0      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80070a4:	46020c00 	.word	0x46020c00
 80070a8:	080096dc 	.word	0x080096dc
 80070ac:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80070b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b4:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80070b8:	430b      	orrs	r3, r1
 80070ba:	d148      	bne.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80070bc:	4b9d      	ldr	r3, [pc, #628]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80070be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	2bc0      	cmp	r3, #192	; 0xc0
 80070cc:	d024      	beq.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	2bc0      	cmp	r3, #192	; 0xc0
 80070d2:	d839      	bhi.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	2b80      	cmp	r3, #128	; 0x80
 80070d8:	d00d      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	2b80      	cmp	r3, #128	; 0x80
 80070de:	d833      	bhi.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	2b40      	cmp	r3, #64	; 0x40
 80070ea:	d011      	beq.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80070ec:	e02c      	b.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80070ee:	f7fd ffd1 	bl	8005094 <HAL_RCC_GetPCLK3Freq>
 80070f2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80070f4:	e377      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070f6:	4b8f      	ldr	r3, [pc, #572]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007102:	d102      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8007104:	4b8c      	ldr	r3, [pc, #560]	; (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007106:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007108:	e36d      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800710e:	e36a      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007110:	f7fd fe76 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8007114:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007116:	e366      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007118:	4b86      	ldr	r3, [pc, #536]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d005      	beq.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8007124:	4b83      	ldr	r3, [pc, #524]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	0f1b      	lsrs	r3, r3, #28
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	e006      	b.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007130:	4b80      	ldr	r3, [pc, #512]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007136:	041b      	lsls	r3, r3, #16
 8007138:	0f1b      	lsrs	r3, r3, #28
 800713a:	f003 030f 	and.w	r3, r3, #15
 800713e:	4a7f      	ldr	r2, [pc, #508]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007144:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007146:	e34e      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800714c:	e34b      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800714e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007152:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007156:	430b      	orrs	r3, r1
 8007158:	d147      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800715a:	4b76      	ldr	r3, [pc, #472]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800715c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007160:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007164:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	2b00      	cmp	r3, #0
 800716a:	d103      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800716c:	f7fd ff6a 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 8007170:	6378      	str	r0, [r7, #52]	; 0x34
 8007172:	e338      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800717a:	d103      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800717c:	f7fd fe40 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8007180:	6378      	str	r0, [r7, #52]	; 0x34
 8007182:	e330      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007184:	4b6b      	ldr	r3, [pc, #428]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800718c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007190:	d106      	bne.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007198:	d102      	bne.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 800719a:	4b67      	ldr	r3, [pc, #412]	; (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800719c:	637b      	str	r3, [r7, #52]	; 0x34
 800719e:	e322      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80071a0:	4b64      	ldr	r3, [pc, #400]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b20      	cmp	r3, #32
 80071aa:	d11b      	bne.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80071b2:	d117      	bne.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071b4:	4b5f      	ldr	r3, [pc, #380]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80071c0:	4b5c      	ldr	r3, [pc, #368]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	0e1b      	lsrs	r3, r3, #24
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	e006      	b.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 80071cc:	4b59      	ldr	r3, [pc, #356]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80071ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071d2:	041b      	lsls	r3, r3, #16
 80071d4:	0e1b      	lsrs	r3, r3, #24
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	4a58      	ldr	r2, [pc, #352]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80071dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
 80071e2:	e300      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34
 80071e8:	e2fd      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80071ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ee:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80071f2:	430b      	orrs	r3, r1
 80071f4:	d15b      	bne.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80071f6:	4b4f      	ldr	r3, [pc, #316]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80071f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007200:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	2b00      	cmp	r3, #0
 8007206:	d117      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007208:	4b4a      	ldr	r3, [pc, #296]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d005      	beq.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8007214:	4b47      	ldr	r3, [pc, #284]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	0e1b      	lsrs	r3, r3, #24
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	e006      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8007220:	4b44      	ldr	r3, [pc, #272]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007226:	041b      	lsls	r3, r3, #16
 8007228:	0e1b      	lsrs	r3, r3, #24
 800722a:	f003 030f 	and.w	r3, r3, #15
 800722e:	4a43      	ldr	r2, [pc, #268]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007234:	637b      	str	r3, [r7, #52]	; 0x34
 8007236:	e2d6      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007238:	4b3e      	ldr	r3, [pc, #248]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800723a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800723e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007246:	d112      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800724e:	d10e      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007250:	4b38      	ldr	r3, [pc, #224]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800725a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800725e:	d102      	bne.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8007260:	23fa      	movs	r3, #250	; 0xfa
 8007262:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007264:	e2bf      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007266:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800726a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800726c:	e2bb      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800726e:	4b31      	ldr	r3, [pc, #196]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800727a:	d106      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 800727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007282:	d102      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8007284:	4b2c      	ldr	r3, [pc, #176]	; (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007286:	637b      	str	r3, [r7, #52]	; 0x34
 8007288:	e2ad      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800728a:	4b2a      	ldr	r3, [pc, #168]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800728c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b02      	cmp	r3, #2
 8007296:	d107      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8007298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800729e:	d103      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 80072a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072a4:	637b      	str	r3, [r7, #52]	; 0x34
 80072a6:	e29e      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	637b      	str	r3, [r7, #52]	; 0x34
 80072ac:	e29b      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80072ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b2:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80072b6:	430b      	orrs	r3, r1
 80072b8:	d162      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80072ba:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80072bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80072c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072c4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d117      	bne.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072cc:	4b19      	ldr	r3, [pc, #100]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d005      	beq.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80072d8:	4b16      	ldr	r3, [pc, #88]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	0e1b      	lsrs	r3, r3, #24
 80072de:	f003 030f 	and.w	r3, r3, #15
 80072e2:	e006      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80072e4:	4b13      	ldr	r3, [pc, #76]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80072e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072ea:	041b      	lsls	r3, r3, #16
 80072ec:	0e1b      	lsrs	r3, r3, #24
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	4a12      	ldr	r2, [pc, #72]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80072f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f8:	637b      	str	r3, [r7, #52]	; 0x34
 80072fa:	e274      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80072fc:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80072fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007302:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800730a:	d119      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007312:	d115      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007314:	4b07      	ldr	r3, [pc, #28]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800731a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800731e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007322:	d102      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8007324:	23fa      	movs	r3, #250	; 0xfa
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007328:	e25d      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800732a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800732e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007330:	e259      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007332:	bf00      	nop
 8007334:	46020c00 	.word	0x46020c00
 8007338:	00f42400 	.word	0x00f42400
 800733c:	080096dc 	.word	0x080096dc
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007340:	4b9d      	ldr	r3, [pc, #628]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734c:	d106      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007354:	d102      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8007356:	4b99      	ldr	r3, [pc, #612]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007358:	637b      	str	r3, [r7, #52]	; 0x34
 800735a:	e244      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800735c:	4b96      	ldr	r3, [pc, #600]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800735e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b02      	cmp	r3, #2
 8007368:	d107      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007370:	d103      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8007372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007376:	637b      	str	r3, [r7, #52]	; 0x34
 8007378:	e235      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
 800737e:	e232      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007384:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007388:	430b      	orrs	r3, r1
 800738a:	d147      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800738c:	4b8a      	ldr	r3, [pc, #552]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800738e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007392:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007396:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	2b00      	cmp	r3, #0
 800739c:	d103      	bne.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800739e:	f7fd fe51 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 80073a2:	6378      	str	r0, [r7, #52]	; 0x34
 80073a4:	e21f      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80073a6:	4b84      	ldr	r3, [pc, #528]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80073a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073b4:	d112      	bne.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073bc:	d10e      	bne.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073be:	4b7e      	ldr	r3, [pc, #504]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80073c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073cc:	d102      	bne.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80073ce:	23fa      	movs	r3, #250	; 0xfa
 80073d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073d2:	e208      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80073d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80073d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073da:	e204      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80073dc:	4b76      	ldr	r3, [pc, #472]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e8:	d106      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073f0:	d102      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 80073f2:	4b72      	ldr	r3, [pc, #456]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80073f4:	637b      	str	r3, [r7, #52]	; 0x34
 80073f6:	e1f6      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80073f8:	4b6f      	ldr	r3, [pc, #444]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80073fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b02      	cmp	r3, #2
 8007404:	d107      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800740c:	d103      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800740e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007412:	637b      	str	r3, [r7, #52]	; 0x34
 8007414:	e1e7      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	637b      	str	r3, [r7, #52]	; 0x34
 800741a:	e1e4      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800741c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007420:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007424:	430b      	orrs	r3, r1
 8007426:	d12d      	bne.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007428:	4b63      	ldr	r3, [pc, #396]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800742a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800742e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007432:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007434:	4b60      	ldr	r3, [pc, #384]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800743c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007440:	d105      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	2b00      	cmp	r3, #0
 8007446:	d102      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8007448:	4b5c      	ldr	r3, [pc, #368]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800744a:	637b      	str	r3, [r7, #52]	; 0x34
 800744c:	e1cb      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007454:	d107      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fc74 	bl	8005d48 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	637b      	str	r3, [r7, #52]	; 0x34
 8007464:	e1bf      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800746c:	d107      	bne.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800746e:	f107 0318 	add.w	r3, r7, #24
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe fdce 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	637b      	str	r3, [r7, #52]	; 0x34
 800747c:	e1b3      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	637b      	str	r3, [r7, #52]	; 0x34
 8007482:	e1b0      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007488:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800748c:	430b      	orrs	r3, r1
 800748e:	d14d      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007490:	4b49      	ldr	r3, [pc, #292]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007496:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800749a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074a2:	d028      	beq.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074aa:	d83c      	bhi.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074b2:	d013      	beq.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074ba:	d834      	bhi.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d004      	beq.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074c8:	d004      	beq.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80074ca:	e02c      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80074cc:	f7fd fdce 	bl	800506c <HAL_RCC_GetPCLK2Freq>
 80074d0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80074d2:	e188      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80074d4:	f7fd fc94 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 80074d8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80074da:	e184      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074dc:	4b36      	ldr	r3, [pc, #216]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e8:	d102      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 80074ea:	4b34      	ldr	r3, [pc, #208]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80074ec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074ee:	e17a      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074f4:	e177      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074f6:	4b30      	ldr	r3, [pc, #192]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8007502:	4b2d      	ldr	r3, [pc, #180]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	0e1b      	lsrs	r3, r3, #24
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	e006      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800750e:	4b2a      	ldr	r3, [pc, #168]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007514:	041b      	lsls	r3, r3, #16
 8007516:	0e1b      	lsrs	r3, r3, #24
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	4a28      	ldr	r2, [pc, #160]	; (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800751e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007524:	e15f      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800752a:	e15c      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800752c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007530:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8007534:	430b      	orrs	r3, r1
 8007536:	d154      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007538:	4b1f      	ldr	r3, [pc, #124]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800753a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800753e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007542:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800754a:	d028      	beq.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007552:	d843      	bhi.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800755a:	d013      	beq.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007562:	d83b      	bhi.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	2b00      	cmp	r3, #0
 8007568:	d004      	beq.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007570:	d004      	beq.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8007572:	e033      	b.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007574:	f7fd fd66 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 8007578:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800757a:	e134      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800757c:	f7fd fc40 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8007580:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007582:	e130      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007584:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800758c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007590:	d102      	bne.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8007592:	4b0a      	ldr	r3, [pc, #40]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007594:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007596:	e126      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800759c:	e123      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800759e:	4b06      	ldr	r3, [pc, #24]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00c      	beq.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 80075aa:	4b03      	ldr	r3, [pc, #12]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	0e1b      	lsrs	r3, r3, #24
 80075b0:	f003 030f 	and.w	r3, r3, #15
 80075b4:	e00d      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80075b6:	bf00      	nop
 80075b8:	46020c00 	.word	0x46020c00
 80075bc:	00f42400 	.word	0x00f42400
 80075c0:	080096dc 	.word	0x080096dc
 80075c4:	4b8a      	ldr	r3, [pc, #552]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80075c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075ca:	041b      	lsls	r3, r3, #16
 80075cc:	0e1b      	lsrs	r3, r3, #24
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	4a88      	ldr	r2, [pc, #544]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80075d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075da:	e104      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075e0:	e101      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80075e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e6:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80075ea:	430b      	orrs	r3, r1
 80075ec:	d16e      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80075ee:	4b80      	ldr	r3, [pc, #512]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80075f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80075f4:	f003 0318 	and.w	r3, r3, #24
 80075f8:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	2b18      	cmp	r3, #24
 80075fe:	d862      	bhi.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8007600:	a201      	add	r2, pc, #4	; (adr r2, 8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8007602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007606:	bf00      	nop
 8007608:	0800766d 	.word	0x0800766d
 800760c:	080076c7 	.word	0x080076c7
 8007610:	080076c7 	.word	0x080076c7
 8007614:	080076c7 	.word	0x080076c7
 8007618:	080076c7 	.word	0x080076c7
 800761c:	080076c7 	.word	0x080076c7
 8007620:	080076c7 	.word	0x080076c7
 8007624:	080076c7 	.word	0x080076c7
 8007628:	08007675 	.word	0x08007675
 800762c:	080076c7 	.word	0x080076c7
 8007630:	080076c7 	.word	0x080076c7
 8007634:	080076c7 	.word	0x080076c7
 8007638:	080076c7 	.word	0x080076c7
 800763c:	080076c7 	.word	0x080076c7
 8007640:	080076c7 	.word	0x080076c7
 8007644:	080076c7 	.word	0x080076c7
 8007648:	0800767d 	.word	0x0800767d
 800764c:	080076c7 	.word	0x080076c7
 8007650:	080076c7 	.word	0x080076c7
 8007654:	080076c7 	.word	0x080076c7
 8007658:	080076c7 	.word	0x080076c7
 800765c:	080076c7 	.word	0x080076c7
 8007660:	080076c7 	.word	0x080076c7
 8007664:	080076c7 	.word	0x080076c7
 8007668:	08007697 	.word	0x08007697
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800766c:	f7fd fd12 	bl	8005094 <HAL_RCC_GetPCLK3Freq>
 8007670:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007672:	e0b8      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007674:	f7fd fbc4 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8007678:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800767a:	e0b4      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800767c:	4b5c      	ldr	r3, [pc, #368]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007688:	d102      	bne.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800768a:	4b5b      	ldr	r3, [pc, #364]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800768e:	e0aa      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007694:	e0a7      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007696:	4b56      	ldr	r3, [pc, #344]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d005      	beq.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80076a2:	4b53      	ldr	r3, [pc, #332]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	0e1b      	lsrs	r3, r3, #24
 80076a8:	f003 030f 	and.w	r3, r3, #15
 80076ac:	e006      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80076ae:	4b50      	ldr	r3, [pc, #320]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80076b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076b4:	041b      	lsls	r3, r3, #16
 80076b6:	0e1b      	lsrs	r3, r3, #24
 80076b8:	f003 030f 	and.w	r3, r3, #15
 80076bc:	4a4d      	ldr	r2, [pc, #308]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80076be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076c4:	e08f      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076ca:	e08c      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80076cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076d0:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80076d4:	430b      	orrs	r3, r1
 80076d6:	d14c      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80076d8:	4b45      	ldr	r3, [pc, #276]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80076da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80076de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80076e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076ea:	d013      	beq.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076f2:	d83b      	bhi.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076fa:	d013      	beq.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007702:	d833      	bhi.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	2b00      	cmp	r3, #0
 8007708:	d014      	beq.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007710:	d014      	beq.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8007712:	e02b      	b.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007714:	f107 0318 	add.w	r3, r7, #24
 8007718:	4618      	mov	r0, r3
 800771a:	f7fe fc7b 	bl	8006014 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007722:	e060      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fb0d 	bl	8005d48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007732:	e058      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007734:	f7fd fb64 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8007738:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800773a:	e054      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800773c:	4b2c      	ldr	r3, [pc, #176]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d005      	beq.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8007748:	4b29      	ldr	r3, [pc, #164]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	0e1b      	lsrs	r3, r3, #24
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	e006      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8007754:	4b26      	ldr	r3, [pc, #152]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800775a:	041b      	lsls	r3, r3, #16
 800775c:	0e1b      	lsrs	r3, r3, #24
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	4a24      	ldr	r2, [pc, #144]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8007764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800776a:	e03c      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007770:	e039      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007776:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800777a:	430b      	orrs	r3, r1
 800777c:	d131      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800777e:	4b1c      	ldr	r3, [pc, #112]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007788:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800778a:	4b19      	ldr	r3, [pc, #100]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800778c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007790:	f003 0302 	and.w	r3, r3, #2
 8007794:	2b02      	cmp	r3, #2
 8007796:	d106      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	2b00      	cmp	r3, #0
 800779c:	d103      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800779e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077a2:	637b      	str	r3, [r7, #52]	; 0x34
 80077a4:	e01f      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80077a6:	4b12      	ldr	r3, [pc, #72]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80077a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077b4:	d112      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077bc:	d10e      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077be:	4b0c      	ldr	r3, [pc, #48]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80077c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077cc:	d102      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 80077ce:	23fa      	movs	r3, #250	; 0xfa
 80077d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077d2:	e008      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80077d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077da:	e004      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	637b      	str	r3, [r7, #52]	; 0x34
 80077e0:	e001      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80077e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3738      	adds	r7, #56	; 0x38
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	46020c00 	.word	0x46020c00
 80077f4:	080096dc 	.word	0x080096dc
 80077f8:	00f42400 	.word	0x00f42400

080077fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007804:	4b47      	ldr	r3, [pc, #284]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a46      	ldr	r2, [pc, #280]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 800780a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800780e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007810:	f7fa f9b4 	bl	8001b7c <HAL_GetTick>
 8007814:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007816:	e008      	b.n	800782a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007818:	f7fa f9b0 	bl	8001b7c <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d901      	bls.n	800782a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e077      	b.n	800791a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800782a:	4b3e      	ldr	r3, [pc, #248]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f0      	bne.n	8007818 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007836:	4b3b      	ldr	r3, [pc, #236]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800783e:	f023 0303 	bic.w	r3, r3, #3
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6811      	ldr	r1, [r2, #0]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	6852      	ldr	r2, [r2, #4]
 800784a:	3a01      	subs	r2, #1
 800784c:	0212      	lsls	r2, r2, #8
 800784e:	430a      	orrs	r2, r1
 8007850:	4934      	ldr	r1, [pc, #208]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 8007852:	4313      	orrs	r3, r2
 8007854:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007856:	4b33      	ldr	r3, [pc, #204]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 8007858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800785a:	4b33      	ldr	r3, [pc, #204]	; (8007928 <RCCEx_PLL2_Config+0x12c>)
 800785c:	4013      	ands	r3, r2
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	6892      	ldr	r2, [r2, #8]
 8007862:	3a01      	subs	r2, #1
 8007864:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	68d2      	ldr	r2, [r2, #12]
 800786c:	3a01      	subs	r2, #1
 800786e:	0252      	lsls	r2, r2, #9
 8007870:	b292      	uxth	r2, r2
 8007872:	4311      	orrs	r1, r2
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	6912      	ldr	r2, [r2, #16]
 8007878:	3a01      	subs	r2, #1
 800787a:	0412      	lsls	r2, r2, #16
 800787c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007880:	4311      	orrs	r1, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	6952      	ldr	r2, [r2, #20]
 8007886:	3a01      	subs	r2, #1
 8007888:	0612      	lsls	r2, r2, #24
 800788a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800788e:	430a      	orrs	r2, r1
 8007890:	4924      	ldr	r1, [pc, #144]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 8007892:	4313      	orrs	r3, r2
 8007894:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007896:	4b23      	ldr	r3, [pc, #140]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	f023 020c 	bic.w	r2, r3, #12
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	4920      	ldr	r1, [pc, #128]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80078a8:	4b1e      	ldr	r3, [pc, #120]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 80078aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	491c      	ldr	r1, [pc, #112]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80078b6:	4b1b      	ldr	r3, [pc, #108]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	4a1a      	ldr	r2, [pc, #104]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 80078bc:	f023 0310 	bic.w	r3, r3, #16
 80078c0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80078c2:	4b18      	ldr	r3, [pc, #96]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	69d2      	ldr	r2, [r2, #28]
 80078d2:	00d2      	lsls	r2, r2, #3
 80078d4:	4913      	ldr	r1, [pc, #76]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80078da:	4b12      	ldr	r3, [pc, #72]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 80078dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078de:	4a11      	ldr	r2, [pc, #68]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 80078e0:	f043 0310 	orr.w	r3, r3, #16
 80078e4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80078e6:	4b0f      	ldr	r3, [pc, #60]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a0e      	ldr	r2, [pc, #56]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 80078ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078f0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078f2:	f7fa f943 	bl	8001b7c <HAL_GetTick>
 80078f6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078f8:	e008      	b.n	800790c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078fa:	f7fa f93f 	bl	8001b7c <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	2b02      	cmp	r3, #2
 8007906:	d901      	bls.n	800790c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e006      	b.n	800791a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <RCCEx_PLL2_Config+0x128>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d0f0      	beq.n	80078fa <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007918:	2300      	movs	r3, #0

}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	46020c00 	.word	0x46020c00
 8007928:	80800000 	.word	0x80800000

0800792c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007934:	4b47      	ldr	r3, [pc, #284]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a46      	ldr	r2, [pc, #280]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 800793a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800793e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007940:	f7fa f91c 	bl	8001b7c <HAL_GetTick>
 8007944:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007946:	e008      	b.n	800795a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007948:	f7fa f918 	bl	8001b7c <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b02      	cmp	r3, #2
 8007954:	d901      	bls.n	800795a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e077      	b.n	8007a4a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800795a:	4b3e      	ldr	r3, [pc, #248]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1f0      	bne.n	8007948 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007966:	4b3b      	ldr	r3, [pc, #236]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800796e:	f023 0303 	bic.w	r3, r3, #3
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	6811      	ldr	r1, [r2, #0]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	6852      	ldr	r2, [r2, #4]
 800797a:	3a01      	subs	r2, #1
 800797c:	0212      	lsls	r2, r2, #8
 800797e:	430a      	orrs	r2, r1
 8007980:	4934      	ldr	r1, [pc, #208]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 8007982:	4313      	orrs	r3, r2
 8007984:	630b      	str	r3, [r1, #48]	; 0x30
 8007986:	4b33      	ldr	r3, [pc, #204]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 8007988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800798a:	4b33      	ldr	r3, [pc, #204]	; (8007a58 <RCCEx_PLL3_Config+0x12c>)
 800798c:	4013      	ands	r3, r2
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6892      	ldr	r2, [r2, #8]
 8007992:	3a01      	subs	r2, #1
 8007994:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	68d2      	ldr	r2, [r2, #12]
 800799c:	3a01      	subs	r2, #1
 800799e:	0252      	lsls	r2, r2, #9
 80079a0:	b292      	uxth	r2, r2
 80079a2:	4311      	orrs	r1, r2
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6912      	ldr	r2, [r2, #16]
 80079a8:	3a01      	subs	r2, #1
 80079aa:	0412      	lsls	r2, r2, #16
 80079ac:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80079b0:	4311      	orrs	r1, r2
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	6952      	ldr	r2, [r2, #20]
 80079b6:	3a01      	subs	r2, #1
 80079b8:	0612      	lsls	r2, r2, #24
 80079ba:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80079be:	430a      	orrs	r2, r1
 80079c0:	4924      	ldr	r1, [pc, #144]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80079c6:	4b23      	ldr	r3, [pc, #140]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	f023 020c 	bic.w	r2, r3, #12
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	4920      	ldr	r1, [pc, #128]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80079d8:	4b1e      	ldr	r3, [pc, #120]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 80079da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	491c      	ldr	r1, [pc, #112]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80079e6:	4b1b      	ldr	r3, [pc, #108]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 80079e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ea:	4a1a      	ldr	r2, [pc, #104]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 80079ec:	f023 0310 	bic.w	r3, r3, #16
 80079f0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079f2:	4b18      	ldr	r3, [pc, #96]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 80079f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	69d2      	ldr	r2, [r2, #28]
 8007a02:	00d2      	lsls	r2, r2, #3
 8007a04:	4913      	ldr	r1, [pc, #76]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007a0a:	4b12      	ldr	r3, [pc, #72]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0e:	4a11      	ldr	r2, [pc, #68]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 8007a10:	f043 0310 	orr.w	r3, r3, #16
 8007a14:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a0e      	ldr	r2, [pc, #56]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 8007a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a20:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a22:	f7fa f8ab 	bl	8001b7c <HAL_GetTick>
 8007a26:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a28:	e008      	b.n	8007a3c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a2a:	f7fa f8a7 	bl	8001b7c <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d901      	bls.n	8007a3c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e006      	b.n	8007a4a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a3c:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <RCCEx_PLL3_Config+0x128>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0f0      	beq.n	8007a2a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	46020c00 	.word	0x46020c00
 8007a58:	80800000 	.word	0x80800000

08007a5c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e03e      	b.n	8007af0 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d106      	bne.n	8007a8c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7f9 ff60 	bl	800194c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3308      	adds	r3, #8
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	f000 fcda 	bl	8008450 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6818      	ldr	r0, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	68b9      	ldr	r1, [r7, #8]
 8007aa8:	f000 fda2 	bl	80085f0 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6858      	ldr	r0, [r3, #4]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	689a      	ldr	r2, [r3, #8]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	6879      	ldr	r1, [r7, #4]
 8007aba:	f000 fdeb 	bl	8008694 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	6892      	ldr	r2, [r2, #8]
 8007ac6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	6892      	ldr	r2, [r2, #8]
 8007ad2:	f041 0101 	orr.w	r1, r1, #1
 8007ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007ada:	4b07      	ldr	r3, [pc, #28]	; (8007af8 <HAL_SRAM_Init+0x9c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a06      	ldr	r2, [pc, #24]	; (8007af8 <HAL_SRAM_Init+0x9c>)
 8007ae0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ae4:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	420d0400 	.word	0x420d0400

08007afc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e042      	b.n	8007b94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d106      	bne.n	8007b26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7f9 fdc9 	bl	80016b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2224      	movs	r2, #36	; 0x24
 8007b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 0201 	bic.w	r2, r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f82c 	bl	8007b9c <UART_SetConfig>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e022      	b.n	8007b94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f9c2 	bl	8007ee0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fa49 	bl	8008024 <UART_CheckIdleState>
 8007b92:	4603      	mov	r3, r0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ba0:	b094      	sub	sp, #80	; 0x50
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	4b7e      	ldr	r3, [pc, #504]	; (8007dac <UART_SetConfig+0x210>)
 8007bb2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4977      	ldr	r1, [pc, #476]	; (8007db0 <UART_SetConfig+0x214>)
 8007bd4:	4019      	ands	r1, r3
 8007bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bdc:	430b      	orrs	r3, r1
 8007bde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bec:	68d9      	ldr	r1, [r3, #12]
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	ea40 0301 	orr.w	r3, r0, r1
 8007bf6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	4b6a      	ldr	r3, [pc, #424]	; (8007dac <UART_SetConfig+0x210>)
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d009      	beq.n	8007c1c <UART_SetConfig+0x80>
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	4b69      	ldr	r3, [pc, #420]	; (8007db4 <UART_SetConfig+0x218>)
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d004      	beq.n	8007c1c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	6a1a      	ldr	r2, [r3, #32]
 8007c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007c26:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c30:	430b      	orrs	r3, r1
 8007c32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	f023 000f 	bic.w	r0, r3, #15
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	ea40 0301 	orr.w	r3, r0, r1
 8007c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	4b59      	ldr	r3, [pc, #356]	; (8007db8 <UART_SetConfig+0x21c>)
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d102      	bne.n	8007c5c <UART_SetConfig+0xc0>
 8007c56:	2301      	movs	r3, #1
 8007c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c5a:	e029      	b.n	8007cb0 <UART_SetConfig+0x114>
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	4b56      	ldr	r3, [pc, #344]	; (8007dbc <UART_SetConfig+0x220>)
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d102      	bne.n	8007c6c <UART_SetConfig+0xd0>
 8007c66:	2302      	movs	r3, #2
 8007c68:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c6a:	e021      	b.n	8007cb0 <UART_SetConfig+0x114>
 8007c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	4b53      	ldr	r3, [pc, #332]	; (8007dc0 <UART_SetConfig+0x224>)
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d102      	bne.n	8007c7c <UART_SetConfig+0xe0>
 8007c76:	2304      	movs	r3, #4
 8007c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c7a:	e019      	b.n	8007cb0 <UART_SetConfig+0x114>
 8007c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	4b50      	ldr	r3, [pc, #320]	; (8007dc4 <UART_SetConfig+0x228>)
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d102      	bne.n	8007c8c <UART_SetConfig+0xf0>
 8007c86:	2308      	movs	r3, #8
 8007c88:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c8a:	e011      	b.n	8007cb0 <UART_SetConfig+0x114>
 8007c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	4b4d      	ldr	r3, [pc, #308]	; (8007dc8 <UART_SetConfig+0x22c>)
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d102      	bne.n	8007c9c <UART_SetConfig+0x100>
 8007c96:	2310      	movs	r3, #16
 8007c98:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c9a:	e009      	b.n	8007cb0 <UART_SetConfig+0x114>
 8007c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	4b42      	ldr	r3, [pc, #264]	; (8007dac <UART_SetConfig+0x210>)
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d102      	bne.n	8007cac <UART_SetConfig+0x110>
 8007ca6:	2320      	movs	r3, #32
 8007ca8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007caa:	e001      	b.n	8007cb0 <UART_SetConfig+0x114>
 8007cac:	2300      	movs	r3, #0
 8007cae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	4b3d      	ldr	r3, [pc, #244]	; (8007dac <UART_SetConfig+0x210>)
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d005      	beq.n	8007cc6 <UART_SetConfig+0x12a>
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	4b3d      	ldr	r3, [pc, #244]	; (8007db4 <UART_SetConfig+0x218>)
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	f040 8085 	bne.w	8007dd0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cc8:	2200      	movs	r2, #0
 8007cca:	623b      	str	r3, [r7, #32]
 8007ccc:	627a      	str	r2, [r7, #36]	; 0x24
 8007cce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007cd2:	f7fe fc6b 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007cd6:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 80e8 	beq.w	8007eb0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	4a39      	ldr	r2, [pc, #228]	; (8007dcc <UART_SetConfig+0x230>)
 8007ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cea:	461a      	mov	r2, r3
 8007cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cf2:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	4413      	add	r3, r2
 8007cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d305      	bcc.n	8007d10 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d903      	bls.n	8007d18 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007d16:	e048      	b.n	8007daa <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	61bb      	str	r3, [r7, #24]
 8007d1e:	61fa      	str	r2, [r7, #28]
 8007d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	4a29      	ldr	r2, [pc, #164]	; (8007dcc <UART_SetConfig+0x230>)
 8007d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	617a      	str	r2, [r7, #20]
 8007d32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007d3a:	f7f8 fa9b 	bl	8000274 <__aeabi_uldivmod>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4610      	mov	r0, r2
 8007d44:	4619      	mov	r1, r3
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	f04f 0300 	mov.w	r3, #0
 8007d4e:	020b      	lsls	r3, r1, #8
 8007d50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d54:	0202      	lsls	r2, r0, #8
 8007d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d58:	6849      	ldr	r1, [r1, #4]
 8007d5a:	0849      	lsrs	r1, r1, #1
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	4605      	mov	r5, r0
 8007d62:	eb12 0804 	adds.w	r8, r2, r4
 8007d66:	eb43 0905 	adc.w	r9, r3, r5
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	60bb      	str	r3, [r7, #8]
 8007d72:	60fa      	str	r2, [r7, #12]
 8007d74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d78:	4640      	mov	r0, r8
 8007d7a:	4649      	mov	r1, r9
 8007d7c:	f7f8 fa7a 	bl	8000274 <__aeabi_uldivmod>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	4613      	mov	r3, r2
 8007d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d8e:	d308      	bcc.n	8007da2 <UART_SetConfig+0x206>
 8007d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d96:	d204      	bcs.n	8007da2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d9e:	60da      	str	r2, [r3, #12]
 8007da0:	e003      	b.n	8007daa <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007da8:	e082      	b.n	8007eb0 <UART_SetConfig+0x314>
 8007daa:	e081      	b.n	8007eb0 <UART_SetConfig+0x314>
 8007dac:	46002400 	.word	0x46002400
 8007db0:	cfff69f3 	.word	0xcfff69f3
 8007db4:	56002400 	.word	0x56002400
 8007db8:	40013800 	.word	0x40013800
 8007dbc:	40004400 	.word	0x40004400
 8007dc0:	40004800 	.word	0x40004800
 8007dc4:	40004c00 	.word	0x40004c00
 8007dc8:	40005000 	.word	0x40005000
 8007dcc:	0800979c 	.word	0x0800979c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	69db      	ldr	r3, [r3, #28]
 8007dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dd8:	d13c      	bne.n	8007e54 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ddc:	2200      	movs	r2, #0
 8007dde:	603b      	str	r3, [r7, #0]
 8007de0:	607a      	str	r2, [r7, #4]
 8007de2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007de6:	f7fe fbe1 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007dea:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d05e      	beq.n	8007eb0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	4a39      	ldr	r2, [pc, #228]	; (8007edc <UART_SetConfig+0x340>)
 8007df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e04:	005a      	lsls	r2, r3, #1
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	085b      	lsrs	r3, r3, #1
 8007e0c:	441a      	add	r2, r3
 8007e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e16:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1a:	2b0f      	cmp	r3, #15
 8007e1c:	d916      	bls.n	8007e4c <UART_SetConfig+0x2b0>
 8007e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e24:	d212      	bcs.n	8007e4c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	f023 030f 	bic.w	r3, r3, #15
 8007e2e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007e48:	60da      	str	r2, [r3, #12]
 8007e4a:	e031      	b.n	8007eb0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007e52:	e02d      	b.n	8007eb0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e56:	2200      	movs	r2, #0
 8007e58:	469a      	mov	sl, r3
 8007e5a:	4693      	mov	fp, r2
 8007e5c:	4650      	mov	r0, sl
 8007e5e:	4659      	mov	r1, fp
 8007e60:	f7fe fba4 	bl	80065ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007e64:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d021      	beq.n	8007eb0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	4a1a      	ldr	r2, [pc, #104]	; (8007edc <UART_SetConfig+0x340>)
 8007e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e76:	461a      	mov	r2, r3
 8007e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	085b      	lsrs	r3, r3, #1
 8007e84:	441a      	add	r2, r3
 8007e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e92:	2b0f      	cmp	r3, #15
 8007e94:	d909      	bls.n	8007eaa <UART_SetConfig+0x30e>
 8007e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e9c:	d205      	bcs.n	8007eaa <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	60da      	str	r2, [r3, #12]
 8007ea8:	e002      	b.n	8007eb0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	2200      	movs	r2, #0
 8007eca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007ecc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3750      	adds	r7, #80	; 0x50
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eda:	bf00      	nop
 8007edc:	0800979c 	.word	0x0800979c

08007ee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0e:	f003 0302 	and.w	r3, r3, #2
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f30:	f003 0304 	and.w	r3, r3, #4
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00a      	beq.n	8007f4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f52:	f003 0308 	and.w	r3, r3, #8
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f74:	f003 0310 	and.w	r3, r3, #16
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00a      	beq.n	8007f92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	f003 0320 	and.w	r3, r3, #32
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	430a      	orrs	r2, r1
 8007fb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d01a      	beq.n	8007ff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fde:	d10a      	bne.n	8007ff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00a      	beq.n	8008018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	430a      	orrs	r2, r1
 8008016:	605a      	str	r2, [r3, #4]
  }
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af02      	add	r7, sp, #8
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008034:	f7f9 fda2 	bl	8001b7c <HAL_GetTick>
 8008038:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0308 	and.w	r3, r3, #8
 8008044:	2b08      	cmp	r3, #8
 8008046:	d10e      	bne.n	8008066 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f82f 	bl	80080ba <UART_WaitOnFlagUntilTimeout>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e025      	b.n	80080b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	2b04      	cmp	r3, #4
 8008072:	d10e      	bne.n	8008092 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f819 	bl	80080ba <UART_WaitOnFlagUntilTimeout>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e00f      	b.n	80080b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2220      	movs	r2, #32
 8008096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2220      	movs	r2, #32
 800809e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b09c      	sub	sp, #112	; 0x70
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	603b      	str	r3, [r7, #0]
 80080c6:	4613      	mov	r3, r2
 80080c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ca:	e0a9      	b.n	8008220 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d2:	f000 80a5 	beq.w	8008220 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d6:	f7f9 fd51 	bl	8001b7c <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d302      	bcc.n	80080ec <UART_WaitOnFlagUntilTimeout+0x32>
 80080e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d140      	bne.n	800816e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80080fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008100:	667b      	str	r3, [r7, #100]	; 0x64
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800810a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800810c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008110:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1e6      	bne.n	80080ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3308      	adds	r3, #8
 8008124:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008128:	e853 3f00 	ldrex	r3, [r3]
 800812c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800812e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008130:	f023 0301 	bic.w	r3, r3, #1
 8008134:	663b      	str	r3, [r7, #96]	; 0x60
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3308      	adds	r3, #8
 800813c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800813e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008140:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008142:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008146:	e841 2300 	strex	r3, r2, [r1]
 800814a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800814c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1e5      	bne.n	800811e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2220      	movs	r2, #32
 8008156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2220      	movs	r2, #32
 800815e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e069      	b.n	8008242 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0304 	and.w	r3, r3, #4
 8008178:	2b00      	cmp	r3, #0
 800817a:	d051      	beq.n	8008220 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800818a:	d149      	bne.n	8008220 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008194:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819e:	e853 3f00 	ldrex	r3, [r3]
 80081a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b4:	637b      	str	r3, [r7, #52]	; 0x34
 80081b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081bc:	e841 2300 	strex	r3, r2, [r1]
 80081c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1e6      	bne.n	8008196 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3308      	adds	r3, #8
 80081ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	e853 3f00 	ldrex	r3, [r3]
 80081d6:	613b      	str	r3, [r7, #16]
   return(result);
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f023 0301 	bic.w	r3, r3, #1
 80081de:	66bb      	str	r3, [r7, #104]	; 0x68
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3308      	adds	r3, #8
 80081e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80081e8:	623a      	str	r2, [r7, #32]
 80081ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ec:	69f9      	ldr	r1, [r7, #28]
 80081ee:	6a3a      	ldr	r2, [r7, #32]
 80081f0:	e841 2300 	strex	r3, r2, [r1]
 80081f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e5      	bne.n	80081c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2220      	movs	r2, #32
 8008200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2220      	movs	r2, #32
 8008208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2220      	movs	r2, #32
 8008210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e010      	b.n	8008242 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	69da      	ldr	r2, [r3, #28]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	4013      	ands	r3, r2
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	429a      	cmp	r2, r3
 800822e:	bf0c      	ite	eq
 8008230:	2301      	moveq	r3, #1
 8008232:	2300      	movne	r3, #0
 8008234:	b2db      	uxtb	r3, r3
 8008236:	461a      	mov	r2, r3
 8008238:	79fb      	ldrb	r3, [r7, #7]
 800823a:	429a      	cmp	r2, r3
 800823c:	f43f af46 	beq.w	80080cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3770      	adds	r7, #112	; 0x70
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800824a:	b480      	push	{r7}
 800824c:	b085      	sub	sp, #20
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008258:	2b01      	cmp	r3, #1
 800825a:	d101      	bne.n	8008260 <HAL_UARTEx_DisableFifoMode+0x16>
 800825c:	2302      	movs	r3, #2
 800825e:	e027      	b.n	80082b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2224      	movs	r2, #36	; 0x24
 800826c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 0201 	bic.w	r2, r2, #1
 8008286:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800828e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2220      	movs	r2, #32
 80082a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d101      	bne.n	80082d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80082d0:	2302      	movs	r3, #2
 80082d2:	e02d      	b.n	8008330 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2224      	movs	r2, #36	; 0x24
 80082e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f022 0201 	bic.w	r2, r2, #1
 80082fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f84f 	bl	80083b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2220      	movs	r2, #32
 8008322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008348:	2b01      	cmp	r3, #1
 800834a:	d101      	bne.n	8008350 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800834c:	2302      	movs	r3, #2
 800834e:	e02d      	b.n	80083ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2224      	movs	r2, #36	; 0x24
 800835c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 0201 	bic.w	r2, r2, #1
 8008376:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	430a      	orrs	r2, r1
 800838a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f811 	bl	80083b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2220      	movs	r2, #32
 800839e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d108      	bne.n	80083d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083d4:	e031      	b.n	800843a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083d6:	2308      	movs	r3, #8
 80083d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083da:	2308      	movs	r3, #8
 80083dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	0e5b      	lsrs	r3, r3, #25
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	f003 0307 	and.w	r3, r3, #7
 80083ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	0f5b      	lsrs	r3, r3, #29
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	7b3a      	ldrb	r2, [r7, #12]
 8008402:	4911      	ldr	r1, [pc, #68]	; (8008448 <UARTEx_SetNbDataToProcess+0x94>)
 8008404:	5c8a      	ldrb	r2, [r1, r2]
 8008406:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800840a:	7b3a      	ldrb	r2, [r7, #12]
 800840c:	490f      	ldr	r1, [pc, #60]	; (800844c <UARTEx_SetNbDataToProcess+0x98>)
 800840e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008410:	fb93 f3f2 	sdiv	r3, r3, r2
 8008414:	b29a      	uxth	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	7b7a      	ldrb	r2, [r7, #13]
 8008420:	4909      	ldr	r1, [pc, #36]	; (8008448 <UARTEx_SetNbDataToProcess+0x94>)
 8008422:	5c8a      	ldrb	r2, [r1, r2]
 8008424:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008428:	7b7a      	ldrb	r2, [r7, #13]
 800842a:	4908      	ldr	r1, [pc, #32]	; (800844c <UARTEx_SetNbDataToProcess+0x98>)
 800842c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800842e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008432:	b29a      	uxth	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800843a:	bf00      	nop
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	080097b4 	.word	0x080097b4
 800844c:	080097bc 	.word	0x080097bc

08008450 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	6812      	ldr	r2, [r2, #0]
 8008468:	f023 0101 	bic.w	r1, r3, #1
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	2b08      	cmp	r3, #8
 8008478:	d102      	bne.n	8008480 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800847a:	2340      	movs	r3, #64	; 0x40
 800847c:	617b      	str	r3, [r7, #20]
 800847e:	e001      	b.n	8008484 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008480:	2300      	movs	r3, #0
 8008482:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008490:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008496:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800849c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80084a2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80084a8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80084ae:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80084b4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80084ba:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80084c0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80084c6:	4313      	orrs	r3, r2
 80084c8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	4313      	orrs	r3, r2
 80084dc:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80084f2:	4b3e      	ldr	r3, [pc, #248]	; (80085ec <FMC_NORSRAM_Init+0x19c>)
 80084f4:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084fc:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008504:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800850c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008514:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	43db      	mvns	r3, r3
 8008524:	ea02 0103 	and.w	r1, r2, r3
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	4319      	orrs	r1, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800853e:	d10c      	bne.n	800855a <FMC_NORSRAM_Init+0x10a>
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d008      	beq.n	800855a <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008554:	431a      	orrs	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d006      	beq.n	8008570 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856a:	431a      	orrs	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008576:	2b01      	cmp	r3, #1
 8008578:	d12f      	bne.n	80085da <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	0c1b      	lsrs	r3, r3, #16
 8008580:	041b      	lsls	r3, r3, #16
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008586:	431a      	orrs	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b04      	cmp	r3, #4
 8008592:	d014      	beq.n	80085be <FMC_NORSRAM_Init+0x16e>
 8008594:	2b04      	cmp	r3, #4
 8008596:	d819      	bhi.n	80085cc <FMC_NORSRAM_Init+0x17c>
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <FMC_NORSRAM_Init+0x152>
 800859c:	2b02      	cmp	r3, #2
 800859e:	d007      	beq.n	80085b0 <FMC_NORSRAM_Init+0x160>
 80085a0:	e014      	b.n	80085cc <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	621a      	str	r2, [r3, #32]
        break;
 80085ae:	e015      	b.n	80085dc <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	621a      	str	r2, [r3, #32]
        break;
 80085bc:	e00e      	b.n	80085dc <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	621a      	str	r2, [r3, #32]
        break;
 80085ca:	e007      	b.n	80085dc <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	621a      	str	r2, [r3, #32]
        break;
 80085d8:	e000      	b.n	80085dc <FMC_NORSRAM_Init+0x18c>
    }
  }
 80085da:	bf00      	nop

  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	0008fb7f 	.word	0x0008fb7f

080085f0 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	431a      	orrs	r2, r3
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	021b      	lsls	r3, r3, #8
 8008618:	431a      	orrs	r2, r3
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	079b      	lsls	r3, r3, #30
 8008620:	431a      	orrs	r2, r3
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	041b      	lsls	r3, r3, #16
 8008628:	431a      	orrs	r2, r3
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	3b01      	subs	r3, #1
 8008630:	051b      	lsls	r3, r3, #20
 8008632:	431a      	orrs	r2, r3
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	3b02      	subs	r3, #2
 800863a:	061b      	lsls	r3, r3, #24
 800863c:	ea42 0103 	orr.w	r1, r2, r3
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	69db      	ldr	r3, [r3, #28]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	3201      	adds	r2, #1
 8008648:	4319      	orrs	r1, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800865c:	d113      	bne.n	8008686 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008666:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	3b01      	subs	r3, #1
 800866e:	051b      	lsls	r3, r3, #20
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	4313      	orrs	r3, r2
 8008674:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	431a      	orrs	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	371c      	adds	r7, #28
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
 80086a0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086a8:	d121      	bne.n	80086ee <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b2:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	6819      	ldr	r1, [r3, #0]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	011b      	lsls	r3, r3, #4
 80086c0:	4319      	orrs	r1, r3
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	4319      	orrs	r1, r3
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	079b      	lsls	r3, r3, #30
 80086d0:	4319      	orrs	r1, r3
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	4319      	orrs	r1, r3
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	041b      	lsls	r3, r3, #16
 80086de:	430b      	orrs	r3, r1
 80086e0:	ea42 0103 	orr.w	r1, r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80086ec:	e005      	b.n	80086fa <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80086f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008708:	b480      	push	{r7}
 800870a:	b08b      	sub	sp, #44	; 0x2c
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	fa93 f3a3 	rbit	r3, r3
 8008722:	613b      	str	r3, [r7, #16]
  return result;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800872e:	2320      	movs	r3, #32
 8008730:	e003      	b.n	800873a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	fab3 f383 	clz	r3, r3
 8008738:	b2db      	uxtb	r3, r3
 800873a:	005b      	lsls	r3, r3, #1
 800873c:	2103      	movs	r1, #3
 800873e:	fa01 f303 	lsl.w	r3, r1, r3
 8008742:	43db      	mvns	r3, r3
 8008744:	401a      	ands	r2, r3
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	fa93 f3a3 	rbit	r3, r3
 8008750:	61fb      	str	r3, [r7, #28]
  return result;
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800875c:	2320      	movs	r3, #32
 800875e:	e003      	b.n	8008768 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	fab3 f383 	clz	r3, r3
 8008766:	b2db      	uxtb	r3, r3
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	fa01 f303 	lsl.w	r3, r1, r3
 8008770:	431a      	orrs	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	601a      	str	r2, [r3, #0]
}
 8008776:	bf00      	nop
 8008778:	372c      	adds	r7, #44	; 0x2c
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008782:	b480      	push	{r7}
 8008784:	b085      	sub	sp, #20
 8008786:	af00      	add	r7, sp, #0
 8008788:	60f8      	str	r0, [r7, #12]
 800878a:	60b9      	str	r1, [r7, #8]
 800878c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	43db      	mvns	r3, r3
 8008796:	401a      	ands	r2, r3
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	fb01 f303 	mul.w	r3, r1, r3
 80087a0:	431a      	orrs	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	605a      	str	r2, [r3, #4]
}
 80087a6:	bf00      	nop
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b08b      	sub	sp, #44	; 0x2c
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	689a      	ldr	r2, [r3, #8]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	fa93 f3a3 	rbit	r3, r3
 80087cc:	613b      	str	r3, [r7, #16]
  return result;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80087d8:	2320      	movs	r3, #32
 80087da:	e003      	b.n	80087e4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	fab3 f383 	clz	r3, r3
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	2103      	movs	r1, #3
 80087e8:	fa01 f303 	lsl.w	r3, r1, r3
 80087ec:	43db      	mvns	r3, r3
 80087ee:	401a      	ands	r2, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	fa93 f3a3 	rbit	r3, r3
 80087fa:	61fb      	str	r3, [r7, #28]
  return result;
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008806:	2320      	movs	r3, #32
 8008808:	e003      	b.n	8008812 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	fab3 f383 	clz	r3, r3
 8008810:	b2db      	uxtb	r3, r3
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	6879      	ldr	r1, [r7, #4]
 8008816:	fa01 f303 	lsl.w	r3, r1, r3
 800881a:	431a      	orrs	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008820:	bf00      	nop
 8008822:	372c      	adds	r7, #44	; 0x2c
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800882c:	b480      	push	{r7}
 800882e:	b08b      	sub	sp, #44	; 0x2c
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	68da      	ldr	r2, [r3, #12]
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	fa93 f3a3 	rbit	r3, r3
 8008846:	613b      	str	r3, [r7, #16]
  return result;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008852:	2320      	movs	r3, #32
 8008854:	e003      	b.n	800885e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	fab3 f383 	clz	r3, r3
 800885c:	b2db      	uxtb	r3, r3
 800885e:	005b      	lsls	r3, r3, #1
 8008860:	2103      	movs	r1, #3
 8008862:	fa01 f303 	lsl.w	r3, r1, r3
 8008866:	43db      	mvns	r3, r3
 8008868:	401a      	ands	r2, r3
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	fa93 f3a3 	rbit	r3, r3
 8008874:	61fb      	str	r3, [r7, #28]
  return result;
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008880:	2320      	movs	r3, #32
 8008882:	e003      	b.n	800888c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	fab3 f383 	clz	r3, r3
 800888a:	b2db      	uxtb	r3, r3
 800888c:	005b      	lsls	r3, r3, #1
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	fa01 f303 	lsl.w	r3, r1, r3
 8008894:	431a      	orrs	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	60da      	str	r2, [r3, #12]
}
 800889a:	bf00      	nop
 800889c:	372c      	adds	r7, #44	; 0x2c
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b08b      	sub	sp, #44	; 0x2c
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6a1a      	ldr	r2, [r3, #32]
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	fa93 f3a3 	rbit	r3, r3
 80088c0:	613b      	str	r3, [r7, #16]
  return result;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80088cc:	2320      	movs	r3, #32
 80088ce:	e003      	b.n	80088d8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	fab3 f383 	clz	r3, r3
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	210f      	movs	r1, #15
 80088dc:	fa01 f303 	lsl.w	r3, r1, r3
 80088e0:	43db      	mvns	r3, r3
 80088e2:	401a      	ands	r2, r3
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	fa93 f3a3 	rbit	r3, r3
 80088ee:	61fb      	str	r3, [r7, #28]
  return result;
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80088fa:	2320      	movs	r3, #32
 80088fc:	e003      	b.n	8008906 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	fab3 f383 	clz	r3, r3
 8008904:	b2db      	uxtb	r3, r3
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	fa01 f303 	lsl.w	r3, r1, r3
 800890e:	431a      	orrs	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008914:	bf00      	nop
 8008916:	372c      	adds	r7, #44	; 0x2c
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008920:	b480      	push	{r7}
 8008922:	b08b      	sub	sp, #44	; 0x2c
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	0a1b      	lsrs	r3, r3, #8
 8008934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	fa93 f3a3 	rbit	r3, r3
 800893c:	613b      	str	r3, [r7, #16]
  return result;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008948:	2320      	movs	r3, #32
 800894a:	e003      	b.n	8008954 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	fab3 f383 	clz	r3, r3
 8008952:	b2db      	uxtb	r3, r3
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	210f      	movs	r1, #15
 8008958:	fa01 f303 	lsl.w	r3, r1, r3
 800895c:	43db      	mvns	r3, r3
 800895e:	401a      	ands	r2, r3
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	0a1b      	lsrs	r3, r3, #8
 8008964:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	fa93 f3a3 	rbit	r3, r3
 800896c:	61fb      	str	r3, [r7, #28]
  return result;
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008978:	2320      	movs	r3, #32
 800897a:	e003      	b.n	8008984 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897e:	fab3 f383 	clz	r3, r3
 8008982:	b2db      	uxtb	r3, r3
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	fa01 f303 	lsl.w	r3, r1, r3
 800898c:	431a      	orrs	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008992:	bf00      	nop
 8008994:	372c      	adds	r7, #44	; 0x2c
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b08a      	sub	sp, #40	; 0x28
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	fa93 f3a3 	rbit	r3, r3
 80089b4:	617b      	str	r3, [r7, #20]
  return result;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <LL_GPIO_Init+0x26>
    return 32U;
 80089c0:	2320      	movs	r3, #32
 80089c2:	e003      	b.n	80089cc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	fab3 f383 	clz	r3, r3
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80089ce:	e050      	b.n	8008a72 <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	2101      	movs	r1, #1
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	fa01 f303 	lsl.w	r3, r1, r3
 80089dc:	4013      	ands	r3, r2
 80089de:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d042      	beq.n	8008a6c <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	461a      	mov	r2, r3
 80089ec:	6a39      	ldr	r1, [r7, #32]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7ff fe8a 	bl	8008708 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d003      	beq.n	8008a04 <LL_GPIO_Init+0x66>
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d106      	bne.n	8008a12 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	6a39      	ldr	r1, [r7, #32]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7ff fed0 	bl	80087b2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	461a      	mov	r2, r3
 8008a18:	6a39      	ldr	r1, [r7, #32]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7ff ff06 	bl	800882c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d121      	bne.n	8008a6c <LL_GPIO_Init+0xce>
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	fa93 f3a3 	rbit	r3, r3
 8008a32:	60bb      	str	r3, [r7, #8]
  return result;
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <LL_GPIO_Init+0xa4>
    return 32U;
 8008a3e:	2320      	movs	r3, #32
 8008a40:	e003      	b.n	8008a4a <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	fab3 f383 	clz	r3, r3
 8008a48:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8008a4a:	2b07      	cmp	r3, #7
 8008a4c:	d807      	bhi.n	8008a5e <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	461a      	mov	r2, r3
 8008a54:	6a39      	ldr	r1, [r7, #32]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7ff ff25 	bl	80088a6 <LL_GPIO_SetAFPin_0_7>
 8008a5c:	e006      	b.n	8008a6c <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	461a      	mov	r2, r3
 8008a64:	6a39      	ldr	r1, [r7, #32]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7ff ff5a 	bl	8008920 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	3301      	adds	r3, #1
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	fa22 f303 	lsr.w	r3, r2, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1a7      	bne.n	80089d0 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d003      	beq.n	8008a90 <LL_GPIO_Init+0xf2>
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d107      	bne.n	8008aa0 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	6819      	ldr	r1, [r3, #0]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7ff fe71 	bl	8008782 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3728      	adds	r7, #40	; 0x28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008aaa:	b084      	sub	sp, #16
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	f107 001c 	add.w	r0, r7, #28
 8008ab8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fd8f 	bl	80095ec <USB_CoreReset>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d106      	bne.n	8008ae6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008adc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	639a      	str	r2, [r3, #56]	; 0x38
 8008ae4:	e005      	b.n	8008af2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008afe:	b004      	add	sp, #16
 8008b00:	4770      	bx	lr
	...

08008b04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008b12:	79fb      	ldrb	r3, [r7, #7]
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d165      	bne.n	8008be4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	4a41      	ldr	r2, [pc, #260]	; (8008c20 <USB_SetTurnaroundTime+0x11c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d906      	bls.n	8008b2e <USB_SetTurnaroundTime+0x2a>
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	4a40      	ldr	r2, [pc, #256]	; (8008c24 <USB_SetTurnaroundTime+0x120>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d202      	bcs.n	8008b2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b28:	230f      	movs	r3, #15
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	e062      	b.n	8008bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	4a3c      	ldr	r2, [pc, #240]	; (8008c24 <USB_SetTurnaroundTime+0x120>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d306      	bcc.n	8008b44 <USB_SetTurnaroundTime+0x40>
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	4a3b      	ldr	r2, [pc, #236]	; (8008c28 <USB_SetTurnaroundTime+0x124>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d202      	bcs.n	8008b44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b3e:	230e      	movs	r3, #14
 8008b40:	617b      	str	r3, [r7, #20]
 8008b42:	e057      	b.n	8008bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	4a38      	ldr	r2, [pc, #224]	; (8008c28 <USB_SetTurnaroundTime+0x124>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d306      	bcc.n	8008b5a <USB_SetTurnaroundTime+0x56>
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4a37      	ldr	r2, [pc, #220]	; (8008c2c <USB_SetTurnaroundTime+0x128>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d202      	bcs.n	8008b5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b54:	230d      	movs	r3, #13
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	e04c      	b.n	8008bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	4a33      	ldr	r2, [pc, #204]	; (8008c2c <USB_SetTurnaroundTime+0x128>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d306      	bcc.n	8008b70 <USB_SetTurnaroundTime+0x6c>
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	4a32      	ldr	r2, [pc, #200]	; (8008c30 <USB_SetTurnaroundTime+0x12c>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d802      	bhi.n	8008b70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b6a:	230c      	movs	r3, #12
 8008b6c:	617b      	str	r3, [r7, #20]
 8008b6e:	e041      	b.n	8008bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	4a2f      	ldr	r2, [pc, #188]	; (8008c30 <USB_SetTurnaroundTime+0x12c>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d906      	bls.n	8008b86 <USB_SetTurnaroundTime+0x82>
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4a2e      	ldr	r2, [pc, #184]	; (8008c34 <USB_SetTurnaroundTime+0x130>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d802      	bhi.n	8008b86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b80:	230b      	movs	r3, #11
 8008b82:	617b      	str	r3, [r7, #20]
 8008b84:	e036      	b.n	8008bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	4a2a      	ldr	r2, [pc, #168]	; (8008c34 <USB_SetTurnaroundTime+0x130>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d906      	bls.n	8008b9c <USB_SetTurnaroundTime+0x98>
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	4a29      	ldr	r2, [pc, #164]	; (8008c38 <USB_SetTurnaroundTime+0x134>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d802      	bhi.n	8008b9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b96:	230a      	movs	r3, #10
 8008b98:	617b      	str	r3, [r7, #20]
 8008b9a:	e02b      	b.n	8008bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4a26      	ldr	r2, [pc, #152]	; (8008c38 <USB_SetTurnaroundTime+0x134>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d906      	bls.n	8008bb2 <USB_SetTurnaroundTime+0xae>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4a25      	ldr	r2, [pc, #148]	; (8008c3c <USB_SetTurnaroundTime+0x138>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d202      	bcs.n	8008bb2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008bac:	2309      	movs	r3, #9
 8008bae:	617b      	str	r3, [r7, #20]
 8008bb0:	e020      	b.n	8008bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	4a21      	ldr	r2, [pc, #132]	; (8008c3c <USB_SetTurnaroundTime+0x138>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d306      	bcc.n	8008bc8 <USB_SetTurnaroundTime+0xc4>
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	4a20      	ldr	r2, [pc, #128]	; (8008c40 <USB_SetTurnaroundTime+0x13c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d802      	bhi.n	8008bc8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008bc2:	2308      	movs	r3, #8
 8008bc4:	617b      	str	r3, [r7, #20]
 8008bc6:	e015      	b.n	8008bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	4a1d      	ldr	r2, [pc, #116]	; (8008c40 <USB_SetTurnaroundTime+0x13c>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d906      	bls.n	8008bde <USB_SetTurnaroundTime+0xda>
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4a1c      	ldr	r2, [pc, #112]	; (8008c44 <USB_SetTurnaroundTime+0x140>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d202      	bcs.n	8008bde <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008bd8:	2307      	movs	r3, #7
 8008bda:	617b      	str	r3, [r7, #20]
 8008bdc:	e00a      	b.n	8008bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008bde:	2306      	movs	r3, #6
 8008be0:	617b      	str	r3, [r7, #20]
 8008be2:	e007      	b.n	8008bf4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d102      	bne.n	8008bf0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008bea:	2309      	movs	r3, #9
 8008bec:	617b      	str	r3, [r7, #20]
 8008bee:	e001      	b.n	8008bf4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bf0:	2309      	movs	r3, #9
 8008bf2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	68da      	ldr	r2, [r3, #12]
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	029b      	lsls	r3, r3, #10
 8008c08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	371c      	adds	r7, #28
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	00d8acbf 	.word	0x00d8acbf
 8008c24:	00e4e1c0 	.word	0x00e4e1c0
 8008c28:	00f42400 	.word	0x00f42400
 8008c2c:	01067380 	.word	0x01067380
 8008c30:	011a499f 	.word	0x011a499f
 8008c34:	01312cff 	.word	0x01312cff
 8008c38:	014ca43f 	.word	0x014ca43f
 8008c3c:	016e3600 	.word	0x016e3600
 8008c40:	01a6ab1f 	.word	0x01a6ab1f
 8008c44:	01e84800 	.word	0x01e84800

08008c48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f023 0201 	bic.w	r2, r3, #1
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c86:	78fb      	ldrb	r3, [r7, #3]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d115      	bne.n	8008cb8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c98:	2001      	movs	r0, #1
 8008c9a:	f7f8 ff7b 	bl	8001b94 <HAL_Delay>
      ms++;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fc11 	bl	80094cc <USB_GetMode>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d01e      	beq.n	8008cee <USB_SetCurrentMode+0x84>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2b31      	cmp	r3, #49	; 0x31
 8008cb4:	d9f0      	bls.n	8008c98 <USB_SetCurrentMode+0x2e>
 8008cb6:	e01a      	b.n	8008cee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d115      	bne.n	8008cea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cca:	2001      	movs	r0, #1
 8008ccc:	f7f8 ff62 	bl	8001b94 <HAL_Delay>
      ms++;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fbf8 	bl	80094cc <USB_GetMode>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d005      	beq.n	8008cee <USB_SetCurrentMode+0x84>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b31      	cmp	r3, #49	; 0x31
 8008ce6:	d9f0      	bls.n	8008cca <USB_SetCurrentMode+0x60>
 8008ce8:	e001      	b.n	8008cee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e005      	b.n	8008cfa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b32      	cmp	r3, #50	; 0x32
 8008cf2:	d101      	bne.n	8008cf8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e000      	b.n	8008cfa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d04:	b084      	sub	sp, #16
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b086      	sub	sp, #24
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d1e:	2300      	movs	r3, #0
 8008d20:	613b      	str	r3, [r7, #16]
 8008d22:	e009      	b.n	8008d38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	3340      	adds	r3, #64	; 0x40
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	2200      	movs	r2, #0
 8008d30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	3301      	adds	r3, #1
 8008d36:	613b      	str	r3, [r7, #16]
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	2b0e      	cmp	r3, #14
 8008d3c:	d9f2      	bls.n	8008d24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d11c      	bne.n	8008d7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d52:	f043 0302 	orr.w	r3, r3, #2
 8008d56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	e005      	b.n	8008d8a <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d90:	461a      	mov	r2, r3
 8008d92:	2300      	movs	r3, #0
 8008d94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da4:	461a      	mov	r2, r3
 8008da6:	680b      	ldr	r3, [r1, #0]
 8008da8:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008daa:	2103      	movs	r1, #3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f95b 	bl	8009068 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008db2:	2110      	movs	r1, #16
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f8f3 	bl	8008fa0 <USB_FlushTxFifo>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f91f 	bl	8009008 <USB_FlushRxFifo>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dda:	461a      	mov	r2, r3
 8008ddc:	2300      	movs	r3, #0
 8008dde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de6:	461a      	mov	r2, r3
 8008de8:	2300      	movs	r3, #0
 8008dea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df2:	461a      	mov	r2, r3
 8008df4:	2300      	movs	r3, #0
 8008df6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008df8:	2300      	movs	r3, #0
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	e043      	b.n	8008e86 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	015a      	lsls	r2, r3, #5
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4413      	add	r3, r2
 8008e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e14:	d118      	bne.n	8008e48 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10a      	bne.n	8008e32 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e28:	461a      	mov	r2, r3
 8008e2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	e013      	b.n	8008e5a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3e:	461a      	mov	r2, r3
 8008e40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	e008      	b.n	8008e5a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e54:	461a      	mov	r2, r3
 8008e56:	2300      	movs	r3, #0
 8008e58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e66:	461a      	mov	r2, r3
 8008e68:	2300      	movs	r3, #0
 8008e6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e78:	461a      	mov	r2, r3
 8008e7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	3301      	adds	r3, #1
 8008e84:	613b      	str	r3, [r7, #16]
 8008e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d3b7      	bcc.n	8008dfe <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e8e:	2300      	movs	r3, #0
 8008e90:	613b      	str	r3, [r7, #16]
 8008e92:	e043      	b.n	8008f1c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eaa:	d118      	bne.n	8008ede <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	e013      	b.n	8008ef0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	e008      	b.n	8008ef0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	015a      	lsls	r2, r3, #5
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eea:	461a      	mov	r2, r3
 8008eec:	2300      	movs	r3, #0
 8008eee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efc:	461a      	mov	r2, r3
 8008efe:	2300      	movs	r3, #0
 8008f00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	613b      	str	r3, [r7, #16]
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d3b7      	bcc.n	8008e94 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d105      	bne.n	8008f58 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	f043 0210 	orr.w	r2, r3, #16
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	699a      	ldr	r2, [r3, #24]
 8008f5c:	4b0f      	ldr	r3, [pc, #60]	; (8008f9c <USB_DevInit+0x298>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d005      	beq.n	8008f76 <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	f043 0208 	orr.w	r2, r3, #8
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d107      	bne.n	8008f8c <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f84:	f043 0304 	orr.w	r3, r3, #4
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f98:	b004      	add	sp, #16
 8008f9a:	4770      	bx	lr
 8008f9c:	803c3800 	.word	0x803c3800

08008fa0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4a13      	ldr	r2, [pc, #76]	; (8009004 <USB_FlushTxFifo+0x64>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d901      	bls.n	8008fc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e01b      	b.n	8008ff8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	daf2      	bge.n	8008fae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	019b      	lsls	r3, r3, #6
 8008fd0:	f043 0220 	orr.w	r2, r3, #32
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	4a08      	ldr	r2, [pc, #32]	; (8009004 <USB_FlushTxFifo+0x64>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d901      	bls.n	8008fea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e006      	b.n	8008ff8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b20      	cmp	r3, #32
 8008ff4:	d0f0      	beq.n	8008fd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	00030d40 	.word	0x00030d40

08009008 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3301      	adds	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4a11      	ldr	r2, [pc, #68]	; (8009064 <USB_FlushRxFifo+0x5c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d901      	bls.n	8009026 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e018      	b.n	8009058 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	2b00      	cmp	r3, #0
 800902c:	daf2      	bge.n	8009014 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800902e:	2300      	movs	r3, #0
 8009030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2210      	movs	r2, #16
 8009036:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	3301      	adds	r3, #1
 800903c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	4a08      	ldr	r2, [pc, #32]	; (8009064 <USB_FlushRxFifo+0x5c>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d901      	bls.n	800904a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e006      	b.n	8009058 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	f003 0310 	and.w	r3, r3, #16
 8009052:	2b10      	cmp	r3, #16
 8009054:	d0f0      	beq.n	8009038 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	00030d40 	.word	0x00030d40

08009068 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	68f9      	ldr	r1, [r7, #12]
 8009084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009088:	4313      	orrs	r3, r2
 800908a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800909a:	b480      	push	{r7}
 800909c:	b087      	sub	sp, #28
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f003 0306 	and.w	r3, r3, #6
 80090b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d102      	bne.n	80090c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80090ba:	2300      	movs	r3, #0
 80090bc:	75fb      	strb	r3, [r7, #23]
 80090be:	e00a      	b.n	80090d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d002      	beq.n	80090cc <USB_GetDevSpeed+0x32>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2b06      	cmp	r3, #6
 80090ca:	d102      	bne.n	80090d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80090cc:	2302      	movs	r3, #2
 80090ce:	75fb      	strb	r3, [r7, #23]
 80090d0:	e001      	b.n	80090d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80090d2:	230f      	movs	r3, #15
 80090d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090ee:	2300      	movs	r3, #0
 80090f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	785b      	ldrb	r3, [r3, #1]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d14a      	bne.n	8009198 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800911a:	f040 8086 	bne.w	800922a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	015a      	lsls	r2, r3, #5
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	4413      	add	r3, r2
 8009128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	7812      	ldrb	r2, [r2, #0]
 8009132:	0151      	lsls	r1, r2, #5
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	440a      	add	r2, r1
 8009138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800913c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009140:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	7812      	ldrb	r2, [r2, #0]
 8009156:	0151      	lsls	r1, r2, #5
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	440a      	add	r2, r1
 800915c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009164:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3301      	adds	r3, #1
 800916a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009172:	4293      	cmp	r3, r2
 8009174:	d902      	bls.n	800917c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	75fb      	strb	r3, [r7, #23]
          break;
 800917a:	e056      	b.n	800922a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	4413      	add	r3, r2
 8009186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009194:	d0e7      	beq.n	8009166 <USB_EPStopXfer+0x82>
 8009196:	e048      	b.n	800922a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091b0:	d13b      	bne.n	800922a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	7812      	ldrb	r2, [r2, #0]
 80091c6:	0151      	lsls	r1, r2, #5
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	440a      	add	r2, r1
 80091cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	7812      	ldrb	r2, [r2, #0]
 80091ea:	0151      	lsls	r1, r2, #5
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	440a      	add	r2, r1
 80091f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3301      	adds	r3, #1
 80091fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f242 7210 	movw	r2, #10000	; 0x2710
 8009206:	4293      	cmp	r3, r2
 8009208:	d902      	bls.n	8009210 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	75fb      	strb	r3, [r7, #23]
          break;
 800920e:	e00c      	b.n	800922a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009228:	d0e7      	beq.n	80091fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800922a:	7dfb      	ldrb	r3, [r7, #23]
}
 800922c:	4618      	mov	r0, r3
 800922e:	371c      	adds	r7, #28
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009238:	b480      	push	{r7}
 800923a:	b089      	sub	sp, #36	; 0x24
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	4611      	mov	r1, r2
 8009244:	461a      	mov	r2, r3
 8009246:	460b      	mov	r3, r1
 8009248:	71fb      	strb	r3, [r7, #7]
 800924a:	4613      	mov	r3, r2
 800924c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009256:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800925a:	2b00      	cmp	r3, #0
 800925c:	d123      	bne.n	80092a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800925e:	88bb      	ldrh	r3, [r7, #4]
 8009260:	3303      	adds	r3, #3
 8009262:	089b      	lsrs	r3, r3, #2
 8009264:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009266:	2300      	movs	r3, #0
 8009268:	61bb      	str	r3, [r7, #24]
 800926a:	e018      	b.n	800929e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800926c:	79fb      	ldrb	r3, [r7, #7]
 800926e:	031a      	lsls	r2, r3, #12
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	4413      	add	r3, r2
 8009274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009278:	461a      	mov	r2, r3
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	3301      	adds	r3, #1
 8009284:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	3301      	adds	r3, #1
 800928a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	3301      	adds	r3, #1
 8009290:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	3301      	adds	r3, #1
 8009296:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	3301      	adds	r3, #1
 800929c:	61bb      	str	r3, [r7, #24]
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d3e2      	bcc.n	800926c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3724      	adds	r7, #36	; 0x24
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b08b      	sub	sp, #44	; 0x2c
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	4613      	mov	r3, r2
 80092c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80092ca:	88fb      	ldrh	r3, [r7, #6]
 80092cc:	089b      	lsrs	r3, r3, #2
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80092d2:	88fb      	ldrh	r3, [r7, #6]
 80092d4:	f003 0303 	and.w	r3, r3, #3
 80092d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80092da:	2300      	movs	r3, #0
 80092dc:	623b      	str	r3, [r7, #32]
 80092de:	e014      	b.n	800930a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ee:	3301      	adds	r3, #1
 80092f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	3301      	adds	r3, #1
 80092f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	3301      	adds	r3, #1
 80092fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	3301      	adds	r3, #1
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	3301      	adds	r3, #1
 8009308:	623b      	str	r3, [r7, #32]
 800930a:	6a3a      	ldr	r2, [r7, #32]
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	429a      	cmp	r2, r3
 8009310:	d3e6      	bcc.n	80092e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009312:	8bfb      	ldrh	r3, [r7, #30]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d01e      	beq.n	8009356 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009318:	2300      	movs	r3, #0
 800931a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009322:	461a      	mov	r2, r3
 8009324:	f107 0310 	add.w	r3, r7, #16
 8009328:	6812      	ldr	r2, [r2, #0]
 800932a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	00db      	lsls	r3, r3, #3
 8009334:	fa22 f303 	lsr.w	r3, r2, r3
 8009338:	b2da      	uxtb	r2, r3
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	701a      	strb	r2, [r3, #0]
      i++;
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	3301      	adds	r3, #1
 8009342:	623b      	str	r3, [r7, #32]
      pDest++;
 8009344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009346:	3301      	adds	r3, #1
 8009348:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800934a:	8bfb      	ldrh	r3, [r7, #30]
 800934c:	3b01      	subs	r3, #1
 800934e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009350:	8bfb      	ldrh	r3, [r7, #30]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1ea      	bne.n	800932c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009358:	4618      	mov	r0, r3
 800935a:	372c      	adds	r7, #44	; 0x2c
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800937e:	f023 0303 	bic.w	r3, r3, #3
 8009382:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009392:	f043 0302 	orr.w	r3, r3, #2
 8009396:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b085      	sub	sp, #20
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	4013      	ands	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80093be:	68fb      	ldr	r3, [r7, #12]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	4013      	ands	r3, r2
 80093ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	0c1b      	lsrs	r3, r3, #16
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	4013      	ands	r3, r2
 8009422:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	b29b      	uxth	r3, r3
}
 8009428:	4618      	mov	r0, r3
 800942a:	3714      	adds	r7, #20
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	4013      	ands	r3, r2
 8009460:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009462:	68bb      	ldr	r3, [r7, #8]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009470:	b480      	push	{r7}
 8009472:	b087      	sub	sp, #28
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	460b      	mov	r3, r1
 800947a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009492:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	f003 030f 	and.w	r3, r3, #15
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	fa22 f303 	lsr.w	r3, r2, r3
 80094a0:	01db      	lsls	r3, r3, #7
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80094aa:	78fb      	ldrb	r3, [r7, #3]
 80094ac:	015a      	lsls	r2, r3, #5
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	4413      	add	r3, r2
 80094b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	4013      	ands	r3, r2
 80094bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094be:	68bb      	ldr	r3, [r7, #8]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	371c      	adds	r7, #28
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	f003 0301 	and.w	r3, r3, #1
}
 80094dc:	4618      	mov	r0, r3
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009502:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009506:	f023 0307 	bic.w	r3, r3, #7
 800950a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800951a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800951e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3714      	adds	r7, #20
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
	...

08009530 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009530:	b480      	push	{r7}
 8009532:	b087      	sub	sp, #28
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	460b      	mov	r3, r1
 800953a:	607a      	str	r2, [r7, #4]
 800953c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	333c      	adds	r3, #60	; 0x3c
 8009546:	3304      	adds	r3, #4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	4a26      	ldr	r2, [pc, #152]	; (80095e8 <USB_EP0_OutStart+0xb8>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d90a      	bls.n	800956a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009564:	d101      	bne.n	800956a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	e037      	b.n	80095da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009570:	461a      	mov	r2, r3
 8009572:	2300      	movs	r3, #0
 8009574:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009588:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009598:	f043 0318 	orr.w	r3, r3, #24
 800959c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80095b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80095b2:	7afb      	ldrb	r3, [r7, #11]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d10f      	bne.n	80095d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095be:	461a      	mov	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80095d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	4f54300a 	.word	0x4f54300a

080095ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095f4:	2300      	movs	r3, #0
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	3301      	adds	r3, #1
 80095fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	4a13      	ldr	r2, [pc, #76]	; (8009650 <USB_CoreReset+0x64>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d901      	bls.n	800960a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e01b      	b.n	8009642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	2b00      	cmp	r3, #0
 8009610:	daf2      	bge.n	80095f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009612:	2300      	movs	r3, #0
 8009614:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	f043 0201 	orr.w	r2, r3, #1
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3301      	adds	r3, #1
 8009626:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	4a09      	ldr	r2, [pc, #36]	; (8009650 <USB_CoreReset+0x64>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d901      	bls.n	8009634 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e006      	b.n	8009642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	f003 0301 	and.w	r3, r3, #1
 800963c:	2b01      	cmp	r3, #1
 800963e:	d0f0      	beq.n	8009622 <USB_CoreReset+0x36>

  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	00030d40 	.word	0x00030d40

08009654 <__libc_init_array>:
 8009654:	b570      	push	{r4, r5, r6, lr}
 8009656:	4d0d      	ldr	r5, [pc, #52]	; (800968c <__libc_init_array+0x38>)
 8009658:	2600      	movs	r6, #0
 800965a:	4c0d      	ldr	r4, [pc, #52]	; (8009690 <__libc_init_array+0x3c>)
 800965c:	1b64      	subs	r4, r4, r5
 800965e:	10a4      	asrs	r4, r4, #2
 8009660:	42a6      	cmp	r6, r4
 8009662:	d109      	bne.n	8009678 <__libc_init_array+0x24>
 8009664:	4d0b      	ldr	r5, [pc, #44]	; (8009694 <__libc_init_array+0x40>)
 8009666:	2600      	movs	r6, #0
 8009668:	4c0b      	ldr	r4, [pc, #44]	; (8009698 <__libc_init_array+0x44>)
 800966a:	f000 f81f 	bl	80096ac <_init>
 800966e:	1b64      	subs	r4, r4, r5
 8009670:	10a4      	asrs	r4, r4, #2
 8009672:	42a6      	cmp	r6, r4
 8009674:	d105      	bne.n	8009682 <__libc_init_array+0x2e>
 8009676:	bd70      	pop	{r4, r5, r6, pc}
 8009678:	f855 3b04 	ldr.w	r3, [r5], #4
 800967c:	3601      	adds	r6, #1
 800967e:	4798      	blx	r3
 8009680:	e7ee      	b.n	8009660 <__libc_init_array+0xc>
 8009682:	f855 3b04 	ldr.w	r3, [r5], #4
 8009686:	3601      	adds	r6, #1
 8009688:	4798      	blx	r3
 800968a:	e7f2      	b.n	8009672 <__libc_init_array+0x1e>
 800968c:	080097cc 	.word	0x080097cc
 8009690:	080097cc 	.word	0x080097cc
 8009694:	080097cc 	.word	0x080097cc
 8009698:	080097d0 	.word	0x080097d0

0800969c <memset>:
 800969c:	4402      	add	r2, r0
 800969e:	4603      	mov	r3, r0
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d100      	bne.n	80096a6 <memset+0xa>
 80096a4:	4770      	bx	lr
 80096a6:	f803 1b01 	strb.w	r1, [r3], #1
 80096aa:	e7f9      	b.n	80096a0 <memset+0x4>

080096ac <_init>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	bf00      	nop
 80096b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b2:	bc08      	pop	{r3}
 80096b4:	469e      	mov	lr, r3
 80096b6:	4770      	bx	lr

080096b8 <_fini>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	bf00      	nop
 80096bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096be:	bc08      	pop	{r3}
 80096c0:	469e      	mov	lr, r3
 80096c2:	4770      	bx	lr
