
Nucleo_U575_TFT16bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009500  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08009734  08009734  00019734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009834  08009834  00019834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800983c  0800983c  0001983c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009840  08009840  00019840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000d  20000000  08009844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006a4  20000010  08009851  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200006b4  08009851  000206b4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0002000d  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d0ce  00000000  00000000  00020043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000034fc  00000000  00000000  0003d111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001378  00000000  00000000  00040610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001250  00000000  00000000  00041988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003af5f  00000000  00000000  00042bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019626  00000000  00000000  0007db37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00164240  00000000  00000000  0009715d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fb39d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000052f0  00000000  00000000  001fb3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000010 	.word	0x20000010
 8000250:	00000000 	.word	0x00000000
 8000254:	0800971c 	.word	0x0800971c

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000014 	.word	0x20000014
 8000270:	0800971c 	.word	0x0800971c

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <FMCSRAMInit>:

	// set to the maximum of the two
	timing->AddressSetupTime = (addset1 > addset2) ? addset1 : addset2;
}

void FMCSRAMInit(ExternalSRAMSpecStruct * sramSpec, uint8_t bank) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b0a0      	sub	sp, #128	; 0x80
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
	/* FMC configuration */
	SRAM_HandleTypeDef sram;
	FMC_NORSRAM_TimingTypeDef timing = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2220      	movs	r2, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f009 f8af 	bl	800970c <memset>

	sram.Instance = FMC_NORSRAM_DEVICE;
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <FMCSRAMInit+0xc4>)
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
	sram.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80005b2:	4b2a      	ldr	r3, [pc, #168]	; (800065c <FMCSRAMInit+0xc8>)
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (bank==1) {
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d102      	bne.n	80005c2 <FMCSRAMInit+0x2e>
		sram.Init.NSBank = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
 80005c0:	e005      	b.n	80005ce <FMCSRAMInit+0x3a>
	} else {
		sram.Init.NSBank = 1 << (bank-1);
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	2201      	movs	r2, #1
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if (sramSpec -> dataSize == 8) {
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b08      	cmp	r3, #8
 80005d4:	d102      	bne.n	80005dc <FMCSRAMInit+0x48>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80005d6:	2300      	movs	r3, #0
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005da:	e008      	b.n	80005ee <FMCSRAMInit+0x5a>
	} else if (sramSpec -> dataSize == 16) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b10      	cmp	r3, #16
 80005e2:	d102      	bne.n	80005ea <FMCSRAMInit+0x56>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005e4:	2310      	movs	r3, #16
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005e8:	e001      	b.n	80005ee <FMCSRAMInit+0x5a>
	} else {
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 80005ea:	2320      	movs	r3, #32
 80005ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	sram.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	637b      	str	r3, [r7, #52]	; 0x34
	sram.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80005f2:	2300      	movs	r3, #0
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
	sram.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	643b      	str	r3, [r7, #64]	; 0x40
	sram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
	sram.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80005fe:	2300      	movs	r3, #0
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
	sram.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
	sram.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	653b      	str	r3, [r7, #80]	; 0x50
	sram.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	657b      	str	r3, [r7, #84]	; 0x54
	sram.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	65bb      	str	r3, [r7, #88]	; 0x58
	sram.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	65fb      	str	r3, [r7, #92]	; 0x5c
	sram.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000618:	2300      	movs	r3, #0
 800061a:	663b      	str	r3, [r7, #96]	; 0x60
	sram.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 800061c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000620:	667b      	str	r3, [r7, #100]	; 0x64
	sram.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000622:	2300      	movs	r3, #0
 8000624:	66bb      	str	r3, [r7, #104]	; 0x68

	/* Timing */
	timing.BusTurnAroundDuration = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
	timing.AccessMode = FMC_ACCESS_MODE_A;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	; 0x24

	timing.AddressSetupTime = 6; //MAX_ADDSET_TIME;
 800062e:	2306      	movs	r3, #6
 8000630:	60bb      	str	r3, [r7, #8]
	timing.DataSetupTime = 6;//MAX_DATAST_TIME;
 8000632:	2306      	movs	r3, #6
 8000634:	613b      	str	r3, [r7, #16]

	//FMCComputeAddsetDatast(sramSpec, &timing);

	if (HAL_SRAM_Init(&sram, &timing, NULL) != HAL_OK)
 8000636:	f107 0108 	add.w	r1, r7, #8
 800063a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800063e:	2200      	movs	r2, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f007 fa43 	bl	8007acc <HAL_SRAM_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <FMCSRAMInit+0xbc>
	{
		FMC_Error_Handler( );
 800064c:	f000 f808 	bl	8000660 <FMC_Error_Handler>
	}

#if MEM_SWAPPING
	HAL_EnableFMCMemorySwapping();
#endif
}
 8000650:	bf00      	nop
 8000652:	3780      	adds	r7, #128	; 0x80
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	420d0400 	.word	0x420d0400
 800065c:	420d0504 	.word	0x420d0504

08000660 <FMC_Error_Handler>:

void FMC_Error_Handler() {
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
	...

08000670 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800067a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800067e:	4909      	ldr	r1, [pc, #36]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4313      	orrs	r3, r2
 8000684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800068a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4013      	ands	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000694:	68fb      	ldr	r3, [r7, #12]
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	46020c00 	.word	0x46020c00

080006a8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80006b6:	4909      	ldr	r1, [pc, #36]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4013      	ands	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006cc:	68fb      	ldr	r3, [r7, #12]
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	46020c00 	.word	0x46020c00

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f001 fa09 	bl	8001afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f9b3 	bl	8000a54 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80006ee:	f000 fa15 	bl	8000b1c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f000 fb7d 	bl	8000df0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006f6:	f000 fa1f 	bl	8000b38 <MX_ADC1_Init>
  MX_UCPD1_Init();
 80006fa:	f000 fa61 	bl	8000bc0 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 80006fe:	f000 fa95 	bl	8000c2c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000702:	f000 fadf 	bl	8000cc4 <MX_USB_OTG_FS_PCD_Init>
  MX_FMC_Init();
 8000706:	f000 fb09 	bl	8000d1c <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800070a:	2201      	movs	r2, #1
 800070c:	2104      	movs	r1, #4
 800070e:	48b8      	ldr	r0, [pc, #736]	; (80009f0 <main+0x310>)
 8000710:	f002 f95a 	bl	80029c8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000714:	20c8      	movs	r0, #200	; 0xc8
 8000716:	f001 fa75 	bl	8001c04 <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2104      	movs	r1, #4
 800071e:	48b4      	ldr	r0, [pc, #720]	; (80009f0 <main+0x310>)
 8000720:	f002 f952 	bl	80029c8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000724:	20c8      	movs	r0, #200	; 0xc8
 8000726:	f001 fa6d 	bl	8001c04 <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800072a:	2201      	movs	r2, #1
 800072c:	2104      	movs	r1, #4
 800072e:	48b0      	ldr	r0, [pc, #704]	; (80009f0 <main+0x310>)
 8000730:	f002 f94a 	bl	80029c8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000734:	20c8      	movs	r0, #200	; 0xc8
 8000736:	f001 fa65 	bl	8001c04 <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2104      	movs	r1, #4
 800073e:	48ac      	ldr	r0, [pc, #688]	; (80009f0 <main+0x310>)
 8000740:	f002 f942 	bl	80029c8 <HAL_GPIO_WritePin>

/////////////////////////////////////////////////////////////////////////////////////////
   ExternalSRAMSpecStruct ST7789VSpec = {
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	f8c3 2003 	str.w	r2, [r3, #3]
 800074e:	2310      	movs	r3, #16
 8000750:	703b      	strb	r3, [r7, #0]
 8000752:	2332      	movs	r3, #50	; 0x32
 8000754:	713b      	strb	r3, [r7, #4]
 8000756:	2301      	movs	r3, #1
 8000758:	71bb      	strb	r3, [r7, #6]
		   //.tCycWrite = 66,
		   .writeOnly = 1

   };

   FMCSRAMInit(&ST7789VSpec, ST7789V_SRAM_BANK);
 800075a:	463b      	mov	r3, r7
 800075c:	2101      	movs	r1, #1
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff18 	bl	8000594 <FMCSRAMInit>

   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2104      	movs	r1, #4
 8000768:	48a2      	ldr	r0, [pc, #648]	; (80009f4 <main+0x314>)
 800076a:	f002 f92d 	bl	80029c8 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 800076e:	2001      	movs	r0, #1
 8000770:	f001 fa48 	bl	8001c04 <HAL_Delay>
   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2104      	movs	r1, #4
 8000778:	489e      	ldr	r0, [pc, #632]	; (80009f4 <main+0x314>)
 800077a:	f002 f925 	bl	80029c8 <HAL_GPIO_WritePin>
   HAL_Delay(10);
 800077e:	200a      	movs	r0, #10
 8000780:	f001 fa40 	bl	8001c04 <HAL_Delay>
   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2104      	movs	r1, #4
 8000788:	489a      	ldr	r0, [pc, #616]	; (80009f4 <main+0x314>)
 800078a:	f002 f91d 	bl	80029c8 <HAL_GPIO_WritePin>
   HAL_Delay(120);
 800078e:	2078      	movs	r0, #120	; 0x78
 8000790:	f001 fa38 	bl	8001c04 <HAL_Delay>

   ST7789V_SEND_COMMAND(ST7789V_SLPOUT);
 8000794:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000798:	2211      	movs	r2, #17
 800079a:	801a      	strh	r2, [r3, #0]
   HAL_Delay(120);
 800079c:	2078      	movs	r0, #120	; 0x78
 800079e:	f001 fa31 	bl	8001c04 <HAL_Delay>

   ST7789V_SEND_COMMAND(ST7789V_MADCTL); //Memory data acccess control
 80007a2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80007a6:	2236      	movs	r2, #54	; 0x36
 80007a8:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 80007aa:	4b93      	ldr	r3, [pc, #588]	; (80009f8 <main+0x318>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_PORCTRL); //Porch Setting
 80007b0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80007b4:	22b2      	movs	r2, #178	; 0xb2
 80007b6:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0C);
 80007b8:	4b8f      	ldr	r3, [pc, #572]	; (80009f8 <main+0x318>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0C);
 80007be:	4b8e      	ldr	r3, [pc, #568]	; (80009f8 <main+0x318>)
 80007c0:	220c      	movs	r2, #12
 80007c2:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 80007c4:	4b8c      	ldr	r3, [pc, #560]	; (80009f8 <main+0x318>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x33);
 80007ca:	4b8b      	ldr	r3, [pc, #556]	; (80009f8 <main+0x318>)
 80007cc:	2233      	movs	r2, #51	; 0x33
 80007ce:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x33);
 80007d0:	4b89      	ldr	r3, [pc, #548]	; (80009f8 <main+0x318>)
 80007d2:	2233      	movs	r2, #51	; 0x33
 80007d4:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_GCTRL); //Gate Control
 80007d6:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80007da:	22b7      	movs	r2, #183	; 0xb7
 80007dc:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x70); //VGH, VGL
 80007de:	4b86      	ldr	r3, [pc, #536]	; (80009f8 <main+0x318>)
 80007e0:	2270      	movs	r2, #112	; 0x70
 80007e2:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_VCOMS);
 80007e4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80007e8:	22bb      	movs	r2, #187	; 0xbb
 80007ea:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x3A);
 80007ec:	4b82      	ldr	r3, [pc, #520]	; (80009f8 <main+0x318>)
 80007ee:	223a      	movs	r2, #58	; 0x3a
 80007f0:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_LCMCTRL);
 80007f2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80007f6:	22c0      	movs	r2, #192	; 0xc0
 80007f8:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x2C);
 80007fa:	4b7f      	ldr	r3, [pc, #508]	; (80009f8 <main+0x318>)
 80007fc:	222c      	movs	r2, #44	; 0x2c
 80007fe:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_VDVVRHEN);
 8000800:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000804:	22c2      	movs	r2, #194	; 0xc2
 8000806:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x01);
 8000808:	4b7b      	ldr	r3, [pc, #492]	; (80009f8 <main+0x318>)
 800080a:	2201      	movs	r2, #1
 800080c:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_VRHS);
 800080e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000812:	22c3      	movs	r2, #195	; 0xc3
 8000814:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x14);
 8000816:	4b78      	ldr	r3, [pc, #480]	; (80009f8 <main+0x318>)
 8000818:	2214      	movs	r2, #20
 800081a:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_VDVS);
 800081c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000820:	22c4      	movs	r2, #196	; 0xc4
 8000822:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x20);
 8000824:	4b74      	ldr	r3, [pc, #464]	; (80009f8 <main+0x318>)
 8000826:	2220      	movs	r2, #32
 8000828:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_FRCTRL2);
 800082a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800082e:	22c6      	movs	r2, #198	; 0xc6
 8000830:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0F); //60Hz 0A
 8000832:	4b71      	ldr	r3, [pc, #452]	; (80009f8 <main+0x318>)
 8000834:	220f      	movs	r2, #15
 8000836:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_PWCTRL1);
 8000838:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800083c:	22d0      	movs	r2, #208	; 0xd0
 800083e:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0xA4);
 8000840:	4b6d      	ldr	r3, [pc, #436]	; (80009f8 <main+0x318>)
 8000842:	22a4      	movs	r2, #164	; 0xa4
 8000844:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0xA1); //AVDD VCL
 8000846:	4b6c      	ldr	r3, [pc, #432]	; (80009f8 <main+0x318>)
 8000848:	22a1      	movs	r2, #161	; 0xa1
 800084a:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_PVGAMCTRL);
 800084c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000850:	22e0      	movs	r2, #224	; 0xe0
 8000852:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0xD0);
 8000854:	4b68      	ldr	r3, [pc, #416]	; (80009f8 <main+0x318>)
 8000856:	22d0      	movs	r2, #208	; 0xd0
 8000858:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x07);
 800085a:	4b67      	ldr	r3, [pc, #412]	; (80009f8 <main+0x318>)
 800085c:	2207      	movs	r2, #7
 800085e:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0D);
 8000860:	4b65      	ldr	r3, [pc, #404]	; (80009f8 <main+0x318>)
 8000862:	220d      	movs	r2, #13
 8000864:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x09);
 8000866:	4b64      	ldr	r3, [pc, #400]	; (80009f8 <main+0x318>)
 8000868:	2209      	movs	r2, #9
 800086a:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x08);
 800086c:	4b62      	ldr	r3, [pc, #392]	; (80009f8 <main+0x318>)
 800086e:	2208      	movs	r2, #8
 8000870:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x25);
 8000872:	4b61      	ldr	r3, [pc, #388]	; (80009f8 <main+0x318>)
 8000874:	2225      	movs	r2, #37	; 0x25
 8000876:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x28);
 8000878:	4b5f      	ldr	r3, [pc, #380]	; (80009f8 <main+0x318>)
 800087a:	2228      	movs	r2, #40	; 0x28
 800087c:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x53);
 800087e:	4b5e      	ldr	r3, [pc, #376]	; (80009f8 <main+0x318>)
 8000880:	2253      	movs	r2, #83	; 0x53
 8000882:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x39);
 8000884:	4b5c      	ldr	r3, [pc, #368]	; (80009f8 <main+0x318>)
 8000886:	2239      	movs	r2, #57	; 0x39
 8000888:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x12);
 800088a:	4b5b      	ldr	r3, [pc, #364]	; (80009f8 <main+0x318>)
 800088c:	2212      	movs	r2, #18
 800088e:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0B);
 8000890:	4b59      	ldr	r3, [pc, #356]	; (80009f8 <main+0x318>)
 8000892:	220b      	movs	r2, #11
 8000894:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0A);
 8000896:	4b58      	ldr	r3, [pc, #352]	; (80009f8 <main+0x318>)
 8000898:	220a      	movs	r2, #10
 800089a:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x17);
 800089c:	4b56      	ldr	r3, [pc, #344]	; (80009f8 <main+0x318>)
 800089e:	2217      	movs	r2, #23
 80008a0:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x34);
 80008a2:	4b55      	ldr	r3, [pc, #340]	; (80009f8 <main+0x318>)
 80008a4:	2234      	movs	r2, #52	; 0x34
 80008a6:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_NVGAMCTRL);
 80008a8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80008ac:	22e1      	movs	r2, #225	; 0xe1
 80008ae:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0xD0);
 80008b0:	4b51      	ldr	r3, [pc, #324]	; (80009f8 <main+0x318>)
 80008b2:	22d0      	movs	r2, #208	; 0xd0
 80008b4:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x07);
 80008b6:	4b50      	ldr	r3, [pc, #320]	; (80009f8 <main+0x318>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0D);
 80008bc:	4b4e      	ldr	r3, [pc, #312]	; (80009f8 <main+0x318>)
 80008be:	220d      	movs	r2, #13
 80008c0:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x09);
 80008c2:	4b4d      	ldr	r3, [pc, #308]	; (80009f8 <main+0x318>)
 80008c4:	2209      	movs	r2, #9
 80008c6:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x09);
 80008c8:	4b4b      	ldr	r3, [pc, #300]	; (80009f8 <main+0x318>)
 80008ca:	2209      	movs	r2, #9
 80008cc:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x25);
 80008ce:	4b4a      	ldr	r3, [pc, #296]	; (80009f8 <main+0x318>)
 80008d0:	2225      	movs	r2, #37	; 0x25
 80008d2:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x29);
 80008d4:	4b48      	ldr	r3, [pc, #288]	; (80009f8 <main+0x318>)
 80008d6:	2229      	movs	r2, #41	; 0x29
 80008d8:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x35);
 80008da:	4b47      	ldr	r3, [pc, #284]	; (80009f8 <main+0x318>)
 80008dc:	2235      	movs	r2, #53	; 0x35
 80008de:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x39);
 80008e0:	4b45      	ldr	r3, [pc, #276]	; (80009f8 <main+0x318>)
 80008e2:	2239      	movs	r2, #57	; 0x39
 80008e4:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x13);
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <main+0x318>)
 80008e8:	2213      	movs	r2, #19
 80008ea:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0A);
 80008ec:	4b42      	ldr	r3, [pc, #264]	; (80009f8 <main+0x318>)
 80008ee:	220a      	movs	r2, #10
 80008f0:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0A);
 80008f2:	4b41      	ldr	r3, [pc, #260]	; (80009f8 <main+0x318>)
 80008f4:	220a      	movs	r2, #10
 80008f6:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x16);
 80008f8:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <main+0x318>)
 80008fa:	2216      	movs	r2, #22
 80008fc:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x34);
 80008fe:	4b3e      	ldr	r3, [pc, #248]	; (80009f8 <main+0x318>)
 8000900:	2234      	movs	r2, #52	; 0x34
 8000902:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_INVON);
 8000904:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000908:	2221      	movs	r2, #33	; 0x21
 800090a:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_COLMOD);
 800090c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000910:	223a      	movs	r2, #58	; 0x3a
 8000912:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x55); //65K colors, 16 bit/px
 8000914:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <main+0x318>)
 8000916:	2255      	movs	r2, #85	; 0x55
 8000918:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_CASET);
 800091a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800091e:	222a      	movs	r2, #42	; 0x2a
 8000920:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000922:	4b35      	ldr	r3, [pc, #212]	; (80009f8 <main+0x318>)
 8000924:	2200      	movs	r2, #0
 8000926:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000928:	4b33      	ldr	r3, [pc, #204]	; (80009f8 <main+0x318>)
 800092a:	2200      	movs	r2, #0
 800092c:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 800092e:	4b32      	ldr	r3, [pc, #200]	; (80009f8 <main+0x318>)
 8000930:	2200      	movs	r2, #0
 8000932:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0xEF);
 8000934:	4b30      	ldr	r3, [pc, #192]	; (80009f8 <main+0x318>)
 8000936:	22ef      	movs	r2, #239	; 0xef
 8000938:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_RASET);
 800093a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800093e:	222b      	movs	r2, #43	; 0x2b
 8000940:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000942:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <main+0x318>)
 8000944:	2200      	movs	r2, #0
 8000946:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000948:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <main+0x318>)
 800094a:	2200      	movs	r2, #0
 800094c:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x01);
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <main+0x318>)
 8000950:	2201      	movs	r2, #1
 8000952:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x3F);
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <main+0x318>)
 8000956:	223f      	movs	r2, #63	; 0x3f
 8000958:	801a      	strh	r2, [r3, #0]

   ST7789V_SEND_COMMAND(ST7789V_DISPON);
 800095a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800095e:	2229      	movs	r2, #41	; 0x29
 8000960:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8000962:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000966:	222c      	movs	r2, #44	; 0x2c
 8000968:	801a      	strh	r2, [r3, #0]

  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800096a:	2201      	movs	r2, #1
 800096c:	2104      	movs	r1, #4
 800096e:	4820      	ldr	r0, [pc, #128]	; (80009f0 <main+0x310>)
 8000970:	f002 f82a 	bl	80029c8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000974:	20c8      	movs	r0, #200	; 0xc8
 8000976:	f001 f945 	bl	8001c04 <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2104      	movs	r1, #4
 800097e:	481c      	ldr	r0, [pc, #112]	; (80009f0 <main+0x310>)
 8000980:	f002 f822 	bl	80029c8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000984:	20c8      	movs	r0, #200	; 0xc8
 8000986:	f001 f93d 	bl	8001c04 <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800098a:	2201      	movs	r2, #1
 800098c:	2104      	movs	r1, #4
 800098e:	4818      	ldr	r0, [pc, #96]	; (80009f0 <main+0x310>)
 8000990:	f002 f81a 	bl	80029c8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000994:	20c8      	movs	r0, #200	; 0xc8
 8000996:	f001 f935 	bl	8001c04 <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2104      	movs	r1, #4
 800099e:	4814      	ldr	r0, [pc, #80]	; (80009f0 <main+0x310>)
 80009a0:	f002 f812 	bl	80029c8 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	4814      	ldr	r0, [pc, #80]	; (80009fc <main+0x31c>)
 80009aa:	f002 f80d 	bl	80029c8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80009ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b2:	f001 f927 	bl	8001c04 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	4810      	ldr	r0, [pc, #64]	; (80009fc <main+0x31c>)
 80009bc:	f002 f804 	bl	80029c8 <HAL_GPIO_WritePin>

	  ST7789V_fill(COLOR_BLUE);
 80009c0:	201f      	movs	r0, #31
 80009c2:	f000 fb75 	bl	80010b0 <ST7789V_fill>
	  //HAL_Delay(2000);
	  ST7789V_fill(COLOR_GREEN);
 80009c6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80009ca:	f000 fb71 	bl	80010b0 <ST7789V_fill>
	  //HAL_Delay(2000);;
	  ST7789V_fill(COLOR_RED);
 80009ce:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80009d2:	f000 fb6d 	bl	80010b0 <ST7789V_fill>
	  //HAL_Delay(5000);

	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 80009d6:	2201      	movs	r2, #1
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	4809      	ldr	r0, [pc, #36]	; (8000a00 <main+0x320>)
 80009dc:	f001 fff4 	bl	80029c8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80009e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e4:	f001 f90e 	bl	8001c04 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	e00a      	b.n	8000a04 <main+0x324>
 80009ee:	bf00      	nop
 80009f0:	42021800 	.word	0x42021800
 80009f4:	42021000 	.word	0x42021000
 80009f8:	60080000 	.word	0x60080000
 80009fc:	42020400 	.word	0x42020400
 8000a00:	42020800 	.word	0x42020800
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <main+0x36c>)
 8000a06:	f001 ffdf 	bl	80029c8 <HAL_GPIO_WritePin>


	  ST7789V_drawCircle(80, 100, 20, COLOR_WHITE);
 8000a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a0e:	2214      	movs	r2, #20
 8000a10:	2164      	movs	r1, #100	; 0x64
 8000a12:	2050      	movs	r0, #80	; 0x50
 8000a14:	f000 fb8c 	bl	8001130 <ST7789V_drawCircle>
	  //HAL_Delay(1000);
	  ST7789V_fillCircle(80, 100, 15, COLOR_BLACK);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	220f      	movs	r2, #15
 8000a1c:	2164      	movs	r1, #100	; 0x64
 8000a1e:	2050      	movs	r0, #80	; 0x50
 8000a20:	f000 fcfd 	bl	800141e <ST7789V_fillCircle>
	  //HAL_Delay(3000);
	  ST7789V_fill(COLOR_WHITE);
 8000a24:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a28:	f000 fb42 	bl	80010b0 <ST7789V_fill>
	  //HAL_Delay(10000);

	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2104      	movs	r1, #4
 8000a30:	4807      	ldr	r0, [pc, #28]	; (8000a50 <main+0x370>)
 8000a32:	f001 ffc9 	bl	80029c8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000a36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a3a:	f001 f8e3 	bl	8001c04 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2104      	movs	r1, #4
 8000a42:	4803      	ldr	r0, [pc, #12]	; (8000a50 <main+0x370>)
 8000a44:	f001 ffc0 	bl	80029c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 8000a48:	e7ac      	b.n	80009a4 <main+0x2c4>
 8000a4a:	bf00      	nop
 8000a4c:	42020800 	.word	0x42020800
 8000a50:	42021800 	.word	0x42021800

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09e      	sub	sp, #120	; 0x78
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0318 	add.w	r3, r7, #24
 8000a5e:	2260      	movs	r2, #96	; 0x60
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f008 fe52 	bl	800970c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
 8000a76:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a78:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000a7c:	f003 f83e 	bl	8003afc <HAL_PWREx_ControlVoltageScaling>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000a86:	f000 fa9d 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000a8a:	2332      	movs	r3, #50	; 0x32
 8000a8c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000aa2:	2310      	movs	r3, #16
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000aa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aac:	2302      	movs	r3, #2
 8000aae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000abc:	2350      	movs	r3, #80	; 0x50
 8000abe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 f901 	bl	8003ce0 <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae4:	f000 fa6e 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	231f      	movs	r3, #31
 8000aea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2303      	movs	r3, #3
 8000aee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	2104      	movs	r1, #4
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 ffc1 	bl	8004a8c <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b10:	f000 fa58 	bl	8000fc4 <Error_Handler>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3778      	adds	r7, #120	; 0x78
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000b20:	f003 f8ce 	bl	8003cc0 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000b24:	2002      	movs	r0, #2
 8000b26:	f003 f86b 	bl	8003c00 <HAL_PWREx_ConfigSupply>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000b30:	f000 fa48 	bl	8000fc4 <Error_Handler>
  }
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b3e:	4a1f      	ldr	r2, [pc, #124]	; (8000bbc <MX_ADC1_Init+0x84>)
 8000b40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_ADC1_Init+0x80>)
 8000ba6:	f001 f92d 	bl	8001e04 <HAL_ADC_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000bb0:	f000 fa08 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000002c 	.word	0x2000002c
 8000bbc:	42028000 	.word	0x42028000

08000bc0 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000bd6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000bda:	f7ff fd65 	bl	80006a8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff fd46 	bl	8000670 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f7ff fd43 	bl	8000670 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <MX_UCPD1_Init+0x64>)
 8000bfe:	f007 ff06 	bl	8008a0e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c06:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <MX_UCPD1_Init+0x68>)
 8000c16:	f007 fefa 	bl	8008a0e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	42020400 	.word	0x42020400
 8000c28:	42020000 	.word	0x42020000

08000c2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c32:	4a23      	ldr	r2, [pc, #140]	; (8000cc0 <MX_USART1_UART_Init+0x94>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c74:	4811      	ldr	r0, [pc, #68]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c76:	f006 ff79 	bl	8007b6c <HAL_UART_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c80:	f000 f9a0 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c84:	2100      	movs	r1, #0
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c88:	f007 fb50 	bl	800832c <HAL_UARTEx_SetTxFifoThreshold>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c92:	f000 f997 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c96:	2100      	movs	r1, #0
 8000c98:	4808      	ldr	r0, [pc, #32]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c9a:	f007 fb85 	bl	80083a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ca4:	f000 f98e 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000caa:	f007 fb06 	bl	80082ba <HAL_UARTEx_DisableFifoMode>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cb4:	f000 f986 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200000b8 	.word	0x200000b8
 8000cc0:	40013800 	.word	0x40013800

08000cc4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000cca:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x54>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000cd0:	2206      	movs	r2, #6
 8000cd2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000d00:	f001 fe7a 	bl	80029f8 <HAL_PCD_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8000d0a:	f000 f95b 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000148 	.word	0x20000148
 8000d18:	42040000 	.word	0x42040000

08000d1c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d22:	463b      	mov	r3, r7
 8000d24:	2220      	movs	r2, #32
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f008 fcef 	bl	800970c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d30:	4a2d      	ldr	r2, [pc, #180]	; (8000de8 <MX_FMC_Init+0xcc>)
 8000d32:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000d34:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d36:	4a2d      	ldr	r2, [pc, #180]	; (8000dec <MX_FMC_Init+0xd0>)
 8000d38:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000d40:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d4c:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d4e:	2210      	movs	r2, #16
 8000d50:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000d52:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d6a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d90:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000da6:	230f      	movs	r3, #15
 8000da8:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000daa:	230f      	movs	r3, #15
 8000dac:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000dae:	23ff      	movs	r3, #255	; 0xff
 8000db0:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000db6:	230f      	movs	r3, #15
 8000db8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000dba:	2310      	movs	r3, #16
 8000dbc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000dbe:	2311      	movs	r3, #17
 8000dc0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_FMC_Init+0xc8>)
 8000dce:	f006 fe7d 	bl	8007acc <HAL_SRAM_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_FMC_Init+0xc0>
  {
    Error_Handler( );
 8000dd8:	f000 f8f4 	bl	8000fc4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000654 	.word	0x20000654
 8000de8:	420d0400 	.word	0x420d0400
 8000dec:	420d0504 	.word	0x420d0504

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e06:	4b69      	ldr	r3, [pc, #420]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e0c:	4a67      	ldr	r2, [pc, #412]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e16:	4b65      	ldr	r3, [pc, #404]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e24:	4b61      	ldr	r3, [pc, #388]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e2a:	4a60      	ldr	r2, [pc, #384]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e34:	4b5d      	ldr	r3, [pc, #372]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	4b5a      	ldr	r3, [pc, #360]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e48:	4a58      	ldr	r2, [pc, #352]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e52:	4b56      	ldr	r3, [pc, #344]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e60:	4b52      	ldr	r3, [pc, #328]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e66:	4a51      	ldr	r2, [pc, #324]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e70:	4b4e      	ldr	r3, [pc, #312]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e7e:	4b4b      	ldr	r3, [pc, #300]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e84:	4a49      	ldr	r2, [pc, #292]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e8e:	4b47      	ldr	r3, [pc, #284]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b43      	ldr	r3, [pc, #268]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ea2:	4a42      	ldr	r2, [pc, #264]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000eac:	4b3f      	ldr	r3, [pc, #252]	; (8000fac <MX_GPIO_Init+0x1bc>)
 8000eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	483c      	ldr	r0, [pc, #240]	; (8000fb0 <MX_GPIO_Init+0x1c0>)
 8000ec0:	f001 fd82 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	483a      	ldr	r0, [pc, #232]	; (8000fb4 <MX_GPIO_Init+0x1c4>)
 8000eca:	f001 fd7d 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2180      	movs	r1, #128	; 0x80
 8000ed2:	4839      	ldr	r0, [pc, #228]	; (8000fb8 <MX_GPIO_Init+0x1c8>)
 8000ed4:	f001 fd78 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	21a0      	movs	r1, #160	; 0xa0
 8000edc:	4837      	ldr	r0, [pc, #220]	; (8000fbc <MX_GPIO_Init+0x1cc>)
 8000ede:	f001 fd73 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FMC_RESET_Pin */
  GPIO_InitStruct.Pin = FMC_RESET_Pin;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FMC_RESET_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	482d      	ldr	r0, [pc, #180]	; (8000fb0 <MX_GPIO_Init+0x1c0>)
 8000efa:	f001 fb8d 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f04:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <MX_GPIO_Init+0x1d0>)
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	4829      	ldr	r0, [pc, #164]	; (8000fb8 <MX_GPIO_Init+0x1c8>)
 8000f14:	f001 fb80 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000f18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4823      	ldr	r0, [pc, #140]	; (8000fbc <MX_GPIO_Init+0x1cc>)
 8000f2e:	f001 fb73 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000f32:	2304      	movs	r3, #4
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	481a      	ldr	r0, [pc, #104]	; (8000fb4 <MX_GPIO_Init+0x1c4>)
 8000f4a:	f001 fb65 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <MX_GPIO_Init+0x1c8>)
 8000f66:	f001 fb57 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000f6a:	2320      	movs	r3, #32
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480e      	ldr	r0, [pc, #56]	; (8000fbc <MX_GPIO_Init+0x1cc>)
 8000f82:	f001 fb49 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f92:	2302      	movs	r3, #2
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <MX_GPIO_Init+0x1cc>)
 8000f9e:	f001 fb3b 	bl	8002618 <HAL_GPIO_Init>

}
 8000fa2:	bf00      	nop
 8000fa4:	3730      	adds	r7, #48	; 0x30
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	46020c00 	.word	0x46020c00
 8000fb0:	42021000 	.word	0x42021000
 8000fb4:	42021800 	.word	0x42021800
 8000fb8:	42020800 	.word	0x42020800
 8000fbc:	42020400 	.word	0x42020400
 8000fc0:	10210000 	.word	0x10210000

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <ST7789V_writeRegister32>:
	ST7789V_SEND_COMMAND(r);
	ST7789V_SEND_DATA(d >> 8);
	ST7789V_SEND_DATA(d);
}

static void ST7789V_writeRegister32(uint8_t r, uint32_t d) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
	ST7789V_SEND_COMMAND(r);
 8000fdc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000fe0:	79fa      	ldrb	r2, [r7, #7]
 8000fe2:	b292      	uxth	r2, r2
 8000fe4:	801a      	strh	r2, [r3, #0]
	ST7789V_SEND_DATA(d >> 24);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	0e1a      	lsrs	r2, r3, #24
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <ST7789V_writeRegister32+0x48>)
 8000fec:	b292      	uxth	r2, r2
 8000fee:	801a      	strh	r2, [r3, #0]
	ST7789V_SEND_DATA(d >> 16);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	0c1a      	lsrs	r2, r3, #16
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <ST7789V_writeRegister32+0x48>)
 8000ff6:	b292      	uxth	r2, r2
 8000ff8:	801a      	strh	r2, [r3, #0]
	ST7789V_SEND_DATA((d >> 8));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	0a1a      	lsrs	r2, r3, #8
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <ST7789V_writeRegister32+0x48>)
 8001000:	b292      	uxth	r2, r2
 8001002:	801a      	strh	r2, [r3, #0]
	ST7789V_SEND_DATA(d);
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <ST7789V_writeRegister32+0x48>)
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	b292      	uxth	r2, r2
 800100a:	801a      	strh	r2, [r3, #0]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	60080000 	.word	0x60080000

0800101c <ST7789V_setCursorPosition>:

void ST7789V_setCursorPosition(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	4604      	mov	r4, r0
 8001024:	4608      	mov	r0, r1
 8001026:	4611      	mov	r1, r2
 8001028:	461a      	mov	r2, r3
 800102a:	4623      	mov	r3, r4
 800102c:	80fb      	strh	r3, [r7, #6]
 800102e:	4603      	mov	r3, r0
 8001030:	80bb      	strh	r3, [r7, #4]
 8001032:	460b      	mov	r3, r1
 8001034:	807b      	strh	r3, [r7, #2]
 8001036:	4613      	mov	r3, r2
 8001038:	803b      	strh	r3, [r7, #0]
  uint32_t t;
  t = (x0 << 16) | x1;
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	041a      	lsls	r2, r3, #16
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	4313      	orrs	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
  ST7789V_writeRegister32(ST7789V_CASET, t);
 8001044:	68f9      	ldr	r1, [r7, #12]
 8001046:	202a      	movs	r0, #42	; 0x2a
 8001048:	f7ff ffc2 	bl	8000fd0 <ST7789V_writeRegister32>
  t = (y0 << 16) | y1;
 800104c:	88bb      	ldrh	r3, [r7, #4]
 800104e:	041a      	lsls	r2, r3, #16
 8001050:	883b      	ldrh	r3, [r7, #0]
 8001052:	4313      	orrs	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  ST7789V_writeRegister32(ST7789V_RASET, t);
 8001056:	68f9      	ldr	r1, [r7, #12]
 8001058:	202b      	movs	r0, #43	; 0x2b
 800105a:	f7ff ffb9 	bl	8000fd0 <ST7789V_writeRegister32>
  ST7789V_SEND_COMMAND (ST7789V_RAMWR);
 800105e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001062:	222c      	movs	r2, #44	; 0x2c
 8001064:	801a      	strh	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bd90      	pop	{r4, r7, pc}
	...

08001070 <ST7789V_drawPixel>:

   ST7789V_SEND_COMMAND(ST7789V_DISPON);
   ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 }

void ST7789V_drawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
 800107a:	460b      	mov	r3, r1
 800107c:	80bb      	strh	r3, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	807b      	strh	r3, [r7, #2]
	ST7789V_setCursorPosition(x, y, x, y);
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	88fa      	ldrh	r2, [r7, #6]
 8001086:	88b9      	ldrh	r1, [r7, #4]
 8001088:	88f8      	ldrh	r0, [r7, #6]
 800108a:	f7ff ffc7 	bl	800101c <ST7789V_setCursorPosition>
	ST7789V_SEND_DATA(color>>8);
 800108e:	4a07      	ldr	r2, [pc, #28]	; (80010ac <ST7789V_drawPixel+0x3c>)
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	0a1b      	lsrs	r3, r3, #8
 8001094:	b29b      	uxth	r3, r3
 8001096:	8013      	strh	r3, [r2, #0]
	ST7789V_SEND_DATA(color&0xFF);
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <ST7789V_drawPixel+0x3c>)
 800109a:	887a      	ldrh	r2, [r7, #2]
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	b292      	uxth	r2, r2
 80010a0:	801a      	strh	r2, [r3, #0]
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	60080000 	.word	0x60080000

080010b0 <ST7789V_fill>:

void ST7789V_fill(uint16_t color) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ST7789V_PIXEL_COUNT;
 80010ba:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80010be:	60fb      	str	r3, [r7, #12]
	
	if(rotationNum==1 || rotationNum==3)
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <ST7789V_fill+0x78>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d003      	beq.n	80010d0 <ST7789V_fill+0x20>
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <ST7789V_fill+0x78>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d107      	bne.n	80010e0 <ST7789V_fill+0x30>
	{
		ST7789V_setCursorPosition(0, 0,   ST7789V_WIDTH -1, ST7789V_HEIGHT -1);
 80010d0:	f240 133f 	movw	r3, #319	; 0x13f
 80010d4:	22ef      	movs	r2, #239	; 0xef
 80010d6:	2100      	movs	r1, #0
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ff9f 	bl	800101c <ST7789V_setCursorPosition>
 80010de:	e00e      	b.n	80010fe <ST7789V_fill+0x4e>
	}
	else if(rotationNum==2 || rotationNum==4)
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <ST7789V_fill+0x78>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d003      	beq.n	80010f0 <ST7789V_fill+0x40>
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <ST7789V_fill+0x78>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d106      	bne.n	80010fe <ST7789V_fill+0x4e>
	{
		ST7789V_setCursorPosition(0, 0, ST7789V_HEIGHT -1, ST7789V_WIDTH -1);
 80010f0:	23ef      	movs	r3, #239	; 0xef
 80010f2:	f240 123f 	movw	r2, #319	; 0x13f
 80010f6:	2100      	movs	r1, #0
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff ff8f 	bl	800101c <ST7789V_setCursorPosition>
	}
	
	while (n) {
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00d      	beq.n	8001120 <ST7789V_fill+0x70>
	   n--;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3b01      	subs	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
       ST7789V_SEND_DATA(color>>8);
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <ST7789V_fill+0x7c>)
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	0a1b      	lsrs	r3, r3, #8
 8001110:	b29b      	uxth	r3, r3
 8001112:	8013      	strh	r3, [r2, #0]
	   ST7789V_SEND_DATA(color&0xff);
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <ST7789V_fill+0x7c>)
 8001116:	88fa      	ldrh	r2, [r7, #6]
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	b292      	uxth	r2, r2
 800111c:	801a      	strh	r2, [r3, #0]
	while (n) {
 800111e:	e7ee      	b.n	80010fe <ST7789V_fill+0x4e>
	}
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000000 	.word	0x20000000
 800112c:	60080000 	.word	0x60080000

08001130 <ST7789V_drawCircle>:
			ST7789V_SEND_DATA(color&0xff);
	}
}

void ST7789V_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	4604      	mov	r4, r0
 8001138:	4608      	mov	r0, r1
 800113a:	4611      	mov	r1, r2
 800113c:	461a      	mov	r2, r3
 800113e:	4623      	mov	r3, r4
 8001140:	80fb      	strh	r3, [r7, #6]
 8001142:	4603      	mov	r3, r0
 8001144:	80bb      	strh	r3, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	807b      	strh	r3, [r7, #2]
 800114a:	4613      	mov	r3, r2
 800114c:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	f1c3 0301 	rsb	r3, r3, #1
 8001154:	b29b      	uxth	r3, r3
 8001156:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8001158:	2301      	movs	r3, #1
 800115a:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	461a      	mov	r2, r3
 8001160:	03d2      	lsls	r2, r2, #15
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	b29b      	uxth	r3, r3
 8001168:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	81fb      	strh	r3, [r7, #14]

  ST7789V_drawPixel(x0  , y0+r, color);
 8001172:	88ba      	ldrh	r2, [r7, #4]
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	4413      	add	r3, r2
 8001178:	b299      	uxth	r1, r3
 800117a:	883a      	ldrh	r2, [r7, #0]
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff76 	bl	8001070 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0  , y0-r, color);
 8001184:	88ba      	ldrh	r2, [r7, #4]
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	b299      	uxth	r1, r3
 800118c:	883a      	ldrh	r2, [r7, #0]
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff6d 	bl	8001070 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0+r, y0  , color);
 8001196:	88fa      	ldrh	r2, [r7, #6]
 8001198:	887b      	ldrh	r3, [r7, #2]
 800119a:	4413      	add	r3, r2
 800119c:	b29b      	uxth	r3, r3
 800119e:	883a      	ldrh	r2, [r7, #0]
 80011a0:	88b9      	ldrh	r1, [r7, #4]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff64 	bl	8001070 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0-r, y0  , color);
 80011a8:	88fa      	ldrh	r2, [r7, #6]
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	883a      	ldrh	r2, [r7, #0]
 80011b2:	88b9      	ldrh	r1, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5b 	bl	8001070 <ST7789V_drawPixel>

  while (x<y) {
 80011ba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80011be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	f280 8083 	bge.w	80012ce <ST7789V_drawCircle+0x19e>
    if (f >= 0) {
 80011c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0e      	blt.n	80011ee <ST7789V_drawCircle+0xbe>
      y--;
 80011d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	3b01      	subs	r3, #1
 80011d8:	b29b      	uxth	r3, r3
 80011da:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 80011dc:	8a7b      	ldrh	r3, [r7, #18]
 80011de:	3302      	adds	r3, #2
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 80011e4:	8afa      	ldrh	r2, [r7, #22]
 80011e6:	8a7b      	ldrh	r3, [r7, #18]
 80011e8:	4413      	add	r3, r2
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 80011ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	3301      	adds	r3, #1
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 80011fa:	8abb      	ldrh	r3, [r7, #20]
 80011fc:	3302      	adds	r3, #2
 80011fe:	b29b      	uxth	r3, r3
 8001200:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8001202:	8afa      	ldrh	r2, [r7, #22]
 8001204:	8abb      	ldrh	r3, [r7, #20]
 8001206:	4413      	add	r3, r2
 8001208:	b29b      	uxth	r3, r3
 800120a:	82fb      	strh	r3, [r7, #22]
  
    ST7789V_drawPixel(x0 + x, y0 + y, color);
 800120c:	8a3a      	ldrh	r2, [r7, #16]
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	4413      	add	r3, r2
 8001212:	b298      	uxth	r0, r3
 8001214:	89fa      	ldrh	r2, [r7, #14]
 8001216:	88bb      	ldrh	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	b29b      	uxth	r3, r3
 800121c:	883a      	ldrh	r2, [r7, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff ff26 	bl	8001070 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 + y, color);
 8001224:	8a3b      	ldrh	r3, [r7, #16]
 8001226:	88fa      	ldrh	r2, [r7, #6]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	b298      	uxth	r0, r3
 800122c:	89fa      	ldrh	r2, [r7, #14]
 800122e:	88bb      	ldrh	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	b29b      	uxth	r3, r3
 8001234:	883a      	ldrh	r2, [r7, #0]
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff ff1a 	bl	8001070 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + x, y0 - y, color);
 800123c:	8a3a      	ldrh	r2, [r7, #16]
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	4413      	add	r3, r2
 8001242:	b298      	uxth	r0, r3
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	88ba      	ldrh	r2, [r7, #4]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	b29b      	uxth	r3, r3
 800124c:	883a      	ldrh	r2, [r7, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff ff0e 	bl	8001070 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 - y, color);
 8001254:	8a3b      	ldrh	r3, [r7, #16]
 8001256:	88fa      	ldrh	r2, [r7, #6]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	b298      	uxth	r0, r3
 800125c:	89fb      	ldrh	r3, [r7, #14]
 800125e:	88ba      	ldrh	r2, [r7, #4]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	b29b      	uxth	r3, r3
 8001264:	883a      	ldrh	r2, [r7, #0]
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff ff02 	bl	8001070 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 + x, color);
 800126c:	89fa      	ldrh	r2, [r7, #14]
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	4413      	add	r3, r2
 8001272:	b298      	uxth	r0, r3
 8001274:	8a3a      	ldrh	r2, [r7, #16]
 8001276:	88bb      	ldrh	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	b29b      	uxth	r3, r3
 800127c:	883a      	ldrh	r2, [r7, #0]
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fef6 	bl	8001070 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 + x, color);
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	88fa      	ldrh	r2, [r7, #6]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b298      	uxth	r0, r3
 800128c:	8a3a      	ldrh	r2, [r7, #16]
 800128e:	88bb      	ldrh	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	b29b      	uxth	r3, r3
 8001294:	883a      	ldrh	r2, [r7, #0]
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff feea 	bl	8001070 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 - x, color);
 800129c:	89fa      	ldrh	r2, [r7, #14]
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	4413      	add	r3, r2
 80012a2:	b298      	uxth	r0, r3
 80012a4:	8a3b      	ldrh	r3, [r7, #16]
 80012a6:	88ba      	ldrh	r2, [r7, #4]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	883a      	ldrh	r2, [r7, #0]
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fede 	bl	8001070 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 - x, color);
 80012b4:	89fb      	ldrh	r3, [r7, #14]
 80012b6:	88fa      	ldrh	r2, [r7, #6]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	b298      	uxth	r0, r3
 80012bc:	8a3b      	ldrh	r3, [r7, #16]
 80012be:	88ba      	ldrh	r2, [r7, #4]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	883a      	ldrh	r2, [r7, #0]
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fed2 	bl	8001070 <ST7789V_drawPixel>
  while (x<y) {
 80012cc:	e775      	b.n	80011ba <ST7789V_drawCircle+0x8a>
  }
}
 80012ce:	bf00      	nop
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd90      	pop	{r4, r7, pc}

080012d6 <fillCircleHelper>:
      ST7789V_drawPixel(x0 - x, y0 - y, color);
    }
  }
}
static void fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color)
{
 80012d6:	b590      	push	{r4, r7, lr}
 80012d8:	b087      	sub	sp, #28
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4604      	mov	r4, r0
 80012de:	4608      	mov	r0, r1
 80012e0:	4611      	mov	r1, r2
 80012e2:	461a      	mov	r2, r3
 80012e4:	4623      	mov	r3, r4
 80012e6:	80fb      	strh	r3, [r7, #6]
 80012e8:	4603      	mov	r3, r0
 80012ea:	80bb      	strh	r3, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
 80012f0:	4613      	mov	r3, r2
 80012f2:	707b      	strb	r3, [r7, #1]
  int16_t f     = 1 - r;
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	f1c3 0301 	rsb	r3, r3, #1
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	461a      	mov	r2, r3
 8001306:	03d2      	lsls	r2, r2, #15
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	b29b      	uxth	r3, r3
 800130e:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8001318:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800131c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001320:	429a      	cmp	r2, r3
 8001322:	da78      	bge.n	8001416 <fillCircleHelper+0x140>
    if (f >= 0) {
 8001324:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0e      	blt.n	800134a <fillCircleHelper+0x74>
      y--;
 800132c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001330:	b29b      	uxth	r3, r3
 8001332:	3b01      	subs	r3, #1
 8001334:	b29b      	uxth	r3, r3
 8001336:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001338:	8a7b      	ldrh	r3, [r7, #18]
 800133a:	3302      	adds	r3, #2
 800133c:	b29b      	uxth	r3, r3
 800133e:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8001340:	8afa      	ldrh	r2, [r7, #22]
 8001342:	8a7b      	ldrh	r3, [r7, #18]
 8001344:	4413      	add	r3, r2
 8001346:	b29b      	uxth	r3, r3
 8001348:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 800134a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800134e:	b29b      	uxth	r3, r3
 8001350:	3301      	adds	r3, #1
 8001352:	b29b      	uxth	r3, r3
 8001354:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8001356:	8abb      	ldrh	r3, [r7, #20]
 8001358:	3302      	adds	r3, #2
 800135a:	b29b      	uxth	r3, r3
 800135c:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 800135e:	8afa      	ldrh	r2, [r7, #22]
 8001360:	8abb      	ldrh	r3, [r7, #20]
 8001362:	4413      	add	r3, r2
 8001364:	b29b      	uxth	r3, r3
 8001366:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d025      	beq.n	80013be <fillCircleHelper+0xe8>
      ST7789V_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8001372:	8a3a      	ldrh	r2, [r7, #16]
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	4413      	add	r3, r2
 8001378:	b298      	uxth	r0, r3
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	88ba      	ldrh	r2, [r7, #4]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b299      	uxth	r1, r3
 8001382:	89fb      	ldrh	r3, [r7, #14]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	b29a      	uxth	r2, r3
 8001388:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	3301      	adds	r3, #1
 8001390:	b29a      	uxth	r2, r3
 8001392:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001394:	f000 f8fc 	bl	8001590 <ST7789V_drawFastVLine>
      ST7789V_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001398:	89fa      	ldrh	r2, [r7, #14]
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	4413      	add	r3, r2
 800139e:	b298      	uxth	r0, r3
 80013a0:	8a3b      	ldrh	r3, [r7, #16]
 80013a2:	88ba      	ldrh	r2, [r7, #4]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	b299      	uxth	r1, r3
 80013a8:	8a3b      	ldrh	r3, [r7, #16]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013b0:	4413      	add	r3, r2
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	3301      	adds	r3, #1
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013ba:	f000 f8e9 	bl	8001590 <ST7789V_drawFastVLine>
    }
    if (cornername & 0x2) {
 80013be:	787b      	ldrb	r3, [r7, #1]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0a7      	beq.n	8001318 <fillCircleHelper+0x42>
      ST7789V_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80013c8:	8a3b      	ldrh	r3, [r7, #16]
 80013ca:	88fa      	ldrh	r2, [r7, #6]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	b298      	uxth	r0, r3
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	88ba      	ldrh	r2, [r7, #4]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b299      	uxth	r1, r3
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	b29a      	uxth	r2, r3
 80013de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013e0:	4413      	add	r3, r2
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3301      	adds	r3, #1
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013ea:	f000 f8d1 	bl	8001590 <ST7789V_drawFastVLine>
      ST7789V_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	88fa      	ldrh	r2, [r7, #6]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	b298      	uxth	r0, r3
 80013f6:	8a3b      	ldrh	r3, [r7, #16]
 80013f8:	88ba      	ldrh	r2, [r7, #4]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b299      	uxth	r1, r3
 80013fe:	8a3b      	ldrh	r3, [r7, #16]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	b29a      	uxth	r2, r3
 8001404:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001406:	4413      	add	r3, r2
 8001408:	b29b      	uxth	r3, r3
 800140a:	3301      	adds	r3, #1
 800140c:	b29a      	uxth	r2, r3
 800140e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001410:	f000 f8be 	bl	8001590 <ST7789V_drawFastVLine>
  while (x<y) {
 8001414:	e780      	b.n	8001318 <fillCircleHelper+0x42>
    }
  }
}
 8001416:	bf00      	nop
 8001418:	371c      	adds	r7, #28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}

0800141e <ST7789V_fillCircle>:

void ST7789V_fillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)
{
 800141e:	b590      	push	{r4, r7, lr}
 8001420:	b085      	sub	sp, #20
 8001422:	af02      	add	r7, sp, #8
 8001424:	4604      	mov	r4, r0
 8001426:	4608      	mov	r0, r1
 8001428:	4611      	mov	r1, r2
 800142a:	461a      	mov	r2, r3
 800142c:	4623      	mov	r3, r4
 800142e:	80fb      	strh	r3, [r7, #6]
 8001430:	4603      	mov	r3, r0
 8001432:	80bb      	strh	r3, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	803b      	strh	r3, [r7, #0]
  ST7789V_drawFastVLine(x0, y0-r, 2*r+1, color);
 800143c:	88ba      	ldrh	r2, [r7, #4]
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	b299      	uxth	r1, r3
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	3301      	adds	r3, #1
 800144c:	b29a      	uxth	r2, r3
 800144e:	883b      	ldrh	r3, [r7, #0]
 8001450:	88f8      	ldrh	r0, [r7, #6]
 8001452:	f000 f89d 	bl	8001590 <ST7789V_drawFastVLine>
  fillCircleHelper(x0, y0, r, 3, 0, color);
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	88b9      	ldrh	r1, [r7, #4]
 800145a:	88f8      	ldrh	r0, [r7, #6]
 800145c:	883b      	ldrh	r3, [r7, #0]
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	2300      	movs	r3, #0
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2303      	movs	r3, #3
 8001466:	f7ff ff36 	bl	80012d6 <fillCircleHelper>
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}

08001472 <ST7789V_drawLine>:

void ST7789V_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8001472:	b590      	push	{r4, r7, lr}
 8001474:	b087      	sub	sp, #28
 8001476:	af00      	add	r7, sp, #0
 8001478:	4604      	mov	r4, r0
 800147a:	4608      	mov	r0, r1
 800147c:	4611      	mov	r1, r2
 800147e:	461a      	mov	r2, r3
 8001480:	4623      	mov	r3, r4
 8001482:	80fb      	strh	r3, [r7, #6]
 8001484:	4603      	mov	r3, r0
 8001486:	80bb      	strh	r3, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001490:	883b      	ldrh	r3, [r7, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	88bb      	ldrh	r3, [r7, #4]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800149c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	4619      	mov	r1, r3
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	1acb      	subs	r3, r1, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bfb8      	it	lt
 80014ac:	425b      	neglt	r3, r3
 80014ae:	429a      	cmp	r2, r3
 80014b0:	bfcc      	ite	gt
 80014b2:	2301      	movgt	r3, #1
 80014b4:	2300      	movle	r3, #0
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	827b      	strh	r3, [r7, #18]
  if (steep) {
 80014ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <ST7789V_drawLine+0x68>
	std::swap(x0, y0);
 80014c2:	1d3a      	adds	r2, r7, #4
 80014c4:	1dbb      	adds	r3, r7, #6
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f88d 	bl	80015e8 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(x1, y1);
 80014ce:	463a      	mov	r2, r7
 80014d0:	1cbb      	adds	r3, r7, #2
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f887 	bl	80015e8 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  if (x0 > x1) {
 80014da:	88fa      	ldrh	r2, [r7, #6]
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d90b      	bls.n	80014fa <ST7789V_drawLine+0x88>
	std::swap(x0, x1);
 80014e2:	1cba      	adds	r2, r7, #2
 80014e4:	1dbb      	adds	r3, r7, #6
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f87d 	bl	80015e8 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(y0, y1);
 80014ee:	463a      	mov	r2, r7
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 f877 	bl	80015e8 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  uint16_t dx, dy;
  dx = x1 - x0;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8001502:	883b      	ldrh	r3, [r7, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	88bb      	ldrh	r3, [r7, #4]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	bfb8      	it	lt
 800150e:	425b      	neglt	r3, r3
 8001510:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx>>1;
 8001512:	8a3b      	ldrh	r3, [r7, #16]
 8001514:	085b      	lsrs	r3, r3, #1
 8001516:	b29b      	uxth	r3, r3
 8001518:	82fb      	strh	r3, [r7, #22]
  int16_t ystep;

  if (y0 < y1) {
 800151a:	88ba      	ldrh	r2, [r7, #4]
 800151c:	883b      	ldrh	r3, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d202      	bcs.n	8001528 <ST7789V_drawLine+0xb6>
    ystep = 1;
 8001522:	2301      	movs	r3, #1
 8001524:	82bb      	strh	r3, [r7, #20]
 8001526:	e002      	b.n	800152e <ST7789V_drawLine+0xbc>
  } else {
    ystep = -1;
 8001528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152c:	82bb      	strh	r3, [r7, #20]
  }

  for (; x0<=x1; x0++) {
 800152e:	88fa      	ldrh	r2, [r7, #6]
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	429a      	cmp	r2, r3
 8001534:	d828      	bhi.n	8001588 <ST7789V_drawLine+0x116>
    if (steep) {
 8001536:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d006      	beq.n	800154c <ST7789V_drawLine+0xda>
      ST7789V_drawPixel(y0, x0, color);
 800153e:	88bb      	ldrh	r3, [r7, #4]
 8001540:	88f9      	ldrh	r1, [r7, #6]
 8001542:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fd93 	bl	8001070 <ST7789V_drawPixel>
 800154a:	e005      	b.n	8001558 <ST7789V_drawLine+0xe6>
    } else {
      ST7789V_drawPixel(x0, y0, color);
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	88b9      	ldrh	r1, [r7, #4]
 8001550:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fd8c 	bl	8001070 <ST7789V_drawPixel>
    }
    err -= dy;
 8001558:	8afa      	ldrh	r2, [r7, #22]
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b29b      	uxth	r3, r3
 8001560:	82fb      	strh	r3, [r7, #22]
    if (err < 0) {
 8001562:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001566:	2b00      	cmp	r3, #0
 8001568:	da09      	bge.n	800157e <ST7789V_drawLine+0x10c>
      y0 += ystep;
 800156a:	88ba      	ldrh	r2, [r7, #4]
 800156c:	8abb      	ldrh	r3, [r7, #20]
 800156e:	4413      	add	r3, r2
 8001570:	b29b      	uxth	r3, r3
 8001572:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8001574:	8afa      	ldrh	r2, [r7, #22]
 8001576:	8a3b      	ldrh	r3, [r7, #16]
 8001578:	4413      	add	r3, r2
 800157a:	b29b      	uxth	r3, r3
 800157c:	82fb      	strh	r3, [r7, #22]
  for (; x0<=x1; x0++) {
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	3301      	adds	r3, #1
 8001582:	b29b      	uxth	r3, r3
 8001584:	80fb      	strh	r3, [r7, #6]
 8001586:	e7d2      	b.n	800152e <ST7789V_drawLine+0xbc>
    }
  }
}	
 8001588:	bf00      	nop
 800158a:	371c      	adds	r7, #28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd90      	pop	{r4, r7, pc}

08001590 <ST7789V_drawFastVLine>:
{
	ST7789V_drawLine(x, y, x+w-1, y, color);
}

void ST7789V_drawFastVLine(uint16_t x, uint16_t y, uint16_t h, uint16_t color)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b085      	sub	sp, #20
 8001594:	af02      	add	r7, sp, #8
 8001596:	4604      	mov	r4, r0
 8001598:	4608      	mov	r0, r1
 800159a:	4611      	mov	r1, r2
 800159c:	461a      	mov	r2, r3
 800159e:	4623      	mov	r3, r4
 80015a0:	80fb      	strh	r3, [r7, #6]
 80015a2:	4603      	mov	r3, r0
 80015a4:	80bb      	strh	r3, [r7, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	807b      	strh	r3, [r7, #2]
 80015aa:	4613      	mov	r3, r2
 80015ac:	803b      	strh	r3, [r7, #0]
	ST7789V_drawLine(x, y, x, y+h-1, color);
 80015ae:	88ba      	ldrh	r2, [r7, #4]
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	4413      	add	r3, r2
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b29c      	uxth	r4, r3
 80015ba:	88fa      	ldrh	r2, [r7, #6]
 80015bc:	88b9      	ldrh	r1, [r7, #4]
 80015be:	88f8      	ldrh	r0, [r7, #6]
 80015c0:	883b      	ldrh	r3, [r7, #0]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	4623      	mov	r3, r4
 80015c6:	f7ff ff54 	bl	8001472 <ST7789V_drawLine>
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}

080015d2 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffed 	bl	80015d2 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 80015f8:	4603      	mov	r3, r0
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	81fb      	strh	r3, [r7, #14]
      __a = _GLIBCXX_MOVE(__b);
 80015fe:	6838      	ldr	r0, [r7, #0]
 8001600:	f7ff ffe7 	bl	80015d2 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8001604:	4603      	mov	r3, r0
 8001606:	881a      	ldrh	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	801a      	strh	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800160c:	f107 030e 	add.w	r3, r7, #14
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ffde 	bl	80015d2 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8001616:	4603      	mov	r3, r0
 8001618:	881a      	ldrh	r2, [r3, #0]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	801a      	strh	r2, [r3, #0]
    }
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_MspInit+0x34>)
 8001630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001634:	4a09      	ldr	r2, [pc, #36]	; (800165c <HAL_MspInit+0x34>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <HAL_MspInit+0x34>)
 8001640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800164c:	2004      	movs	r0, #4
 800164e:	f000 ffa3 	bl	8002598 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	46020c00 	.word	0x46020c00

08001660 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b0bc      	sub	sp, #240	; 0xf0
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	22c8      	movs	r2, #200	; 0xc8
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f008 f843 	bl	800970c <memset>
  if(hadc->Instance==ADC1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a24      	ldr	r2, [pc, #144]	; (800171c <HAL_ADC_MspInit+0xbc>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d140      	bne.n	8001712 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001690:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800169c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 fdc5 	bl	8005238 <HAL_RCCEx_PeriphCLKConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80016b4:	f7ff fc86 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_ADC_MspInit+0xc0>)
 80016ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016be:	4a18      	ldr	r2, [pc, #96]	; (8001720 <HAL_ADC_MspInit+0xc0>)
 80016c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_ADC_MspInit+0xc0>)
 80016ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_ADC_MspInit+0xc0>)
 80016d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016dc:	4a10      	ldr	r2, [pc, #64]	; (8001720 <HAL_ADC_MspInit+0xc0>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_ADC_MspInit+0xc0>)
 80016e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80016f4:	2304      	movs	r3, #4
 80016f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fa:	2303      	movs	r3, #3
 80016fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <HAL_ADC_MspInit+0xc4>)
 800170e:	f000 ff83 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	37f0      	adds	r7, #240	; 0xf0
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	42028000 	.word	0x42028000
 8001720:	46020c00 	.word	0x46020c00
 8001724:	42020800 	.word	0x42020800

08001728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b0bc      	sub	sp, #240	; 0xf0
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	22c8      	movs	r2, #200	; 0xc8
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f007 ffdf 	bl	800970c <memset>
  if(huart->Instance==USART1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a26      	ldr	r2, [pc, #152]	; (80017ec <HAL_UART_MspInit+0xc4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d145      	bne.n	80017e4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001758:	f04f 0201 	mov.w	r2, #1
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001764:	2300      	movs	r3, #0
 8001766:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4618      	mov	r0, r3
 800176e:	f003 fd63 	bl	8005238 <HAL_RCCEx_PeriphCLKConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001778:	f7ff fc24 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HAL_UART_MspInit+0xc8>)
 800177e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001782:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <HAL_UART_MspInit+0xc8>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001788:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800178c:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_UART_MspInit+0xc8>)
 800178e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_UART_MspInit+0xc8>)
 800179c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017a0:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <HAL_UART_MspInit+0xc8>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_UART_MspInit+0xc8>)
 80017ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80017b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017c6:	2302      	movs	r3, #2
 80017c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017d2:	2307      	movs	r3, #7
 80017d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017dc:	4619      	mov	r1, r3
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <HAL_UART_MspInit+0xcc>)
 80017e0:	f000 ff1a 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017e4:	bf00      	nop
 80017e6:	37f0      	adds	r7, #240	; 0xf0
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40013800 	.word	0x40013800
 80017f0:	46020c00 	.word	0x46020c00
 80017f4:	42020000 	.word	0x42020000

080017f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b0be      	sub	sp, #248	; 0xf8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001810:	f107 0318 	add.w	r3, r7, #24
 8001814:	22c8      	movs	r2, #200	; 0xc8
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f007 ff77 	bl	800970c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a3c      	ldr	r2, [pc, #240]	; (8001914 <HAL_PCD_MspInit+0x11c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d171      	bne.n	800190c <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001828:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800183a:	f107 0318 	add.w	r3, r7, #24
 800183e:	4618      	mov	r0, r3
 8001840:	f003 fcfa 	bl	8005238 <HAL_RCCEx_PeriphCLKConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 800184a:	f7ff fbbb 	bl	8000fc4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_PCD_MspInit+0x120>)
 8001850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001854:	4a30      	ldr	r2, [pc, #192]	; (8001918 <HAL_PCD_MspInit+0x120>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <HAL_PCD_MspInit+0x120>)
 8001860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800186c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001870:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001886:	230a      	movs	r3, #10
 8001888:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001890:	4619      	mov	r1, r3
 8001892:	4822      	ldr	r0, [pc, #136]	; (800191c <HAL_PCD_MspInit+0x124>)
 8001894:	f000 fec0 	bl	8002618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <HAL_PCD_MspInit+0x120>)
 800189a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800189e:	4a1e      	ldr	r2, [pc, #120]	; (8001918 <HAL_PCD_MspInit+0x120>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_PCD_MspInit+0x120>)
 80018aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_PCD_MspInit+0x120>)
 80018b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d119      	bne.n	80018f8 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_PCD_MspInit+0x120>)
 80018c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ca:	4a13      	ldr	r2, [pc, #76]	; (8001918 <HAL_PCD_MspInit+0x120>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_PCD_MspInit+0x120>)
 80018d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80018e2:	f002 f9dd 	bl	8003ca0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_PCD_MspInit+0x120>)
 80018e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_PCD_MspInit+0x120>)
 80018ee:	f023 0304 	bic.w	r3, r3, #4
 80018f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80018f6:	e001      	b.n	80018fc <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80018f8:	f002 f9d2 	bl	8003ca0 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	2049      	movs	r0, #73	; 0x49
 8001902:	f000 fe54 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001906:	2049      	movs	r0, #73	; 0x49
 8001908:	f000 fe6b 	bl	80025e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800190c:	bf00      	nop
 800190e:	37f8      	adds	r7, #248	; 0xf8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	42040000 	.word	0x42040000
 8001918:	46020c00 	.word	0x46020c00
 800191c:	42020000 	.word	0x42020000

08001920 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <HAL_FMC_MspInit+0x8c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d132      	bne.n	80019a2 <HAL_FMC_MspInit+0x82>
    return;
  }
  FMC_Initialized = 1;
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_FMC_MspInit+0x8c>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_FMC_MspInit+0x90>)
 8001944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001948:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <HAL_FMC_MspInit+0x90>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_FMC_MspInit+0x90>)
 8001954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001960:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001964:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001972:	230c      	movs	r3, #12
 8001974:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	4619      	mov	r1, r3
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <HAL_FMC_MspInit+0x94>)
 800197c:	f000 fe4c 	bl	8002618 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001980:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8001984:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001992:	230c      	movs	r3, #12
 8001994:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	4619      	mov	r1, r3
 800199a:	4807      	ldr	r0, [pc, #28]	; (80019b8 <HAL_FMC_MspInit+0x98>)
 800199c:	f000 fe3c 	bl	8002618 <HAL_GPIO_Init>
 80019a0:	e000      	b.n	80019a4 <HAL_FMC_MspInit+0x84>
    return;
 80019a2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200006ac 	.word	0x200006ac
 80019b0:	46020c00 	.word	0x46020c00
 80019b4:	42021000 	.word	0x42021000
 80019b8:	42020c00 	.word	0x42020c00

080019bc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80019c4:	f7ff ffac 	bl	8001920 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <NMI_Handler+0x4>

080019d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <MemManage_Handler+0x4>

080019e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <UsageFault_Handler+0x4>

080019ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1c:	f000 f8d2 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <OTG_FS_IRQHandler+0x10>)
 8001a2a:	f001 f909 	bl	8002c40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000148 	.word	0x20000148

08001a38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <SystemInit+0x68>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <SystemInit+0x68>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <SystemInit+0x6c>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <SystemInit+0x6c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <SystemInit+0x6c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <SystemInit+0x6c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <SystemInit+0x6c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <SystemInit+0x6c>)
 8001a6a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a6e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a72:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <SystemInit+0x6c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <SystemInit+0x6c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <SystemInit+0x6c>)
 8001a80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a84:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <SystemInit+0x6c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <SystemInit+0x68>)
 8001a8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a92:	609a      	str	r2, [r3, #8]
  #endif
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00
 8001aa4:	46020c00 	.word	0x46020c00

08001aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001aac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001aae:	e003      	b.n	8001ab8 <LoopCopyDataInit>

08001ab0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ab2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ab4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ab6:	3104      	adds	r1, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ab8:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <LoopForever+0xe>)
	adds	r2, r0, r1
 8001abc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001abe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ac0:	d3f6      	bcc.n	8001ab0 <CopyDataInit>
	ldr	r2, =_sbss
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ac4:	e002      	b.n	8001acc <LoopFillZerobss>

08001ac6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ac6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ac8:	f842 3b04 	str.w	r3, [r2], #4

08001acc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <LoopForever+0x16>)
	cmp	r2, r3
 8001ace:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ad0:	d3f9      	bcc.n	8001ac6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad2:	f7ff ffb1 	bl	8001a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f007 fdf5 	bl	80096c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ada:	f7fe fe01 	bl	80006e0 <main>

08001ade <LoopForever>:

LoopForever:
    b LoopForever
 8001ade:	e7fe      	b.n	8001ade <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001ae0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001ae4:	08009844 	.word	0x08009844
	ldr	r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001aec:	2000000d 	.word	0x2000000d
	ldr	r2, =_sbss
 8001af0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001af4:	200006b4 	.word	0x200006b4

08001af8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC1_IRQHandler>
	...

08001afc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_Init+0x4c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <HAL_Init+0x4c>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 fd43 	bl	8002598 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001b12:	f003 f9ad 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8001b16:	4602      	mov	r2, r0
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_Init+0x50>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	490b      	ldr	r1, [pc, #44]	; (8001b50 <HAL_Init+0x54>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_Init+0x58>)
 8001b2a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f000 f813 	bl	8001b58 <HAL_InitTick>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e002      	b.n	8001b42 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3c:	f7ff fd74 	bl	8001628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40022000 	.word	0x40022000
 8001b4c:	46020c00 	.word	0x46020c00
 8001b50:	08009734 	.word	0x08009734
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_InitTick+0x60>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e021      	b.n	8001bb0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_InitTick+0x64>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_InitTick+0x60>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fd3b 	bl	80025fe <HAL_SYSTICK_Config>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00e      	b.n	8001bb0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d80a      	bhi.n	8001bae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f000 fd05 	bl	80025ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba4:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <HAL_InitTick+0x68>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2000000c 	.word	0x2000000c
 8001bbc:	20000004 	.word	0x20000004
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	2000000c 	.word	0x2000000c
 8001be8:	200006b0 	.word	0x200006b0

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	200006b0 	.word	0x200006b0

08001c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff ffee 	bl	8001bec <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d005      	beq.n	8001c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_Delay+0x44>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2a:	bf00      	nop
 8001c2c:	f7ff ffde 	bl	8001bec <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d8f7      	bhi.n	8001c2c <HAL_Delay+0x28>
  {
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000000c 	.word	0x2000000c

08001c4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	601a      	str	r2, [r3, #0]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c80:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	2a00      	cmp	r2, #0
 8001c9c:	d002      	beq.n	8001ca4 <LL_ADC_SetGainCompensation+0x32>
 8001c9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ca2:	e000      	b.n	8001ca6 <LL_ADC_SetGainCompensation+0x34>
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	695a      	ldr	r2, [r3, #20]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2107      	movs	r1, #7
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6093      	str	r3, [r2, #8]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d2e:	d101      	bne.n	8001d34 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d7e:	d101      	bne.n	8001d84 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <LL_ADC_IsEnabled+0x18>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <LL_ADC_IsEnabled+0x1a>
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d101      	bne.n	8001dd0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d101      	bne.n	8001df6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e2e3      	b.n	80023ec <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a92      	ldr	r2, [pc, #584]	; (800207c <HAL_ADC_Init+0x278>)
 8001e32:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff fc0f 	bl	8001660 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff60 	bl	8001d1a <LL_ADC_IsDeepPowerDownEnabled>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff46 	bl	8001cf6 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ff7b 	bl	8001d6a <LL_ADC_IsInternalRegulatorEnabled>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d115      	bne.n	8001ea6 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff5f 	bl	8001d42 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e84:	4b7e      	ldr	r3, [pc, #504]	; (8002080 <HAL_ADC_Init+0x27c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	099b      	lsrs	r3, r3, #6
 8001e8a:	4a7e      	ldr	r2, [pc, #504]	; (8002084 <HAL_ADC_Init+0x280>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	099b      	lsrs	r3, r3, #6
 8001e92:	3301      	adds	r3, #1
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e98:	e002      	b.n	8001ea0 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f9      	bne.n	8001e9a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff5d 	bl	8001d6a <LL_ADC_IsInternalRegulatorEnabled>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001eba:	f043 0210 	orr.w	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff6d 	bl	8001db8 <LL_ADC_REG_IsConversionOngoing>
 8001ede:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f040 8274 	bne.w	80023d6 <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 8270 	bne.w	80023d6 <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001efa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001efe:	f043 0202 	orr.w	r2, r3, #2
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff41 	bl	8001d92 <LL_ADC_IsEnabled>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d14e      	bne.n	8001fb4 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a58      	ldr	r2, [pc, #352]	; (800207c <HAL_ADC_Init+0x278>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d028      	beq.n	8001f72 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a58      	ldr	r2, [pc, #352]	; (8002088 <HAL_ADC_Init+0x284>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d109      	bne.n	8001f3e <HAL_ADC_Init+0x13a>
 8001f2a:	4857      	ldr	r0, [pc, #348]	; (8002088 <HAL_ADC_Init+0x284>)
 8001f2c:	f7ff ff31 	bl	8001d92 <LL_ADC_IsEnabled>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bf0c      	ite	eq
 8001f36:	2301      	moveq	r3, #1
 8001f38:	2300      	movne	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	e008      	b.n	8001f50 <HAL_ADC_Init+0x14c>
 8001f3e:	484f      	ldr	r0, [pc, #316]	; (800207c <HAL_ADC_Init+0x278>)
 8001f40:	f7ff ff27 	bl	8001d92 <LL_ADC_IsEnabled>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf0c      	ite	eq
 8001f4a:	2301      	moveq	r3, #1
 8001f4c:	2300      	movne	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d02f      	beq.n	8001fb4 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a4b      	ldr	r2, [pc, #300]	; (8002088 <HAL_ADC_Init+0x284>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_Init+0x15e>
 8001f5e:	4a4b      	ldr	r2, [pc, #300]	; (800208c <HAL_ADC_Init+0x288>)
 8001f60:	e000      	b.n	8001f64 <HAL_ADC_Init+0x160>
 8001f62:	4a4b      	ldr	r2, [pc, #300]	; (8002090 <HAL_ADC_Init+0x28c>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	f7ff fe6e 	bl	8001c4c <LL_ADC_SetCommonClock>
 8001f70:	e020      	b.n	8001fb4 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f023 010c 	bic.w	r1, r3, #12
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d005      	beq.n	8001f94 <HAL_ADC_Init+0x190>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	e000      	b.n	8001f96 <HAL_ADC_Init+0x192>
 8001f94:	230c      	movs	r3, #12
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	430b      	orrs	r3, r1
 8001f9c:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001f9e:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <HAL_ADC_Init+0x28c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001fae:	4938      	ldr	r1, [pc, #224]	; (8002090 <HAL_ADC_Init+0x28c>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a30      	ldr	r2, [pc, #192]	; (800207c <HAL_ADC_Init+0x278>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d010      	beq.n	8001fe0 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fc4:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001fca:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001fd0:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001fd8:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	623b      	str	r3, [r7, #32]
 8001fde:	e030      	b.n	8002042 <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7f1b      	ldrb	r3, [r3, #28]
 8001fe4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fec:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fee:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ff4:	2a00      	cmp	r2, #0
 8001ff6:	d002      	beq.n	8001ffe <HAL_ADC_Init+0x1fa>
 8001ff8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ffc:	e000      	b.n	8002000 <HAL_ADC_Init+0x1fc>
 8001ffe:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002000:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002006:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da04      	bge.n	800201a <HAL_ADC_Init+0x216>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002018:	e001      	b.n	800201e <HAL_ADC_Init+0x21a>
 800201a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 800201e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4918      	ldr	r1, [pc, #96]	; (8002088 <HAL_ADC_Init+0x284>)
 8002026:	428b      	cmp	r3, r1
 8002028:	d103      	bne.n	8002032 <HAL_ADC_Init+0x22e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002030:	e003      	b.n	800203a <HAL_ADC_Init+0x236>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002038:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800203a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800203c:	6a3a      	ldr	r2, [r7, #32]
 800203e:	4313      	orrs	r3, r2
 8002040:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002048:	2b01      	cmp	r3, #1
 800204a:	d12f      	bne.n	80020ac <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <HAL_ADC_Init+0x278>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	3b01      	subs	r3, #1
 800205c:	045b      	lsls	r3, r3, #17
 800205e:	6a3a      	ldr	r2, [r7, #32]
 8002060:	4313      	orrs	r3, r2
 8002062:	623b      	str	r3, [r7, #32]
 8002064:	e022      	b.n	80020ac <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800206c:	2b00      	cmp	r3, #0
 800206e:	d111      	bne.n	8002094 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002076:	623b      	str	r3, [r7, #32]
 8002078:	e018      	b.n	80020ac <HAL_ADC_Init+0x2a8>
 800207a:	bf00      	nop
 800207c:	46021000 	.word	0x46021000
 8002080:	20000004 	.word	0x20000004
 8002084:	053e2d63 	.word	0x053e2d63
 8002088:	42028000 	.word	0x42028000
 800208c:	42028308 	.word	0x42028308
 8002090:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020a4:	f043 0201 	orr.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a93      	ldr	r2, [pc, #588]	; (8002300 <HAL_ADC_Init+0x4fc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d018      	beq.n	80020e8 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	4313      	orrs	r3, r2
 80020cc:	6a3a      	ldr	r2, [r7, #32]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	4b8a      	ldr	r3, [pc, #552]	; (8002304 <HAL_ADC_Init+0x500>)
 80020da:	4013      	ands	r3, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	6a39      	ldr	r1, [r7, #32]
 80020e2:	430b      	orrs	r3, r1
 80020e4:	60d3      	str	r3, [r2, #12]
 80020e6:	e033      	b.n	8002150 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fc:	4313      	orrs	r3, r2
 80020fe:	6a3a      	ldr	r2, [r7, #32]
 8002100:	4313      	orrs	r3, r2
 8002102:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 800210e:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	6a39      	ldr	r1, [r7, #32]
 8002118:	430b      	orrs	r3, r1
 800211a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1a      	ldr	r2, [r3, #32]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6a      	ldr	r2, [pc, #424]	; (8002300 <HAL_ADC_Init+0x4fc>)
 8002156:	4293      	cmp	r3, r2
 8002158:	f000 8093 	beq.w	8002282 <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fe29 	bl	8001db8 <LL_ADC_REG_IsConversionOngoing>
 8002166:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fe36 	bl	8001dde <LL_ADC_INJ_IsConversionOngoing>
 8002172:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d161      	bne.n	800223e <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d15e      	bne.n	800223e <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7f1b      	ldrb	r3, [r3, #28]
 8002184:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	495f      	ldr	r1, [pc, #380]	; (8002308 <HAL_ADC_Init+0x504>)
 800218c:	428b      	cmp	r3, r1
 800218e:	d102      	bne.n	8002196 <HAL_ADC_Init+0x392>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	e002      	b.n	800219c <HAL_ADC_Init+0x398>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800219c:	4313      	orrs	r3, r2
 800219e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021aa:	f023 0303 	bic.w	r3, r3, #3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	6a39      	ldr	r1, [r7, #32]
 80021b4:	430b      	orrs	r3, r1
 80021b6:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4619      	mov	r1, r3
 80021ca:	4610      	mov	r0, r2
 80021cc:	f7ff fd51 	bl	8001c72 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d11e      	bne.n	8002218 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021de:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <HAL_ADC_Init+0x508>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80021ee:	0411      	lsls	r1, r2, #16
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021f4:	4311      	orrs	r1, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80021fa:	4311      	orrs	r1, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002200:	4311      	orrs	r1, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002206:	0892      	lsrs	r2, r2, #2
 8002208:	430a      	orrs	r2, r1
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	611a      	str	r2, [r3, #16]
 8002216:	e007      	b.n	8002228 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10c      	bne.n	8002260 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	f023 010f 	bic.w	r1, r3, #15
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	631a      	str	r2, [r3, #48]	; 0x30
 800225e:	e007      	b.n	8002270 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 020f 	bic.w	r2, r2, #15
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002274:	f023 0303 	bic.w	r3, r3, #3
 8002278:	f043 0201 	orr.w	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002280:	e0b2      	b.n	80023e8 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800228a:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8002290:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8002296:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	4313      	orrs	r3, r2
 800229c:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d103      	bne.n	80022b0 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_ADC_Init+0x50c>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	69f9      	ldr	r1, [r7, #28]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022cc:	461a      	mov	r2, r3
 80022ce:	2100      	movs	r1, #0
 80022d0:	f7ff fcf2 	bl	8001cb8 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022dc:	461a      	mov	r2, r3
 80022de:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 80022e2:	f7ff fce9 	bl	8001cb8 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d112      	bne.n	8002314 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f062 020f 	orn	r2, r2, #15
 80022fc:	629a      	str	r2, [r3, #40]	; 0x28
 80022fe:	e044      	b.n	800238a <HAL_ADC_Init+0x586>
 8002300:	46021000 	.word	0x46021000
 8002304:	fff0c013 	.word	0xfff0c013
 8002308:	42028000 	.word	0x42028000
 800230c:	fc00f81e 	.word	0xfc00f81e
 8002310:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800231c:	d135      	bne.n	800238a <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	e00d      	b.n	8002340 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	2b0f      	cmp	r3, #15
 8002338:	d006      	beq.n	8002348 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	3301      	adds	r3, #1
 800233e:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2b07      	cmp	r3, #7
 8002344:	d9ee      	bls.n	8002324 <HAL_ADC_Init+0x520>
 8002346:	e000      	b.n	800234a <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8002348:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d108      	bne.n	8002362 <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f062 020f 	orn	r2, r2, #15
 800235e:	629a      	str	r2, [r3, #40]	; 0x28
 8002360:	e013      	b.n	800238a <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	3b01      	subs	r3, #1
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	f003 031c 	and.w	r3, r3, #28
 8002374:	f06f 020f 	mvn.w	r2, #15
 8002378:	fa02 f103 	lsl.w	r1, r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_ADC_Init+0x5f0>)
 8002392:	4013      	ands	r3, r2
 8002394:	6a3a      	ldr	r2, [r7, #32]
 8002396:	429a      	cmp	r2, r3
 8002398:	d10b      	bne.n	80023b2 <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023a4:	f023 0303 	bic.w	r3, r3, #3
 80023a8:	f043 0201 	orr.w	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023b0:	e01a      	b.n	80023e8 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023b6:	f023 0312 	bic.w	r3, r3, #18
 80023ba:	f043 0210 	orr.w	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023d4:	e008      	b.n	80023e8 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023da:	f043 0210 	orr.w	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 80023e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3728      	adds	r7, #40	; 0x28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	833ffff3 	.word	0x833ffff3

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	2b00      	cmp	r3, #0
 800246c:	db0b      	blt.n	8002486 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	4907      	ldr	r1, [pc, #28]	; (8002494 <__NVIC_EnableIRQ+0x38>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2001      	movs	r0, #1
 800247e:	fa00 f202 	lsl.w	r2, r0, r2
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000e100 	.word	0xe000e100

08002498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	db0a      	blt.n	80024c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	490c      	ldr	r1, [pc, #48]	; (80024e4 <__NVIC_SetPriority+0x4c>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	0112      	lsls	r2, r2, #4
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	440b      	add	r3, r1
 80024bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c0:	e00a      	b.n	80024d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4908      	ldr	r1, [pc, #32]	; (80024e8 <__NVIC_SetPriority+0x50>)
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	3b04      	subs	r3, #4
 80024d0:	0112      	lsls	r2, r2, #4
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	440b      	add	r3, r1
 80024d6:	761a      	strb	r2, [r3, #24]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000e100 	.word	0xe000e100
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f1c3 0307 	rsb	r3, r3, #7
 8002506:	2b04      	cmp	r3, #4
 8002508:	bf28      	it	cs
 800250a:	2304      	movcs	r3, #4
 800250c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3304      	adds	r3, #4
 8002512:	2b06      	cmp	r3, #6
 8002514:	d902      	bls.n	800251c <NVIC_EncodePriority+0x30>
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3b03      	subs	r3, #3
 800251a:	e000      	b.n	800251e <NVIC_EncodePriority+0x32>
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	f04f 32ff 	mov.w	r2, #4294967295
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	401a      	ands	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002534:	f04f 31ff 	mov.w	r1, #4294967295
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	43d9      	mvns	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	4313      	orrs	r3, r2
         );
}
 8002546:	4618      	mov	r0, r3
 8002548:	3724      	adds	r7, #36	; 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002564:	d301      	bcc.n	800256a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002566:	2301      	movs	r3, #1
 8002568:	e00f      	b.n	800258a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <SysTick_Config+0x40>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002572:	210f      	movs	r1, #15
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f7ff ff8e 	bl	8002498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <SysTick_Config+0x40>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <SysTick_Config+0x40>)
 8002584:	2207      	movs	r2, #7
 8002586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000e010 	.word	0xe000e010

08002598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff29 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025bc:	f7ff ff40 	bl	8002440 <__NVIC_GetPriorityGrouping>
 80025c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff ff90 	bl	80024ec <NVIC_EncodePriority>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff5f 	bl	8002498 <__NVIC_SetPriority>
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff33 	bl	800245c <__NVIC_EnableIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffa4 	bl	8002554 <SysTick_Config>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800262a:	e1ba      	b.n	80029a2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	2101      	movs	r1, #1
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	4013      	ands	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 81aa 	beq.w	800299c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a55      	ldr	r2, [pc, #340]	; (80027a0 <HAL_GPIO_Init+0x188>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d15d      	bne.n	800270c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002656:	2201      	movs	r2, #1
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	4013      	ands	r3, r2
 8002664:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0201 	and.w	r2, r3, #1
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	4313      	orrs	r3, r2
 8002678:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002680:	4a48      	ldr	r2, [pc, #288]	; (80027a4 <HAL_GPIO_Init+0x18c>)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002688:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800268a:	4a46      	ldr	r2, [pc, #280]	; (80027a4 <HAL_GPIO_Init+0x18c>)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	08da      	lsrs	r2, r3, #3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	3208      	adds	r2, #8
 800269e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	220f      	movs	r2, #15
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	220b      	movs	r2, #11
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	08da      	lsrs	r2, r3, #3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	3208      	adds	r2, #8
 80026d6:	69f9      	ldr	r1, [r7, #28]
 80026d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2202      	movs	r2, #2
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	4313      	orrs	r3, r2
 8002702:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e067      	b.n	80027dc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x104>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b12      	cmp	r3, #18
 800271a:	d145      	bne.n	80027a8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	08da      	lsrs	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3208      	adds	r2, #8
 8002724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002728:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	220f      	movs	r2, #15
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	4013      	ands	r3, r2
 800273e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f003 020f 	and.w	r2, r3, #15
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	4313      	orrs	r3, r2
 8002758:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	08da      	lsrs	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3208      	adds	r2, #8
 8002762:	69f9      	ldr	r1, [r7, #28]
 8002764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	4013      	ands	r3, r2
 800277e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0203 	and.w	r2, r3, #3
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	4313      	orrs	r3, r2
 8002794:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e01e      	b.n	80027dc <HAL_GPIO_Init+0x1c4>
 800279e:	bf00      	nop
 80027a0:	46020000 	.word	0x46020000
 80027a4:	0800978c 	.word	0x0800978c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	4013      	ands	r3, r2
 80027be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d00b      	beq.n	80027fc <HAL_GPIO_Init+0x1e4>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d007      	beq.n	80027fc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027f0:	2b11      	cmp	r3, #17
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b12      	cmp	r3, #18
 80027fa:	d130      	bne.n	800285e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	2203      	movs	r2, #3
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	4013      	ands	r3, r2
 8002812:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	4313      	orrs	r3, r2
 8002824:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002832:	2201      	movs	r2, #1
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	4013      	ands	r3, r2
 8002840:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	f003 0201 	and.w	r2, r3, #1
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	4313      	orrs	r3, r2
 8002856:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d017      	beq.n	8002896 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	2203      	movs	r2, #3
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	4013      	ands	r3, r2
 800287c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	4313      	orrs	r3, r2
 800288e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d07c      	beq.n	800299c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80028a2:	4a47      	ldr	r2, [pc, #284]	; (80029c0 <HAL_GPIO_Init+0x3a8>)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	3318      	adds	r3, #24
 80028aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	220f      	movs	r2, #15
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0a9a      	lsrs	r2, r3, #10
 80028ca:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <HAL_GPIO_Init+0x3ac>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	f002 0203 	and.w	r2, r2, #3
 80028d4:	00d2      	lsls	r2, r2, #3
 80028d6:	4093      	lsls	r3, r2
 80028d8:	69fa      	ldr	r2, [r7, #28]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80028de:	4938      	ldr	r1, [pc, #224]	; (80029c0 <HAL_GPIO_Init+0x3a8>)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3318      	adds	r3, #24
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80028ec:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <HAL_GPIO_Init+0x3a8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002910:	4a2b      	ldr	r2, [pc, #172]	; (80029c0 <HAL_GPIO_Init+0x3a8>)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002916:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <HAL_GPIO_Init+0x3a8>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	43db      	mvns	r3, r3
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	4013      	ands	r3, r2
 8002924:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800293a:	4a21      	ldr	r2, [pc, #132]	; (80029c0 <HAL_GPIO_Init+0x3a8>)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002940:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <HAL_GPIO_Init+0x3a8>)
 8002942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002946:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	43db      	mvns	r3, r3
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	4013      	ands	r3, r2
 8002950:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002966:	4a16      	ldr	r2, [pc, #88]	; (80029c0 <HAL_GPIO_Init+0x3a8>)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <HAL_GPIO_Init+0x3a8>)
 8002970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002974:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43db      	mvns	r3, r3
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	4013      	ands	r3, r2
 800297e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002994:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_GPIO_Init+0x3a8>)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3301      	adds	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f47f ae3d 	bne.w	800262c <HAL_GPIO_Init+0x14>
  }
}
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
 80029b6:	3724      	adds	r7, #36	; 0x24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	46022000 	.word	0x46022000
 80029c4:	002f7f7f 	.word	0x002f7f7f

080029c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
 80029d4:	4613      	mov	r3, r2
 80029d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029d8:	787b      	ldrb	r3, [r7, #1]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80029e4:	e002      	b.n	80029ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fa:	b08f      	sub	sp, #60	; 0x3c
 80029fc:	af0a      	add	r7, sp, #40	; 0x28
 80029fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e116      	b.n	8002c38 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d106      	bne.n	8002a2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7fe fee7 	bl	80017f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f006 f935 	bl	8008cb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	687e      	ldr	r6, [r7, #4]
 8002a56:	466d      	mov	r5, sp
 8002a58:	f106 0410 	add.w	r4, r6, #16
 8002a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a68:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a6c:	1d33      	adds	r3, r6, #4
 8002a6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a70:	6838      	ldr	r0, [r7, #0]
 8002a72:	f006 f852 	bl	8008b1a <USB_CoreInit>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0d7      	b.n	8002c38 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f006 f923 	bl	8008cda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	e04a      	b.n	8002b30 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	333d      	adds	r3, #61	; 0x3d
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	333c      	adds	r3, #60	; 0x3c
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	b298      	uxth	r0, r3
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3344      	adds	r3, #68	; 0x44
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3340      	adds	r3, #64	; 0x40
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	3348      	adds	r3, #72	; 0x48
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	334c      	adds	r3, #76	; 0x4c
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	3354      	adds	r3, #84	; 0x54
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	7bfa      	ldrb	r2, [r7, #15]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d3af      	bcc.n	8002a9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]
 8002b3e:	e044      	b.n	8002bca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3b5      	bcc.n	8002b40 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	687e      	ldr	r6, [r7, #4]
 8002bdc:	466d      	mov	r5, sp
 8002bde:	f106 0410 	add.w	r4, r6, #16
 8002be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bee:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bf2:	1d33      	adds	r3, r6, #4
 8002bf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bf6:	6838      	ldr	r0, [r7, #0]
 8002bf8:	f006 f8bc 	bl	8008d74 <USB_DevInit>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e014      	b.n	8002c38 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d102      	bne.n	8002c2c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 ff38 	bl	8003a9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f006 fbcf 	bl	80093d4 <USB_DevDisconnect>

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c40 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b08d      	sub	sp, #52	; 0x34
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f006 fc70 	bl	800953c <USB_GetMode>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f040 84b7 	bne.w	80035d2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f006 fbd4 	bl	8009416 <USB_ReadInterrupts>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 84ad 	beq.w	80035d0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f006 fbc1 	bl	8009416 <USB_ReadInterrupts>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d107      	bne.n	8002cae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f002 0202 	and.w	r2, r2, #2
 8002cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f006 fbaf 	bl	8009416 <USB_ReadInterrupts>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b10      	cmp	r3, #16
 8002cc0:	d161      	bne.n	8002d86 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0210 	bic.w	r2, r2, #16
 8002cd0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f003 020f 	and.w	r2, r3, #15
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	3304      	adds	r3, #4
 8002cf0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	0c5b      	lsrs	r3, r3, #17
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d124      	bne.n	8002d48 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d035      	beq.n	8002d76 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6a38      	ldr	r0, [r7, #32]
 8002d1e:	f006 fb01 	bl	8009324 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d2e:	441a      	add	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	6a1a      	ldr	r2, [r3, #32]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	091b      	lsrs	r3, r3, #4
 8002d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d40:	441a      	add	r2, r3
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	621a      	str	r2, [r3, #32]
 8002d46:	e016      	b.n	8002d76 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	0c5b      	lsrs	r3, r3, #17
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	2b06      	cmp	r3, #6
 8002d52:	d110      	bne.n	8002d76 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d5a:	2208      	movs	r2, #8
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6a38      	ldr	r0, [r7, #32]
 8002d60:	f006 fae0 	bl	8009324 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	6a1a      	ldr	r2, [r3, #32]
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	091b      	lsrs	r3, r3, #4
 8002d6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d70:	441a      	add	r2, r3
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699a      	ldr	r2, [r3, #24]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0210 	orr.w	r2, r2, #16
 8002d84:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f006 fb43 	bl	8009416 <USB_ReadInterrupts>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d9a:	f040 80a7 	bne.w	8002eec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f006 fb48 	bl	800943c <USB_ReadDevAllOutEpInterrupt>
 8002dac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002dae:	e099      	b.n	8002ee4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 808e 	beq.w	8002ed8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f006 fb6c 	bl	80094a4 <USB_ReadDevOutEPInterrupt>
 8002dcc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00c      	beq.n	8002df2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de4:	461a      	mov	r2, r3
 8002de6:	2301      	movs	r3, #1
 8002de8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002dea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fd27 	bl	8003840 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00c      	beq.n	8002e16 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fdfd 	bl	8003a10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2310      	movs	r3, #16
 8002e30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d030      	beq.n	8002e9e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e44:	2b80      	cmp	r3, #128	; 0x80
 8002e46:	d109      	bne.n	8002e5c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e5a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3304      	adds	r3, #4
 8002e70:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	78db      	ldrb	r3, [r3, #3]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d108      	bne.n	8002e8c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fbf0 	bl	800366c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2320      	movs	r3, #32
 8002eb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d009      	beq.n	8002ed8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ed6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	3301      	adds	r3, #1
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	085b      	lsrs	r3, r3, #1
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f47f af62 	bne.w	8002db0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f006 fa90 	bl	8009416 <USB_ReadInterrupts>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f00:	f040 80db 	bne.w	80030ba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f006 fab1 	bl	8009470 <USB_ReadDevAllInEpInterrupt>
 8002f0e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f14:	e0cd      	b.n	80030b2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80c2 	beq.w	80030a6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f006 fad7 	bl	80094e0 <USB_ReadDevInEPInterrupt>
 8002f32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d057      	beq.n	8002fee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	2201      	movs	r2, #1
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69f9      	ldr	r1, [r7, #28]
 8002f5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f5e:	4013      	ands	r3, r2
 8002f60:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2301      	movs	r3, #1
 8002f72:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d132      	bne.n	8002fe2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	334c      	adds	r3, #76	; 0x4c
 8002f8c:	6819      	ldr	r1, [r3, #0]
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4403      	add	r3, r0
 8002f9c:	3348      	adds	r3, #72	; 0x48
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4419      	add	r1, r3
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4403      	add	r3, r0
 8002fb0:	334c      	adds	r3, #76	; 0x4c
 8002fb2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d113      	bne.n	8002fe2 <HAL_PCD_IRQHandler+0x3a2>
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3354      	adds	r3, #84	; 0x54
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d108      	bne.n	8002fe2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2101      	movs	r1, #1
 8002fde:	f006 fadf 	bl	80095a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fb01 	bl	80035f0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003004:	461a      	mov	r2, r3
 8003006:	2308      	movs	r3, #8
 8003008:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003020:	461a      	mov	r2, r3
 8003022:	2310      	movs	r3, #16
 8003024:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303c:	461a      	mov	r2, r3
 800303e:	2340      	movs	r3, #64	; 0x40
 8003040:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d023      	beq.n	8003094 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800304c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800304e:	6a38      	ldr	r0, [r7, #32]
 8003050:	f005 ffde 	bl	8009010 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	3338      	adds	r3, #56	; 0x38
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	3304      	adds	r3, #4
 8003066:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	78db      	ldrb	r3, [r3, #3]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d108      	bne.n	8003082 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2200      	movs	r2, #0
 8003074:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	b2db      	uxtb	r3, r3
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fb01 	bl	8003684 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	4413      	add	r3, r2
 800308a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800308e:	461a      	mov	r2, r3
 8003090:	2302      	movs	r3, #2
 8003092:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800309e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fb40 	bl	8003726 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	3301      	adds	r3, #1
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f47f af2e 	bne.w	8002f16 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f006 f9a9 	bl	8009416 <USB_ReadInterrupts>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030ce:	d122      	bne.n	8003116 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	69fa      	ldr	r2, [r7, #28]
 80030da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d108      	bne.n	8003100 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030f6:	2100      	movs	r1, #0
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fcf3 	bl	8003ae4 <HAL_PCDEx_LPM_Callback>
 80030fe:	e002      	b.n	8003106 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 faa9 	bl	8003658 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003114:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f006 f97b 	bl	8009416 <USB_ReadInterrupts>
 8003120:	4603      	mov	r3, r0
 8003122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312a:	d112      	bne.n	8003152 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d102      	bne.n	8003142 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fa81 	bl	8003644 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003150:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f006 f95d 	bl	8009416 <USB_ReadInterrupts>
 800315c:	4603      	mov	r3, r0
 800315e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003162:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003166:	d121      	bne.n	80031ac <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003176:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d111      	bne.n	80031a6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	089b      	lsrs	r3, r3, #2
 8003192:	f003 020f 	and.w	r2, r3, #15
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800319c:	2101      	movs	r1, #1
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fca0 	bl	8003ae4 <HAL_PCDEx_LPM_Callback>
 80031a4:	e002      	b.n	80031ac <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fa4c 	bl	8003644 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f006 f930 	bl	8009416 <USB_ReadInterrupts>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c0:	f040 80b7 	bne.w	8003332 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2110      	movs	r1, #16
 80031de:	4618      	mov	r0, r3
 80031e0:	f005 ff16 	bl	8009010 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e4:	2300      	movs	r3, #0
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e8:	e046      	b.n	8003278 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f6:	461a      	mov	r2, r3
 80031f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031fc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800320e:	0151      	lsls	r1, r2, #5
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	440a      	add	r2, r1
 8003214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003218:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800321c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322a:	461a      	mov	r2, r3
 800322c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003230:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003242:	0151      	lsls	r1, r2, #5
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	440a      	add	r2, r1
 8003248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800324c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003250:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003262:	0151      	lsls	r1, r2, #5
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	440a      	add	r2, r1
 8003268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800326c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003270:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003274:	3301      	adds	r3, #1
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800327e:	429a      	cmp	r2, r3
 8003280:	d3b3      	bcc.n	80031ea <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003290:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003294:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ae:	f043 030b 	orr.w	r3, r3, #11
 80032b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c4:	f043 030b 	orr.w	r3, r3, #11
 80032c8:	6453      	str	r3, [r2, #68]	; 0x44
 80032ca:	e015      	b.n	80032f8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032de:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f2:	f043 030b 	orr.w	r3, r3, #11
 80032f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003306:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800330a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800331c:	461a      	mov	r2, r3
 800331e:	f006 f93f 	bl	80095a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f006 f86d 	bl	8009416 <USB_ReadInterrupts>
 800333c:	4603      	mov	r3, r0
 800333e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003346:	d124      	bne.n	8003392 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f006 f903 	bl	8009558 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f005 fed7 	bl	800910a <USB_GetDevSpeed>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681c      	ldr	r4, [r3, #0]
 8003368:	f001 fe8a 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 800336c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	4620      	mov	r0, r4
 8003378:	f005 fbfc 	bl	8008b74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f957 	bl	8003630 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003390:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f006 f83d 	bl	8009416 <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d10a      	bne.n	80033bc <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f938 	bl	800361c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f002 0208 	and.w	r2, r2, #8
 80033ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f006 f828 	bl	8009416 <USB_ReadInterrupts>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033cc:	2b80      	cmp	r3, #128	; 0x80
 80033ce:	d122      	bne.n	8003416 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033dc:	2301      	movs	r3, #1
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
 80033e0:	e014      	b.n	800340c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d105      	bne.n	8003406 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	4619      	mov	r1, r3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f95f 	bl	80036c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	3301      	adds	r3, #1
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003412:	429a      	cmp	r2, r3
 8003414:	d3e5      	bcc.n	80033e2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f005 fffb 	bl	8009416 <USB_ReadInterrupts>
 8003420:	4603      	mov	r3, r0
 8003422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800342a:	d13b      	bne.n	80034a4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800342c:	2301      	movs	r3, #1
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
 8003430:	e02b      	b.n	800348a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	3340      	adds	r3, #64	; 0x40
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d115      	bne.n	8003484 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003458:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800345a:	2b00      	cmp	r3, #0
 800345c:	da12      	bge.n	8003484 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003462:	4613      	mov	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	333f      	adds	r3, #63	; 0x3f
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800347a:	b2db      	uxtb	r3, r3
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f920 	bl	80036c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	3301      	adds	r3, #1
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003490:	429a      	cmp	r2, r3
 8003492:	d3ce      	bcc.n	8003432 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f005 ffb4 	bl	8009416 <USB_ReadInterrupts>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b8:	d155      	bne.n	8003566 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034ba:	2301      	movs	r3, #1
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
 80034be:	e045      	b.n	800354c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d12e      	bne.n	8003546 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	da2b      	bge.n	8003546 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80034fa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034fe:	429a      	cmp	r2, r3
 8003500:	d121      	bne.n	8003546 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800353e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003542:	6053      	str	r3, [r2, #4]
            break;
 8003544:	e007      	b.n	8003556 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	3301      	adds	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003552:	429a      	cmp	r2, r3
 8003554:	d3b4      	bcc.n	80034c0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f005 ff53 	bl	8009416 <USB_ReadInterrupts>
 8003570:	4603      	mov	r3, r0
 8003572:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357a:	d10a      	bne.n	8003592 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f88d 	bl	800369c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f005 ff3d 	bl	8009416 <USB_ReadInterrupts>
 800359c:	4603      	mov	r3, r0
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d115      	bne.n	80035d2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f879 	bl	80036b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6859      	ldr	r1, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	e000      	b.n	80035d2 <HAL_PCD_IRQHandler+0x992>
      return;
 80035d0:	bf00      	nop
    }
  }
}
 80035d2:	3734      	adds	r7, #52	; 0x34
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd90      	pop	{r4, r7, pc}

080035d8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	da0c      	bge.n	80036f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	f003 020f 	and.w	r2, r3, #15
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	3338      	adds	r3, #56	; 0x38
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	3304      	adds	r3, #4
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e00c      	b.n	800370c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f003 020f 	and.w	r2, r3, #15
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	3304      	adds	r3, #4
 800370a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68f9      	ldr	r1, [r7, #12]
 8003712:	4618      	mov	r0, r3
 8003714:	f005 fd1e 	bl	8009154 <USB_EPStopXfer>
 8003718:	4603      	mov	r3, r0
 800371a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800371c:	7afb      	ldrb	r3, [r7, #11]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b08a      	sub	sp, #40	; 0x28
 800372a:	af02      	add	r7, sp, #8
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	3338      	adds	r3, #56	; 0x38
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	3304      	adds	r3, #4
 800374c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a1a      	ldr	r2, [r3, #32]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	429a      	cmp	r2, r3
 8003758:	d901      	bls.n	800375e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e06c      	b.n	8003838 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	429a      	cmp	r2, r3
 8003772:	d902      	bls.n	800377a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3303      	adds	r3, #3
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003782:	e02b      	b.n	80037dc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	699a      	ldr	r2, [r3, #24]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	69fa      	ldr	r2, [r7, #28]
 8003796:	429a      	cmp	r2, r3
 8003798:	d902      	bls.n	80037a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	3303      	adds	r3, #3
 80037a4:	089b      	lsrs	r3, r3, #2
 80037a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6919      	ldr	r1, [r3, #16]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	4603      	mov	r3, r0
 80037be:	6978      	ldr	r0, [r7, #20]
 80037c0:	f005 fd72 	bl	80092a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	441a      	add	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a1a      	ldr	r2, [r3, #32]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	441a      	add	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d809      	bhi.n	8003806 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a1a      	ldr	r2, [r3, #32]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d203      	bcs.n	8003806 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1be      	bne.n	8003784 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	429a      	cmp	r2, r3
 8003810:	d811      	bhi.n	8003836 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	2201      	movs	r2, #1
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	43db      	mvns	r3, r3
 800382c:	6939      	ldr	r1, [r7, #16]
 800382e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003832:	4013      	ands	r3, r2
 8003834:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	333c      	adds	r3, #60	; 0x3c
 8003858:	3304      	adds	r3, #4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d17b      	bne.n	800396e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d015      	beq.n	80038ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	4a61      	ldr	r2, [pc, #388]	; (8003a08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	f240 80b9 	bls.w	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80b3 	beq.w	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a2:	461a      	mov	r2, r3
 80038a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038a8:	6093      	str	r3, [r2, #8]
 80038aa:	e0a7      	b.n	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c2:	461a      	mov	r2, r3
 80038c4:	2320      	movs	r3, #32
 80038c6:	6093      	str	r3, [r2, #8]
 80038c8:	e098      	b.n	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f040 8093 	bne.w	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	4a4b      	ldr	r2, [pc, #300]	; (8003a08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d90f      	bls.n	80038fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f4:	461a      	mov	r2, r3
 80038f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fa:	6093      	str	r3, [r2, #8]
 80038fc:	e07e      	b.n	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	3304      	adds	r3, #4
 8003912:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	69da      	ldr	r2, [r3, #28]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	0159      	lsls	r1, r3, #5
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	440b      	add	r3, r1
 8003920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800392a:	1ad2      	subs	r2, r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d114      	bne.n	8003960 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003948:	461a      	mov	r2, r3
 800394a:	2101      	movs	r1, #1
 800394c:	f005 fe28 	bl	80095a0 <USB_EP0_OutStart>
 8003950:	e006      	b.n	8003960 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	441a      	add	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff fe36 	bl	80035d8 <HAL_PCD_DataOutStageCallback>
 800396c:	e046      	b.n	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	4a26      	ldr	r2, [pc, #152]	; (8003a0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d124      	bne.n	80039c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398c:	461a      	mov	r2, r3
 800398e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003992:	6093      	str	r3, [r2, #8]
 8003994:	e032      	b.n	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ac:	461a      	mov	r2, r3
 80039ae:	2320      	movs	r3, #32
 80039b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	4619      	mov	r1, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff fe0d 	bl	80035d8 <HAL_PCD_DataOutStageCallback>
 80039be:	e01d      	b.n	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d114      	bne.n	80039f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d108      	bne.n	80039f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039e8:	461a      	mov	r2, r3
 80039ea:	2100      	movs	r1, #0
 80039ec:	f005 fdd8 	bl	80095a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff fdee 	bl	80035d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	4f54300a 	.word	0x4f54300a
 8003a0c:	4f54310a 	.word	0x4f54310a

08003a10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	333c      	adds	r3, #60	; 0x3c
 8003a28:	3304      	adds	r3, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d90e      	bls.n	8003a64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d009      	beq.n	8003a64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff fdcf 	bl	8003608 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d90c      	bls.n	8003a8c <PCD_EP_OutSetupPacket_int+0x7c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d108      	bne.n	8003a8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a84:	461a      	mov	r2, r3
 8003a86:	2101      	movs	r1, #1
 8003a88:	f005 fd8a 	bl	80095a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	4f54300a 	.word	0x4f54300a

08003a9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ace:	f043 0303 	orr.w	r3, r3, #3
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003b04:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b0c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d101      	bne.n	8003b1a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e057      	b.n	8003bca <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b20:	d90a      	bls.n	8003b38 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003b22:	4b2d      	ldr	r3, [pc, #180]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b34:	60d3      	str	r3, [r2, #12]
 8003b36:	e007      	b.n	8003b48 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003b38:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b40:	4925      	ldr	r1, [pc, #148]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003b48:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	099b      	lsrs	r3, r3, #6
 8003b54:	2232      	movs	r2, #50	; 0x32
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	4a21      	ldr	r2, [pc, #132]	; (8003be0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	3301      	adds	r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003b66:	e002      	b.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003b6e:	4b1a      	ldr	r3, [pc, #104]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d102      	bne.n	8003b80 <HAL_PWREx_ControlVoltageScaling+0x84>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f3      	bne.n	8003b68 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01b      	beq.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	099b      	lsrs	r3, r3, #6
 8003b92:	2232      	movs	r2, #50	; 0x32
 8003b94:	fb02 f303 	mul.w	r3, r2, r3
 8003b98:	4a11      	ldr	r2, [pc, #68]	; (8003be0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	099b      	lsrs	r3, r3, #6
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003ba4:	e002      	b.n	8003bac <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0xc2>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f3      	bne.n	8003ba6 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e000      	b.n	8003bca <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	46020800 	.word	0x46020800
 8003bdc:	20000004 	.word	0x20000004
 8003be0:	10624dd3 	.word	0x10624dd3

08003be4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <HAL_PWREx_GetVoltageRange+0x18>)
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	46020800 	.word	0x46020800

08003c00 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003c08:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <HAL_PWREx_ConfigSupply+0x94>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a22      	ldr	r2, [pc, #136]	; (8003c98 <HAL_PWREx_ConfigSupply+0x98>)
 8003c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c12:	099b      	lsrs	r3, r3, #6
 8003c14:	2232      	movs	r2, #50	; 0x32
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <HAL_PWREx_ConfigSupply+0x98>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	099b      	lsrs	r3, r3, #6
 8003c22:	3301      	adds	r3, #1
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d113      	bne.n	8003c54 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <HAL_PWREx_ConfigSupply+0x9c>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <HAL_PWREx_ConfigSupply+0x9c>)
 8003c32:	f023 0302 	bic.w	r3, r3, #2
 8003c36:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003c38:	e002      	b.n	8003c40 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003c40:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <HAL_PWREx_ConfigSupply+0x9c>)
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d116      	bne.n	8003c7a <HAL_PWREx_ConfigSupply+0x7a>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f3      	bne.n	8003c3a <HAL_PWREx_ConfigSupply+0x3a>
 8003c52:	e012      	b.n	8003c7a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <HAL_PWREx_ConfigSupply+0x9c>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4a10      	ldr	r2, [pc, #64]	; (8003c9c <HAL_PWREx_ConfigSupply+0x9c>)
 8003c5a:	f043 0302 	orr.w	r3, r3, #2
 8003c5e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003c60:	e002      	b.n	8003c68 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <HAL_PWREx_ConfigSupply+0x9c>)
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <HAL_PWREx_ConfigSupply+0x7a>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f3      	bne.n	8003c62 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e000      	b.n	8003c86 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000004 	.word	0x20000004
 8003c98:	10624dd3 	.word	0x10624dd3
 8003c9c:	46020800 	.word	0x46020800

08003ca0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <HAL_PWREx_EnableVddUSB+0x1c>)
 8003caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6113      	str	r3, [r2, #16]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	46020800 	.word	0x46020800

08003cc0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_PWREx_EnableVddIO2+0x1c>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <HAL_PWREx_EnableVddIO2+0x1c>)
 8003cca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cce:	6113      	str	r3, [r2, #16]
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	46020800 	.word	0x46020800

08003ce0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08e      	sub	sp, #56	; 0x38
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d102      	bne.n	8003cfa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f000 bec3 	b.w	8004a80 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cfa:	4b9c      	ldr	r3, [pc, #624]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d04:	4b99      	ldr	r3, [pc, #612]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8172 	beq.w	8004000 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <HAL_RCC_OscConfig+0x52>
 8003d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	f040 80e4 	bne.w	8003ef2 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	f040 80e0 	bne.w	8003ef2 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d32:	4b8e      	ldr	r3, [pc, #568]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d006      	beq.n	8003d4c <HAL_RCC_OscConfig+0x6c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f000 be9a 	b.w	8004a80 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d50:	4b86      	ldr	r3, [pc, #536]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d004      	beq.n	8003d66 <HAL_RCC_OscConfig+0x86>
 8003d5c:	4b83      	ldr	r3, [pc, #524]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003d64:	e005      	b.n	8003d72 <HAL_RCC_OscConfig+0x92>
 8003d66:	4b81      	ldr	r3, [pc, #516]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d255      	bcs.n	8003e22 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	4618      	mov	r0, r3
 8003d82:	f001 f9d3 	bl	800512c <RCC_SetFlashLatencyFromMSIRange>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f000 be77 	b.w	8004a80 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003d92:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	4a75      	ldr	r2, [pc, #468]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003d98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d9c:	6093      	str	r3, [r2, #8]
 8003d9e:	4b73      	ldr	r3, [pc, #460]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	4970      	ldr	r1, [pc, #448]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003db8:	d309      	bcc.n	8003dce <HAL_RCC_OscConfig+0xee>
 8003dba:	4b6c      	ldr	r3, [pc, #432]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f023 021f 	bic.w	r2, r3, #31
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	4969      	ldr	r1, [pc, #420]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60cb      	str	r3, [r1, #12]
 8003dcc:	e07e      	b.n	8003ecc <HAL_RCC_OscConfig+0x1ec>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	da0a      	bge.n	8003dec <HAL_RCC_OscConfig+0x10c>
 8003dd6:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	015b      	lsls	r3, r3, #5
 8003de4:	4961      	ldr	r1, [pc, #388]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60cb      	str	r3, [r1, #12]
 8003dea:	e06f      	b.n	8003ecc <HAL_RCC_OscConfig+0x1ec>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df4:	d30a      	bcc.n	8003e0c <HAL_RCC_OscConfig+0x12c>
 8003df6:	4b5d      	ldr	r3, [pc, #372]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	029b      	lsls	r3, r3, #10
 8003e04:	4959      	ldr	r1, [pc, #356]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60cb      	str	r3, [r1, #12]
 8003e0a:	e05f      	b.n	8003ecc <HAL_RCC_OscConfig+0x1ec>
 8003e0c:	4b57      	ldr	r3, [pc, #348]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	03db      	lsls	r3, r3, #15
 8003e1a:	4954      	ldr	r1, [pc, #336]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60cb      	str	r3, [r1, #12]
 8003e20:	e054      	b.n	8003ecc <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003e22:	4b52      	ldr	r3, [pc, #328]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	4a51      	ldr	r2, [pc, #324]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003e28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e2c:	6093      	str	r3, [r2, #8]
 8003e2e:	4b4f      	ldr	r3, [pc, #316]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	494c      	ldr	r1, [pc, #304]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003e48:	d309      	bcc.n	8003e5e <HAL_RCC_OscConfig+0x17e>
 8003e4a:	4b48      	ldr	r3, [pc, #288]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f023 021f 	bic.w	r2, r3, #31
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	4945      	ldr	r1, [pc, #276]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60cb      	str	r3, [r1, #12]
 8003e5c:	e028      	b.n	8003eb0 <HAL_RCC_OscConfig+0x1d0>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	da0a      	bge.n	8003e7c <HAL_RCC_OscConfig+0x19c>
 8003e66:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	015b      	lsls	r3, r3, #5
 8003e74:	493d      	ldr	r1, [pc, #244]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60cb      	str	r3, [r1, #12]
 8003e7a:	e019      	b.n	8003eb0 <HAL_RCC_OscConfig+0x1d0>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e84:	d30a      	bcc.n	8003e9c <HAL_RCC_OscConfig+0x1bc>
 8003e86:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	029b      	lsls	r3, r3, #10
 8003e94:	4935      	ldr	r1, [pc, #212]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60cb      	str	r3, [r1, #12]
 8003e9a:	e009      	b.n	8003eb0 <HAL_RCC_OscConfig+0x1d0>
 8003e9c:	4b33      	ldr	r3, [pc, #204]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	03db      	lsls	r3, r3, #15
 8003eaa:	4930      	ldr	r1, [pc, #192]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 f936 	bl	800512c <RCC_SetFlashLatencyFromMSIRange>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f000 bdda 	b.w	8004a80 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003ecc:	f001 f8d8 	bl	8005080 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ed0:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <HAL_RCC_OscConfig+0x290>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd fe3f 	bl	8001b58 <HAL_InitTick>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 808a 	beq.w	8003ffe <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8003eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003eee:	f000 bdc7 	b.w	8004a80 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d066      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003efa:	4b1c      	ldr	r3, [pc, #112]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1b      	ldr	r2, [pc, #108]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f06:	f7fd fe71 	bl	8001bec <HAL_GetTick>
 8003f0a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003f0c:	e009      	b.n	8003f22 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f0e:	f7fd fe6d 	bl	8001bec <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d902      	bls.n	8003f22 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	f000 bdaf 	b.w	8004a80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003f22:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0ef      	beq.n	8003f0e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003f2e:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4a0e      	ldr	r2, [pc, #56]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003f34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f38:	6093      	str	r3, [r2, #8]
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	4909      	ldr	r1, [pc, #36]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003f54:	d30e      	bcc.n	8003f74 <HAL_RCC_OscConfig+0x294>
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f023 021f 	bic.w	r2, r3, #31
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	4902      	ldr	r1, [pc, #8]	; (8003f6c <HAL_RCC_OscConfig+0x28c>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60cb      	str	r3, [r1, #12]
 8003f68:	e04a      	b.n	8004000 <HAL_RCC_OscConfig+0x320>
 8003f6a:	bf00      	nop
 8003f6c:	46020c00 	.word	0x46020c00
 8003f70:	20000008 	.word	0x20000008
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	da0a      	bge.n	8003f92 <HAL_RCC_OscConfig+0x2b2>
 8003f7c:	4b9b      	ldr	r3, [pc, #620]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	015b      	lsls	r3, r3, #5
 8003f8a:	4998      	ldr	r1, [pc, #608]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60cb      	str	r3, [r1, #12]
 8003f90:	e036      	b.n	8004000 <HAL_RCC_OscConfig+0x320>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9a:	d30a      	bcc.n	8003fb2 <HAL_RCC_OscConfig+0x2d2>
 8003f9c:	4b93      	ldr	r3, [pc, #588]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	029b      	lsls	r3, r3, #10
 8003faa:	4990      	ldr	r1, [pc, #576]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60cb      	str	r3, [r1, #12]
 8003fb0:	e026      	b.n	8004000 <HAL_RCC_OscConfig+0x320>
 8003fb2:	4b8e      	ldr	r3, [pc, #568]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	03db      	lsls	r3, r3, #15
 8003fc0:	498a      	ldr	r1, [pc, #552]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60cb      	str	r3, [r1, #12]
 8003fc6:	e01b      	b.n	8004000 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003fc8:	4b88      	ldr	r3, [pc, #544]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a87      	ldr	r2, [pc, #540]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003fd4:	f7fd fe0a 	bl	8001bec <HAL_GetTick>
 8003fd8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003fda:	e009      	b.n	8003ff0 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fdc:	f7fd fe06 	bl	8001bec <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d902      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	f000 bd48 	b.w	8004a80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003ff0:	4b7e      	ldr	r3, [pc, #504]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ef      	bne.n	8003fdc <HAL_RCC_OscConfig+0x2fc>
 8003ffc:	e000      	b.n	8004000 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ffe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8094 	beq.w	8004136 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	2b08      	cmp	r3, #8
 8004012:	d005      	beq.n	8004020 <HAL_RCC_OscConfig+0x340>
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004016:	2b0c      	cmp	r3, #12
 8004018:	d110      	bne.n	800403c <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401c:	2b03      	cmp	r3, #3
 800401e:	d10d      	bne.n	800403c <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004020:	4b72      	ldr	r3, [pc, #456]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8083 	beq.w	8004134 <HAL_RCC_OscConfig+0x454>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d17e      	bne.n	8004134 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f000 bd22 	b.w	8004a80 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004044:	d106      	bne.n	8004054 <HAL_RCC_OscConfig+0x374>
 8004046:	4b69      	ldr	r3, [pc, #420]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a68      	ldr	r2, [pc, #416]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e041      	b.n	80040d8 <HAL_RCC_OscConfig+0x3f8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800405c:	d112      	bne.n	8004084 <HAL_RCC_OscConfig+0x3a4>
 800405e:	4b63      	ldr	r3, [pc, #396]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a62      	ldr	r2, [pc, #392]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8004064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	4b60      	ldr	r3, [pc, #384]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a5f      	ldr	r2, [pc, #380]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8004070:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	4b5d      	ldr	r3, [pc, #372]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a5c      	ldr	r2, [pc, #368]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e029      	b.n	80040d8 <HAL_RCC_OscConfig+0x3f8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800408c:	d112      	bne.n	80040b4 <HAL_RCC_OscConfig+0x3d4>
 800408e:	4b57      	ldr	r3, [pc, #348]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a56      	ldr	r2, [pc, #344]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8004094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	4b54      	ldr	r3, [pc, #336]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a53      	ldr	r2, [pc, #332]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80040a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b51      	ldr	r3, [pc, #324]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a50      	ldr	r2, [pc, #320]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e011      	b.n	80040d8 <HAL_RCC_OscConfig+0x3f8>
 80040b4:	4b4d      	ldr	r3, [pc, #308]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a4c      	ldr	r2, [pc, #304]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80040ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	4b4a      	ldr	r3, [pc, #296]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a49      	ldr	r2, [pc, #292]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80040c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	4b47      	ldr	r3, [pc, #284]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a46      	ldr	r2, [pc, #280]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80040d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80040d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d014      	beq.n	800410a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 80040e0:	f7fd fd84 	bl	8001bec <HAL_GetTick>
 80040e4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040e6:	e009      	b.n	80040fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e8:	f7fd fd80 	bl	8001bec <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	; 0x64
 80040f4:	d902      	bls.n	80040fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	f000 bcc2 	b.w	8004a80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040fc:	4b3b      	ldr	r3, [pc, #236]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0ef      	beq.n	80040e8 <HAL_RCC_OscConfig+0x408>
 8004108:	e015      	b.n	8004136 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800410a:	f7fd fd6f 	bl	8001bec <HAL_GetTick>
 800410e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004110:	e009      	b.n	8004126 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004112:	f7fd fd6b 	bl	8001bec <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b64      	cmp	r3, #100	; 0x64
 800411e:	d902      	bls.n	8004126 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	f000 bcad 	b.w	8004a80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004126:	4b31      	ldr	r3, [pc, #196]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1ef      	bne.n	8004112 <HAL_RCC_OscConfig+0x432>
 8004132:	e000      	b.n	8004136 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d066      	beq.n	8004210 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	2b04      	cmp	r3, #4
 8004146:	d005      	beq.n	8004154 <HAL_RCC_OscConfig+0x474>
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	2b0c      	cmp	r3, #12
 800414c:	d11a      	bne.n	8004184 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004150:	2b02      	cmp	r3, #2
 8004152:	d117      	bne.n	8004184 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004154:	4b25      	ldr	r3, [pc, #148]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415c:	2b00      	cmp	r3, #0
 800415e:	d006      	beq.n	800416e <HAL_RCC_OscConfig+0x48e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f000 bc89 	b.w	8004a80 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800416e:	4b1f      	ldr	r3, [pc, #124]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	041b      	lsls	r3, r3, #16
 800417c:	491b      	ldr	r1, [pc, #108]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 800417e:	4313      	orrs	r3, r2
 8004180:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004182:	e045      	b.n	8004210 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d024      	beq.n	80041d6 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800418c:	4b17      	ldr	r3, [pc, #92]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a16      	ldr	r2, [pc, #88]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 8004192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004196:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004198:	f7fd fd28 	bl	8001bec <HAL_GetTick>
 800419c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800419e:	e009      	b.n	80041b4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a0:	f7fd fd24 	bl	8001bec <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d902      	bls.n	80041b4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	f000 bc66 	b.w	8004a80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041b4:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0ef      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	041b      	lsls	r3, r3, #16
 80041ce:	4907      	ldr	r1, [pc, #28]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	610b      	str	r3, [r1, #16]
 80041d4:	e01c      	b.n	8004210 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a04      	ldr	r2, [pc, #16]	; (80041ec <HAL_RCC_OscConfig+0x50c>)
 80041dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041e2:	f7fd fd03 	bl	8001bec <HAL_GetTick>
 80041e6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e8:	e00c      	b.n	8004204 <HAL_RCC_OscConfig+0x524>
 80041ea:	bf00      	nop
 80041ec:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f0:	f7fd fcfc 	bl	8001bec <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d902      	bls.n	8004204 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	f000 bc3e 	b.w	8004a80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004204:	4baf      	ldr	r3, [pc, #700]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1ef      	bne.n	80041f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80c7 	beq.w	80043ac <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800421e:	2300      	movs	r3, #0
 8004220:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004224:	4ba7      	ldr	r3, [pc, #668]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 8004226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	d111      	bne.n	8004256 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	4ba4      	ldr	r3, [pc, #656]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004238:	4aa2      	ldr	r2, [pc, #648]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 800423a:	f043 0304 	orr.w	r3, r3, #4
 800423e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004242:	4ba0      	ldr	r3, [pc, #640]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 8004244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004250:	2301      	movs	r3, #1
 8004252:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004256:	4b9c      	ldr	r3, [pc, #624]	; (80044c8 <HAL_RCC_OscConfig+0x7e8>)
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d118      	bne.n	8004294 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004262:	4b99      	ldr	r3, [pc, #612]	; (80044c8 <HAL_RCC_OscConfig+0x7e8>)
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	4a98      	ldr	r2, [pc, #608]	; (80044c8 <HAL_RCC_OscConfig+0x7e8>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426e:	f7fd fcbd 	bl	8001bec <HAL_GetTick>
 8004272:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004276:	f7fd fcb9 	bl	8001bec <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e3fb      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004288:	4b8f      	ldr	r3, [pc, #572]	; (80044c8 <HAL_RCC_OscConfig+0x7e8>)
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d05f      	beq.n	800435c <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800429c:	4b89      	ldr	r3, [pc, #548]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 800429e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042a2:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699a      	ldr	r2, [r3, #24]
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d037      	beq.n	8004322 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d006      	beq.n	80042ca <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e3da      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 80042d4:	4b7b      	ldr	r3, [pc, #492]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 80042d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042da:	4a7a      	ldr	r2, [pc, #488]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 80042dc:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80042e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80042e4:	f7fd fc82 	bl	8001bec <HAL_GetTick>
 80042e8:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ec:	f7fd fc7e 	bl	8001bec <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e3c0      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80042fe:	4b71      	ldr	r3, [pc, #452]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 8004300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1ef      	bne.n	80042ec <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800430c:	4b6d      	ldr	r3, [pc, #436]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 800430e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004312:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	496a      	ldr	r1, [pc, #424]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004322:	4b68      	ldr	r3, [pc, #416]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 8004324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004328:	4a66      	ldr	r2, [pc, #408]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 800432a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800432e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004332:	f7fd fc5b 	bl	8001bec <HAL_GetTick>
 8004336:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800433a:	f7fd fc57 	bl	8001bec <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e399      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800434c:	4b5d      	ldr	r3, [pc, #372]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 800434e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004352:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0ef      	beq.n	800433a <HAL_RCC_OscConfig+0x65a>
 800435a:	e01b      	b.n	8004394 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800435c:	4b59      	ldr	r3, [pc, #356]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 800435e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004362:	4a58      	ldr	r2, [pc, #352]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 8004364:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004368:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800436c:	f7fd fc3e 	bl	8001bec <HAL_GetTick>
 8004370:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004374:	f7fd fc3a 	bl	8001bec <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e37c      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004386:	4b4f      	ldr	r3, [pc, #316]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 8004388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800438c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1ef      	bne.n	8004374 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004394:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004398:	2b01      	cmp	r3, #1
 800439a:	d107      	bne.n	80043ac <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b49      	ldr	r3, [pc, #292]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 800439e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a2:	4a48      	ldr	r2, [pc, #288]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 80043a4:	f023 0304 	bic.w	r3, r3, #4
 80043a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8112 	beq.w	80045de <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c0:	4b40      	ldr	r3, [pc, #256]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 80043c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d111      	bne.n	80043f2 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ce:	4b3d      	ldr	r3, [pc, #244]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 80043d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d4:	4a3b      	ldr	r2, [pc, #236]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 80043d6:	f043 0304 	orr.w	r3, r3, #4
 80043da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80043de:	4b39      	ldr	r3, [pc, #228]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 80043e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80043f2:	4b35      	ldr	r3, [pc, #212]	; (80044c8 <HAL_RCC_OscConfig+0x7e8>)
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d118      	bne.n	8004430 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80043fe:	4b32      	ldr	r3, [pc, #200]	; (80044c8 <HAL_RCC_OscConfig+0x7e8>)
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <HAL_RCC_OscConfig+0x7e8>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440a:	f7fd fbef 	bl	8001bec <HAL_GetTick>
 800440e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004412:	f7fd fbeb 	bl	8001bec <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e32d      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004424:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <HAL_RCC_OscConfig+0x7e8>)
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01f      	beq.n	800447c <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d010      	beq.n	800446a <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004448:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 800444a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800444e:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 8004450:	f043 0304 	orr.w	r3, r3, #4
 8004454:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004458:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 800445a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800445e:	4a19      	ldr	r2, [pc, #100]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004468:	e018      	b.n	800449c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 800446c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004470:	4a14      	ldr	r2, [pc, #80]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800447a:	e00f      	b.n	800449c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800447c:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 800447e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004482:	4a10      	ldr	r2, [pc, #64]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800448c:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 800448e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004492:	4a0c      	ldr	r2, [pc, #48]	; (80044c4 <HAL_RCC_OscConfig+0x7e4>)
 8004494:	f023 0304 	bic.w	r3, r3, #4
 8004498:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d058      	beq.n	8004556 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 80044a4:	f7fd fba2 	bl	8001bec <HAL_GetTick>
 80044a8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044aa:	e00f      	b.n	80044cc <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ac:	f7fd fb9e 	bl	8001bec <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d906      	bls.n	80044cc <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e2de      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
 80044c2:	bf00      	nop
 80044c4:	46020c00 	.word	0x46020c00
 80044c8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044cc:	4b9c      	ldr	r3, [pc, #624]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 80044ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0e8      	beq.n	80044ac <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01b      	beq.n	800451e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80044e6:	4b96      	ldr	r3, [pc, #600]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 80044e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044ec:	4a94      	ldr	r2, [pc, #592]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 80044ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80044f6:	e00a      	b.n	800450e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f8:	f7fd fb78 	bl	8001bec <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	; 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e2b8      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800450e:	4b8c      	ldr	r3, [pc, #560]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 8004510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0ed      	beq.n	80044f8 <HAL_RCC_OscConfig+0x818>
 800451c:	e053      	b.n	80045c6 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800451e:	4b88      	ldr	r3, [pc, #544]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 8004520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004524:	4a86      	ldr	r2, [pc, #536]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 8004526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800452a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800452e:	e00a      	b.n	8004546 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004530:	f7fd fb5c 	bl	8001bec <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	; 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e29c      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004546:	4b7e      	ldr	r3, [pc, #504]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 8004548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800454c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1ed      	bne.n	8004530 <HAL_RCC_OscConfig+0x850>
 8004554:	e037      	b.n	80045c6 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004556:	f7fd fb49 	bl	8001bec <HAL_GetTick>
 800455a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800455c:	e00a      	b.n	8004574 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455e:	f7fd fb45 	bl	8001bec <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	; 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e285      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004574:	4b72      	ldr	r3, [pc, #456]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 8004576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1ed      	bne.n	800455e <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004582:	4b6f      	ldr	r3, [pc, #444]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 8004584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01a      	beq.n	80045c6 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004590:	4b6b      	ldr	r3, [pc, #428]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 8004592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004596:	4a6a      	ldr	r2, [pc, #424]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 8004598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800459c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045a0:	e00a      	b.n	80045b8 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a2:	f7fd fb23 	bl	8001bec <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e263      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045b8:	4b61      	ldr	r3, [pc, #388]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 80045ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1ed      	bne.n	80045a2 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d107      	bne.n	80045de <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ce:	4b5c      	ldr	r3, [pc, #368]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 80045d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d4:	4a5a      	ldr	r2, [pc, #360]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 80045d6:	f023 0304 	bic.w	r3, r3, #4
 80045da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d036      	beq.n	8004658 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d019      	beq.n	8004626 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80045f2:	4b53      	ldr	r3, [pc, #332]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a52      	ldr	r2, [pc, #328]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 80045f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045fc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80045fe:	f7fd faf5 	bl	8001bec <HAL_GetTick>
 8004602:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004606:	f7fd faf1 	bl	8001bec <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e233      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004618:	4b49      	ldr	r3, [pc, #292]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x926>
 8004624:	e018      	b.n	8004658 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004626:	4b46      	ldr	r3, [pc, #280]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a45      	ldr	r2, [pc, #276]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 800462c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004630:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004632:	f7fd fadb 	bl	8001bec <HAL_GetTick>
 8004636:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800463a:	f7fd fad7 	bl	8001bec <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e219      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800464c:	4b3c      	ldr	r3, [pc, #240]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f0      	bne.n	800463a <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004660:	2b00      	cmp	r3, #0
 8004662:	d036      	beq.n	80046d2 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	2b00      	cmp	r3, #0
 800466a:	d019      	beq.n	80046a0 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800466c:	4b34      	ldr	r3, [pc, #208]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a33      	ldr	r2, [pc, #204]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 8004672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004676:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004678:	f7fd fab8 	bl	8001bec <HAL_GetTick>
 800467c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004680:	f7fd fab4 	bl	8001bec <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e1f6      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004692:	4b2b      	ldr	r3, [pc, #172]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x9a0>
 800469e:	e018      	b.n	80046d2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80046a0:	4b27      	ldr	r3, [pc, #156]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a26      	ldr	r2, [pc, #152]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 80046a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80046ac:	f7fd fa9e 	bl	8001bec <HAL_GetTick>
 80046b0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80046b4:	f7fd fa9a 	bl	8001bec <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e1dc      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80046c6:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d07f      	beq.n	80047de <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d062      	beq.n	80047ac <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80046e6:	4b16      	ldr	r3, [pc, #88]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	4a15      	ldr	r2, [pc, #84]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 80046ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046f0:	6093      	str	r3, [r2, #8]
 80046f2:	4b13      	ldr	r3, [pc, #76]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	4910      	ldr	r1, [pc, #64]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 8004700:	4313      	orrs	r3, r2
 8004702:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800470c:	d309      	bcc.n	8004722 <HAL_RCC_OscConfig+0xa42>
 800470e:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f023 021f 	bic.w	r2, r3, #31
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	4909      	ldr	r1, [pc, #36]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 800471c:	4313      	orrs	r3, r2
 800471e:	60cb      	str	r3, [r1, #12]
 8004720:	e02a      	b.n	8004778 <HAL_RCC_OscConfig+0xa98>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	2b00      	cmp	r3, #0
 8004728:	da0c      	bge.n	8004744 <HAL_RCC_OscConfig+0xa64>
 800472a:	4b05      	ldr	r3, [pc, #20]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	015b      	lsls	r3, r3, #5
 8004738:	4901      	ldr	r1, [pc, #4]	; (8004740 <HAL_RCC_OscConfig+0xa60>)
 800473a:	4313      	orrs	r3, r2
 800473c:	60cb      	str	r3, [r1, #12]
 800473e:	e01b      	b.n	8004778 <HAL_RCC_OscConfig+0xa98>
 8004740:	46020c00 	.word	0x46020c00
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474c:	d30a      	bcc.n	8004764 <HAL_RCC_OscConfig+0xa84>
 800474e:	4ba5      	ldr	r3, [pc, #660]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	029b      	lsls	r3, r3, #10
 800475c:	49a1      	ldr	r1, [pc, #644]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 800475e:	4313      	orrs	r3, r2
 8004760:	60cb      	str	r3, [r1, #12]
 8004762:	e009      	b.n	8004778 <HAL_RCC_OscConfig+0xa98>
 8004764:	4b9f      	ldr	r3, [pc, #636]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	03db      	lsls	r3, r3, #15
 8004772:	499c      	ldr	r1, [pc, #624]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004774:	4313      	orrs	r3, r2
 8004776:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004778:	4b9a      	ldr	r3, [pc, #616]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a99      	ldr	r2, [pc, #612]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 800477e:	f043 0310 	orr.w	r3, r3, #16
 8004782:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004784:	f7fd fa32 	bl	8001bec <HAL_GetTick>
 8004788:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800478c:	f7fd fa2e 	bl	8001bec <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e170      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800479e:	4b91      	ldr	r3, [pc, #580]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0xaac>
 80047aa:	e018      	b.n	80047de <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80047ac:	4b8d      	ldr	r3, [pc, #564]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a8c      	ldr	r2, [pc, #560]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80047b2:	f023 0310 	bic.w	r3, r3, #16
 80047b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80047b8:	f7fd fa18 	bl	8001bec <HAL_GetTick>
 80047bc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80047c0:	f7fd fa14 	bl	8001bec <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e156      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80047d2:	4b84      	ldr	r3, [pc, #528]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 814b 	beq.w	8004a7e <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 80047e8:	2300      	movs	r3, #0
 80047ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ee:	4b7d      	ldr	r3, [pc, #500]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b0c      	cmp	r3, #12
 80047f8:	f000 80fa 	beq.w	80049f0 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	2b02      	cmp	r3, #2
 8004802:	f040 80cc 	bne.w	800499e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004806:	4b77      	ldr	r3, [pc, #476]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a76      	ldr	r2, [pc, #472]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 800480c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004810:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004812:	f7fd f9eb 	bl	8001bec <HAL_GetTick>
 8004816:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481a:	f7fd f9e7 	bl	8001bec <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e129      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800482c:	4b6d      	ldr	r3, [pc, #436]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f0      	bne.n	800481a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004838:	4b6a      	ldr	r3, [pc, #424]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 800483a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d111      	bne.n	800486a <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004846:	4b67      	ldr	r3, [pc, #412]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484c:	4a65      	ldr	r2, [pc, #404]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 800484e:	f043 0304 	orr.w	r3, r3, #4
 8004852:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004856:	4b63      	ldr	r3, [pc, #396]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800486a:	4b5f      	ldr	r3, [pc, #380]	; (80049e8 <HAL_RCC_OscConfig+0xd08>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004872:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004876:	d102      	bne.n	800487e <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8004878:	2301      	movs	r3, #1
 800487a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800487e:	4b5a      	ldr	r3, [pc, #360]	; (80049e8 <HAL_RCC_OscConfig+0xd08>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	4a59      	ldr	r2, [pc, #356]	; (80049e8 <HAL_RCC_OscConfig+0xd08>)
 8004884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004888:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800488a:	4b56      	ldr	r3, [pc, #344]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004892:	f023 0303 	bic.w	r3, r3, #3
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800489e:	3a01      	subs	r2, #1
 80048a0:	0212      	lsls	r2, r2, #8
 80048a2:	4311      	orrs	r1, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80048a8:	430a      	orrs	r2, r1
 80048aa:	494e      	ldr	r1, [pc, #312]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	628b      	str	r3, [r1, #40]	; 0x28
 80048b0:	4b4c      	ldr	r3, [pc, #304]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80048b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b4:	4b4d      	ldr	r3, [pc, #308]	; (80049ec <HAL_RCC_OscConfig+0xd0c>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048bc:	3a01      	subs	r2, #1
 80048be:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80048c6:	3a01      	subs	r2, #1
 80048c8:	0252      	lsls	r2, r2, #9
 80048ca:	b292      	uxth	r2, r2
 80048cc:	4311      	orrs	r1, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048d2:	3a01      	subs	r2, #1
 80048d4:	0412      	lsls	r2, r2, #16
 80048d6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80048da:	4311      	orrs	r1, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80048e0:	3a01      	subs	r2, #1
 80048e2:	0612      	lsls	r2, r2, #24
 80048e4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80048e8:	430a      	orrs	r2, r1
 80048ea:	493e      	ldr	r1, [pc, #248]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80048f0:	4b3c      	ldr	r3, [pc, #240]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	4a3b      	ldr	r2, [pc, #236]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80048f6:	f023 0310 	bic.w	r3, r3, #16
 80048fa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80048fc:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004904:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800490c:	00d2      	lsls	r2, r2, #3
 800490e:	4935      	ldr	r1, [pc, #212]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004910:	4313      	orrs	r3, r2
 8004912:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004914:	4b33      	ldr	r3, [pc, #204]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	4a32      	ldr	r2, [pc, #200]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 800491a:	f043 0310 	orr.w	r3, r3, #16
 800491e:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004920:	4b30      	ldr	r3, [pc, #192]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	f023 020c 	bic.w	r2, r3, #12
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492c:	492d      	ldr	r1, [pc, #180]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 800492e:	4313      	orrs	r3, r2
 8004930:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8004932:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004936:	2b01      	cmp	r3, #1
 8004938:	d105      	bne.n	8004946 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800493a:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <HAL_RCC_OscConfig+0xd08>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	4a2a      	ldr	r2, [pc, #168]	; (80049e8 <HAL_RCC_OscConfig+0xd08>)
 8004940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004944:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004946:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800494a:	2b01      	cmp	r3, #1
 800494c:	d107      	bne.n	800495e <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800494e:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004954:	4a23      	ldr	r2, [pc, #140]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004956:	f023 0304 	bic.w	r3, r3, #4
 800495a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800495e:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004968:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800496a:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004970:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004974:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004976:	f7fd f939 	bl	8001bec <HAL_GetTick>
 800497a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497e:	f7fd f935 	bl	8001bec <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e077      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004990:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0xc9e>
 800499c:	e06f      	b.n	8004a7e <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800499e:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a10      	ldr	r2, [pc, #64]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80049a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049a8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80049aa:	f7fd f91f 	bl	8001bec <HAL_GetTick>
 80049ae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b2:	f7fd f91b 	bl	8001bec <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e05d      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80049c4:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	4a03      	ldr	r2, [pc, #12]	; (80049e4 <HAL_RCC_OscConfig+0xd04>)
 80049d6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	6293      	str	r3, [r2, #40]	; 0x28
 80049e0:	e04d      	b.n	8004a7e <HAL_RCC_OscConfig+0xd9e>
 80049e2:	bf00      	nop
 80049e4:	46020c00 	.word	0x46020c00
 80049e8:	46020800 	.word	0x46020800
 80049ec:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80049f0:	4b25      	ldr	r3, [pc, #148]	; (8004a88 <HAL_RCC_OscConfig+0xda8>)
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049f6:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <HAL_RCC_OscConfig+0xda8>)
 80049f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fa:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d03a      	beq.n	8004a7a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f003 0203 	and.w	r2, r3, #3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d133      	bne.n	8004a7a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d12a      	bne.n	8004a7a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	0b1b      	lsrs	r3, r3, #12
 8004a28:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d122      	bne.n	8004a7a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a3e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d11a      	bne.n	8004a7a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	0a5b      	lsrs	r3, r3, #9
 8004a48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a50:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d111      	bne.n	8004a7a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a62:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d108      	bne.n	8004a7a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	0e1b      	lsrs	r3, r3, #24
 8004a6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a74:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d001      	beq.n	8004a7e <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3738      	adds	r7, #56	; 0x38
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	46020c00 	.word	0x46020c00

08004a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e1d9      	b.n	8004e54 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa0:	4b9b      	ldr	r3, [pc, #620]	; (8004d10 <HAL_RCC_ClockConfig+0x284>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d910      	bls.n	8004ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aae:	4b98      	ldr	r3, [pc, #608]	; (8004d10 <HAL_RCC_ClockConfig+0x284>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 020f 	bic.w	r2, r3, #15
 8004ab6:	4996      	ldr	r1, [pc, #600]	; (8004d10 <HAL_RCC_ClockConfig+0x284>)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abe:	4b94      	ldr	r3, [pc, #592]	; (8004d10 <HAL_RCC_ClockConfig+0x284>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e1c1      	b.n	8004e54 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d010      	beq.n	8004afe <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	4b8c      	ldr	r3, [pc, #560]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d908      	bls.n	8004afe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004aec:	4b89      	ldr	r3, [pc, #548]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	4986      	ldr	r1, [pc, #536]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d012      	beq.n	8004b30 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	4b81      	ldr	r3, [pc, #516]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	091b      	lsrs	r3, r3, #4
 8004b14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d909      	bls.n	8004b30 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004b1c:	4b7d      	ldr	r3, [pc, #500]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	497a      	ldr	r1, [pc, #488]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d010      	beq.n	8004b5e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	4b74      	ldr	r3, [pc, #464]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d908      	bls.n	8004b5e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004b4c:	4b71      	ldr	r3, [pc, #452]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	496e      	ldr	r1, [pc, #440]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d010      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	4b69      	ldr	r3, [pc, #420]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d908      	bls.n	8004b8c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004b7a:	4b66      	ldr	r3, [pc, #408]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f023 020f 	bic.w	r2, r3, #15
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	4963      	ldr	r1, [pc, #396]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80d2 	beq.w	8004d3e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d143      	bne.n	8004c2e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ba6:	4b5b      	ldr	r3, [pc, #364]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d110      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004bb4:	4b57      	ldr	r3, [pc, #348]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bba:	4a56      	ldr	r2, [pc, #344]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004bbc:	f043 0304 	orr.w	r3, r3, #4
 8004bc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004bc4:	4b53      	ldr	r3, [pc, #332]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004bd6:	f7fd f809 	bl	8001bec <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004bdc:	4b4e      	ldr	r3, [pc, #312]	; (8004d18 <HAL_RCC_ClockConfig+0x28c>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00f      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004bea:	f7fc ffff 	bl	8001bec <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e12b      	b.n	8004e54 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004bfc:	4b46      	ldr	r3, [pc, #280]	; (8004d18 <HAL_RCC_ClockConfig+0x28c>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d107      	bne.n	8004c1e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004c0e:	4b41      	ldr	r3, [pc, #260]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c14:	4a3f      	ldr	r2, [pc, #252]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004c16:	f023 0304 	bic.w	r3, r3, #4
 8004c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004c1e:	4b3d      	ldr	r3, [pc, #244]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d121      	bne.n	8004c6e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e112      	b.n	8004e54 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d107      	bne.n	8004c46 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c36:	4b37      	ldr	r3, [pc, #220]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d115      	bne.n	8004c6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e106      	b.n	8004e54 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004c4e:	4b31      	ldr	r3, [pc, #196]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e0fa      	b.n	8004e54 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c5e:	4b2d      	ldr	r3, [pc, #180]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e0f2      	b.n	8004e54 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004c6e:	4b29      	ldr	r3, [pc, #164]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f023 0203 	bic.w	r2, r3, #3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4926      	ldr	r1, [pc, #152]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004c80:	f7fc ffb4 	bl	8001bec <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d112      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c90:	f7fc ffac 	bl	8001bec <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e0d6      	b.n	8004e54 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	2b0c      	cmp	r3, #12
 8004cb0:	d1ee      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x204>
 8004cb2:	e044      	b.n	8004d3e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d112      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cbe:	f7fc ff95 	bl	8001bec <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e0bf      	b.n	8004e54 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cd4:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f003 030c 	and.w	r3, r3, #12
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d1ee      	bne.n	8004cbe <HAL_RCC_ClockConfig+0x232>
 8004ce0:	e02d      	b.n	8004d3e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d123      	bne.n	8004d32 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cec:	f7fc ff7e 	bl	8001bec <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e0a8      	b.n	8004e54 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d02:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <HAL_RCC_ClockConfig+0x288>)
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f003 030c 	and.w	r3, r3, #12
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1ee      	bne.n	8004cec <HAL_RCC_ClockConfig+0x260>
 8004d0e:	e016      	b.n	8004d3e <HAL_RCC_ClockConfig+0x2b2>
 8004d10:	40022000 	.word	0x40022000
 8004d14:	46020c00 	.word	0x46020c00
 8004d18:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d1c:	f7fc ff66 	bl	8001bec <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e090      	b.n	8004e54 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d32:	4b4a      	ldr	r3, [pc, #296]	; (8004e5c <HAL_RCC_ClockConfig+0x3d0>)
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d1ee      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d010      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	4b43      	ldr	r3, [pc, #268]	; (8004e5c <HAL_RCC_ClockConfig+0x3d0>)
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d208      	bcs.n	8004d6c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004d5a:	4b40      	ldr	r3, [pc, #256]	; (8004e5c <HAL_RCC_ClockConfig+0x3d0>)
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f023 020f 	bic.w	r2, r3, #15
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	493d      	ldr	r1, [pc, #244]	; (8004e5c <HAL_RCC_ClockConfig+0x3d0>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d6c:	4b3c      	ldr	r3, [pc, #240]	; (8004e60 <HAL_RCC_ClockConfig+0x3d4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d210      	bcs.n	8004d9c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7a:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <HAL_RCC_ClockConfig+0x3d4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f023 020f 	bic.w	r2, r3, #15
 8004d82:	4937      	ldr	r1, [pc, #220]	; (8004e60 <HAL_RCC_ClockConfig+0x3d4>)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8a:	4b35      	ldr	r3, [pc, #212]	; (8004e60 <HAL_RCC_ClockConfig+0x3d4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d001      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e05b      	b.n	8004e54 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d010      	beq.n	8004dca <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	4b2b      	ldr	r3, [pc, #172]	; (8004e5c <HAL_RCC_ClockConfig+0x3d0>)
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d208      	bcs.n	8004dca <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004db8:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <HAL_RCC_ClockConfig+0x3d0>)
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4925      	ldr	r1, [pc, #148]	; (8004e5c <HAL_RCC_ClockConfig+0x3d0>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d012      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <HAL_RCC_ClockConfig+0x3d0>)
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	091b      	lsrs	r3, r3, #4
 8004de0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d209      	bcs.n	8004dfc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004de8:	4b1c      	ldr	r3, [pc, #112]	; (8004e5c <HAL_RCC_ClockConfig+0x3d0>)
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	4919      	ldr	r1, [pc, #100]	; (8004e5c <HAL_RCC_ClockConfig+0x3d0>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d010      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <HAL_RCC_ClockConfig+0x3d0>)
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d208      	bcs.n	8004e2a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004e18:	4b10      	ldr	r3, [pc, #64]	; (8004e5c <HAL_RCC_ClockConfig+0x3d0>)
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	490d      	ldr	r1, [pc, #52]	; (8004e5c <HAL_RCC_ClockConfig+0x3d0>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004e2a:	f000 f821 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <HAL_RCC_ClockConfig+0x3d0>)
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	490a      	ldr	r1, [pc, #40]	; (8004e64 <HAL_RCC_ClockConfig+0x3d8>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e40:	4a09      	ldr	r2, [pc, #36]	; (8004e68 <HAL_RCC_ClockConfig+0x3dc>)
 8004e42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e44:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <HAL_RCC_ClockConfig+0x3e0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fc fe85 	bl	8001b58 <HAL_InitTick>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	73fb      	strb	r3, [r7, #15]

  return status;
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	46020c00 	.word	0x46020c00
 8004e60:	40022000 	.word	0x40022000
 8004e64:	08009734 	.word	0x08009734
 8004e68:	20000004 	.word	0x20000004
 8004e6c:	20000008 	.word	0x20000008

08004e70 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b08b      	sub	sp, #44	; 0x2c
 8004e74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e7e:	4b7b      	ldr	r3, [pc, #492]	; (800506c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e88:	4b78      	ldr	r3, [pc, #480]	; (800506c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b0c      	cmp	r3, #12
 8004e9c:	d121      	bne.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d11e      	bne.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004ea4:	4b71      	ldr	r3, [pc, #452]	; (800506c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004eb0:	4b6e      	ldr	r3, [pc, #440]	; (800506c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004eb6:	0b1b      	lsrs	r3, r3, #12
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ebe:	e005      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004ec0:	4b6a      	ldr	r3, [pc, #424]	; (800506c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	0f1b      	lsrs	r3, r3, #28
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ecc:	4a68      	ldr	r2, [pc, #416]	; (8005070 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d110      	bne.n	8004efe <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ee0:	e00d      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ee2:	4b62      	ldr	r3, [pc, #392]	; (800506c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d102      	bne.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004eee:	4b61      	ldr	r3, [pc, #388]	; (8005074 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ef0:	623b      	str	r3, [r7, #32]
 8004ef2:	e004      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d101      	bne.n	8004efe <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004efa:	4b5e      	ldr	r3, [pc, #376]	; (8005074 <HAL_RCC_GetSysClockFreq+0x204>)
 8004efc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b0c      	cmp	r3, #12
 8004f02:	f040 80ac 	bne.w	800505e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004f06:	4b59      	ldr	r3, [pc, #356]	; (800506c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004f10:	4b56      	ldr	r3, [pc, #344]	; (800506c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004f1e:	4b53      	ldr	r3, [pc, #332]	; (800506c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f2a:	4b50      	ldr	r3, [pc, #320]	; (800506c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	08db      	lsrs	r3, r3, #3
 8004f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f42:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 8086 	beq.w	800505a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d003      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0xec>
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d022      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x130>
 8004f5a:	e043      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f66:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005078 <HAL_RCC_GetSysClockFreq+0x208>
 8004f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6e:	4b3f      	ldr	r3, [pc, #252]	; (800506c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f7e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004f82:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800507c <HAL_RCC_GetSysClockFreq+0x20c>
 8004f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004f9e:	e046      	b.n	800502e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004faa:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005078 <HAL_RCC_GetSysClockFreq+0x208>
 8004fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb2:	4b2e      	ldr	r3, [pc, #184]	; (800506c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004fc2:	ed97 6a01 	vldr	s12, [r7, #4]
 8004fc6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800507c <HAL_RCC_GetSysClockFreq+0x20c>
 8004fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fde:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004fe2:	e024      	b.n	800502e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	ee07 3a90 	vmov	s15, r3
 8004ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	; (800506c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005004:	ee07 3a90 	vmov	s15, r3
 8005008:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800500c:	ed97 6a01 	vldr	s12, [r7, #4]
 8005010:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800507c <HAL_RCC_GetSysClockFreq+0x20c>
 8005014:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005018:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800501c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005020:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005028:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800502c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800502e:	4b0f      	ldr	r3, [pc, #60]	; (800506c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005032:	0e1b      	lsrs	r3, r3, #24
 8005034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005038:	3301      	adds	r3, #1
 800503a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005046:	edd7 6a07 	vldr	s13, [r7, #28]
 800504a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800504e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005052:	ee17 3a90 	vmov	r3, s15
 8005056:	623b      	str	r3, [r7, #32]
 8005058:	e001      	b.n	800505e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800505e:	6a3b      	ldr	r3, [r7, #32]
}
 8005060:	4618      	mov	r0, r3
 8005062:	372c      	adds	r7, #44	; 0x2c
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	46020c00 	.word	0x46020c00
 8005070:	0800974c 	.word	0x0800974c
 8005074:	00f42400 	.word	0x00f42400
 8005078:	4b742400 	.word	0x4b742400
 800507c:	46000000 	.word	0x46000000

08005080 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005084:	f7ff fef4 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8005088:	4602      	mov	r2, r0
 800508a:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <HAL_RCC_GetHCLKFreq+0x28>)
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	4906      	ldr	r1, [pc, #24]	; (80050ac <HAL_RCC_GetHCLKFreq+0x2c>)
 8005094:	5ccb      	ldrb	r3, [r1, r3]
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
 800509a:	4a05      	ldr	r2, [pc, #20]	; (80050b0 <HAL_RCC_GetHCLKFreq+0x30>)
 800509c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800509e:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <HAL_RCC_GetHCLKFreq+0x30>)
 80050a0:	681b      	ldr	r3, [r3, #0]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	46020c00 	.word	0x46020c00
 80050ac:	08009734 	.word	0x08009734
 80050b0:	20000004 	.word	0x20000004

080050b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80050b8:	f7ff ffe2 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	091b      	lsrs	r3, r3, #4
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	4903      	ldr	r1, [pc, #12]	; (80050d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	46020c00 	.word	0x46020c00
 80050d8:	08009744 	.word	0x08009744

080050dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80050e0:	f7ff ffce 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 80050e4:	4602      	mov	r2, r0
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	4903      	ldr	r1, [pc, #12]	; (8005100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050f2:	5ccb      	ldrb	r3, [r1, r3]
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	46020c00 	.word	0x46020c00
 8005100:	08009744 	.word	0x08009744

08005104 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005108:	f7ff ffba 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 800510c:	4602      	mov	r2, r0
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	091b      	lsrs	r3, r3, #4
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	4903      	ldr	r1, [pc, #12]	; (8005128 <HAL_RCC_GetPCLK3Freq+0x24>)
 800511a:	5ccb      	ldrb	r3, [r1, r3]
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	46020c00 	.word	0x46020c00
 8005128:	08009744 	.word	0x08009744

0800512c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005134:	4b3e      	ldr	r3, [pc, #248]	; (8005230 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005142:	f7fe fd4f 	bl	8003be4 <HAL_PWREx_GetVoltageRange>
 8005146:	6178      	str	r0, [r7, #20]
 8005148:	e019      	b.n	800517e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800514a:	4b39      	ldr	r3, [pc, #228]	; (8005230 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800514c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005150:	4a37      	ldr	r2, [pc, #220]	; (8005230 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005152:	f043 0304 	orr.w	r3, r3, #4
 8005156:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800515a:	4b35      	ldr	r3, [pc, #212]	; (8005230 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800515c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005168:	f7fe fd3c 	bl	8003be4 <HAL_PWREx_GetVoltageRange>
 800516c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800516e:	4b30      	ldr	r3, [pc, #192]	; (8005230 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005174:	4a2e      	ldr	r2, [pc, #184]	; (8005230 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005176:	f023 0304 	bic.w	r3, r3, #4
 800517a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005184:	d003      	beq.n	800518e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800518c:	d109      	bne.n	80051a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005194:	d202      	bcs.n	800519c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005196:	2301      	movs	r3, #1
 8005198:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800519a:	e033      	b.n	8005204 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80051a0:	e030      	b.n	8005204 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051a8:	d208      	bcs.n	80051bc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b0:	d102      	bne.n	80051b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80051b2:	2303      	movs	r3, #3
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	e025      	b.n	8005204 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e035      	b.n	8005228 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051c2:	d90f      	bls.n	80051e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051d0:	d902      	bls.n	80051d8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	e015      	b.n	8005204 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80051d8:	2301      	movs	r3, #1
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	e012      	b.n	8005204 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	e00f      	b.n	8005204 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051ea:	d109      	bne.n	8005200 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f2:	d102      	bne.n	80051fa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80051f4:	2301      	movs	r3, #1
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	e004      	b.n	8005204 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80051fa:	2302      	movs	r3, #2
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	e001      	b.n	8005204 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005200:	2301      	movs	r3, #1
 8005202:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005204:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f023 020f 	bic.w	r2, r3, #15
 800520c:	4909      	ldr	r1, [pc, #36]	; (8005234 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005214:	4b07      	ldr	r3, [pc, #28]	; (8005234 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	429a      	cmp	r2, r3
 8005220:	d001      	beq.n	8005226 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	46020c00 	.word	0x46020c00
 8005234:	40022000 	.word	0x40022000

08005238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800523c:	b0ba      	sub	sp, #232	; 0xe8
 800523e:	af00      	add	r7, sp, #0
 8005240:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005244:	2300      	movs	r3, #0
 8005246:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800524a:	2300      	movs	r3, #0
 800524c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005250:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005258:	f002 0401 	and.w	r4, r2, #1
 800525c:	2500      	movs	r5, #0
 800525e:	ea54 0305 	orrs.w	r3, r4, r5
 8005262:	d00b      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005264:	4bcb      	ldr	r3, [pc, #812]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800526a:	f023 0103 	bic.w	r1, r3, #3
 800526e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005274:	4ac7      	ldr	r2, [pc, #796]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005276:	430b      	orrs	r3, r1
 8005278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800527c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f002 0802 	and.w	r8, r2, #2
 8005288:	f04f 0900 	mov.w	r9, #0
 800528c:	ea58 0309 	orrs.w	r3, r8, r9
 8005290:	d00b      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005292:	4bc0      	ldr	r3, [pc, #768]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005298:	f023 010c 	bic.w	r1, r3, #12
 800529c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a2:	4abc      	ldr	r2, [pc, #752]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052a4:	430b      	orrs	r3, r1
 80052a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	f002 0a04 	and.w	sl, r2, #4
 80052b6:	f04f 0b00 	mov.w	fp, #0
 80052ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80052be:	d00b      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80052c0:	4bb4      	ldr	r3, [pc, #720]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052c6:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80052ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d0:	4ab0      	ldr	r2, [pc, #704]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052d2:	430b      	orrs	r3, r1
 80052d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	f002 0308 	and.w	r3, r2, #8
 80052e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052e8:	2300      	movs	r3, #0
 80052ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80052f2:	460b      	mov	r3, r1
 80052f4:	4313      	orrs	r3, r2
 80052f6:	d00b      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80052f8:	4ba6      	ldr	r3, [pc, #664]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005308:	4aa2      	ldr	r2, [pc, #648]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800530a:	430b      	orrs	r3, r1
 800530c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005310:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	f002 0310 	and.w	r3, r2, #16
 800531c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005320:	2300      	movs	r3, #0
 8005322:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005326:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800532a:	460b      	mov	r3, r1
 800532c:	4313      	orrs	r3, r2
 800532e:	d00b      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005330:	4b98      	ldr	r3, [pc, #608]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005336:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800533a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800533e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005340:	4a94      	ldr	r2, [pc, #592]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005342:	430b      	orrs	r3, r1
 8005344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005348:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f002 0320 	and.w	r3, r2, #32
 8005354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800535e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005362:	460b      	mov	r3, r1
 8005364:	4313      	orrs	r3, r2
 8005366:	d00b      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005368:	4b8a      	ldr	r3, [pc, #552]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800536a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800536e:	f023 0107 	bic.w	r1, r3, #7
 8005372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005378:	4a86      	ldr	r2, [pc, #536]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800537a:	430b      	orrs	r3, r1
 800537c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005380:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800538c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005390:	2300      	movs	r3, #0
 8005392:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005396:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800539a:	460b      	mov	r3, r1
 800539c:	4313      	orrs	r3, r2
 800539e:	d00b      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80053a0:	4b7c      	ldr	r3, [pc, #496]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053a6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80053aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053b0:	4a78      	ldr	r2, [pc, #480]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053b2:	430b      	orrs	r3, r1
 80053b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80053c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053c8:	2300      	movs	r3, #0
 80053ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053ce:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053d2:	460b      	mov	r3, r1
 80053d4:	4313      	orrs	r3, r2
 80053d6:	d00b      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80053d8:	4b6e      	ldr	r3, [pc, #440]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e8:	4a6a      	ldr	r2, [pc, #424]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ea:	430b      	orrs	r3, r1
 80053ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80053fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005400:	2300      	movs	r3, #0
 8005402:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005406:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800540a:	460b      	mov	r3, r1
 800540c:	4313      	orrs	r3, r2
 800540e:	d00b      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005410:	4b60      	ldr	r3, [pc, #384]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005416:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800541a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800541e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005420:	4a5c      	ldr	r2, [pc, #368]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005422:	430b      	orrs	r3, r1
 8005424:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005428:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005438:	2300      	movs	r3, #0
 800543a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800543e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005442:	460b      	mov	r3, r1
 8005444:	4313      	orrs	r3, r2
 8005446:	d00b      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005448:	4b52      	ldr	r3, [pc, #328]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800544a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800544e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8005452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005458:	4a4e      	ldr	r2, [pc, #312]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800545a:	430b      	orrs	r3, r1
 800545c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005460:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800546c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005470:	2300      	movs	r3, #0
 8005472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005476:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800547a:	460b      	mov	r3, r1
 800547c:	4313      	orrs	r3, r2
 800547e:	d00b      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005480:	4b44      	ldr	r3, [pc, #272]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005486:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800548a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800548e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005490:	4a40      	ldr	r2, [pc, #256]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005492:	430b      	orrs	r3, r1
 8005494:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005498:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80054a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054a8:	2300      	movs	r3, #0
 80054aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80054ae:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80054b2:	460b      	mov	r3, r1
 80054b4:	4313      	orrs	r3, r2
 80054b6:	d00b      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80054b8:	4b36      	ldr	r3, [pc, #216]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054be:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80054c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c8:	4a32      	ldr	r2, [pc, #200]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ca:	430b      	orrs	r3, r1
 80054cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80054d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80054dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054e0:	2300      	movs	r3, #0
 80054e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80054ea:	460b      	mov	r3, r1
 80054ec:	4313      	orrs	r3, r2
 80054ee:	d00c      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80054f0:	4b28      	ldr	r3, [pc, #160]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005502:	4a24      	ldr	r2, [pc, #144]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005504:	430b      	orrs	r3, r1
 8005506:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800550a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005516:	67bb      	str	r3, [r7, #120]	; 0x78
 8005518:	2300      	movs	r3, #0
 800551a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800551c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005520:	460b      	mov	r3, r1
 8005522:	4313      	orrs	r3, r2
 8005524:	d04f      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552e:	2b80      	cmp	r3, #128	; 0x80
 8005530:	d02d      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005532:	2b80      	cmp	r3, #128	; 0x80
 8005534:	d827      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005536:	2b60      	cmp	r3, #96	; 0x60
 8005538:	d02e      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800553a:	2b60      	cmp	r3, #96	; 0x60
 800553c:	d823      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800553e:	2b40      	cmp	r3, #64	; 0x40
 8005540:	d006      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d81f      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x326>
 800554a:	2b20      	cmp	r3, #32
 800554c:	d011      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800554e:	e01a      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005550:	4b10      	ldr	r3, [pc, #64]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	4a0f      	ldr	r2, [pc, #60]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800555c:	e01d      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800555e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005562:	3308      	adds	r3, #8
 8005564:	4618      	mov	r0, r3
 8005566:	f002 f981 	bl	800786c <RCCEx_PLL2_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005570:	e013      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005576:	332c      	adds	r3, #44	; 0x2c
 8005578:	4618      	mov	r0, r3
 800557a:	f002 fa0f 	bl	800799c <RCCEx_PLL3_Config>
 800557e:	4603      	mov	r3, r0
 8005580:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005584:	e009      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800558c:	e005      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800558e:	bf00      	nop
 8005590:	e003      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005592:	bf00      	nop
 8005594:	46020c00 	.word	0x46020c00
        break;
 8005598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800559a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10d      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80055a2:	4bb6      	ldr	r3, [pc, #728]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80055a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80055a8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80055ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b4:	4ab1      	ldr	r2, [pc, #708]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80055b6:	430b      	orrs	r3, r1
 80055b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80055bc:	e003      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055be:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80055c2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80055c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80055d2:	673b      	str	r3, [r7, #112]	; 0x70
 80055d4:	2300      	movs	r3, #0
 80055d6:	677b      	str	r3, [r7, #116]	; 0x74
 80055d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80055dc:	460b      	mov	r3, r1
 80055de:	4313      	orrs	r3, r2
 80055e0:	d053      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80055e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ee:	d033      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80055f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f4:	d82c      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80055f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055fa:	d02f      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80055fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005600:	d826      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005606:	d008      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800560c:	d820      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8005612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005616:	d011      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005618:	e01a      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800561a:	4b98      	ldr	r3, [pc, #608]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800561c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561e:	4a97      	ldr	r2, [pc, #604]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005624:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005626:	e01a      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005628:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800562c:	3308      	adds	r3, #8
 800562e:	4618      	mov	r0, r3
 8005630:	f002 f91c 	bl	800786c <RCCEx_PLL2_Config>
 8005634:	4603      	mov	r3, r0
 8005636:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800563a:	e010      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800563c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005640:	332c      	adds	r3, #44	; 0x2c
 8005642:	4618      	mov	r0, r3
 8005644:	f002 f9aa 	bl	800799c <RCCEx_PLL3_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800564e:	e006      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005656:	e002      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005658:	bf00      	nop
 800565a:	e000      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800565c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10d      	bne.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005666:	4b85      	ldr	r3, [pc, #532]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005668:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800566c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005670:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005678:	4a80      	ldr	r2, [pc, #512]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800567a:	430b      	orrs	r3, r1
 800567c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005680:	e003      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005682:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005686:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800568a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005696:	66bb      	str	r3, [r7, #104]	; 0x68
 8005698:	2300      	movs	r3, #0
 800569a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800569c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80056a0:	460b      	mov	r3, r1
 80056a2:	4313      	orrs	r3, r2
 80056a4:	d046      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80056a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80056ae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80056b2:	d028      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80056b4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80056b8:	d821      	bhi.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80056ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056be:	d022      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80056c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056c4:	d81b      	bhi.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80056c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056ca:	d01c      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80056cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056d0:	d815      	bhi.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80056d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d6:	d008      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80056d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056dc:	d80f      	bhi.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d011      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80056e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e6:	d00e      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80056e8:	e009      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ee:	3308      	adds	r3, #8
 80056f0:	4618      	mov	r0, r3
 80056f2:	f002 f8bb 	bl	800786c <RCCEx_PLL2_Config>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80056fc:	e004      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005704:	e000      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8005706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005708:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10d      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005710:	4b5a      	ldr	r3, [pc, #360]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005716:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800571a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800571e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005722:	4a56      	ldr	r2, [pc, #344]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005724:	430b      	orrs	r3, r1
 8005726:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800572a:	e003      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005730:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005740:	663b      	str	r3, [r7, #96]	; 0x60
 8005742:	2300      	movs	r3, #0
 8005744:	667b      	str	r3, [r7, #100]	; 0x64
 8005746:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800574a:	460b      	mov	r3, r1
 800574c:	4313      	orrs	r3, r2
 800574e:	d03f      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005758:	2b04      	cmp	r3, #4
 800575a:	d81e      	bhi.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x562>
 800575c:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800575e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005762:	bf00      	nop
 8005764:	080057a3 	.word	0x080057a3
 8005768:	08005779 	.word	0x08005779
 800576c:	08005787 	.word	0x08005787
 8005770:	080057a3 	.word	0x080057a3
 8005774:	080057a3 	.word	0x080057a3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005778:	4b40      	ldr	r3, [pc, #256]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	4a3f      	ldr	r2, [pc, #252]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800577e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005782:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005784:	e00e      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800578a:	332c      	adds	r3, #44	; 0x2c
 800578c:	4618      	mov	r0, r3
 800578e:	f002 f905 	bl	800799c <RCCEx_PLL3_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005798:	e004      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80057a0:	e000      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80057a2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80057a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10d      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80057ac:	4b33      	ldr	r3, [pc, #204]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80057ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80057b2:	f023 0107 	bic.w	r1, r3, #7
 80057b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057be:	4a2f      	ldr	r2, [pc, #188]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80057c0:	430b      	orrs	r3, r1
 80057c2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80057c6:	e003      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80057cc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80057d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80057dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80057de:	2300      	movs	r3, #0
 80057e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80057e6:	460b      	mov	r3, r1
 80057e8:	4313      	orrs	r3, r2
 80057ea:	d04d      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80057ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057f8:	d028      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x614>
 80057fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057fe:	d821      	bhi.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005800:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005804:	d024      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005806:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800580a:	d81b      	bhi.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800580c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005810:	d00e      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8005812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005816:	d815      	bhi.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01b      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800581c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005820:	d110      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005822:	4b16      	ldr	r3, [pc, #88]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	4a15      	ldr	r2, [pc, #84]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800582c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800582e:	e012      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005834:	332c      	adds	r3, #44	; 0x2c
 8005836:	4618      	mov	r0, r3
 8005838:	f002 f8b0 	bl	800799c <RCCEx_PLL3_Config>
 800583c:	4603      	mov	r3, r0
 800583e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005842:	e008      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800584a:	e004      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800584c:	bf00      	nop
 800584e:	e002      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005850:	bf00      	nop
 8005852:	e000      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005854:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005856:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d110      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800585e:	4b07      	ldr	r3, [pc, #28]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005864:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800586c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005870:	4a02      	ldr	r2, [pc, #8]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005872:	430b      	orrs	r3, r1
 8005874:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005878:	e006      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800587a:	bf00      	nop
 800587c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005884:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005888:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005894:	653b      	str	r3, [r7, #80]	; 0x50
 8005896:	2300      	movs	r3, #0
 8005898:	657b      	str	r3, [r7, #84]	; 0x54
 800589a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800589e:	460b      	mov	r3, r1
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f000 80b5 	beq.w	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058a6:	2300      	movs	r3, #0
 80058a8:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ac:	4b9d      	ldr	r3, [pc, #628]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d113      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ba:	4b9a      	ldr	r3, [pc, #616]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c0:	4a98      	ldr	r2, [pc, #608]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058c2:	f043 0304 	orr.w	r3, r3, #4
 80058c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80058ca:	4b96      	ldr	r3, [pc, #600]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80058dc:	2301      	movs	r3, #1
 80058de:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80058e2:	4b91      	ldr	r3, [pc, #580]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	4a90      	ldr	r2, [pc, #576]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80058e8:	f043 0301 	orr.w	r3, r3, #1
 80058ec:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058ee:	f7fc f97d 	bl	8001bec <HAL_GetTick>
 80058f2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80058f6:	e00b      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f8:	f7fc f978 	bl	8001bec <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d903      	bls.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800590e:	e005      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005910:	4b85      	ldr	r3, [pc, #532]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0ed      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800591c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d165      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005924:	4b7f      	ldr	r3, [pc, #508]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800592a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005936:	2b00      	cmp	r3, #0
 8005938:	d023      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800593a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800593e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005946:	4293      	cmp	r3, r2
 8005948:	d01b      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800594a:	4b76      	ldr	r3, [pc, #472]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800594c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005954:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005958:	4b72      	ldr	r3, [pc, #456]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800595a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800595e:	4a71      	ldr	r2, [pc, #452]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005964:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005968:	4b6e      	ldr	r3, [pc, #440]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800596a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800596e:	4a6d      	ldr	r2, [pc, #436]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005974:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005978:	4a6a      	ldr	r2, [pc, #424]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800597a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d019      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598e:	f7fc f92d 	bl	8001bec <HAL_GetTick>
 8005992:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005996:	e00d      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005998:	f7fc f928 	bl	8001bec <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a2:	1ad2      	subs	r2, r2, r3
 80059a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d903      	bls.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80059b2:	e006      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059b4:	4b5b      	ldr	r3, [pc, #364]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0ea      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80059c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10d      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80059ca:	4b56      	ldr	r3, [pc, #344]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80059dc:	4a51      	ldr	r2, [pc, #324]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059de:	430b      	orrs	r3, r1
 80059e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80059e4:	e008      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80059ea:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80059ee:	e003      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80059f4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059f8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d107      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a00:	4b48      	ldr	r3, [pc, #288]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a06:	4a47      	ldr	r2, [pc, #284]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a08:	f023 0304 	bic.w	r3, r3, #4
 8005a0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005a10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005a1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a1e:	2300      	movs	r3, #0
 8005a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a22:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005a26:	460b      	mov	r3, r1
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	d042      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005a2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a34:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a38:	d022      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005a3a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a3e:	d81b      	bhi.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005a40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a44:	d011      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005a46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a4a:	d815      	bhi.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d019      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005a50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a54:	d110      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 ff05 	bl	800786c <RCCEx_PLL2_Config>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005a68:	e00d      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a6a:	4b2e      	ldr	r3, [pc, #184]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6e:	4a2d      	ldr	r2, [pc, #180]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a74:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005a76:	e006      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005a7e:	e002      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005a80:	bf00      	nop
 8005a82:	e000      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005a84:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005a86:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10d      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005a8e:	4b25      	ldr	r3, [pc, #148]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a94:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005aa0:	4a20      	ldr	r2, [pc, #128]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005aa8:	e003      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aaa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005aae:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aba:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005abe:	643b      	str	r3, [r7, #64]	; 0x40
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4313      	orrs	r3, r2
 8005acc:	d032      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ada:	d00b      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae0:	d804      	bhi.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d008      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aea:	d007      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005af2:	e004      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005af4:	bf00      	nop
 8005af6:	e002      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005af8:	bf00      	nop
 8005afa:	e000      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005afc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005afe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d112      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005b06:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b18:	4a02      	ldr	r2, [pc, #8]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005b20:	e008      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005b22:	bf00      	nop
 8005b24:	46020c00 	.word	0x46020c00
 8005b28:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b30:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005b34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005b40:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b42:	2300      	movs	r3, #0
 8005b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	d00c      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005b50:	4b98      	ldr	r3, [pc, #608]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b56:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8005b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b62:	4a94      	ldr	r2, [pc, #592]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b64:	430b      	orrs	r3, r1
 8005b66:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005b76:	633b      	str	r3, [r7, #48]	; 0x30
 8005b78:	2300      	movs	r3, #0
 8005b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b7c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005b80:	460b      	mov	r3, r1
 8005b82:	4313      	orrs	r3, r2
 8005b84:	d019      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b92:	d105      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b94:	4b87      	ldr	r3, [pc, #540]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b98:	4a86      	ldr	r2, [pc, #536]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b9e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005ba0:	4b84      	ldr	r3, [pc, #528]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ba2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ba6:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005bb2:	4a80      	ldr	r2, [pc, #512]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc8:	2300      	movs	r3, #0
 8005bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bcc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	d00c      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005bd6:	4b77      	ldr	r3, [pc, #476]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005be0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005be4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005be8:	4972      	ldr	r1, [pc, #456]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005bf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005bfc:	623b      	str	r3, [r7, #32]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
 8005c02:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c06:	460b      	mov	r3, r1
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	d00c      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005c0c:	4b69      	ldr	r3, [pc, #420]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005c1e:	4965      	ldr	r1, [pc, #404]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	2300      	movs	r3, #0
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	d00c      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005c42:	4b5c      	ldr	r3, [pc, #368]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c48:	f023 0218 	bic.w	r2, r3, #24
 8005c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005c54:	4957      	ldr	r1, [pc, #348]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c72:	460b      	mov	r3, r1
 8005c74:	4313      	orrs	r3, r2
 8005c76:	d032      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005c78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c84:	d105      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c86:	4b4b      	ldr	r3, [pc, #300]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8a:	4a4a      	ldr	r2, [pc, #296]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c90:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c9e:	d108      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ca0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 fde0 	bl	800786c <RCCEx_PLL2_Config>
 8005cac:	4603      	mov	r3, r0
 8005cae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8005cb2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10d      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005cba:	4b3e      	ldr	r3, [pc, #248]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005cbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005cc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ccc:	4939      	ldr	r1, [pc, #228]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005cd4:	e003      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005cda:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005cea:	60bb      	str	r3, [r7, #8]
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	d03a      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005cfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d06:	d00e      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005d08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d0c:	d815      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d017      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005d12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d16:	d110      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d18:	4b26      	ldr	r3, [pc, #152]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1c:	4a25      	ldr	r2, [pc, #148]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d22:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005d24:	e00e      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d2a:	3308      	adds	r3, #8
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f001 fd9d 	bl	800786c <RCCEx_PLL2_Config>
 8005d32:	4603      	mov	r3, r0
 8005d34:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005d38:	e004      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005d40:	e000      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8005d42:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005d44:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10d      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005d4c:	4b19      	ldr	r3, [pc, #100]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d5e:	4915      	ldr	r1, [pc, #84]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005d66:	e003      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d68:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005d6c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005d70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	607b      	str	r3, [r7, #4]
 8005d82:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d86:	460b      	mov	r3, r1
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	d00c      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d92:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d9e:	4905      	ldr	r1, [pc, #20]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005da6:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	37e8      	adds	r7, #232	; 0xe8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005db4:	46020c00 	.word	0x46020c00

08005db8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b089      	sub	sp, #36	; 0x24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005dc0:	4bac      	ldr	r3, [pc, #688]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005dca:	4baa      	ldr	r3, [pc, #680]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005dd4:	4ba7      	ldr	r3, [pc, #668]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd8:	0a1b      	lsrs	r3, r3, #8
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	3301      	adds	r3, #1
 8005de0:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005de2:	4ba4      	ldr	r3, [pc, #656]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005dec:	4ba1      	ldr	r3, [pc, #644]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	08db      	lsrs	r3, r3, #3
 8005df2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	fb02 f303 	mul.w	r3, r2, r3
 8005dfc:	ee07 3a90 	vmov	s15, r3
 8005e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e04:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8123 	beq.w	8006056 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d062      	beq.n	8005edc <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	f200 8081 	bhi.w	8005f20 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d024      	beq.n	8005e6e <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d17a      	bne.n	8005f20 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	ee07 3a90 	vmov	s15, r3
 8005e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e34:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e3c:	4b8d      	ldr	r3, [pc, #564]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e44:	ee07 3a90 	vmov	s15, r3
 8005e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e50:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800607c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e6c:	e08f      	b.n	8005f8e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005e6e:	4b81      	ldr	r3, [pc, #516]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8005e7a:	4b7e      	ldr	r3, [pc, #504]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	0f1b      	lsrs	r3, r3, #28
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	e006      	b.n	8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8005e86:	4b7b      	ldr	r3, [pc, #492]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e8c:	041b      	lsls	r3, r3, #16
 8005e8e:	0f1b      	lsrs	r3, r3, #28
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	4a7a      	ldr	r2, [pc, #488]	; (8006080 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ebe:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800607c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eda:	e058      	b.n	8005f8e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eee:	4b61      	ldr	r3, [pc, #388]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f02:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800607c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f1e:	e036      	b.n	8005f8e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005f20:	4b54      	ldr	r3, [pc, #336]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8005f2c:	4b51      	ldr	r3, [pc, #324]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	0f1b      	lsrs	r3, r3, #28
 8005f32:	f003 030f 	and.w	r3, r3, #15
 8005f36:	e006      	b.n	8005f46 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8005f38:	4b4e      	ldr	r3, [pc, #312]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005f3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f3e:	041b      	lsls	r3, r3, #16
 8005f40:	0f1b      	lsrs	r3, r3, #28
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	4a4e      	ldr	r2, [pc, #312]	; (8006080 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f4c:	ee07 3a90 	vmov	s15, r3
 8005f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	ee07 3a90 	vmov	s15, r3
 8005f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f70:	eddf 5a42 	vldr	s11, [pc, #264]	; 800607c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f8c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005f8e:	4b39      	ldr	r3, [pc, #228]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d017      	beq.n	8005fca <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005f9a:	4b36      	ldr	r3, [pc, #216]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9e:	0a5b      	lsrs	r3, r3, #9
 8005fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa4:	ee07 3a90 	vmov	s15, r3
 8005fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005fac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fb0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005fb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fc0:	ee17 2a90 	vmov	r2, s15
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	e002      	b.n	8005fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005fd0:	4b28      	ldr	r3, [pc, #160]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d017      	beq.n	800600c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005fdc:	4b25      	ldr	r3, [pc, #148]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe0:	0c1b      	lsrs	r3, r3, #16
 8005fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006002:	ee17 2a90 	vmov	r2, s15
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	605a      	str	r2, [r3, #4]
 800600a:	e002      	b.n	8006012 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006012:	4b18      	ldr	r3, [pc, #96]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d017      	beq.n	800604e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800601e:	4b15      	ldr	r3, [pc, #84]	; (8006074 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006022:	0e1b      	lsrs	r3, r3, #24
 8006024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006028:	ee07 3a90 	vmov	s15, r3
 800602c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006034:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006038:	edd7 6a07 	vldr	s13, [r7, #28]
 800603c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006044:	ee17 2a90 	vmov	r2, s15
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800604c:	e00c      	b.n	8006068 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	609a      	str	r2, [r3, #8]
}
 8006054:	e008      	b.n	8006068 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	609a      	str	r2, [r3, #8]
}
 8006068:	bf00      	nop
 800606a:	3724      	adds	r7, #36	; 0x24
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	46020c00 	.word	0x46020c00
 8006078:	4b742400 	.word	0x4b742400
 800607c:	46000000 	.word	0x46000000
 8006080:	0800974c 	.word	0x0800974c

08006084 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006084:	b480      	push	{r7}
 8006086:	b089      	sub	sp, #36	; 0x24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800608c:	4bac      	ldr	r3, [pc, #688]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800608e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006094:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006096:	4baa      	ldr	r3, [pc, #680]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80060a0:	4ba7      	ldr	r3, [pc, #668]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	0a1b      	lsrs	r3, r3, #8
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	3301      	adds	r3, #1
 80060ac:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80060ae:	4ba4      	ldr	r3, [pc, #656]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80060b8:	4ba1      	ldr	r3, [pc, #644]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	08db      	lsrs	r3, r3, #3
 80060be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	fb02 f303 	mul.w	r3, r2, r3
 80060c8:	ee07 3a90 	vmov	s15, r3
 80060cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 8123 	beq.w	8006322 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d062      	beq.n	80061a8 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	f200 8081 	bhi.w	80061ec <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d024      	beq.n	800613a <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d17a      	bne.n	80061ec <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006100:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006344 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006108:	4b8d      	ldr	r3, [pc, #564]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800610a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006118:	ed97 6a02 	vldr	s12, [r7, #8]
 800611c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006348 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006120:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006124:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006128:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800612c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006134:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006138:	e08f      	b.n	800625a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800613a:	4b81      	ldr	r3, [pc, #516]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d005      	beq.n	8006152 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8006146:	4b7e      	ldr	r3, [pc, #504]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	0f1b      	lsrs	r3, r3, #28
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	e006      	b.n	8006160 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8006152:	4b7b      	ldr	r3, [pc, #492]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006158:	041b      	lsls	r3, r3, #16
 800615a:	0f1b      	lsrs	r3, r3, #28
 800615c:	f003 030f 	and.w	r3, r3, #15
 8006160:	4a7a      	ldr	r2, [pc, #488]	; (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	ee07 3a90 	vmov	s15, r3
 8006174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006186:	ed97 6a02 	vldr	s12, [r7, #8]
 800618a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006348 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800618e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800619a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800619e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061a6:	e058      	b.n	800625a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006344 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80061b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ba:	4b61      	ldr	r3, [pc, #388]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80061bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80061ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80061ce:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006348 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80061d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80061d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80061da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061de:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80061e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ea:	e036      	b.n	800625a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80061ec:	4b54      	ldr	r3, [pc, #336]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 80061f8:	4b51      	ldr	r3, [pc, #324]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	0f1b      	lsrs	r3, r3, #28
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	e006      	b.n	8006212 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8006204:	4b4e      	ldr	r3, [pc, #312]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006206:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800620a:	041b      	lsls	r3, r3, #16
 800620c:	0f1b      	lsrs	r3, r3, #28
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	4a4e      	ldr	r2, [pc, #312]	; (800634c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	ee07 3a90 	vmov	s15, r3
 8006234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006238:	ed97 6a02 	vldr	s12, [r7, #8]
 800623c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006348 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006240:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006244:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800624c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006254:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006258:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800625a:	4b39      	ldr	r3, [pc, #228]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d017      	beq.n	8006296 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006266:	4b36      	ldr	r3, [pc, #216]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626a:	0a5b      	lsrs	r3, r3, #9
 800626c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006270:	ee07 3a90 	vmov	s15, r3
 8006274:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800627c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006280:	edd7 6a07 	vldr	s13, [r7, #28]
 8006284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800628c:	ee17 2a90 	vmov	r2, s15
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	e002      	b.n	800629c <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800629c:	4b28      	ldr	r3, [pc, #160]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d017      	beq.n	80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80062aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80062ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062be:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80062c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80062c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ce:	ee17 2a90 	vmov	r2, s15
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	605a      	str	r2, [r3, #4]
 80062d6:	e002      	b.n	80062de <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80062de:	4b18      	ldr	r3, [pc, #96]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d017      	beq.n	800631a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80062ea:	4b15      	ldr	r3, [pc, #84]	; (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80062ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ee:	0e1b      	lsrs	r3, r3, #24
 80062f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f4:	ee07 3a90 	vmov	s15, r3
 80062f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80062fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006300:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006304:	edd7 6a07 	vldr	s13, [r7, #28]
 8006308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800630c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006310:	ee17 2a90 	vmov	r2, s15
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006318:	e00c      	b.n	8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	609a      	str	r2, [r3, #8]
}
 8006320:	e008      	b.n	8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	609a      	str	r2, [r3, #8]
}
 8006334:	bf00      	nop
 8006336:	3724      	adds	r7, #36	; 0x24
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	46020c00 	.word	0x46020c00
 8006344:	4b742400 	.word	0x4b742400
 8006348:	46000000 	.word	0x46000000
 800634c:	0800974c 	.word	0x0800974c

08006350 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006350:	b480      	push	{r7}
 8006352:	b089      	sub	sp, #36	; 0x24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006358:	4bac      	ldr	r3, [pc, #688]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800635a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006360:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006362:	4baa      	ldr	r3, [pc, #680]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800636c:	4ba7      	ldr	r3, [pc, #668]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006370:	0a1b      	lsrs	r3, r3, #8
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	3301      	adds	r3, #1
 8006378:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800637a:	4ba4      	ldr	r3, [pc, #656]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	f003 0310 	and.w	r3, r3, #16
 8006382:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006384:	4ba1      	ldr	r3, [pc, #644]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006388:	08db      	lsrs	r3, r3, #3
 800638a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	fb02 f303 	mul.w	r3, r2, r3
 8006394:	ee07 3a90 	vmov	s15, r3
 8006398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 8123 	beq.w	80065ee <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d062      	beq.n	8006474 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2b03      	cmp	r3, #3
 80063b2:	f200 8081 	bhi.w	80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d024      	beq.n	8006406 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d17a      	bne.n	80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	ee07 3a90 	vmov	s15, r3
 80063c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063cc:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80063d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d4:	4b8d      	ldr	r3, [pc, #564]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80063d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063dc:	ee07 3a90 	vmov	s15, r3
 80063e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80063e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80063e8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006614 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80063ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80063f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80063f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80063fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006400:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8006404:	e08f      	b.n	8006526 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006406:	4b81      	ldr	r3, [pc, #516]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d005      	beq.n	800641e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8006412:	4b7e      	ldr	r3, [pc, #504]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	0f1b      	lsrs	r3, r3, #28
 8006418:	f003 030f 	and.w	r3, r3, #15
 800641c:	e006      	b.n	800642c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800641e:	4b7b      	ldr	r3, [pc, #492]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006420:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006424:	041b      	lsls	r3, r3, #16
 8006426:	0f1b      	lsrs	r3, r3, #28
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	4a7a      	ldr	r2, [pc, #488]	; (8006618 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800642e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006452:	ed97 6a02 	vldr	s12, [r7, #8]
 8006456:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006614 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800645a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800645e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006466:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800646a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006472:	e058      	b.n	8006526 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006486:	4b61      	ldr	r3, [pc, #388]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006496:	ed97 6a02 	vldr	s12, [r7, #8]
 800649a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006614 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800649e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80064a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80064a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80064ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064b6:	e036      	b.n	8006526 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80064b8:	4b54      	ldr	r3, [pc, #336]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 80064c4:	4b51      	ldr	r3, [pc, #324]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	0f1b      	lsrs	r3, r3, #28
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	e006      	b.n	80064de <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 80064d0:	4b4e      	ldr	r3, [pc, #312]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80064d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064d6:	041b      	lsls	r3, r3, #16
 80064d8:	0f1b      	lsrs	r3, r3, #28
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	4a4e      	ldr	r2, [pc, #312]	; (8006618 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80064e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e4:	ee07 3a90 	vmov	s15, r3
 80064e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006504:	ed97 6a02 	vldr	s12, [r7, #8]
 8006508:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006614 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800650c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006518:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800651c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006520:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006524:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006526:	4b39      	ldr	r3, [pc, #228]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d017      	beq.n	8006562 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006532:	4b36      	ldr	r3, [pc, #216]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006536:	0a5b      	lsrs	r3, r3, #9
 8006538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800653c:	ee07 3a90 	vmov	s15, r3
 8006540:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006548:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800654c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006558:	ee17 2a90 	vmov	r2, s15
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	e002      	b.n	8006568 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006568:	4b28      	ldr	r3, [pc, #160]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d017      	beq.n	80065a4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006574:	4b25      	ldr	r3, [pc, #148]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006578:	0c1b      	lsrs	r3, r3, #16
 800657a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800658a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800658e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800659a:	ee17 2a90 	vmov	r2, s15
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	605a      	str	r2, [r3, #4]
 80065a2:	e002      	b.n	80065aa <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80065aa:	4b18      	ldr	r3, [pc, #96]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80065ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d017      	beq.n	80065e6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80065b6:	4b15      	ldr	r3, [pc, #84]	; (800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80065b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ba:	0e1b      	lsrs	r3, r3, #24
 80065bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065c0:	ee07 3a90 	vmov	s15, r3
 80065c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80065c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065cc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80065d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80065d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065dc:	ee17 2a90 	vmov	r2, s15
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80065e4:	e00c      	b.n	8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	609a      	str	r2, [r3, #8]
}
 80065ec:	e008      	b.n	8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	609a      	str	r2, [r3, #8]
}
 8006600:	bf00      	nop
 8006602:	3724      	adds	r7, #36	; 0x24
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	46020c00 	.word	0x46020c00
 8006610:	4b742400 	.word	0x4b742400
 8006614:	46000000 	.word	0x46000000
 8006618:	0800974c 	.word	0x0800974c

0800661c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08e      	sub	sp, #56	; 0x38
 8006620:	af00      	add	r7, sp, #0
 8006622:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800662a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800662e:	430b      	orrs	r3, r1
 8006630:	d145      	bne.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006632:	4ba7      	ldr	r3, [pc, #668]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800663e:	4ba4      	ldr	r3, [pc, #656]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b02      	cmp	r3, #2
 800664a:	d108      	bne.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006652:	d104      	bne.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006658:	637b      	str	r3, [r7, #52]	; 0x34
 800665a:	f001 b8fc 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800665e:	4b9c      	ldr	r3, [pc, #624]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800666c:	d114      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006674:	d110      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006676:	4b96      	ldr	r3, [pc, #600]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800667c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006680:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006684:	d103      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006686:	23fa      	movs	r3, #250	; 0xfa
 8006688:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800668a:	f001 b8e4 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800668e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006692:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006694:	f001 b8df 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006698:	4b8d      	ldr	r3, [pc, #564]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066a4:	d107      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ac:	d103      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80066ae:	4b89      	ldr	r3, [pc, #548]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80066b0:	637b      	str	r3, [r7, #52]	; 0x34
 80066b2:	f001 b8d0 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	637b      	str	r3, [r7, #52]	; 0x34
 80066ba:	f001 b8cc 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80066be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066c2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80066c6:	430b      	orrs	r3, r1
 80066c8:	d151      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80066ca:	4b81      	ldr	r3, [pc, #516]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80066d0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80066d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	2b80      	cmp	r3, #128	; 0x80
 80066da:	d035      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	2b80      	cmp	r3, #128	; 0x80
 80066e0:	d841      	bhi.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	2b60      	cmp	r3, #96	; 0x60
 80066e6:	d02a      	beq.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	2b60      	cmp	r3, #96	; 0x60
 80066ec:	d83b      	bhi.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	2b40      	cmp	r3, #64	; 0x40
 80066f2:	d009      	beq.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80066f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	d835      	bhi.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00c      	beq.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	2b20      	cmp	r3, #32
 8006704:	d012      	beq.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006706:	e02e      	b.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff fb53 	bl	8005db8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006716:	f001 b89e 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800671a:	f107 0318 	add.w	r3, r7, #24
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fcb0 	bl	8006084 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006728:	f001 b895 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800672c:	f107 030c 	add.w	r3, r7, #12
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff fe0d 	bl	8006350 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800673a:	f001 b88c 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800673e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006742:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006744:	f001 b887 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006748:	4b61      	ldr	r3, [pc, #388]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006754:	d103      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006756:	4b60      	ldr	r3, [pc, #384]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800675a:	f001 b87c 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006762:	f001 b878 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800676a:	f001 b874 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800676e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006772:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006776:	430b      	orrs	r3, r1
 8006778:	d158      	bne.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800677a:	4b55      	ldr	r3, [pc, #340]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800677c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006780:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006784:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800678c:	d03b      	beq.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006794:	d846      	bhi.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800679c:	d02e      	beq.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067a4:	d83e      	bhi.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ac:	d00b      	beq.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b4:	d836      	bhi.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00d      	beq.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80067bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c2:	d012      	beq.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80067c4:	e02e      	b.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff faf4 	bl	8005db8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067d4:	f001 b83f 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067d8:	f107 0318 	add.w	r3, r7, #24
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff fc51 	bl	8006084 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067e6:	f001 b836 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ea:	f107 030c 	add.w	r3, r7, #12
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fdae 	bl	8006350 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067f8:	f001 b82d 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80067fc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006802:	f001 b828 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006806:	4b32      	ldr	r3, [pc, #200]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800680e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006812:	d103      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006814:	4b30      	ldr	r3, [pc, #192]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006816:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006818:	f001 b81d 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006820:	f001 b819 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006828:	f001 b815 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800682c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006830:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006834:	430b      	orrs	r3, r1
 8006836:	d126      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006838:	4b25      	ldr	r3, [pc, #148]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800683a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800683e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006842:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006844:	4b22      	ldr	r3, [pc, #136]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800684c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006850:	d106      	bne.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	2b00      	cmp	r3, #0
 8006856:	d103      	bne.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006858:	4b1f      	ldr	r3, [pc, #124]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800685a:	637b      	str	r3, [r7, #52]	; 0x34
 800685c:	f000 bffb 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006860:	4b1b      	ldr	r3, [pc, #108]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686c:	d107      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006874:	d103      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006876:	4b19      	ldr	r3, [pc, #100]	; (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006878:	637b      	str	r3, [r7, #52]	; 0x34
 800687a:	f000 bfec 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
 8006882:	f000 bfe8 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800688a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800688e:	430b      	orrs	r3, r1
 8006890:	d164      	bne.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006892:	4b0f      	ldr	r3, [pc, #60]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006898:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800689c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80068a4:	d03d      	beq.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80068ac:	d852      	bhi.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068b4:	d014      	beq.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068bc:	d84a      	bhi.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d01f      	beq.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068ca:	d012      	beq.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80068cc:	e042      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80068ce:	bf00      	nop
 80068d0:	46020c00 	.word	0x46020c00
 80068d4:	0007a120 	.word	0x0007a120
 80068d8:	00f42400 	.word	0x00f42400
 80068dc:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff fa67 	bl	8005db8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068ee:	f000 bfb2 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068f2:	f107 0318 	add.w	r3, r7, #24
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7ff fbc4 	bl	8006084 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006900:	f000 bfa9 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006904:	4bab      	ldr	r3, [pc, #684]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800690c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006910:	d103      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006912:	4ba9      	ldr	r3, [pc, #676]	; (8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006914:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006916:	f000 bf9e 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800691e:	f000 bf9a 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006922:	4ba4      	ldr	r3, [pc, #656]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800692e:	4ba1      	ldr	r3, [pc, #644]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	0e1b      	lsrs	r3, r3, #24
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	e006      	b.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800693a:	4b9e      	ldr	r3, [pc, #632]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800693c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006940:	041b      	lsls	r3, r3, #16
 8006942:	0e1b      	lsrs	r3, r3, #24
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	4a9c      	ldr	r2, [pc, #624]	; (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800694a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800694e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006950:	f000 bf81 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006958:	f000 bf7d 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800695c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006960:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006964:	430b      	orrs	r3, r1
 8006966:	d175      	bne.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006968:	4b92      	ldr	r3, [pc, #584]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800696a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800696e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006972:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	2b00      	cmp	r3, #0
 8006978:	d15b      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800697a:	4b8e      	ldr	r3, [pc, #568]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800697c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006980:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006984:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800698c:	d034      	beq.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006994:	d849      	bhi.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800699c:	d00b      	beq.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069a4:	d841      	bhi.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d016      	beq.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069b2:	d009      	beq.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80069b4:	e039      	b.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff f9fc 	bl	8005db8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80069c4:	f000 bf47 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c8:	f107 0318 	add.w	r3, r7, #24
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff fb59 	bl	8006084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80069d6:	f000 bf3e 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80069da:	4b76      	ldr	r3, [pc, #472]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069e6:	d103      	bne.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 80069e8:	4b73      	ldr	r3, [pc, #460]	; (8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80069ea:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80069ec:	f000 bf33 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80069f4:	f000 bf2f 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069f8:	4b6e      	ldr	r3, [pc, #440]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8006a04:	4b6b      	ldr	r3, [pc, #428]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	0e1b      	lsrs	r3, r3, #24
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	e006      	b.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8006a10:	4b68      	ldr	r3, [pc, #416]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a16:	041b      	lsls	r3, r3, #16
 8006a18:	0e1b      	lsrs	r3, r3, #24
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	4a67      	ldr	r2, [pc, #412]	; (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a24:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006a26:	f000 bf16 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006a2e:	f000 bf12 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a38:	d108      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff f9ba 	bl	8005db8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	637b      	str	r3, [r7, #52]	; 0x34
 8006a48:	f000 bf05 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a50:	f000 bf01 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006a54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a58:	1e51      	subs	r1, r2, #1
 8006a5a:	430b      	orrs	r3, r1
 8006a5c:	d136      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006a5e:	4b55      	ldr	r3, [pc, #340]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a64:	f003 0303 	and.w	r3, r3, #3
 8006a68:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d104      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006a70:	f7fe fb34 	bl	80050dc <HAL_RCC_GetPCLK2Freq>
 8006a74:	6378      	str	r0, [r7, #52]	; 0x34
 8006a76:	f000 beee 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d104      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a80:	f7fe f9f6 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8006a84:	6378      	str	r0, [r7, #52]	; 0x34
 8006a86:	f000 bee6 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006a8a:	4b4a      	ldr	r3, [pc, #296]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a96:	d106      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d103      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8006a9e:	4b48      	ldr	r3, [pc, #288]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa2:	f000 bed8 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006aa6:	4b43      	ldr	r3, [pc, #268]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d107      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d104      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8006aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006abe:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac0:	f000 bec9 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac8:	f000 bec5 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad0:	1e91      	subs	r1, r2, #2
 8006ad2:	430b      	orrs	r3, r1
 8006ad4:	d136      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006ad6:	4b37      	ldr	r3, [pc, #220]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006adc:	f003 030c 	and.w	r3, r3, #12
 8006ae0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ae8:	f7fe fae4 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 8006aec:	6378      	str	r0, [r7, #52]	; 0x34
 8006aee:	f000 beb2 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d104      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006af8:	f7fe f9ba 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8006afc:	6378      	str	r0, [r7, #52]	; 0x34
 8006afe:	f000 beaa 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006b02:	4b2c      	ldr	r3, [pc, #176]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b0e:	d106      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d103      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8006b16:	4b2a      	ldr	r3, [pc, #168]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1a:	f000 be9c 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006b1e:	4b25      	ldr	r3, [pc, #148]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d107      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	2b0c      	cmp	r3, #12
 8006b30:	d104      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8006b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b36:	637b      	str	r3, [r7, #52]	; 0x34
 8006b38:	f000 be8d 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b40:	f000 be89 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b48:	1f11      	subs	r1, r2, #4
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	d13e      	bne.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006b4e:	4b19      	ldr	r3, [pc, #100]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b58:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d104      	bne.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b60:	f7fe faa8 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 8006b64:	6378      	str	r0, [r7, #52]	; 0x34
 8006b66:	f000 be76 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	2b10      	cmp	r3, #16
 8006b6e:	d104      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b70:	f7fe f97e 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8006b74:	6378      	str	r0, [r7, #52]	; 0x34
 8006b76:	f000 be6e 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006b7a:	4b0e      	ldr	r3, [pc, #56]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b86:	d106      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d103      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8006b8e:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
 8006b92:	f000 be60 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006b96:	4b07      	ldr	r3, [pc, #28]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d10f      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2b30      	cmp	r3, #48	; 0x30
 8006ba8:	d10c      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8006baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bae:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb0:	f000 be51 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006bb4:	46020c00 	.word	0x46020c00
 8006bb8:	02dc6c00 	.word	0x02dc6c00
 8006bbc:	0800974c 	.word	0x0800974c
 8006bc0:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc8:	f000 be45 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bd0:	f1a2 0108 	sub.w	r1, r2, #8
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	d136      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006bd8:	4b9f      	ldr	r3, [pc, #636]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006be2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d104      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006bea:	f7fe fa63 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 8006bee:	6378      	str	r0, [r7, #52]	; 0x34
 8006bf0:	f000 be31 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf6:	2b40      	cmp	r3, #64	; 0x40
 8006bf8:	d104      	bne.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006bfa:	f7fe f939 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8006bfe:	6378      	str	r0, [r7, #52]	; 0x34
 8006c00:	f000 be29 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006c04:	4b94      	ldr	r3, [pc, #592]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c10:	d106      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	2b80      	cmp	r3, #128	; 0x80
 8006c16:	d103      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8006c18:	4b90      	ldr	r3, [pc, #576]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c1c:	f000 be1b 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006c20:	4b8d      	ldr	r3, [pc, #564]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d107      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	2bc0      	cmp	r3, #192	; 0xc0
 8006c32:	d104      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8006c34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c38:	637b      	str	r3, [r7, #52]	; 0x34
 8006c3a:	f000 be0c 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	637b      	str	r3, [r7, #52]	; 0x34
 8006c42:	f000 be08 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006c46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c4a:	f1a2 0110 	sub.w	r1, r2, #16
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	d139      	bne.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006c52:	4b81      	ldr	r3, [pc, #516]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d104      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c64:	f7fe fa26 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 8006c68:	6378      	str	r0, [r7, #52]	; 0x34
 8006c6a:	f000 bdf4 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c74:	d104      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c76:	f7fe f8fb 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8006c7a:	6378      	str	r0, [r7, #52]	; 0x34
 8006c7c:	f000 bdeb 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006c80:	4b75      	ldr	r3, [pc, #468]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c8c:	d107      	bne.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c94:	d103      	bne.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8006c96:	4b71      	ldr	r3, [pc, #452]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006c98:	637b      	str	r3, [r7, #52]	; 0x34
 8006c9a:	f000 bddc 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006c9e:	4b6e      	ldr	r3, [pc, #440]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d108      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb2:	d104      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8006cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006cba:	f000 bdcc 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc2:	f000 bdc8 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cca:	f1a2 0120 	sub.w	r1, r2, #32
 8006cce:	430b      	orrs	r3, r1
 8006cd0:	d158      	bne.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006cd2:	4b61      	ldr	r3, [pc, #388]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006ce4:	f7fe fa0e 	bl	8005104 <HAL_RCC_GetPCLK3Freq>
 8006ce8:	6378      	str	r0, [r7, #52]	; 0x34
 8006cea:	f000 bdb4 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d104      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006cf4:	f7fe f8bc 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8006cf8:	6378      	str	r0, [r7, #52]	; 0x34
 8006cfa:	f000 bdac 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006cfe:	4b56      	ldr	r3, [pc, #344]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d0a:	d106      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d103      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8006d12:	4b52      	ldr	r3, [pc, #328]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d14:	637b      	str	r3, [r7, #52]	; 0x34
 8006d16:	f000 bd9e 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006d1a:	4b4f      	ldr	r3, [pc, #316]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d107      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d104      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8006d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d32:	637b      	str	r3, [r7, #52]	; 0x34
 8006d34:	f000 bd8f 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006d38:	4b47      	ldr	r3, [pc, #284]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0320 	and.w	r3, r3, #32
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	d11b      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d118      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d4a:	4b43      	ldr	r3, [pc, #268]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d005      	beq.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006d56:	4b40      	ldr	r3, [pc, #256]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	0e1b      	lsrs	r3, r3, #24
 8006d5c:	f003 030f 	and.w	r3, r3, #15
 8006d60:	e006      	b.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8006d62:	4b3d      	ldr	r3, [pc, #244]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d68:	041b      	lsls	r3, r3, #16
 8006d6a:	0e1b      	lsrs	r3, r3, #24
 8006d6c:	f003 030f 	and.w	r3, r3, #15
 8006d70:	4a3b      	ldr	r2, [pc, #236]	; (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d76:	637b      	str	r3, [r7, #52]	; 0x34
 8006d78:	f000 bd6d 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d80:	f000 bd69 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d88:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	d169      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006d90:	4b31      	ldr	r3, [pc, #196]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d96:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006d9a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da2:	d104      	bne.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006da4:	f7fe f864 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8006da8:	6378      	str	r0, [r7, #52]	; 0x34
 8006daa:	f000 bd54 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db4:	d108      	bne.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006db6:	f107 0318 	add.w	r3, r7, #24
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff f962 	bl	8006084 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc4:	f000 bd47 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d104      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006dce:	f7fe f957 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 8006dd2:	6378      	str	r0, [r7, #52]	; 0x34
 8006dd4:	f000 bd3f 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006dde:	d118      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006de0:	4b1d      	ldr	r3, [pc, #116]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006dec:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	0f1b      	lsrs	r3, r3, #28
 8006df2:	f003 030f 	and.w	r3, r3, #15
 8006df6:	e006      	b.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006df8:	4b17      	ldr	r3, [pc, #92]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006dfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	0f1b      	lsrs	r3, r3, #28
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	4a16      	ldr	r2, [pc, #88]	; (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e0e:	f000 bd22 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006e12:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e1e:	d107      	bne.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e26:	d103      	bne.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8006e28:	4b0c      	ldr	r3, [pc, #48]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2c:	f000 bd13 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006e30:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3c:	d107      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e44:	d103      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
 8006e4a:	f000 bd04 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	637b      	str	r3, [r7, #52]	; 0x34
 8006e52:	f000 bd00 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006e56:	bf00      	nop
 8006e58:	46020c00 	.word	0x46020c00
 8006e5c:	00f42400 	.word	0x00f42400
 8006e60:	0800974c 	.word	0x0800974c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e68:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	d14e      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006e70:	4ba8      	ldr	r3, [pc, #672]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d841      	bhi.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006e82:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006ec1 	.word	0x08006ec1
 8006e8c:	08006e9d 	.word	0x08006e9d
 8006e90:	08006eaf 	.word	0x08006eaf
 8006e94:	08006ecb 	.word	0x08006ecb
 8006e98:	08006ed5 	.word	0x08006ed5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fe ff89 	bl	8005db8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006eaa:	f000 bcd4 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eae:	f107 030c 	add.w	r3, r7, #12
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7ff fa4c 	bl	8006350 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ebc:	f000 bccb 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006ec0:	f7fe f8de 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 8006ec4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006ec6:	f000 bcc6 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006eca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006ece:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ed0:	f000 bcc1 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ed4:	4b8f      	ldr	r3, [pc, #572]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8006ee0:	4b8c      	ldr	r3, [pc, #560]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	0e1b      	lsrs	r3, r3, #24
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	e006      	b.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006eec:	4b89      	ldr	r3, [pc, #548]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006eee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ef2:	041b      	lsls	r3, r3, #16
 8006ef4:	0e1b      	lsrs	r3, r3, #24
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	4a87      	ldr	r2, [pc, #540]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f02:	f000 bca8 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f0a:	f000 bca4 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006f0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f12:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006f16:	430b      	orrs	r3, r1
 8006f18:	d15d      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006f1a:	4b7e      	ldr	r3, [pc, #504]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f20:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006f24:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f2c:	d036      	beq.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f34:	d84b      	bhi.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f3c:	d029      	beq.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f44:	d843      	bhi.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f4c:	d013      	beq.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f54:	d83b      	bhi.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d015      	beq.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f62:	d134      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fe ff25 	bl	8005db8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f72:	f000 bc70 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f76:	f107 030c 	add.w	r3, r7, #12
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff f9e8 	bl	8006350 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f84:	f000 bc67 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006f88:	f7fe f87a 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 8006f8c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f8e:	f000 bc62 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006f92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006f96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f98:	f000 bc5d 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f9c:	4b5d      	ldr	r3, [pc, #372]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006fa8:	4b5a      	ldr	r3, [pc, #360]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	0e1b      	lsrs	r3, r3, #24
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	e006      	b.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8006fb4:	4b57      	ldr	r3, [pc, #348]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fba:	041b      	lsls	r3, r3, #16
 8006fbc:	0e1b      	lsrs	r3, r3, #24
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	4a55      	ldr	r2, [pc, #340]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fca:	f000 bc44 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fd2:	f000 bc40 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fda:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006fde:	430b      	orrs	r3, r1
 8006fe0:	d14a      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006fe2:	4b4c      	ldr	r3, [pc, #304]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fe8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d104      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ff4:	f7fe f85e 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 8006ff8:	6378      	str	r0, [r7, #52]	; 0x34
 8006ffa:	f000 bc2c 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007004:	d104      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007006:	f7fd ff33 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 800700a:	6378      	str	r0, [r7, #52]	; 0x34
 800700c:	f000 bc23 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007010:	4b40      	ldr	r3, [pc, #256]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800701c:	d107      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007024:	d103      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8007026:	4b3d      	ldr	r3, [pc, #244]	; (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007028:	637b      	str	r3, [r7, #52]	; 0x34
 800702a:	f000 bc14 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800702e:	4b39      	ldr	r3, [pc, #228]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0320 	and.w	r3, r3, #32
 8007036:	2b20      	cmp	r3, #32
 8007038:	d11b      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007040:	d117      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007042:	4b34      	ldr	r3, [pc, #208]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d005      	beq.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800704e:	4b31      	ldr	r3, [pc, #196]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	0e1b      	lsrs	r3, r3, #24
 8007054:	f003 030f 	and.w	r3, r3, #15
 8007058:	e006      	b.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800705a:	4b2e      	ldr	r3, [pc, #184]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800705c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007060:	041b      	lsls	r3, r3, #16
 8007062:	0e1b      	lsrs	r3, r3, #24
 8007064:	f003 030f 	and.w	r3, r3, #15
 8007068:	4a2b      	ldr	r2, [pc, #172]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800706a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800706e:	637b      	str	r3, [r7, #52]	; 0x34
 8007070:	e3f1      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	637b      	str	r3, [r7, #52]	; 0x34
 8007076:	e3ee      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800707c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007080:	430b      	orrs	r3, r1
 8007082:	d14d      	bne.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007084:	4b23      	ldr	r3, [pc, #140]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800708a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800708e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007092:	2b00      	cmp	r3, #0
 8007094:	d103      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007096:	f7fe f80d 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 800709a:	6378      	str	r0, [r7, #52]	; 0x34
 800709c:	e3db      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a4:	d103      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070a6:	f7fd fee3 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 80070aa:	6378      	str	r0, [r7, #52]	; 0x34
 80070ac:	e3d3      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80070ae:	4b19      	ldr	r3, [pc, #100]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ba:	d106      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 80070bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070c2:	d102      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 80070c4:	4b15      	ldr	r3, [pc, #84]	; (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80070c6:	637b      	str	r3, [r7, #52]	; 0x34
 80070c8:	e3c5      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80070ca:	4b12      	ldr	r3, [pc, #72]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d11b      	bne.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80070d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070dc:	d117      	bne.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070de:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 80070ea:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	0e1b      	lsrs	r3, r3, #24
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	e006      	b.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80070f6:	4b07      	ldr	r3, [pc, #28]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070fc:	041b      	lsls	r3, r3, #16
 80070fe:	0e1b      	lsrs	r3, r3, #24
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	4a04      	ldr	r2, [pc, #16]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800710a:	637b      	str	r3, [r7, #52]	; 0x34
 800710c:	e3a3      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	637b      	str	r3, [r7, #52]	; 0x34
 8007112:	e3a0      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007114:	46020c00 	.word	0x46020c00
 8007118:	0800974c 	.word	0x0800974c
 800711c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007124:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007128:	430b      	orrs	r3, r1
 800712a:	d148      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800712c:	4b9d      	ldr	r3, [pc, #628]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800712e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007132:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007136:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713a:	2bc0      	cmp	r3, #192	; 0xc0
 800713c:	d024      	beq.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007140:	2bc0      	cmp	r3, #192	; 0xc0
 8007142:	d839      	bhi.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	2b80      	cmp	r3, #128	; 0x80
 8007148:	d00d      	beq.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	2b80      	cmp	r3, #128	; 0x80
 800714e:	d833      	bhi.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	2b40      	cmp	r3, #64	; 0x40
 800715a:	d011      	beq.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800715c:	e02c      	b.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800715e:	f7fd ffd1 	bl	8005104 <HAL_RCC_GetPCLK3Freq>
 8007162:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007164:	e377      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007166:	4b8f      	ldr	r3, [pc, #572]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800716e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007172:	d102      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8007174:	4b8c      	ldr	r3, [pc, #560]	; (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007176:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007178:	e36d      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800717e:	e36a      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007180:	f7fd fe76 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8007184:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007186:	e366      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007188:	4b86      	ldr	r3, [pc, #536]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8007194:	4b83      	ldr	r3, [pc, #524]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	0f1b      	lsrs	r3, r3, #28
 800719a:	f003 030f 	and.w	r3, r3, #15
 800719e:	e006      	b.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 80071a0:	4b80      	ldr	r3, [pc, #512]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80071a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071a6:	041b      	lsls	r3, r3, #16
 80071a8:	0f1b      	lsrs	r3, r3, #28
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	4a7f      	ldr	r2, [pc, #508]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80071b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071b6:	e34e      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071bc:	e34b      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80071be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071c2:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80071c6:	430b      	orrs	r3, r1
 80071c8:	d147      	bne.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80071ca:	4b76      	ldr	r3, [pc, #472]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80071cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80071d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d103      	bne.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80071dc:	f7fd ff6a 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 80071e0:	6378      	str	r0, [r7, #52]	; 0x34
 80071e2:	e338      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071ea:	d103      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80071ec:	f7fd fe40 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 80071f0:	6378      	str	r0, [r7, #52]	; 0x34
 80071f2:	e330      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80071f4:	4b6b      	ldr	r3, [pc, #428]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007200:	d106      	bne.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007208:	d102      	bne.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 800720a:	4b67      	ldr	r3, [pc, #412]	; (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800720c:	637b      	str	r3, [r7, #52]	; 0x34
 800720e:	e322      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007210:	4b64      	ldr	r3, [pc, #400]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	2b20      	cmp	r3, #32
 800721a:	d11b      	bne.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007222:	d117      	bne.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007224:	4b5f      	ldr	r3, [pc, #380]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d005      	beq.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007230:	4b5c      	ldr	r3, [pc, #368]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	0e1b      	lsrs	r3, r3, #24
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	e006      	b.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 800723c:	4b59      	ldr	r3, [pc, #356]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800723e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007242:	041b      	lsls	r3, r3, #16
 8007244:	0e1b      	lsrs	r3, r3, #24
 8007246:	f003 030f 	and.w	r3, r3, #15
 800724a:	4a58      	ldr	r2, [pc, #352]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800724c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007250:	637b      	str	r3, [r7, #52]	; 0x34
 8007252:	e300      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	637b      	str	r3, [r7, #52]	; 0x34
 8007258:	e2fd      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800725a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800725e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007262:	430b      	orrs	r3, r1
 8007264:	d15b      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007266:	4b4f      	ldr	r3, [pc, #316]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800726c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007270:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	2b00      	cmp	r3, #0
 8007276:	d117      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007278:	4b4a      	ldr	r3, [pc, #296]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8007284:	4b47      	ldr	r3, [pc, #284]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	0e1b      	lsrs	r3, r3, #24
 800728a:	f003 030f 	and.w	r3, r3, #15
 800728e:	e006      	b.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8007290:	4b44      	ldr	r3, [pc, #272]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007292:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007296:	041b      	lsls	r3, r3, #16
 8007298:	0e1b      	lsrs	r3, r3, #24
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	4a43      	ldr	r2, [pc, #268]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80072a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072a4:	637b      	str	r3, [r7, #52]	; 0x34
 80072a6:	e2d6      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80072a8:	4b3e      	ldr	r3, [pc, #248]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80072aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072b6:	d112      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072be:	d10e      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072c0:	4b38      	ldr	r3, [pc, #224]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80072c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ce:	d102      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 80072d0:	23fa      	movs	r3, #250	; 0xfa
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072d4:	e2bf      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80072d6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80072da:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072dc:	e2bb      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80072de:	4b31      	ldr	r3, [pc, #196]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ea:	d106      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f2:	d102      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 80072f4:	4b2c      	ldr	r3, [pc, #176]	; (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80072f6:	637b      	str	r3, [r7, #52]	; 0x34
 80072f8:	e2ad      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80072fa:	4b2a      	ldr	r3, [pc, #168]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80072fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b02      	cmp	r3, #2
 8007306:	d107      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800730e:	d103      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8007310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007314:	637b      	str	r3, [r7, #52]	; 0x34
 8007316:	e29e      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	637b      	str	r3, [r7, #52]	; 0x34
 800731c:	e29b      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800731e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007322:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007326:	430b      	orrs	r3, r1
 8007328:	d162      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800732a:	4b1e      	ldr	r3, [pc, #120]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800732c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007330:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007334:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	2b00      	cmp	r3, #0
 800733a:	d117      	bne.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800733c:	4b19      	ldr	r3, [pc, #100]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007348:	4b16      	ldr	r3, [pc, #88]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	0e1b      	lsrs	r3, r3, #24
 800734e:	f003 030f 	and.w	r3, r3, #15
 8007352:	e006      	b.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007354:	4b13      	ldr	r3, [pc, #76]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800735a:	041b      	lsls	r3, r3, #16
 800735c:	0e1b      	lsrs	r3, r3, #24
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	4a12      	ldr	r2, [pc, #72]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
 800736a:	e274      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800736c:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800736e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800737a:	d119      	bne.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007382:	d115      	bne.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007384:	4b07      	ldr	r3, [pc, #28]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007386:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800738a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800738e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007392:	d102      	bne.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8007394:	23fa      	movs	r3, #250	; 0xfa
 8007396:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007398:	e25d      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800739a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800739e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073a0:	e259      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80073a2:	bf00      	nop
 80073a4:	46020c00 	.word	0x46020c00
 80073a8:	00f42400 	.word	0x00f42400
 80073ac:	0800974c 	.word	0x0800974c
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80073b0:	4b9d      	ldr	r3, [pc, #628]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073bc:	d106      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c4:	d102      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 80073c6:	4b99      	ldr	r3, [pc, #612]	; (800762c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80073c8:	637b      	str	r3, [r7, #52]	; 0x34
 80073ca:	e244      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80073cc:	4b96      	ldr	r3, [pc, #600]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80073ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d107      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073e0:	d103      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 80073e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073e6:	637b      	str	r3, [r7, #52]	; 0x34
 80073e8:	e235      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	637b      	str	r3, [r7, #52]	; 0x34
 80073ee:	e232      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80073f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073f4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80073f8:	430b      	orrs	r3, r1
 80073fa:	d147      	bne.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80073fc:	4b8a      	ldr	r3, [pc, #552]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80073fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007402:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007406:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800740e:	f7fd fe51 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 8007412:	6378      	str	r0, [r7, #52]	; 0x34
 8007414:	e21f      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007416:	4b84      	ldr	r3, [pc, #528]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800741c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007424:	d112      	bne.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800742c:	d10e      	bne.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800742e:	4b7e      	ldr	r3, [pc, #504]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007438:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800743c:	d102      	bne.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800743e:	23fa      	movs	r3, #250	; 0xfa
 8007440:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007442:	e208      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007444:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800744a:	e204      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800744c:	4b76      	ldr	r3, [pc, #472]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007458:	d106      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007460:	d102      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8007462:	4b72      	ldr	r3, [pc, #456]	; (800762c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
 8007466:	e1f6      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007468:	4b6f      	ldr	r3, [pc, #444]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800746a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b02      	cmp	r3, #2
 8007474:	d107      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800747c:	d103      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800747e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007482:	637b      	str	r3, [r7, #52]	; 0x34
 8007484:	e1e7      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007486:	2300      	movs	r3, #0
 8007488:	637b      	str	r3, [r7, #52]	; 0x34
 800748a:	e1e4      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800748c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007490:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007494:	430b      	orrs	r3, r1
 8007496:	d12d      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007498:	4b63      	ldr	r3, [pc, #396]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800749a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800749e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80074a2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80074a4:	4b60      	ldr	r3, [pc, #384]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074b0:	d105      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 80074b8:	4b5c      	ldr	r3, [pc, #368]	; (800762c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80074ba:	637b      	str	r3, [r7, #52]	; 0x34
 80074bc:	e1cb      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074c4:	d107      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe fc74 	bl	8005db8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	637b      	str	r3, [r7, #52]	; 0x34
 80074d4:	e1bf      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074dc:	d107      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074de:	f107 0318 	add.w	r3, r7, #24
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe fdce 	bl	8006084 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	637b      	str	r3, [r7, #52]	; 0x34
 80074ec:	e1b3      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	637b      	str	r3, [r7, #52]	; 0x34
 80074f2:	e1b0      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80074f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074f8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80074fc:	430b      	orrs	r3, r1
 80074fe:	d14d      	bne.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007500:	4b49      	ldr	r3, [pc, #292]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007506:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800750a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007512:	d028      	beq.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800751a:	d83c      	bhi.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007522:	d013      	beq.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800752a:	d834      	bhi.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	2b00      	cmp	r3, #0
 8007530:	d004      	beq.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007538:	d004      	beq.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800753a:	e02c      	b.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800753c:	f7fd fdce 	bl	80050dc <HAL_RCC_GetPCLK2Freq>
 8007540:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007542:	e188      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007544:	f7fd fc94 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8007548:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800754a:	e184      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800754c:	4b36      	ldr	r3, [pc, #216]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007558:	d102      	bne.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800755a:	4b34      	ldr	r3, [pc, #208]	; (800762c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800755c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800755e:	e17a      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007564:	e177      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007566:	4b30      	ldr	r3, [pc, #192]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8007572:	4b2d      	ldr	r3, [pc, #180]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	0e1b      	lsrs	r3, r3, #24
 8007578:	f003 030f 	and.w	r3, r3, #15
 800757c:	e006      	b.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800757e:	4b2a      	ldr	r3, [pc, #168]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007584:	041b      	lsls	r3, r3, #16
 8007586:	0e1b      	lsrs	r3, r3, #24
 8007588:	f003 030f 	and.w	r3, r3, #15
 800758c:	4a28      	ldr	r2, [pc, #160]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800758e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007594:	e15f      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800759a:	e15c      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800759c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80075a4:	430b      	orrs	r3, r1
 80075a6:	d154      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80075a8:	4b1f      	ldr	r3, [pc, #124]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80075aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075b2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075ba:	d028      	beq.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075c2:	d843      	bhi.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075ca:	d013      	beq.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075d2:	d83b      	bhi.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e0:	d004      	beq.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80075e2:	e033      	b.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80075e4:	f7fd fd66 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 80075e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80075ea:	e134      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80075ec:	f7fd fc40 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 80075f0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80075f2:	e130      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075f4:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007600:	d102      	bne.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8007602:	4b0a      	ldr	r3, [pc, #40]	; (800762c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007604:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007606:	e126      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800760c:	e123      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800760e:	4b06      	ldr	r3, [pc, #24]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00c      	beq.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800761a:	4b03      	ldr	r3, [pc, #12]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	0e1b      	lsrs	r3, r3, #24
 8007620:	f003 030f 	and.w	r3, r3, #15
 8007624:	e00d      	b.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8007626:	bf00      	nop
 8007628:	46020c00 	.word	0x46020c00
 800762c:	00f42400 	.word	0x00f42400
 8007630:	0800974c 	.word	0x0800974c
 8007634:	4b8a      	ldr	r3, [pc, #552]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007636:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800763a:	041b      	lsls	r3, r3, #16
 800763c:	0e1b      	lsrs	r3, r3, #24
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	4a88      	ldr	r2, [pc, #544]	; (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8007644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007648:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800764a:	e104      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007650:	e101      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007656:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800765a:	430b      	orrs	r3, r1
 800765c:	d16e      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800765e:	4b80      	ldr	r3, [pc, #512]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007664:	f003 0318 	and.w	r3, r3, #24
 8007668:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	2b18      	cmp	r3, #24
 800766e:	d862      	bhi.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8007670:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	080076dd 	.word	0x080076dd
 800767c:	08007737 	.word	0x08007737
 8007680:	08007737 	.word	0x08007737
 8007684:	08007737 	.word	0x08007737
 8007688:	08007737 	.word	0x08007737
 800768c:	08007737 	.word	0x08007737
 8007690:	08007737 	.word	0x08007737
 8007694:	08007737 	.word	0x08007737
 8007698:	080076e5 	.word	0x080076e5
 800769c:	08007737 	.word	0x08007737
 80076a0:	08007737 	.word	0x08007737
 80076a4:	08007737 	.word	0x08007737
 80076a8:	08007737 	.word	0x08007737
 80076ac:	08007737 	.word	0x08007737
 80076b0:	08007737 	.word	0x08007737
 80076b4:	08007737 	.word	0x08007737
 80076b8:	080076ed 	.word	0x080076ed
 80076bc:	08007737 	.word	0x08007737
 80076c0:	08007737 	.word	0x08007737
 80076c4:	08007737 	.word	0x08007737
 80076c8:	08007737 	.word	0x08007737
 80076cc:	08007737 	.word	0x08007737
 80076d0:	08007737 	.word	0x08007737
 80076d4:	08007737 	.word	0x08007737
 80076d8:	08007707 	.word	0x08007707
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80076dc:	f7fd fd12 	bl	8005104 <HAL_RCC_GetPCLK3Freq>
 80076e0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80076e2:	e0b8      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80076e4:	f7fd fbc4 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 80076e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80076ea:	e0b4      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076ec:	4b5c      	ldr	r3, [pc, #368]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f8:	d102      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 80076fa:	4b5b      	ldr	r3, [pc, #364]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80076fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076fe:	e0aa      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007704:	e0a7      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007706:	4b56      	ldr	r3, [pc, #344]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d005      	beq.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8007712:	4b53      	ldr	r3, [pc, #332]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	0e1b      	lsrs	r3, r3, #24
 8007718:	f003 030f 	and.w	r3, r3, #15
 800771c:	e006      	b.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800771e:	4b50      	ldr	r3, [pc, #320]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007724:	041b      	lsls	r3, r3, #16
 8007726:	0e1b      	lsrs	r3, r3, #24
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	4a4d      	ldr	r2, [pc, #308]	; (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800772e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007732:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007734:	e08f      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800773a:	e08c      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800773c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007740:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8007744:	430b      	orrs	r3, r1
 8007746:	d14c      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007748:	4b45      	ldr	r3, [pc, #276]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800774a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800774e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007752:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800775a:	d013      	beq.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007762:	d83b      	bhi.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800776a:	d013      	beq.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007772:	d833      	bhi.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	2b00      	cmp	r3, #0
 8007778:	d014      	beq.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007780:	d014      	beq.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8007782:	e02b      	b.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007784:	f107 0318 	add.w	r3, r7, #24
 8007788:	4618      	mov	r0, r3
 800778a:	f7fe fc7b 	bl	8006084 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007792:	e060      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007798:	4618      	mov	r0, r3
 800779a:	f7fe fb0d 	bl	8005db8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077a2:	e058      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80077a4:	f7fd fb64 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 80077a8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80077aa:	e054      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077ac:	4b2c      	ldr	r3, [pc, #176]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d005      	beq.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80077b8:	4b29      	ldr	r3, [pc, #164]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	0e1b      	lsrs	r3, r3, #24
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	e006      	b.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80077c4:	4b26      	ldr	r3, [pc, #152]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80077c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077ca:	041b      	lsls	r3, r3, #16
 80077cc:	0e1b      	lsrs	r3, r3, #24
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	4a24      	ldr	r2, [pc, #144]	; (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80077d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077da:	e03c      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077e0:	e039      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80077e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077e6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80077ea:	430b      	orrs	r3, r1
 80077ec:	d131      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80077ee:	4b1c      	ldr	r3, [pc, #112]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80077f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80077f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077f8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80077fa:	4b19      	ldr	r3, [pc, #100]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80077fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b02      	cmp	r3, #2
 8007806:	d106      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	2b00      	cmp	r3, #0
 800780c:	d103      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800780e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007812:	637b      	str	r3, [r7, #52]	; 0x34
 8007814:	e01f      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007816:	4b12      	ldr	r3, [pc, #72]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800781c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007824:	d112      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8007826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800782c:	d10e      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800782e:	4b0c      	ldr	r3, [pc, #48]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800783c:	d102      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800783e:	23fa      	movs	r3, #250	; 0xfa
 8007840:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007842:	e008      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007844:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007848:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800784a:	e004      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	637b      	str	r3, [r7, #52]	; 0x34
 8007850:	e001      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8007856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007858:	4618      	mov	r0, r3
 800785a:	3738      	adds	r7, #56	; 0x38
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	46020c00 	.word	0x46020c00
 8007864:	0800974c 	.word	0x0800974c
 8007868:	00f42400 	.word	0x00f42400

0800786c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007874:	4b47      	ldr	r3, [pc, #284]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a46      	ldr	r2, [pc, #280]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 800787a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800787e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007880:	f7fa f9b4 	bl	8001bec <HAL_GetTick>
 8007884:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007886:	e008      	b.n	800789a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007888:	f7fa f9b0 	bl	8001bec <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d901      	bls.n	800789a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e077      	b.n	800798a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800789a:	4b3e      	ldr	r3, [pc, #248]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1f0      	bne.n	8007888 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80078a6:	4b3b      	ldr	r3, [pc, #236]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 80078a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80078ae:	f023 0303 	bic.w	r3, r3, #3
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	6811      	ldr	r1, [r2, #0]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6852      	ldr	r2, [r2, #4]
 80078ba:	3a01      	subs	r2, #1
 80078bc:	0212      	lsls	r2, r2, #8
 80078be:	430a      	orrs	r2, r1
 80078c0:	4934      	ldr	r1, [pc, #208]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80078c6:	4b33      	ldr	r3, [pc, #204]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 80078c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078ca:	4b33      	ldr	r3, [pc, #204]	; (8007998 <RCCEx_PLL2_Config+0x12c>)
 80078cc:	4013      	ands	r3, r2
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	6892      	ldr	r2, [r2, #8]
 80078d2:	3a01      	subs	r2, #1
 80078d4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	68d2      	ldr	r2, [r2, #12]
 80078dc:	3a01      	subs	r2, #1
 80078de:	0252      	lsls	r2, r2, #9
 80078e0:	b292      	uxth	r2, r2
 80078e2:	4311      	orrs	r1, r2
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6912      	ldr	r2, [r2, #16]
 80078e8:	3a01      	subs	r2, #1
 80078ea:	0412      	lsls	r2, r2, #16
 80078ec:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80078f0:	4311      	orrs	r1, r2
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6952      	ldr	r2, [r2, #20]
 80078f6:	3a01      	subs	r2, #1
 80078f8:	0612      	lsls	r2, r2, #24
 80078fa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80078fe:	430a      	orrs	r2, r1
 8007900:	4924      	ldr	r1, [pc, #144]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 8007902:	4313      	orrs	r3, r2
 8007904:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007906:	4b23      	ldr	r3, [pc, #140]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	f023 020c 	bic.w	r2, r3, #12
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	4920      	ldr	r1, [pc, #128]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 8007914:	4313      	orrs	r3, r2
 8007916:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007918:	4b1e      	ldr	r3, [pc, #120]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 800791a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	491c      	ldr	r1, [pc, #112]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 8007922:	4313      	orrs	r3, r2
 8007924:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007926:	4b1b      	ldr	r3, [pc, #108]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 8007928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792a:	4a1a      	ldr	r2, [pc, #104]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 800792c:	f023 0310 	bic.w	r3, r3, #16
 8007930:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007932:	4b18      	ldr	r3, [pc, #96]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800793a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	69d2      	ldr	r2, [r2, #28]
 8007942:	00d2      	lsls	r2, r2, #3
 8007944:	4913      	ldr	r1, [pc, #76]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 8007946:	4313      	orrs	r3, r2
 8007948:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800794a:	4b12      	ldr	r3, [pc, #72]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 800794c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794e:	4a11      	ldr	r2, [pc, #68]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 8007950:	f043 0310 	orr.w	r3, r3, #16
 8007954:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007956:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a0e      	ldr	r2, [pc, #56]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 800795c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007960:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007962:	f7fa f943 	bl	8001bec <HAL_GetTick>
 8007966:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007968:	e008      	b.n	800797c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800796a:	f7fa f93f 	bl	8001bec <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	d901      	bls.n	800797c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e006      	b.n	800798a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800797c:	4b05      	ldr	r3, [pc, #20]	; (8007994 <RCCEx_PLL2_Config+0x128>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0f0      	beq.n	800796a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007988:	2300      	movs	r3, #0

}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	46020c00 	.word	0x46020c00
 8007998:	80800000 	.word	0x80800000

0800799c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80079a4:	4b47      	ldr	r3, [pc, #284]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a46      	ldr	r2, [pc, #280]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 80079aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079ae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079b0:	f7fa f91c 	bl	8001bec <HAL_GetTick>
 80079b4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079b6:	e008      	b.n	80079ca <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079b8:	f7fa f918 	bl	8001bec <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d901      	bls.n	80079ca <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e077      	b.n	8007aba <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079ca:	4b3e      	ldr	r3, [pc, #248]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1f0      	bne.n	80079b8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80079d6:	4b3b      	ldr	r3, [pc, #236]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 80079d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80079de:	f023 0303 	bic.w	r3, r3, #3
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6811      	ldr	r1, [r2, #0]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	6852      	ldr	r2, [r2, #4]
 80079ea:	3a01      	subs	r2, #1
 80079ec:	0212      	lsls	r2, r2, #8
 80079ee:	430a      	orrs	r2, r1
 80079f0:	4934      	ldr	r1, [pc, #208]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	630b      	str	r3, [r1, #48]	; 0x30
 80079f6:	4b33      	ldr	r3, [pc, #204]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 80079f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079fa:	4b33      	ldr	r3, [pc, #204]	; (8007ac8 <RCCEx_PLL3_Config+0x12c>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	6892      	ldr	r2, [r2, #8]
 8007a02:	3a01      	subs	r2, #1
 8007a04:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	68d2      	ldr	r2, [r2, #12]
 8007a0c:	3a01      	subs	r2, #1
 8007a0e:	0252      	lsls	r2, r2, #9
 8007a10:	b292      	uxth	r2, r2
 8007a12:	4311      	orrs	r1, r2
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	6912      	ldr	r2, [r2, #16]
 8007a18:	3a01      	subs	r2, #1
 8007a1a:	0412      	lsls	r2, r2, #16
 8007a1c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007a20:	4311      	orrs	r1, r2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6952      	ldr	r2, [r2, #20]
 8007a26:	3a01      	subs	r2, #1
 8007a28:	0612      	lsls	r2, r2, #24
 8007a2a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	4924      	ldr	r1, [pc, #144]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007a36:	4b23      	ldr	r3, [pc, #140]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	f023 020c 	bic.w	r2, r3, #12
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	4920      	ldr	r1, [pc, #128]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007a48:	4b1e      	ldr	r3, [pc, #120]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 8007a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	491c      	ldr	r1, [pc, #112]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007a56:	4b1b      	ldr	r3, [pc, #108]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	4a1a      	ldr	r2, [pc, #104]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 8007a5c:	f023 0310 	bic.w	r3, r3, #16
 8007a60:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a62:	4b18      	ldr	r3, [pc, #96]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 8007a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a6a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	69d2      	ldr	r2, [r2, #28]
 8007a72:	00d2      	lsls	r2, r2, #3
 8007a74:	4913      	ldr	r1, [pc, #76]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007a7a:	4b12      	ldr	r3, [pc, #72]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 8007a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7e:	4a11      	ldr	r2, [pc, #68]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 8007a80:	f043 0310 	orr.w	r3, r3, #16
 8007a84:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007a86:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a0e      	ldr	r2, [pc, #56]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 8007a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a90:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a92:	f7fa f8ab 	bl	8001bec <HAL_GetTick>
 8007a96:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a98:	e008      	b.n	8007aac <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a9a:	f7fa f8a7 	bl	8001bec <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d901      	bls.n	8007aac <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e006      	b.n	8007aba <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007aac:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <RCCEx_PLL3_Config+0x128>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d0f0      	beq.n	8007a9a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	46020c00 	.word	0x46020c00
 8007ac8:	80800000 	.word	0x80800000

08007acc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e03e      	b.n	8007b60 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d106      	bne.n	8007afc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f7f9 ff60 	bl	80019bc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3308      	adds	r3, #8
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f000 fcda 	bl	80084c0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6818      	ldr	r0, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	461a      	mov	r2, r3
 8007b16:	68b9      	ldr	r1, [r7, #8]
 8007b18:	f000 fda2 	bl	8008660 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6858      	ldr	r0, [r3, #4]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	f000 fdeb 	bl	8008704 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	6892      	ldr	r2, [r2, #8]
 8007b36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	6892      	ldr	r2, [r2, #8]
 8007b42:	f041 0101 	orr.w	r1, r1, #1
 8007b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007b4a:	4b07      	ldr	r3, [pc, #28]	; (8007b68 <HAL_SRAM_Init+0x9c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a06      	ldr	r2, [pc, #24]	; (8007b68 <HAL_SRAM_Init+0x9c>)
 8007b50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b54:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	420d0400 	.word	0x420d0400

08007b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e042      	b.n	8007c04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d106      	bne.n	8007b96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7f9 fdc9 	bl	8001728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2224      	movs	r2, #36	; 0x24
 8007b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0201 	bic.w	r2, r2, #1
 8007bac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f82c 	bl	8007c0c <UART_SetConfig>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d101      	bne.n	8007bbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e022      	b.n	8007c04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f9c2 	bl	8007f50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689a      	ldr	r2, [r3, #8]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 0201 	orr.w	r2, r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fa49 	bl	8008094 <UART_CheckIdleState>
 8007c02:	4603      	mov	r3, r0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c10:	b094      	sub	sp, #80	; 0x50
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	4b7e      	ldr	r3, [pc, #504]	; (8007e1c <UART_SetConfig+0x210>)
 8007c22:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	689a      	ldr	r2, [r3, #8]
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	431a      	orrs	r2, r3
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4977      	ldr	r1, [pc, #476]	; (8007e20 <UART_SetConfig+0x214>)
 8007c44:	4019      	ands	r1, r3
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	68d9      	ldr	r1, [r3, #12]
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	ea40 0301 	orr.w	r3, r0, r1
 8007c66:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	4b6a      	ldr	r3, [pc, #424]	; (8007e1c <UART_SetConfig+0x210>)
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d009      	beq.n	8007c8c <UART_SetConfig+0x80>
 8007c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	4b69      	ldr	r3, [pc, #420]	; (8007e24 <UART_SetConfig+0x218>)
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d004      	beq.n	8007c8c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c84:	6a1a      	ldr	r2, [r3, #32]
 8007c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007c96:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007caa:	f023 000f 	bic.w	r0, r3, #15
 8007cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	ea40 0301 	orr.w	r3, r0, r1
 8007cba:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	4b59      	ldr	r3, [pc, #356]	; (8007e28 <UART_SetConfig+0x21c>)
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d102      	bne.n	8007ccc <UART_SetConfig+0xc0>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cca:	e029      	b.n	8007d20 <UART_SetConfig+0x114>
 8007ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	4b56      	ldr	r3, [pc, #344]	; (8007e2c <UART_SetConfig+0x220>)
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d102      	bne.n	8007cdc <UART_SetConfig+0xd0>
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cda:	e021      	b.n	8007d20 <UART_SetConfig+0x114>
 8007cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	4b53      	ldr	r3, [pc, #332]	; (8007e30 <UART_SetConfig+0x224>)
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d102      	bne.n	8007cec <UART_SetConfig+0xe0>
 8007ce6:	2304      	movs	r3, #4
 8007ce8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cea:	e019      	b.n	8007d20 <UART_SetConfig+0x114>
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	4b50      	ldr	r3, [pc, #320]	; (8007e34 <UART_SetConfig+0x228>)
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d102      	bne.n	8007cfc <UART_SetConfig+0xf0>
 8007cf6:	2308      	movs	r3, #8
 8007cf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cfa:	e011      	b.n	8007d20 <UART_SetConfig+0x114>
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	4b4d      	ldr	r3, [pc, #308]	; (8007e38 <UART_SetConfig+0x22c>)
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d102      	bne.n	8007d0c <UART_SetConfig+0x100>
 8007d06:	2310      	movs	r3, #16
 8007d08:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d0a:	e009      	b.n	8007d20 <UART_SetConfig+0x114>
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	4b42      	ldr	r3, [pc, #264]	; (8007e1c <UART_SetConfig+0x210>)
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d102      	bne.n	8007d1c <UART_SetConfig+0x110>
 8007d16:	2320      	movs	r3, #32
 8007d18:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d1a:	e001      	b.n	8007d20 <UART_SetConfig+0x114>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	4b3d      	ldr	r3, [pc, #244]	; (8007e1c <UART_SetConfig+0x210>)
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d005      	beq.n	8007d36 <UART_SetConfig+0x12a>
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	4b3d      	ldr	r3, [pc, #244]	; (8007e24 <UART_SetConfig+0x218>)
 8007d30:	429a      	cmp	r2, r3
 8007d32:	f040 8085 	bne.w	8007e40 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d38:	2200      	movs	r2, #0
 8007d3a:	623b      	str	r3, [r7, #32]
 8007d3c:	627a      	str	r2, [r7, #36]	; 0x24
 8007d3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007d42:	f7fe fc6b 	bl	800661c <HAL_RCCEx_GetPeriphCLKFreq>
 8007d46:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 80e8 	beq.w	8007f20 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d54:	4a39      	ldr	r2, [pc, #228]	; (8007e3c <UART_SetConfig+0x230>)
 8007d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d62:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	4413      	add	r3, r2
 8007d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d305      	bcc.n	8007d80 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d903      	bls.n	8007d88 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007d86:	e048      	b.n	8007e1a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	61bb      	str	r3, [r7, #24]
 8007d8e:	61fa      	str	r2, [r7, #28]
 8007d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d94:	4a29      	ldr	r2, [pc, #164]	; (8007e3c <UART_SetConfig+0x230>)
 8007d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	613b      	str	r3, [r7, #16]
 8007da0:	617a      	str	r2, [r7, #20]
 8007da2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007da6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007daa:	f7f8 fa63 	bl	8000274 <__aeabi_uldivmod>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4610      	mov	r0, r2
 8007db4:	4619      	mov	r1, r3
 8007db6:	f04f 0200 	mov.w	r2, #0
 8007dba:	f04f 0300 	mov.w	r3, #0
 8007dbe:	020b      	lsls	r3, r1, #8
 8007dc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007dc4:	0202      	lsls	r2, r0, #8
 8007dc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dc8:	6849      	ldr	r1, [r1, #4]
 8007dca:	0849      	lsrs	r1, r1, #1
 8007dcc:	2000      	movs	r0, #0
 8007dce:	460c      	mov	r4, r1
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	eb12 0804 	adds.w	r8, r2, r4
 8007dd6:	eb43 0905 	adc.w	r9, r3, r5
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	60bb      	str	r3, [r7, #8]
 8007de2:	60fa      	str	r2, [r7, #12]
 8007de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007de8:	4640      	mov	r0, r8
 8007dea:	4649      	mov	r1, r9
 8007dec:	f7f8 fa42 	bl	8000274 <__aeabi_uldivmod>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4613      	mov	r3, r2
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dfe:	d308      	bcc.n	8007e12 <UART_SetConfig+0x206>
 8007e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e06:	d204      	bcs.n	8007e12 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e0e:	60da      	str	r2, [r3, #12]
 8007e10:	e003      	b.n	8007e1a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007e18:	e082      	b.n	8007f20 <UART_SetConfig+0x314>
 8007e1a:	e081      	b.n	8007f20 <UART_SetConfig+0x314>
 8007e1c:	46002400 	.word	0x46002400
 8007e20:	cfff69f3 	.word	0xcfff69f3
 8007e24:	56002400 	.word	0x56002400
 8007e28:	40013800 	.word	0x40013800
 8007e2c:	40004400 	.word	0x40004400
 8007e30:	40004800 	.word	0x40004800
 8007e34:	40004c00 	.word	0x40004c00
 8007e38:	40005000 	.word	0x40005000
 8007e3c:	0800980c 	.word	0x0800980c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e48:	d13c      	bne.n	8007ec4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	607a      	str	r2, [r7, #4]
 8007e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e56:	f7fe fbe1 	bl	800661c <HAL_RCCEx_GetPeriphCLKFreq>
 8007e5a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d05e      	beq.n	8007f20 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	4a39      	ldr	r2, [pc, #228]	; (8007f4c <UART_SetConfig+0x340>)
 8007e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e74:	005a      	lsls	r2, r3, #1
 8007e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	085b      	lsrs	r3, r3, #1
 8007e7c:	441a      	add	r2, r3
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8a:	2b0f      	cmp	r3, #15
 8007e8c:	d916      	bls.n	8007ebc <UART_SetConfig+0x2b0>
 8007e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e94:	d212      	bcs.n	8007ebc <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	f023 030f 	bic.w	r3, r3, #15
 8007e9e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea2:	085b      	lsrs	r3, r3, #1
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007eb8:	60da      	str	r2, [r3, #12]
 8007eba:	e031      	b.n	8007f20 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007ec2:	e02d      	b.n	8007f20 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	469a      	mov	sl, r3
 8007eca:	4693      	mov	fp, r2
 8007ecc:	4650      	mov	r0, sl
 8007ece:	4659      	mov	r1, fp
 8007ed0:	f7fe fba4 	bl	800661c <HAL_RCCEx_GetPeriphCLKFreq>
 8007ed4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d021      	beq.n	8007f20 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	4a1a      	ldr	r2, [pc, #104]	; (8007f4c <UART_SetConfig+0x340>)
 8007ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eea:	fbb3 f2f2 	udiv	r2, r3, r2
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	441a      	add	r2, r3
 8007ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efe:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f02:	2b0f      	cmp	r3, #15
 8007f04:	d909      	bls.n	8007f1a <UART_SetConfig+0x30e>
 8007f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f0c:	d205      	bcs.n	8007f1a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	60da      	str	r2, [r3, #12]
 8007f18:	e002      	b.n	8007f20 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f22:	2201      	movs	r2, #1
 8007f24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f32:	2200      	movs	r2, #0
 8007f34:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f38:	2200      	movs	r2, #0
 8007f3a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007f3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3750      	adds	r7, #80	; 0x50
 8007f44:	46bd      	mov	sp, r7
 8007f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f4a:	bf00      	nop
 8007f4c:	0800980c 	.word	0x0800980c

08007f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00a      	beq.n	8007f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00a      	beq.n	8007f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00a      	beq.n	8007fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc2:	f003 0308 	and.w	r3, r3, #8
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe4:	f003 0310 	and.w	r3, r3, #16
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00a      	beq.n	8008002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	430a      	orrs	r2, r1
 8008000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008006:	f003 0320 	and.w	r3, r3, #32
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01a      	beq.n	8008066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	430a      	orrs	r2, r1
 8008044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800804e:	d10a      	bne.n	8008066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	605a      	str	r2, [r3, #4]
  }
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af02      	add	r7, sp, #8
 800809a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080a4:	f7f9 fda2 	bl	8001bec <HAL_GetTick>
 80080a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0308 	and.w	r3, r3, #8
 80080b4:	2b08      	cmp	r3, #8
 80080b6:	d10e      	bne.n	80080d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f82f 	bl	800812a <UART_WaitOnFlagUntilTimeout>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e025      	b.n	8008122 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d10e      	bne.n	8008102 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f819 	bl	800812a <UART_WaitOnFlagUntilTimeout>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e00f      	b.n	8008122 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2220      	movs	r2, #32
 8008106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2220      	movs	r2, #32
 800810e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b09c      	sub	sp, #112	; 0x70
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	603b      	str	r3, [r7, #0]
 8008136:	4613      	mov	r3, r2
 8008138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800813a:	e0a9      	b.n	8008290 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800813c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800813e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008142:	f000 80a5 	beq.w	8008290 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008146:	f7f9 fd51 	bl	8001bec <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008152:	429a      	cmp	r2, r3
 8008154:	d302      	bcc.n	800815c <UART_WaitOnFlagUntilTimeout+0x32>
 8008156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008158:	2b00      	cmp	r3, #0
 800815a:	d140      	bne.n	80081de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800816a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008170:	667b      	str	r3, [r7, #100]	; 0x64
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800817a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800817c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008180:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e6      	bne.n	800815c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3308      	adds	r3, #8
 8008194:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	f023 0301 	bic.w	r3, r3, #1
 80081a4:	663b      	str	r3, [r7, #96]	; 0x60
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3308      	adds	r3, #8
 80081ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80081b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e5      	bne.n	800818e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2220      	movs	r2, #32
 80081ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e069      	b.n	80082b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d051      	beq.n	8008290 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081fa:	d149      	bne.n	8008290 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008204:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800821a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	461a      	mov	r2, r3
 8008222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008224:	637b      	str	r3, [r7, #52]	; 0x34
 8008226:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800822a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e6      	bne.n	8008206 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3308      	adds	r3, #8
 800823e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	e853 3f00 	ldrex	r3, [r3]
 8008246:	613b      	str	r3, [r7, #16]
   return(result);
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f023 0301 	bic.w	r3, r3, #1
 800824e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3308      	adds	r3, #8
 8008256:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008258:	623a      	str	r2, [r7, #32]
 800825a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825c:	69f9      	ldr	r1, [r7, #28]
 800825e:	6a3a      	ldr	r2, [r7, #32]
 8008260:	e841 2300 	strex	r3, r2, [r1]
 8008264:	61bb      	str	r3, [r7, #24]
   return(result);
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1e5      	bne.n	8008238 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2220      	movs	r2, #32
 8008270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2220      	movs	r2, #32
 8008278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2220      	movs	r2, #32
 8008280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e010      	b.n	80082b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69da      	ldr	r2, [r3, #28]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	4013      	ands	r3, r2
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	429a      	cmp	r2, r3
 800829e:	bf0c      	ite	eq
 80082a0:	2301      	moveq	r3, #1
 80082a2:	2300      	movne	r3, #0
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	461a      	mov	r2, r3
 80082a8:	79fb      	ldrb	r3, [r7, #7]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	f43f af46 	beq.w	800813c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3770      	adds	r7, #112	; 0x70
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b085      	sub	sp, #20
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d101      	bne.n	80082d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80082cc:	2302      	movs	r3, #2
 80082ce:	e027      	b.n	8008320 <HAL_UARTEx_DisableFifoMode+0x66>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2224      	movs	r2, #36	; 0x24
 80082dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f022 0201 	bic.w	r2, r2, #1
 80082f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2220      	movs	r2, #32
 8008312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800833c:	2b01      	cmp	r3, #1
 800833e:	d101      	bne.n	8008344 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008340:	2302      	movs	r3, #2
 8008342:	e02d      	b.n	80083a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2224      	movs	r2, #36	; 0x24
 8008350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0201 	bic.w	r2, r2, #1
 800836a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f84f 	bl	8008424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2220      	movs	r2, #32
 8008392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d101      	bne.n	80083c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083bc:	2302      	movs	r3, #2
 80083be:	e02d      	b.n	800841c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2224      	movs	r2, #36	; 0x24
 80083cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0201 	bic.w	r2, r2, #1
 80083e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	430a      	orrs	r2, r1
 80083fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f811 	bl	8008424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2220      	movs	r2, #32
 800840e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008430:	2b00      	cmp	r3, #0
 8008432:	d108      	bne.n	8008446 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008444:	e031      	b.n	80084aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008446:	2308      	movs	r3, #8
 8008448:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800844a:	2308      	movs	r3, #8
 800844c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	0e5b      	lsrs	r3, r3, #25
 8008456:	b2db      	uxtb	r3, r3
 8008458:	f003 0307 	and.w	r3, r3, #7
 800845c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	0f5b      	lsrs	r3, r3, #29
 8008466:	b2db      	uxtb	r3, r3
 8008468:	f003 0307 	and.w	r3, r3, #7
 800846c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800846e:	7bbb      	ldrb	r3, [r7, #14]
 8008470:	7b3a      	ldrb	r2, [r7, #12]
 8008472:	4911      	ldr	r1, [pc, #68]	; (80084b8 <UARTEx_SetNbDataToProcess+0x94>)
 8008474:	5c8a      	ldrb	r2, [r1, r2]
 8008476:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800847a:	7b3a      	ldrb	r2, [r7, #12]
 800847c:	490f      	ldr	r1, [pc, #60]	; (80084bc <UARTEx_SetNbDataToProcess+0x98>)
 800847e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008480:	fb93 f3f2 	sdiv	r3, r3, r2
 8008484:	b29a      	uxth	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	7b7a      	ldrb	r2, [r7, #13]
 8008490:	4909      	ldr	r1, [pc, #36]	; (80084b8 <UARTEx_SetNbDataToProcess+0x94>)
 8008492:	5c8a      	ldrb	r2, [r1, r2]
 8008494:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008498:	7b7a      	ldrb	r2, [r7, #13]
 800849a:	4908      	ldr	r1, [pc, #32]	; (80084bc <UARTEx_SetNbDataToProcess+0x98>)
 800849c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800849e:	fb93 f3f2 	sdiv	r3, r3, r2
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80084aa:	bf00      	nop
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	08009824 	.word	0x08009824
 80084bc:	0800982c 	.word	0x0800982c

080084c0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	f023 0101 	bic.w	r1, r3, #1
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	2b08      	cmp	r3, #8
 80084e8:	d102      	bne.n	80084f0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80084ea:	2340      	movs	r3, #64	; 0x40
 80084ec:	617b      	str	r3, [r7, #20]
 80084ee:	e001      	b.n	80084f4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80084f0:	2300      	movs	r3, #0
 80084f2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008500:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008506:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800850c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008512:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008518:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800851e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008524:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800852a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8008530:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8008536:	4313      	orrs	r3, r2
 8008538:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	4313      	orrs	r3, r2
 8008542:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	4313      	orrs	r3, r2
 800854c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	4313      	orrs	r3, r2
 8008556:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	4313      	orrs	r3, r2
 8008560:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8008562:	4b3e      	ldr	r3, [pc, #248]	; (800865c <FMC_NORSRAM_Init+0x19c>)
 8008564:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800856c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008574:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800857c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008584:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	43db      	mvns	r3, r3
 8008594:	ea02 0103 	and.w	r1, r2, r3
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	4319      	orrs	r1, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085ae:	d10c      	bne.n	80085ca <FMC_NORSRAM_Init+0x10a>
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d008      	beq.n	80085ca <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c4:	431a      	orrs	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d006      	beq.n	80085e0 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085da:	431a      	orrs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d12f      	bne.n	800864a <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	0c1b      	lsrs	r3, r3, #16
 80085f0:	041b      	lsls	r3, r3, #16
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80085f6:	431a      	orrs	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b04      	cmp	r3, #4
 8008602:	d014      	beq.n	800862e <FMC_NORSRAM_Init+0x16e>
 8008604:	2b04      	cmp	r3, #4
 8008606:	d819      	bhi.n	800863c <FMC_NORSRAM_Init+0x17c>
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <FMC_NORSRAM_Init+0x152>
 800860c:	2b02      	cmp	r3, #2
 800860e:	d007      	beq.n	8008620 <FMC_NORSRAM_Init+0x160>
 8008610:	e014      	b.n	800863c <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	621a      	str	r2, [r3, #32]
        break;
 800861e:	e015      	b.n	800864c <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	621a      	str	r2, [r3, #32]
        break;
 800862c:	e00e      	b.n	800864c <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	621a      	str	r2, [r3, #32]
        break;
 800863a:	e007      	b.n	800864c <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a1b      	ldr	r3, [r3, #32]
 8008640:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	621a      	str	r2, [r3, #32]
        break;
 8008648:	e000      	b.n	800864c <FMC_NORSRAM_Init+0x18c>
    }
  }
 800864a:	bf00      	nop

  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	0008fb7f 	.word	0x0008fb7f

08008660 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008660:	b480      	push	{r7}
 8008662:	b087      	sub	sp, #28
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	431a      	orrs	r2, r3
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	021b      	lsls	r3, r3, #8
 8008688:	431a      	orrs	r2, r3
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	079b      	lsls	r3, r3, #30
 8008690:	431a      	orrs	r2, r3
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	041b      	lsls	r3, r3, #16
 8008698:	431a      	orrs	r2, r3
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	3b01      	subs	r3, #1
 80086a0:	051b      	lsls	r3, r3, #20
 80086a2:	431a      	orrs	r2, r3
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	3b02      	subs	r3, #2
 80086aa:	061b      	lsls	r3, r3, #24
 80086ac:	ea42 0103 	orr.w	r1, r2, r3
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	3201      	adds	r2, #1
 80086b8:	4319      	orrs	r1, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086cc:	d113      	bne.n	80086f6 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086d6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	3b01      	subs	r3, #1
 80086de:	051b      	lsls	r3, r3, #20
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	431a      	orrs	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	371c      	adds	r7, #28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008718:	d121      	bne.n	800875e <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008722:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	6819      	ldr	r1, [r3, #0]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	4319      	orrs	r1, r3
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	021b      	lsls	r3, r3, #8
 8008738:	4319      	orrs	r1, r3
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	079b      	lsls	r3, r3, #30
 8008740:	4319      	orrs	r1, r3
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	4319      	orrs	r1, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	041b      	lsls	r3, r3, #16
 800874e:	430b      	orrs	r3, r1
 8008750:	ea42 0103 	orr.w	r1, r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800875c:	e005      	b.n	800876a <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008778:	b480      	push	{r7}
 800877a:	b08b      	sub	sp, #44	; 0x2c
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	fa93 f3a3 	rbit	r3, r3
 8008792:	613b      	str	r3, [r7, #16]
  return result;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800879e:	2320      	movs	r3, #32
 80087a0:	e003      	b.n	80087aa <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	fab3 f383 	clz	r3, r3
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	2103      	movs	r1, #3
 80087ae:	fa01 f303 	lsl.w	r3, r1, r3
 80087b2:	43db      	mvns	r3, r3
 80087b4:	401a      	ands	r2, r3
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	fa93 f3a3 	rbit	r3, r3
 80087c0:	61fb      	str	r3, [r7, #28]
  return result;
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80087cc:	2320      	movs	r3, #32
 80087ce:	e003      	b.n	80087d8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	fab3 f383 	clz	r3, r3
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	6879      	ldr	r1, [r7, #4]
 80087dc:	fa01 f303 	lsl.w	r3, r1, r3
 80087e0:	431a      	orrs	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	601a      	str	r2, [r3, #0]
}
 80087e6:	bf00      	nop
 80087e8:	372c      	adds	r7, #44	; 0x2c
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b085      	sub	sp, #20
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	43db      	mvns	r3, r3
 8008806:	401a      	ands	r2, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	6879      	ldr	r1, [r7, #4]
 800880c:	fb01 f303 	mul.w	r3, r1, r3
 8008810:	431a      	orrs	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	605a      	str	r2, [r3, #4]
}
 8008816:	bf00      	nop
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008822:	b480      	push	{r7}
 8008824:	b08b      	sub	sp, #44	; 0x2c
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	689a      	ldr	r2, [r3, #8]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	fa93 f3a3 	rbit	r3, r3
 800883c:	613b      	str	r3, [r7, #16]
  return result;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008848:	2320      	movs	r3, #32
 800884a:	e003      	b.n	8008854 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	fab3 f383 	clz	r3, r3
 8008852:	b2db      	uxtb	r3, r3
 8008854:	005b      	lsls	r3, r3, #1
 8008856:	2103      	movs	r1, #3
 8008858:	fa01 f303 	lsl.w	r3, r1, r3
 800885c:	43db      	mvns	r3, r3
 800885e:	401a      	ands	r2, r3
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	fa93 f3a3 	rbit	r3, r3
 800886a:	61fb      	str	r3, [r7, #28]
  return result;
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008876:	2320      	movs	r3, #32
 8008878:	e003      	b.n	8008882 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	fab3 f383 	clz	r3, r3
 8008880:	b2db      	uxtb	r3, r3
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	6879      	ldr	r1, [r7, #4]
 8008886:	fa01 f303 	lsl.w	r3, r1, r3
 800888a:	431a      	orrs	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008890:	bf00      	nop
 8008892:	372c      	adds	r7, #44	; 0x2c
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800889c:	b480      	push	{r7}
 800889e:	b08b      	sub	sp, #44	; 0x2c
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	68da      	ldr	r2, [r3, #12]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	fa93 f3a3 	rbit	r3, r3
 80088b6:	613b      	str	r3, [r7, #16]
  return result;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80088c2:	2320      	movs	r3, #32
 80088c4:	e003      	b.n	80088ce <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	fab3 f383 	clz	r3, r3
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	2103      	movs	r1, #3
 80088d2:	fa01 f303 	lsl.w	r3, r1, r3
 80088d6:	43db      	mvns	r3, r3
 80088d8:	401a      	ands	r2, r3
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	fa93 f3a3 	rbit	r3, r3
 80088e4:	61fb      	str	r3, [r7, #28]
  return result;
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80088f0:	2320      	movs	r3, #32
 80088f2:	e003      	b.n	80088fc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	fab3 f383 	clz	r3, r3
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	6879      	ldr	r1, [r7, #4]
 8008900:	fa01 f303 	lsl.w	r3, r1, r3
 8008904:	431a      	orrs	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	60da      	str	r2, [r3, #12]
}
 800890a:	bf00      	nop
 800890c:	372c      	adds	r7, #44	; 0x2c
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008916:	b480      	push	{r7}
 8008918:	b08b      	sub	sp, #44	; 0x2c
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a1a      	ldr	r2, [r3, #32]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	fa93 f3a3 	rbit	r3, r3
 8008930:	613b      	str	r3, [r7, #16]
  return result;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800893c:	2320      	movs	r3, #32
 800893e:	e003      	b.n	8008948 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	fab3 f383 	clz	r3, r3
 8008946:	b2db      	uxtb	r3, r3
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	210f      	movs	r1, #15
 800894c:	fa01 f303 	lsl.w	r3, r1, r3
 8008950:	43db      	mvns	r3, r3
 8008952:	401a      	ands	r2, r3
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	fa93 f3a3 	rbit	r3, r3
 800895e:	61fb      	str	r3, [r7, #28]
  return result;
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800896a:	2320      	movs	r3, #32
 800896c:	e003      	b.n	8008976 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	fab3 f383 	clz	r3, r3
 8008974:	b2db      	uxtb	r3, r3
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	fa01 f303 	lsl.w	r3, r1, r3
 800897e:	431a      	orrs	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008984:	bf00      	nop
 8008986:	372c      	adds	r7, #44	; 0x2c
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008990:	b480      	push	{r7}
 8008992:	b08b      	sub	sp, #44	; 0x2c
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	0a1b      	lsrs	r3, r3, #8
 80089a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	fa93 f3a3 	rbit	r3, r3
 80089ac:	613b      	str	r3, [r7, #16]
  return result;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80089b8:	2320      	movs	r3, #32
 80089ba:	e003      	b.n	80089c4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	fab3 f383 	clz	r3, r3
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	210f      	movs	r1, #15
 80089c8:	fa01 f303 	lsl.w	r3, r1, r3
 80089cc:	43db      	mvns	r3, r3
 80089ce:	401a      	ands	r2, r3
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	0a1b      	lsrs	r3, r3, #8
 80089d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	fa93 f3a3 	rbit	r3, r3
 80089dc:	61fb      	str	r3, [r7, #28]
  return result;
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d101      	bne.n	80089ec <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80089e8:	2320      	movs	r3, #32
 80089ea:	e003      	b.n	80089f4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	fab3 f383 	clz	r3, r3
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	fa01 f303 	lsl.w	r3, r1, r3
 80089fc:	431a      	orrs	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008a02:	bf00      	nop
 8008a04:	372c      	adds	r7, #44	; 0x2c
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b08a      	sub	sp, #40	; 0x28
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	fa93 f3a3 	rbit	r3, r3
 8008a24:	617b      	str	r3, [r7, #20]
  return result;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <LL_GPIO_Init+0x26>
    return 32U;
 8008a30:	2320      	movs	r3, #32
 8008a32:	e003      	b.n	8008a3c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	fab3 f383 	clz	r3, r3
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008a3e:	e050      	b.n	8008ae2 <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	2101      	movs	r1, #1
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	fa01 f303 	lsl.w	r3, r1, r3
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d042      	beq.n	8008adc <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	6a39      	ldr	r1, [r7, #32]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7ff fe8a 	bl	8008778 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d003      	beq.n	8008a74 <LL_GPIO_Init+0x66>
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d106      	bne.n	8008a82 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6a39      	ldr	r1, [r7, #32]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff fed0 	bl	8008822 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6a39      	ldr	r1, [r7, #32]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff ff06 	bl	800889c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d121      	bne.n	8008adc <LL_GPIO_Init+0xce>
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	fa93 f3a3 	rbit	r3, r3
 8008aa2:	60bb      	str	r3, [r7, #8]
  return result;
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <LL_GPIO_Init+0xa4>
    return 32U;
 8008aae:	2320      	movs	r3, #32
 8008ab0:	e003      	b.n	8008aba <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	fab3 f383 	clz	r3, r3
 8008ab8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8008aba:	2b07      	cmp	r3, #7
 8008abc:	d807      	bhi.n	8008ace <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	6a39      	ldr	r1, [r7, #32]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f7ff ff25 	bl	8008916 <LL_GPIO_SetAFPin_0_7>
 8008acc:	e006      	b.n	8008adc <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6a39      	ldr	r1, [r7, #32]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7ff ff5a 	bl	8008990 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	3301      	adds	r3, #1
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1a7      	bne.n	8008a40 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d003      	beq.n	8008b00 <LL_GPIO_Init+0xf2>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d107      	bne.n	8008b10 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	6819      	ldr	r1, [r3, #0]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff fe71 	bl	80087f2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3728      	adds	r7, #40	; 0x28
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	f107 001c 	add.w	r0, r7, #28
 8008b28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fd8f 	bl	800965c <USB_CoreReset>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d106      	bne.n	8008b56 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	639a      	str	r2, [r3, #56]	; 0x38
 8008b54:	e005      	b.n	8008b62 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b6e:	b004      	add	sp, #16
 8008b70:	4770      	bx	lr
	...

08008b74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d165      	bne.n	8008c54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	4a41      	ldr	r2, [pc, #260]	; (8008c90 <USB_SetTurnaroundTime+0x11c>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d906      	bls.n	8008b9e <USB_SetTurnaroundTime+0x2a>
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	4a40      	ldr	r2, [pc, #256]	; (8008c94 <USB_SetTurnaroundTime+0x120>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d202      	bcs.n	8008b9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b98:	230f      	movs	r3, #15
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	e062      	b.n	8008c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	4a3c      	ldr	r2, [pc, #240]	; (8008c94 <USB_SetTurnaroundTime+0x120>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d306      	bcc.n	8008bb4 <USB_SetTurnaroundTime+0x40>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	4a3b      	ldr	r2, [pc, #236]	; (8008c98 <USB_SetTurnaroundTime+0x124>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d202      	bcs.n	8008bb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008bae:	230e      	movs	r3, #14
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	e057      	b.n	8008c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	4a38      	ldr	r2, [pc, #224]	; (8008c98 <USB_SetTurnaroundTime+0x124>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d306      	bcc.n	8008bca <USB_SetTurnaroundTime+0x56>
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	4a37      	ldr	r2, [pc, #220]	; (8008c9c <USB_SetTurnaroundTime+0x128>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d202      	bcs.n	8008bca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008bc4:	230d      	movs	r3, #13
 8008bc6:	617b      	str	r3, [r7, #20]
 8008bc8:	e04c      	b.n	8008c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	4a33      	ldr	r2, [pc, #204]	; (8008c9c <USB_SetTurnaroundTime+0x128>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d306      	bcc.n	8008be0 <USB_SetTurnaroundTime+0x6c>
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	4a32      	ldr	r2, [pc, #200]	; (8008ca0 <USB_SetTurnaroundTime+0x12c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d802      	bhi.n	8008be0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008bda:	230c      	movs	r3, #12
 8008bdc:	617b      	str	r3, [r7, #20]
 8008bde:	e041      	b.n	8008c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	4a2f      	ldr	r2, [pc, #188]	; (8008ca0 <USB_SetTurnaroundTime+0x12c>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d906      	bls.n	8008bf6 <USB_SetTurnaroundTime+0x82>
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	4a2e      	ldr	r2, [pc, #184]	; (8008ca4 <USB_SetTurnaroundTime+0x130>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d802      	bhi.n	8008bf6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008bf0:	230b      	movs	r3, #11
 8008bf2:	617b      	str	r3, [r7, #20]
 8008bf4:	e036      	b.n	8008c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	4a2a      	ldr	r2, [pc, #168]	; (8008ca4 <USB_SetTurnaroundTime+0x130>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d906      	bls.n	8008c0c <USB_SetTurnaroundTime+0x98>
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	4a29      	ldr	r2, [pc, #164]	; (8008ca8 <USB_SetTurnaroundTime+0x134>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d802      	bhi.n	8008c0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008c06:	230a      	movs	r3, #10
 8008c08:	617b      	str	r3, [r7, #20]
 8008c0a:	e02b      	b.n	8008c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	4a26      	ldr	r2, [pc, #152]	; (8008ca8 <USB_SetTurnaroundTime+0x134>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d906      	bls.n	8008c22 <USB_SetTurnaroundTime+0xae>
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	4a25      	ldr	r2, [pc, #148]	; (8008cac <USB_SetTurnaroundTime+0x138>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d202      	bcs.n	8008c22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008c1c:	2309      	movs	r3, #9
 8008c1e:	617b      	str	r3, [r7, #20]
 8008c20:	e020      	b.n	8008c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	4a21      	ldr	r2, [pc, #132]	; (8008cac <USB_SetTurnaroundTime+0x138>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d306      	bcc.n	8008c38 <USB_SetTurnaroundTime+0xc4>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	4a20      	ldr	r2, [pc, #128]	; (8008cb0 <USB_SetTurnaroundTime+0x13c>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d802      	bhi.n	8008c38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008c32:	2308      	movs	r3, #8
 8008c34:	617b      	str	r3, [r7, #20]
 8008c36:	e015      	b.n	8008c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	4a1d      	ldr	r2, [pc, #116]	; (8008cb0 <USB_SetTurnaroundTime+0x13c>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d906      	bls.n	8008c4e <USB_SetTurnaroundTime+0xda>
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	4a1c      	ldr	r2, [pc, #112]	; (8008cb4 <USB_SetTurnaroundTime+0x140>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d202      	bcs.n	8008c4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008c48:	2307      	movs	r3, #7
 8008c4a:	617b      	str	r3, [r7, #20]
 8008c4c:	e00a      	b.n	8008c64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008c4e:	2306      	movs	r3, #6
 8008c50:	617b      	str	r3, [r7, #20]
 8008c52:	e007      	b.n	8008c64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d102      	bne.n	8008c60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008c5a:	2309      	movs	r3, #9
 8008c5c:	617b      	str	r3, [r7, #20]
 8008c5e:	e001      	b.n	8008c64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008c60:	2309      	movs	r3, #9
 8008c62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	68da      	ldr	r2, [r3, #12]
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	029b      	lsls	r3, r3, #10
 8008c78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	371c      	adds	r7, #28
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	00d8acbf 	.word	0x00d8acbf
 8008c94:	00e4e1c0 	.word	0x00e4e1c0
 8008c98:	00f42400 	.word	0x00f42400
 8008c9c:	01067380 	.word	0x01067380
 8008ca0:	011a499f 	.word	0x011a499f
 8008ca4:	01312cff 	.word	0x01312cff
 8008ca8:	014ca43f 	.word	0x014ca43f
 8008cac:	016e3600 	.word	0x016e3600
 8008cb0:	01a6ab1f 	.word	0x01a6ab1f
 8008cb4:	01e84800 	.word	0x01e84800

08008cb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	f023 0201 	bic.w	r2, r3, #1
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008cf6:	78fb      	ldrb	r3, [r7, #3]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d115      	bne.n	8008d28 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d08:	2001      	movs	r0, #1
 8008d0a:	f7f8 ff7b 	bl	8001c04 <HAL_Delay>
      ms++;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3301      	adds	r3, #1
 8008d12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fc11 	bl	800953c <USB_GetMode>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d01e      	beq.n	8008d5e <USB_SetCurrentMode+0x84>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b31      	cmp	r3, #49	; 0x31
 8008d24:	d9f0      	bls.n	8008d08 <USB_SetCurrentMode+0x2e>
 8008d26:	e01a      	b.n	8008d5e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d28:	78fb      	ldrb	r3, [r7, #3]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d115      	bne.n	8008d5a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	f7f8 ff62 	bl	8001c04 <HAL_Delay>
      ms++;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	3301      	adds	r3, #1
 8008d44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fbf8 	bl	800953c <USB_GetMode>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d005      	beq.n	8008d5e <USB_SetCurrentMode+0x84>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b31      	cmp	r3, #49	; 0x31
 8008d56:	d9f0      	bls.n	8008d3a <USB_SetCurrentMode+0x60>
 8008d58:	e001      	b.n	8008d5e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e005      	b.n	8008d6a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b32      	cmp	r3, #50	; 0x32
 8008d62:	d101      	bne.n	8008d68 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e000      	b.n	8008d6a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d74:	b084      	sub	sp, #16
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b086      	sub	sp, #24
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d8e:	2300      	movs	r3, #0
 8008d90:	613b      	str	r3, [r7, #16]
 8008d92:	e009      	b.n	8008da8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	3340      	adds	r3, #64	; 0x40
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4413      	add	r3, r2
 8008d9e:	2200      	movs	r2, #0
 8008da0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	3301      	adds	r3, #1
 8008da6:	613b      	str	r3, [r7, #16]
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	2b0e      	cmp	r3, #14
 8008dac:	d9f2      	bls.n	8008d94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d11c      	bne.n	8008dee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dc2:	f043 0302 	orr.w	r3, r3, #2
 8008dc6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dcc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	e005      	b.n	8008dfa <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e00:	461a      	mov	r2, r3
 8008e02:	2300      	movs	r3, #0
 8008e04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e14:	461a      	mov	r2, r3
 8008e16:	680b      	ldr	r3, [r1, #0]
 8008e18:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e1a:	2103      	movs	r1, #3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f95b 	bl	80090d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e22:	2110      	movs	r1, #16
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f8f3 	bl	8009010 <USB_FlushTxFifo>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f91f 	bl	8009078 <USB_FlushRxFifo>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d001      	beq.n	8008e44 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e56:	461a      	mov	r2, r3
 8008e58:	2300      	movs	r3, #0
 8008e5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e62:	461a      	mov	r2, r3
 8008e64:	2300      	movs	r3, #0
 8008e66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e68:	2300      	movs	r3, #0
 8008e6a:	613b      	str	r3, [r7, #16]
 8008e6c:	e043      	b.n	8008ef6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	015a      	lsls	r2, r3, #5
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	4413      	add	r3, r2
 8008e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e84:	d118      	bne.n	8008eb8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10a      	bne.n	8008ea2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e98:	461a      	mov	r2, r3
 8008e9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	e013      	b.n	8008eca <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eae:	461a      	mov	r2, r3
 8008eb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	e008      	b.n	8008eca <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	2300      	movs	r3, #0
 8008eda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	461a      	mov	r2, r3
 8008eea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008eee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	613b      	str	r3, [r7, #16]
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d3b7      	bcc.n	8008e6e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008efe:	2300      	movs	r3, #0
 8008f00:	613b      	str	r3, [r7, #16]
 8008f02:	e043      	b.n	8008f8c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f1a:	d118      	bne.n	8008f4e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10a      	bne.n	8008f38 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	e013      	b.n	8008f60 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f44:	461a      	mov	r2, r3
 8008f46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f4a:	6013      	str	r3, [r2, #0]
 8008f4c:	e008      	b.n	8008f60 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	2300      	movs	r3, #0
 8008f70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	613b      	str	r3, [r7, #16]
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d3b7      	bcc.n	8008f04 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fa6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008fb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d105      	bne.n	8008fc8 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	f043 0210 	orr.w	r2, r3, #16
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	699a      	ldr	r2, [r3, #24]
 8008fcc:	4b0f      	ldr	r3, [pc, #60]	; (800900c <USB_DevInit+0x298>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d005      	beq.n	8008fe6 <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	f043 0208 	orr.w	r2, r3, #8
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d107      	bne.n	8008ffc <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ff4:	f043 0304 	orr.w	r3, r3, #4
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009008:	b004      	add	sp, #16
 800900a:	4770      	bx	lr
 800900c:	803c3800 	.word	0x803c3800

08009010 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3301      	adds	r3, #1
 8009022:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	4a13      	ldr	r2, [pc, #76]	; (8009074 <USB_FlushTxFifo+0x64>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d901      	bls.n	8009030 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e01b      	b.n	8009068 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	daf2      	bge.n	800901e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009038:	2300      	movs	r3, #0
 800903a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	019b      	lsls	r3, r3, #6
 8009040:	f043 0220 	orr.w	r2, r3, #32
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	3301      	adds	r3, #1
 800904c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	4a08      	ldr	r2, [pc, #32]	; (8009074 <USB_FlushTxFifo+0x64>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d901      	bls.n	800905a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e006      	b.n	8009068 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	f003 0320 	and.w	r3, r3, #32
 8009062:	2b20      	cmp	r3, #32
 8009064:	d0f0      	beq.n	8009048 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	00030d40 	.word	0x00030d40

08009078 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3301      	adds	r3, #1
 8009088:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	4a11      	ldr	r2, [pc, #68]	; (80090d4 <USB_FlushRxFifo+0x5c>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d901      	bls.n	8009096 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e018      	b.n	80090c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	daf2      	bge.n	8009084 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800909e:	2300      	movs	r3, #0
 80090a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2210      	movs	r2, #16
 80090a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3301      	adds	r3, #1
 80090ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	4a08      	ldr	r2, [pc, #32]	; (80090d4 <USB_FlushRxFifo+0x5c>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d901      	bls.n	80090ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80090b6:	2303      	movs	r3, #3
 80090b8:	e006      	b.n	80090c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	f003 0310 	and.w	r3, r3, #16
 80090c2:	2b10      	cmp	r3, #16
 80090c4:	d0f0      	beq.n	80090a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	00030d40 	.word	0x00030d40

080090d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	68f9      	ldr	r1, [r7, #12]
 80090f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090f8:	4313      	orrs	r3, r2
 80090fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800910a:	b480      	push	{r7}
 800910c:	b087      	sub	sp, #28
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f003 0306 	and.w	r3, r3, #6
 8009122:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d102      	bne.n	8009130 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800912a:	2300      	movs	r3, #0
 800912c:	75fb      	strb	r3, [r7, #23]
 800912e:	e00a      	b.n	8009146 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2b02      	cmp	r3, #2
 8009134:	d002      	beq.n	800913c <USB_GetDevSpeed+0x32>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2b06      	cmp	r3, #6
 800913a:	d102      	bne.n	8009142 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800913c:	2302      	movs	r3, #2
 800913e:	75fb      	strb	r3, [r7, #23]
 8009140:	e001      	b.n	8009146 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009142:	230f      	movs	r3, #15
 8009144:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009146:	7dfb      	ldrb	r3, [r7, #23]
}
 8009148:	4618      	mov	r0, r3
 800914a:	371c      	adds	r7, #28
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	785b      	ldrb	r3, [r3, #1]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d14a      	bne.n	8009208 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800918a:	f040 8086 	bne.w	800929a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	4413      	add	r3, r2
 8009198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	7812      	ldrb	r2, [r2, #0]
 80091a2:	0151      	lsls	r1, r2, #5
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	440a      	add	r2, r1
 80091a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	7812      	ldrb	r2, [r2, #0]
 80091c6:	0151      	lsls	r1, r2, #5
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	440a      	add	r2, r1
 80091cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3301      	adds	r3, #1
 80091da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f242 7210 	movw	r2, #10000	; 0x2710
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d902      	bls.n	80091ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	75fb      	strb	r3, [r7, #23]
          break;
 80091ea:	e056      	b.n	800929a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009204:	d0e7      	beq.n	80091d6 <USB_EPStopXfer+0x82>
 8009206:	e048      	b.n	800929a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800921c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009220:	d13b      	bne.n	800929a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	7812      	ldrb	r2, [r2, #0]
 8009236:	0151      	lsls	r1, r2, #5
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	440a      	add	r2, r1
 800923c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009240:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009244:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	015a      	lsls	r2, r3, #5
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	4413      	add	r3, r2
 8009250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	7812      	ldrb	r2, [r2, #0]
 800925a:	0151      	lsls	r1, r2, #5
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	440a      	add	r2, r1
 8009260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009264:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009268:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3301      	adds	r3, #1
 800926e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f242 7210 	movw	r2, #10000	; 0x2710
 8009276:	4293      	cmp	r3, r2
 8009278:	d902      	bls.n	8009280 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	75fb      	strb	r3, [r7, #23]
          break;
 800927e:	e00c      	b.n	800929a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	015a      	lsls	r2, r3, #5
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	4413      	add	r3, r2
 800928a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009298:	d0e7      	beq.n	800926a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800929a:	7dfb      	ldrb	r3, [r7, #23]
}
 800929c:	4618      	mov	r0, r3
 800929e:	371c      	adds	r7, #28
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b089      	sub	sp, #36	; 0x24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	4611      	mov	r1, r2
 80092b4:	461a      	mov	r2, r3
 80092b6:	460b      	mov	r3, r1
 80092b8:	71fb      	strb	r3, [r7, #7]
 80092ba:	4613      	mov	r3, r2
 80092bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80092c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d123      	bne.n	8009316 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80092ce:	88bb      	ldrh	r3, [r7, #4]
 80092d0:	3303      	adds	r3, #3
 80092d2:	089b      	lsrs	r3, r3, #2
 80092d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80092d6:	2300      	movs	r3, #0
 80092d8:	61bb      	str	r3, [r7, #24]
 80092da:	e018      	b.n	800930e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	031a      	lsls	r2, r3, #12
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e8:	461a      	mov	r2, r3
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	3301      	adds	r3, #1
 80092f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	3301      	adds	r3, #1
 80092fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	3301      	adds	r3, #1
 8009300:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	3301      	adds	r3, #1
 8009306:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	3301      	adds	r3, #1
 800930c:	61bb      	str	r3, [r7, #24]
 800930e:	69ba      	ldr	r2, [r7, #24]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	429a      	cmp	r2, r3
 8009314:	d3e2      	bcc.n	80092dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3724      	adds	r7, #36	; 0x24
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009324:	b480      	push	{r7}
 8009326:	b08b      	sub	sp, #44	; 0x2c
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	4613      	mov	r3, r2
 8009330:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800933a:	88fb      	ldrh	r3, [r7, #6]
 800933c:	089b      	lsrs	r3, r3, #2
 800933e:	b29b      	uxth	r3, r3
 8009340:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009342:	88fb      	ldrh	r3, [r7, #6]
 8009344:	f003 0303 	and.w	r3, r3, #3
 8009348:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800934a:	2300      	movs	r3, #0
 800934c:	623b      	str	r3, [r7, #32]
 800934e:	e014      	b.n	800937a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	601a      	str	r2, [r3, #0]
    pDest++;
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	3301      	adds	r3, #1
 8009360:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009364:	3301      	adds	r3, #1
 8009366:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936a:	3301      	adds	r3, #1
 800936c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	3301      	adds	r3, #1
 8009372:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	3301      	adds	r3, #1
 8009378:	623b      	str	r3, [r7, #32]
 800937a:	6a3a      	ldr	r2, [r7, #32]
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	429a      	cmp	r2, r3
 8009380:	d3e6      	bcc.n	8009350 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009382:	8bfb      	ldrh	r3, [r7, #30]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01e      	beq.n	80093c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009388:	2300      	movs	r3, #0
 800938a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009392:	461a      	mov	r2, r3
 8009394:	f107 0310 	add.w	r3, r7, #16
 8009398:	6812      	ldr	r2, [r2, #0]
 800939a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	6a3b      	ldr	r3, [r7, #32]
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	fa22 f303 	lsr.w	r3, r2, r3
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	701a      	strb	r2, [r3, #0]
      i++;
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	3301      	adds	r3, #1
 80093b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	3301      	adds	r3, #1
 80093b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80093ba:	8bfb      	ldrh	r3, [r7, #30]
 80093bc:	3b01      	subs	r3, #1
 80093be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80093c0:	8bfb      	ldrh	r3, [r7, #30]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1ea      	bne.n	800939c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	372c      	adds	r7, #44	; 0x2c
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093ee:	f023 0303 	bic.w	r3, r3, #3
 80093f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009402:	f043 0302 	orr.w	r3, r3, #2
 8009406:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009416:	b480      	push	{r7}
 8009418:	b085      	sub	sp, #20
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	699b      	ldr	r3, [r3, #24]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	4013      	ands	r3, r2
 800942c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800942e:	68fb      	ldr	r3, [r7, #12]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009458:	69db      	ldr	r3, [r3, #28]
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	4013      	ands	r3, r2
 800945e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	0c1b      	lsrs	r3, r3, #16
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800948c:	69db      	ldr	r3, [r3, #28]
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	4013      	ands	r3, r2
 8009492:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	b29b      	uxth	r3, r3
}
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80094b4:	78fb      	ldrb	r3, [r7, #3]
 80094b6:	015a      	lsls	r2, r3, #5
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	4413      	add	r3, r2
 80094bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	4013      	ands	r3, r2
 80094d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094d2:	68bb      	ldr	r3, [r7, #8]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b087      	sub	sp, #28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009502:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009504:	78fb      	ldrb	r3, [r7, #3]
 8009506:	f003 030f 	and.w	r3, r3, #15
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	fa22 f303 	lsr.w	r3, r2, r3
 8009510:	01db      	lsls	r3, r3, #7
 8009512:	b2db      	uxtb	r3, r3
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	4313      	orrs	r3, r2
 8009518:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800951a:	78fb      	ldrb	r3, [r7, #3]
 800951c:	015a      	lsls	r2, r3, #5
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	4413      	add	r3, r2
 8009522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	4013      	ands	r3, r2
 800952c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800952e:	68bb      	ldr	r3, [r7, #8]
}
 8009530:	4618      	mov	r0, r3
 8009532:	371c      	adds	r7, #28
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	f003 0301 	and.w	r3, r3, #1
}
 800954c:	4618      	mov	r0, r3
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009572:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009576:	f023 0307 	bic.w	r3, r3, #7
 800957a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800958a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800958e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
	...

080095a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	460b      	mov	r3, r1
 80095aa:	607a      	str	r2, [r7, #4]
 80095ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	333c      	adds	r3, #60	; 0x3c
 80095b6:	3304      	adds	r3, #4
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	4a26      	ldr	r2, [pc, #152]	; (8009658 <USB_EP0_OutStart+0xb8>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d90a      	bls.n	80095da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095d4:	d101      	bne.n	80095da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	e037      	b.n	800964a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e0:	461a      	mov	r2, r3
 80095e2:	2300      	movs	r3, #0
 80095e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009608:	f043 0318 	orr.w	r3, r3, #24
 800960c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800961c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009620:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009622:	7afb      	ldrb	r3, [r7, #11]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d10f      	bne.n	8009648 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962e:	461a      	mov	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	697a      	ldr	r2, [r7, #20]
 800963e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009642:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009646:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	371c      	adds	r7, #28
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	4f54300a 	.word	0x4f54300a

0800965c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009664:	2300      	movs	r3, #0
 8009666:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	3301      	adds	r3, #1
 800966c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	4a13      	ldr	r2, [pc, #76]	; (80096c0 <USB_CoreReset+0x64>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d901      	bls.n	800967a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009676:	2303      	movs	r3, #3
 8009678:	e01b      	b.n	80096b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	daf2      	bge.n	8009668 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009682:	2300      	movs	r3, #0
 8009684:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	f043 0201 	orr.w	r2, r3, #1
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	3301      	adds	r3, #1
 8009696:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	4a09      	ldr	r2, [pc, #36]	; (80096c0 <USB_CoreReset+0x64>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d901      	bls.n	80096a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80096a0:	2303      	movs	r3, #3
 80096a2:	e006      	b.n	80096b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	f003 0301 	and.w	r3, r3, #1
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d0f0      	beq.n	8009692 <USB_CoreReset+0x36>

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	00030d40 	.word	0x00030d40

080096c4 <__libc_init_array>:
 80096c4:	b570      	push	{r4, r5, r6, lr}
 80096c6:	4d0d      	ldr	r5, [pc, #52]	; (80096fc <__libc_init_array+0x38>)
 80096c8:	2600      	movs	r6, #0
 80096ca:	4c0d      	ldr	r4, [pc, #52]	; (8009700 <__libc_init_array+0x3c>)
 80096cc:	1b64      	subs	r4, r4, r5
 80096ce:	10a4      	asrs	r4, r4, #2
 80096d0:	42a6      	cmp	r6, r4
 80096d2:	d109      	bne.n	80096e8 <__libc_init_array+0x24>
 80096d4:	4d0b      	ldr	r5, [pc, #44]	; (8009704 <__libc_init_array+0x40>)
 80096d6:	2600      	movs	r6, #0
 80096d8:	4c0b      	ldr	r4, [pc, #44]	; (8009708 <__libc_init_array+0x44>)
 80096da:	f000 f81f 	bl	800971c <_init>
 80096de:	1b64      	subs	r4, r4, r5
 80096e0:	10a4      	asrs	r4, r4, #2
 80096e2:	42a6      	cmp	r6, r4
 80096e4:	d105      	bne.n	80096f2 <__libc_init_array+0x2e>
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ec:	3601      	adds	r6, #1
 80096ee:	4798      	blx	r3
 80096f0:	e7ee      	b.n	80096d0 <__libc_init_array+0xc>
 80096f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f6:	3601      	adds	r6, #1
 80096f8:	4798      	blx	r3
 80096fa:	e7f2      	b.n	80096e2 <__libc_init_array+0x1e>
 80096fc:	0800983c 	.word	0x0800983c
 8009700:	0800983c 	.word	0x0800983c
 8009704:	0800983c 	.word	0x0800983c
 8009708:	08009840 	.word	0x08009840

0800970c <memset>:
 800970c:	4402      	add	r2, r0
 800970e:	4603      	mov	r3, r0
 8009710:	4293      	cmp	r3, r2
 8009712:	d100      	bne.n	8009716 <memset+0xa>
 8009714:	4770      	bx	lr
 8009716:	f803 1b01 	strb.w	r1, [r3], #1
 800971a:	e7f9      	b.n	8009710 <memset+0x4>

0800971c <_init>:
 800971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971e:	bf00      	nop
 8009720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009722:	bc08      	pop	{r3}
 8009724:	469e      	mov	lr, r3
 8009726:	4770      	bx	lr

08009728 <_fini>:
 8009728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972a:	bf00      	nop
 800972c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972e:	bc08      	pop	{r3}
 8009730:	469e      	mov	lr, r3
 8009732:	4770      	bx	lr
