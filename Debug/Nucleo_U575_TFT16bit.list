
Nucleo_U575_TFT16bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093f8  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800962c  0800962c  0001962c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800972c  0800972c  0001972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009734  08009734  00019734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009738  08009738  00019738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000d  20000000  0800973c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006a4  20000010  08009749  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200006b4  08009749  000206b4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0002000d  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d3ca  00000000  00000000  00020043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003693  00000000  00000000  0003d40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013f8  00000000  00000000  00040aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000012d0  00000000  00000000  00041e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003af74  00000000  00000000  00043168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019993  00000000  00000000  0007e0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00164250  00000000  00000000  00097a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fbcbf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005554  00000000  00000000  001fbd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000010 	.word	0x20000010
 8000250:	00000000 	.word	0x00000000
 8000254:	08009614 	.word	0x08009614

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000014 	.word	0x20000014
 8000270:	08009614 	.word	0x08009614

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <FMCSRAMInit>:

	// set to the maximum of the two
	timing->AddressSetupTime = (addset1 > addset2) ? addset1 : addset2;
}

void FMCSRAMInit(ExternalSRAMSpecStruct * sramSpec, uint8_t bank) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b0a0      	sub	sp, #128	; 0x80
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
	/* FMC configuration */
	SRAM_HandleTypeDef sram;
	FMC_NORSRAM_TimingTypeDef timing = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2220      	movs	r2, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f009 f82b 	bl	8009604 <memset>

	sram.Instance = FMC_NORSRAM_DEVICE;
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <FMCSRAMInit+0xc4>)
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
	sram.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80005b2:	4b2a      	ldr	r3, [pc, #168]	; (800065c <FMCSRAMInit+0xc8>)
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (bank==1) {
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d102      	bne.n	80005c2 <FMCSRAMInit+0x2e>
		sram.Init.NSBank = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
 80005c0:	e005      	b.n	80005ce <FMCSRAMInit+0x3a>
	} else {
		sram.Init.NSBank = 1 << (bank-1);
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	2201      	movs	r2, #1
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if (sramSpec -> dataSize == 8) {
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b08      	cmp	r3, #8
 80005d4:	d102      	bne.n	80005dc <FMCSRAMInit+0x48>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80005d6:	2300      	movs	r3, #0
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005da:	e008      	b.n	80005ee <FMCSRAMInit+0x5a>
	} else if (sramSpec -> dataSize == 16) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b10      	cmp	r3, #16
 80005e2:	d102      	bne.n	80005ea <FMCSRAMInit+0x56>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005e4:	2310      	movs	r3, #16
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005e8:	e001      	b.n	80005ee <FMCSRAMInit+0x5a>
	} else {
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 80005ea:	2320      	movs	r3, #32
 80005ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	sram.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	637b      	str	r3, [r7, #52]	; 0x34
	sram.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80005f2:	2300      	movs	r3, #0
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
	sram.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	643b      	str	r3, [r7, #64]	; 0x40
	sram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
	sram.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80005fe:	2300      	movs	r3, #0
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
	sram.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
	sram.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	653b      	str	r3, [r7, #80]	; 0x50
	sram.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	657b      	str	r3, [r7, #84]	; 0x54
	sram.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	65bb      	str	r3, [r7, #88]	; 0x58
	sram.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	65fb      	str	r3, [r7, #92]	; 0x5c
	sram.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000618:	2300      	movs	r3, #0
 800061a:	663b      	str	r3, [r7, #96]	; 0x60
	sram.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 800061c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000620:	667b      	str	r3, [r7, #100]	; 0x64
	sram.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000622:	2300      	movs	r3, #0
 8000624:	66bb      	str	r3, [r7, #104]	; 0x68

	/* Timing */
	timing.BusTurnAroundDuration = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
	timing.AccessMode = FMC_ACCESS_MODE_A;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	; 0x24

	timing.AddressSetupTime = 6; //MAX_ADDSET_TIME;
 800062e:	2306      	movs	r3, #6
 8000630:	60bb      	str	r3, [r7, #8]
	timing.DataSetupTime = 6;//MAX_DATAST_TIME;
 8000632:	2306      	movs	r3, #6
 8000634:	613b      	str	r3, [r7, #16]

	//FMCComputeAddsetDatast(sramSpec, &timing);

	if (HAL_SRAM_Init(&sram, &timing, NULL) != HAL_OK)
 8000636:	f107 0108 	add.w	r1, r7, #8
 800063a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800063e:	2200      	movs	r2, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f007 f9bf 	bl	80079c4 <HAL_SRAM_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <FMCSRAMInit+0xbc>
	{
		FMC_Error_Handler( );
 800064c:	f000 f808 	bl	8000660 <FMC_Error_Handler>
	}

#if MEM_SWAPPING
	HAL_EnableFMCMemorySwapping();
#endif
}
 8000650:	bf00      	nop
 8000652:	3780      	adds	r7, #128	; 0x80
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	420d0400 	.word	0x420d0400
 800065c:	420d0504 	.word	0x420d0504

08000660 <FMC_Error_Handler>:

void FMC_Error_Handler() {
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
	...

08000670 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800067a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800067e:	4909      	ldr	r1, [pc, #36]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4313      	orrs	r3, r2
 8000684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800068a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4013      	ands	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000694:	68fb      	ldr	r3, [r7, #12]
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	46020c00 	.word	0x46020c00

080006a8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80006b6:	4909      	ldr	r1, [pc, #36]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4013      	ands	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006cc:	68fb      	ldr	r3, [r7, #12]
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	46020c00 	.word	0x46020c00

080006e0 <ST7789V_SEND_COMMAND>:
#define ST7789V_Ax          18
//#define ST7789V_SEND_COMMAND(command)   FMC_LCD_8BIT_SEND_COMMAND(ST7789V_SRAM_BANK, command)              //maybe this needs to be changed to 8bit as ST7789V always reads commands on [D0:D7]
//#define ST7789V_SEND_DATA(data)         FMC_LCD_16BIT_SEND_DATA(ST7789V_SRAM_BANK, ST7789V_Ax, data)

static void ST7789V_SEND_COMMAND(uint16_t cmd)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
    ST7789_REG = cmd;
 80006ea:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80006ee:	88fb      	ldrh	r3, [r7, #6]
 80006f0:	8013      	strh	r3, [r2, #0]

}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <ST7789V_SEND_DATA>:
static void ST7789V_SEND_DATA(uint16_t data)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	80fb      	strh	r3, [r7, #6]
    ST7789_RAM = data;
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <ST7789V_SEND_DATA+0x1c>)
 800070c:	88fb      	ldrh	r3, [r7, #6]
 800070e:	8013      	strh	r3, [r2, #0]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	60080000 	.word	0x60080000

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f001 f965 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 fb9b 	bl	8000e64 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800072e:	f000 fbfd 	bl	8000f2c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000732:	f000 fd65 	bl	8001200 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000736:	f000 fc07 	bl	8000f48 <MX_ADC1_Init>
  MX_UCPD1_Init();
 800073a:	f000 fc49 	bl	8000fd0 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 800073e:	f000 fc7d 	bl	800103c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000742:	f000 fcc7 	bl	80010d4 <MX_USB_OTG_FS_PCD_Init>
  MX_FMC_Init();
 8000746:	f000 fcf1 	bl	800112c <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	2104      	movs	r1, #4
 800074e:	48e4      	ldr	r0, [pc, #912]	; (8000ae0 <main+0x3c0>)
 8000750:	f002 f8b6 	bl	80028c0 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000754:	20c8      	movs	r0, #200	; 0xc8
 8000756:	f001 f9d1 	bl	8001afc <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2104      	movs	r1, #4
 800075e:	48e0      	ldr	r0, [pc, #896]	; (8000ae0 <main+0x3c0>)
 8000760:	f002 f8ae 	bl	80028c0 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000764:	20c8      	movs	r0, #200	; 0xc8
 8000766:	f001 f9c9 	bl	8001afc <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	2104      	movs	r1, #4
 800076e:	48dc      	ldr	r0, [pc, #880]	; (8000ae0 <main+0x3c0>)
 8000770:	f002 f8a6 	bl	80028c0 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000774:	20c8      	movs	r0, #200	; 0xc8
 8000776:	f001 f9c1 	bl	8001afc <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2104      	movs	r1, #4
 800077e:	48d8      	ldr	r0, [pc, #864]	; (8000ae0 <main+0x3c0>)
 8000780:	f002 f89e 	bl	80028c0 <HAL_GPIO_WritePin>

/////////////////////////////////////////////////////////////////////////////////////////
  ///Initialization start///
/////////////////////////////////////////////////////////////////////////////////////////
   ExternalSRAMSpecStruct ST7789VSpec = {
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	f8c3 2003 	str.w	r2, [r3, #3]
 800078e:	2310      	movs	r3, #16
 8000790:	703b      	strb	r3, [r7, #0]
 8000792:	2332      	movs	r3, #50	; 0x32
 8000794:	713b      	strb	r3, [r7, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	71bb      	strb	r3, [r7, #6]
		   //.tCycWrite = 66,
		   .writeOnly = 1

   };

   FMCSRAMInit(&ST7789VSpec, ST7789V_SRAM_BANK);
 800079a:	463b      	mov	r3, r7
 800079c:	2101      	movs	r1, #1
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fef8 	bl	8000594 <FMCSRAMInit>

   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2104      	movs	r1, #4
 80007a8:	48ce      	ldr	r0, [pc, #824]	; (8000ae4 <main+0x3c4>)
 80007aa:	f002 f889 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f001 f9a4 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2104      	movs	r1, #4
 80007b8:	48ca      	ldr	r0, [pc, #808]	; (8000ae4 <main+0x3c4>)
 80007ba:	f002 f881 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(10);
 80007be:	200a      	movs	r0, #10
 80007c0:	f001 f99c 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2104      	movs	r1, #4
 80007c8:	48c6      	ldr	r0, [pc, #792]	; (8000ae4 <main+0x3c4>)
 80007ca:	f002 f879 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(120);
 80007ce:	2078      	movs	r0, #120	; 0x78
 80007d0:	f001 f994 	bl	8001afc <HAL_Delay>


   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2104      	movs	r1, #4
 80007d8:	48c1      	ldr	r0, [pc, #772]	; (8000ae0 <main+0x3c0>)
 80007da:	f002 f871 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80007de:	20c8      	movs	r0, #200	; 0xc8
 80007e0:	f001 f98c 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2104      	movs	r1, #4
 80007e8:	48bd      	ldr	r0, [pc, #756]	; (8000ae0 <main+0x3c0>)
 80007ea:	f002 f869 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80007ee:	20c8      	movs	r0, #200	; 0xc8
 80007f0:	f001 f984 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2104      	movs	r1, #4
 80007f8:	48b9      	ldr	r0, [pc, #740]	; (8000ae0 <main+0x3c0>)
 80007fa:	f002 f861 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80007fe:	20c8      	movs	r0, #200	; 0xc8
 8000800:	f001 f97c 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2104      	movs	r1, #4
 8000808:	48b5      	ldr	r0, [pc, #724]	; (8000ae0 <main+0x3c0>)
 800080a:	f002 f859 	bl	80028c0 <HAL_GPIO_WritePin>


   ST7789V_SEND_COMMAND(ST7789V_SLPOUT);
 800080e:	2011      	movs	r0, #17
 8000810:	f7ff ff66 	bl	80006e0 <ST7789V_SEND_COMMAND>
   HAL_Delay(120);
 8000814:	2078      	movs	r0, #120	; 0x78
 8000816:	f001 f971 	bl	8001afc <HAL_Delay>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800081a:	2201      	movs	r2, #1
 800081c:	2104      	movs	r1, #4
 800081e:	48b0      	ldr	r0, [pc, #704]	; (8000ae0 <main+0x3c0>)
 8000820:	f002 f84e 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000824:	20c8      	movs	r0, #200	; 0xc8
 8000826:	f001 f969 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2104      	movs	r1, #4
 800082e:	48ac      	ldr	r0, [pc, #688]	; (8000ae0 <main+0x3c0>)
 8000830:	f002 f846 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000834:	20c8      	movs	r0, #200	; 0xc8
 8000836:	f001 f961 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800083a:	2201      	movs	r2, #1
 800083c:	2104      	movs	r1, #4
 800083e:	48a8      	ldr	r0, [pc, #672]	; (8000ae0 <main+0x3c0>)
 8000840:	f002 f83e 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000844:	20c8      	movs	r0, #200	; 0xc8
 8000846:	f001 f959 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2104      	movs	r1, #4
 800084e:	48a4      	ldr	r0, [pc, #656]	; (8000ae0 <main+0x3c0>)
 8000850:	f002 f836 	bl	80028c0 <HAL_GPIO_WritePin>



   ST7789V_SEND_COMMAND(ST7789V_MADCTL); //Memory data acccess control
 8000854:	2036      	movs	r0, #54	; 0x36
 8000856:	f7ff ff43 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0x00);
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff ff50 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000860:	2201      	movs	r2, #1
 8000862:	2104      	movs	r1, #4
 8000864:	489e      	ldr	r0, [pc, #632]	; (8000ae0 <main+0x3c0>)
 8000866:	f002 f82b 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800086a:	20c8      	movs	r0, #200	; 0xc8
 800086c:	f001 f946 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2104      	movs	r1, #4
 8000874:	489a      	ldr	r0, [pc, #616]	; (8000ae0 <main+0x3c0>)
 8000876:	f002 f823 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800087a:	20c8      	movs	r0, #200	; 0xc8
 800087c:	f001 f93e 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000880:	2201      	movs	r2, #1
 8000882:	2104      	movs	r1, #4
 8000884:	4896      	ldr	r0, [pc, #600]	; (8000ae0 <main+0x3c0>)
 8000886:	f002 f81b 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800088a:	20c8      	movs	r0, #200	; 0xc8
 800088c:	f001 f936 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2104      	movs	r1, #4
 8000894:	4892      	ldr	r0, [pc, #584]	; (8000ae0 <main+0x3c0>)
 8000896:	f002 f813 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_PORCTRL); //Porch Setting
 800089a:	20b2      	movs	r0, #178	; 0xb2
 800089c:	f7ff ff20 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0x0C);
 80008a0:	200c      	movs	r0, #12
 80008a2:	f7ff ff2d 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x0C);
 80008a6:	200c      	movs	r0, #12
 80008a8:	f7ff ff2a 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x00);
 80008ac:	2000      	movs	r0, #0
 80008ae:	f7ff ff27 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x33);
 80008b2:	2033      	movs	r0, #51	; 0x33
 80008b4:	f7ff ff24 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x33);
 80008b8:	2033      	movs	r0, #51	; 0x33
 80008ba:	f7ff ff21 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80008be:	2201      	movs	r2, #1
 80008c0:	2104      	movs	r1, #4
 80008c2:	4887      	ldr	r0, [pc, #540]	; (8000ae0 <main+0x3c0>)
 80008c4:	f001 fffc 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80008c8:	20c8      	movs	r0, #200	; 0xc8
 80008ca:	f001 f917 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2104      	movs	r1, #4
 80008d2:	4883      	ldr	r0, [pc, #524]	; (8000ae0 <main+0x3c0>)
 80008d4:	f001 fff4 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80008d8:	20c8      	movs	r0, #200	; 0xc8
 80008da:	f001 f90f 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80008de:	2201      	movs	r2, #1
 80008e0:	2104      	movs	r1, #4
 80008e2:	487f      	ldr	r0, [pc, #508]	; (8000ae0 <main+0x3c0>)
 80008e4:	f001 ffec 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80008e8:	20c8      	movs	r0, #200	; 0xc8
 80008ea:	f001 f907 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2104      	movs	r1, #4
 80008f2:	487b      	ldr	r0, [pc, #492]	; (8000ae0 <main+0x3c0>)
 80008f4:	f001 ffe4 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_GCTRL); //Gate Control
 80008f8:	20b7      	movs	r0, #183	; 0xb7
 80008fa:	f7ff fef1 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0x70); //VGH, VGL
 80008fe:	2070      	movs	r0, #112	; 0x70
 8000900:	f7ff fefe 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000904:	2201      	movs	r2, #1
 8000906:	2104      	movs	r1, #4
 8000908:	4875      	ldr	r0, [pc, #468]	; (8000ae0 <main+0x3c0>)
 800090a:	f001 ffd9 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800090e:	20c8      	movs	r0, #200	; 0xc8
 8000910:	f001 f8f4 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2104      	movs	r1, #4
 8000918:	4871      	ldr	r0, [pc, #452]	; (8000ae0 <main+0x3c0>)
 800091a:	f001 ffd1 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800091e:	20c8      	movs	r0, #200	; 0xc8
 8000920:	f001 f8ec 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000924:	2201      	movs	r2, #1
 8000926:	2104      	movs	r1, #4
 8000928:	486d      	ldr	r0, [pc, #436]	; (8000ae0 <main+0x3c0>)
 800092a:	f001 ffc9 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800092e:	20c8      	movs	r0, #200	; 0xc8
 8000930:	f001 f8e4 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2104      	movs	r1, #4
 8000938:	4869      	ldr	r0, [pc, #420]	; (8000ae0 <main+0x3c0>)
 800093a:	f001 ffc1 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_VCOMS);
 800093e:	20bb      	movs	r0, #187	; 0xbb
 8000940:	f7ff fece 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0x3A);
 8000944:	203a      	movs	r0, #58	; 0x3a
 8000946:	f7ff fedb 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	2104      	movs	r1, #4
 800094e:	4864      	ldr	r0, [pc, #400]	; (8000ae0 <main+0x3c0>)
 8000950:	f001 ffb6 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000954:	20c8      	movs	r0, #200	; 0xc8
 8000956:	f001 f8d1 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2104      	movs	r1, #4
 800095e:	4860      	ldr	r0, [pc, #384]	; (8000ae0 <main+0x3c0>)
 8000960:	f001 ffae 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000964:	20c8      	movs	r0, #200	; 0xc8
 8000966:	f001 f8c9 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800096a:	2201      	movs	r2, #1
 800096c:	2104      	movs	r1, #4
 800096e:	485c      	ldr	r0, [pc, #368]	; (8000ae0 <main+0x3c0>)
 8000970:	f001 ffa6 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000974:	20c8      	movs	r0, #200	; 0xc8
 8000976:	f001 f8c1 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2104      	movs	r1, #4
 800097e:	4858      	ldr	r0, [pc, #352]	; (8000ae0 <main+0x3c0>)
 8000980:	f001 ff9e 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_LCMCTRL);
 8000984:	20c0      	movs	r0, #192	; 0xc0
 8000986:	f7ff feab 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0x2C);
 800098a:	202c      	movs	r0, #44	; 0x2c
 800098c:	f7ff feb8 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000990:	2201      	movs	r2, #1
 8000992:	2104      	movs	r1, #4
 8000994:	4852      	ldr	r0, [pc, #328]	; (8000ae0 <main+0x3c0>)
 8000996:	f001 ff93 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800099a:	20c8      	movs	r0, #200	; 0xc8
 800099c:	f001 f8ae 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2104      	movs	r1, #4
 80009a4:	484e      	ldr	r0, [pc, #312]	; (8000ae0 <main+0x3c0>)
 80009a6:	f001 ff8b 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80009aa:	20c8      	movs	r0, #200	; 0xc8
 80009ac:	f001 f8a6 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2104      	movs	r1, #4
 80009b4:	484a      	ldr	r0, [pc, #296]	; (8000ae0 <main+0x3c0>)
 80009b6:	f001 ff83 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80009ba:	20c8      	movs	r0, #200	; 0xc8
 80009bc:	f001 f89e 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2104      	movs	r1, #4
 80009c4:	4846      	ldr	r0, [pc, #280]	; (8000ae0 <main+0x3c0>)
 80009c6:	f001 ff7b 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_VDVVRHEN);
 80009ca:	20c2      	movs	r0, #194	; 0xc2
 80009cc:	f7ff fe88 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0x01);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f7ff fe95 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80009d6:	2201      	movs	r2, #1
 80009d8:	2104      	movs	r1, #4
 80009da:	4841      	ldr	r0, [pc, #260]	; (8000ae0 <main+0x3c0>)
 80009dc:	f001 ff70 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80009e0:	20c8      	movs	r0, #200	; 0xc8
 80009e2:	f001 f88b 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2104      	movs	r1, #4
 80009ea:	483d      	ldr	r0, [pc, #244]	; (8000ae0 <main+0x3c0>)
 80009ec:	f001 ff68 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80009f0:	20c8      	movs	r0, #200	; 0xc8
 80009f2:	f001 f883 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2104      	movs	r1, #4
 80009fa:	4839      	ldr	r0, [pc, #228]	; (8000ae0 <main+0x3c0>)
 80009fc:	f001 ff60 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000a00:	20c8      	movs	r0, #200	; 0xc8
 8000a02:	f001 f87b 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2104      	movs	r1, #4
 8000a0a:	4835      	ldr	r0, [pc, #212]	; (8000ae0 <main+0x3c0>)
 8000a0c:	f001 ff58 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_VRHS);
 8000a10:	20c3      	movs	r0, #195	; 0xc3
 8000a12:	f7ff fe65 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0x14);
 8000a16:	2014      	movs	r0, #20
 8000a18:	f7ff fe72 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2104      	movs	r1, #4
 8000a20:	482f      	ldr	r0, [pc, #188]	; (8000ae0 <main+0x3c0>)
 8000a22:	f001 ff4d 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000a26:	20c8      	movs	r0, #200	; 0xc8
 8000a28:	f001 f868 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2104      	movs	r1, #4
 8000a30:	482b      	ldr	r0, [pc, #172]	; (8000ae0 <main+0x3c0>)
 8000a32:	f001 ff45 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000a36:	20c8      	movs	r0, #200	; 0xc8
 8000a38:	f001 f860 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2104      	movs	r1, #4
 8000a40:	4827      	ldr	r0, [pc, #156]	; (8000ae0 <main+0x3c0>)
 8000a42:	f001 ff3d 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000a46:	20c8      	movs	r0, #200	; 0xc8
 8000a48:	f001 f858 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2104      	movs	r1, #4
 8000a50:	4823      	ldr	r0, [pc, #140]	; (8000ae0 <main+0x3c0>)
 8000a52:	f001 ff35 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_VDVS);
 8000a56:	20c4      	movs	r0, #196	; 0xc4
 8000a58:	f7ff fe42 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0x20);
 8000a5c:	2020      	movs	r0, #32
 8000a5e:	f7ff fe4f 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2104      	movs	r1, #4
 8000a66:	481e      	ldr	r0, [pc, #120]	; (8000ae0 <main+0x3c0>)
 8000a68:	f001 ff2a 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000a6c:	20c8      	movs	r0, #200	; 0xc8
 8000a6e:	f001 f845 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2104      	movs	r1, #4
 8000a76:	481a      	ldr	r0, [pc, #104]	; (8000ae0 <main+0x3c0>)
 8000a78:	f001 ff22 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000a7c:	20c8      	movs	r0, #200	; 0xc8
 8000a7e:	f001 f83d 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2104      	movs	r1, #4
 8000a86:	4816      	ldr	r0, [pc, #88]	; (8000ae0 <main+0x3c0>)
 8000a88:	f001 ff1a 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000a8c:	20c8      	movs	r0, #200	; 0xc8
 8000a8e:	f001 f835 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2104      	movs	r1, #4
 8000a96:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <main+0x3c0>)
 8000a98:	f001 ff12 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_FRCTRL2);
 8000a9c:	20c6      	movs	r0, #198	; 0xc6
 8000a9e:	f7ff fe1f 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0x0F); //60Hz 0A
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f7ff fe2c 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2104      	movs	r1, #4
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <main+0x3c0>)
 8000aae:	f001 ff07 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000ab2:	20c8      	movs	r0, #200	; 0xc8
 8000ab4:	f001 f822 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2104      	movs	r1, #4
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <main+0x3c0>)
 8000abe:	f001 feff 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000ac2:	20c8      	movs	r0, #200	; 0xc8
 8000ac4:	f001 f81a 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2104      	movs	r1, #4
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <main+0x3c0>)
 8000ace:	f001 fef7 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000ad2:	20c8      	movs	r0, #200	; 0xc8
 8000ad4:	f001 f812 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2104      	movs	r1, #4
 8000adc:	e004      	b.n	8000ae8 <main+0x3c8>
 8000ade:	bf00      	nop
 8000ae0:	42021800 	.word	0x42021800
 8000ae4:	42021000 	.word	0x42021000
 8000ae8:	48dc      	ldr	r0, [pc, #880]	; (8000e5c <main+0x73c>)
 8000aea:	f001 fee9 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_PWCTRL1);
 8000aee:	20d0      	movs	r0, #208	; 0xd0
 8000af0:	f7ff fdf6 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0xA4);
 8000af4:	20a4      	movs	r0, #164	; 0xa4
 8000af6:	f7ff fe03 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0xA1); //AVDD VCL
 8000afa:	20a1      	movs	r0, #161	; 0xa1
 8000afc:	f7ff fe00 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2104      	movs	r1, #4
 8000b04:	48d5      	ldr	r0, [pc, #852]	; (8000e5c <main+0x73c>)
 8000b06:	f001 fedb 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000b0a:	20c8      	movs	r0, #200	; 0xc8
 8000b0c:	f000 fff6 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2104      	movs	r1, #4
 8000b14:	48d1      	ldr	r0, [pc, #836]	; (8000e5c <main+0x73c>)
 8000b16:	f001 fed3 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000b1a:	20c8      	movs	r0, #200	; 0xc8
 8000b1c:	f000 ffee 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2104      	movs	r1, #4
 8000b24:	48cd      	ldr	r0, [pc, #820]	; (8000e5c <main+0x73c>)
 8000b26:	f001 fecb 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000b2a:	20c8      	movs	r0, #200	; 0xc8
 8000b2c:	f000 ffe6 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2104      	movs	r1, #4
 8000b34:	48c9      	ldr	r0, [pc, #804]	; (8000e5c <main+0x73c>)
 8000b36:	f001 fec3 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_PVGAMCTRL);
 8000b3a:	20e0      	movs	r0, #224	; 0xe0
 8000b3c:	f7ff fdd0 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0xD0);
 8000b40:	20d0      	movs	r0, #208	; 0xd0
 8000b42:	f7ff fddd 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x07);
 8000b46:	2007      	movs	r0, #7
 8000b48:	f7ff fdda 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x0D);
 8000b4c:	200d      	movs	r0, #13
 8000b4e:	f7ff fdd7 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x09);
 8000b52:	2009      	movs	r0, #9
 8000b54:	f7ff fdd4 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x08);
 8000b58:	2008      	movs	r0, #8
 8000b5a:	f7ff fdd1 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x25);
 8000b5e:	2025      	movs	r0, #37	; 0x25
 8000b60:	f7ff fdce 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x28);
 8000b64:	2028      	movs	r0, #40	; 0x28
 8000b66:	f7ff fdcb 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x53);
 8000b6a:	2053      	movs	r0, #83	; 0x53
 8000b6c:	f7ff fdc8 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x39);
 8000b70:	2039      	movs	r0, #57	; 0x39
 8000b72:	f7ff fdc5 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x12);
 8000b76:	2012      	movs	r0, #18
 8000b78:	f7ff fdc2 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x0B);
 8000b7c:	200b      	movs	r0, #11
 8000b7e:	f7ff fdbf 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x0A);
 8000b82:	200a      	movs	r0, #10
 8000b84:	f7ff fdbc 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x17);
 8000b88:	2017      	movs	r0, #23
 8000b8a:	f7ff fdb9 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x34);
 8000b8e:	2034      	movs	r0, #52	; 0x34
 8000b90:	f7ff fdb6 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2104      	movs	r1, #4
 8000b98:	48b0      	ldr	r0, [pc, #704]	; (8000e5c <main+0x73c>)
 8000b9a:	f001 fe91 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000b9e:	20c8      	movs	r0, #200	; 0xc8
 8000ba0:	f000 ffac 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	48ac      	ldr	r0, [pc, #688]	; (8000e5c <main+0x73c>)
 8000baa:	f001 fe89 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000bae:	20c8      	movs	r0, #200	; 0xc8
 8000bb0:	f000 ffa4 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	48a8      	ldr	r0, [pc, #672]	; (8000e5c <main+0x73c>)
 8000bba:	f001 fe81 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000bbe:	20c8      	movs	r0, #200	; 0xc8
 8000bc0:	f000 ff9c 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	48a4      	ldr	r0, [pc, #656]	; (8000e5c <main+0x73c>)
 8000bca:	f001 fe79 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_NVGAMCTRL);
 8000bce:	20e1      	movs	r0, #225	; 0xe1
 8000bd0:	f7ff fd86 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0xD0);
 8000bd4:	20d0      	movs	r0, #208	; 0xd0
 8000bd6:	f7ff fd93 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x07);
 8000bda:	2007      	movs	r0, #7
 8000bdc:	f7ff fd90 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x0D);
 8000be0:	200d      	movs	r0, #13
 8000be2:	f7ff fd8d 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x09);
 8000be6:	2009      	movs	r0, #9
 8000be8:	f7ff fd8a 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x09);
 8000bec:	2009      	movs	r0, #9
 8000bee:	f7ff fd87 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x25);
 8000bf2:	2025      	movs	r0, #37	; 0x25
 8000bf4:	f7ff fd84 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x29);
 8000bf8:	2029      	movs	r0, #41	; 0x29
 8000bfa:	f7ff fd81 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x35);
 8000bfe:	2035      	movs	r0, #53	; 0x35
 8000c00:	f7ff fd7e 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x39);
 8000c04:	2039      	movs	r0, #57	; 0x39
 8000c06:	f7ff fd7b 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x13);
 8000c0a:	2013      	movs	r0, #19
 8000c0c:	f7ff fd78 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x0A);
 8000c10:	200a      	movs	r0, #10
 8000c12:	f7ff fd75 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x0A);
 8000c16:	200a      	movs	r0, #10
 8000c18:	f7ff fd72 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x16);
 8000c1c:	2016      	movs	r0, #22
 8000c1e:	f7ff fd6f 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x34);
 8000c22:	2034      	movs	r0, #52	; 0x34
 8000c24:	f7ff fd6c 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	488b      	ldr	r0, [pc, #556]	; (8000e5c <main+0x73c>)
 8000c2e:	f001 fe47 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c32:	20c8      	movs	r0, #200	; 0xc8
 8000c34:	f000 ff62 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	4887      	ldr	r0, [pc, #540]	; (8000e5c <main+0x73c>)
 8000c3e:	f001 fe3f 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c42:	20c8      	movs	r0, #200	; 0xc8
 8000c44:	f000 ff5a 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	4883      	ldr	r0, [pc, #524]	; (8000e5c <main+0x73c>)
 8000c4e:	f001 fe37 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c52:	20c8      	movs	r0, #200	; 0xc8
 8000c54:	f000 ff52 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2104      	movs	r1, #4
 8000c5c:	487f      	ldr	r0, [pc, #508]	; (8000e5c <main+0x73c>)
 8000c5e:	f001 fe2f 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_INVON);
 8000c62:	2021      	movs	r0, #33	; 0x21
 8000c64:	f7ff fd3c 	bl	80006e0 <ST7789V_SEND_COMMAND>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	487b      	ldr	r0, [pc, #492]	; (8000e5c <main+0x73c>)
 8000c6e:	f001 fe27 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c72:	20c8      	movs	r0, #200	; 0xc8
 8000c74:	f000 ff42 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	4877      	ldr	r0, [pc, #476]	; (8000e5c <main+0x73c>)
 8000c7e:	f001 fe1f 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c82:	20c8      	movs	r0, #200	; 0xc8
 8000c84:	f000 ff3a 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	4873      	ldr	r0, [pc, #460]	; (8000e5c <main+0x73c>)
 8000c8e:	f001 fe17 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c92:	20c8      	movs	r0, #200	; 0xc8
 8000c94:	f000 ff32 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	486f      	ldr	r0, [pc, #444]	; (8000e5c <main+0x73c>)
 8000c9e:	f001 fe0f 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_COLMOD);
 8000ca2:	203a      	movs	r0, #58	; 0x3a
 8000ca4:	f7ff fd1c 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0x55); //65K colors, 16 bit/px
 8000ca8:	2055      	movs	r0, #85	; 0x55
 8000caa:	f7ff fd29 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	486a      	ldr	r0, [pc, #424]	; (8000e5c <main+0x73c>)
 8000cb4:	f001 fe04 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000cb8:	20c8      	movs	r0, #200	; 0xc8
 8000cba:	f000 ff1f 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	4866      	ldr	r0, [pc, #408]	; (8000e5c <main+0x73c>)
 8000cc4:	f001 fdfc 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000cc8:	20c8      	movs	r0, #200	; 0xc8
 8000cca:	f000 ff17 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	4862      	ldr	r0, [pc, #392]	; (8000e5c <main+0x73c>)
 8000cd4:	f001 fdf4 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000cd8:	20c8      	movs	r0, #200	; 0xc8
 8000cda:	f000 ff0f 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	485e      	ldr	r0, [pc, #376]	; (8000e5c <main+0x73c>)
 8000ce4:	f001 fdec 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_CASET);
 8000ce8:	202a      	movs	r0, #42	; 0x2a
 8000cea:	f7ff fcf9 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0x00);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff fd06 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x00);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fd03 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x00);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fd00 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0xEF);
 8000d00:	20ef      	movs	r0, #239	; 0xef
 8000d02:	f7ff fcfd 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2104      	movs	r1, #4
 8000d0a:	4854      	ldr	r0, [pc, #336]	; (8000e5c <main+0x73c>)
 8000d0c:	f001 fdd8 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000d10:	20c8      	movs	r0, #200	; 0xc8
 8000d12:	f000 fef3 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2104      	movs	r1, #4
 8000d1a:	4850      	ldr	r0, [pc, #320]	; (8000e5c <main+0x73c>)
 8000d1c:	f001 fdd0 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000d20:	20c8      	movs	r0, #200	; 0xc8
 8000d22:	f000 feeb 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2104      	movs	r1, #4
 8000d2a:	484c      	ldr	r0, [pc, #304]	; (8000e5c <main+0x73c>)
 8000d2c:	f001 fdc8 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000d30:	20c8      	movs	r0, #200	; 0xc8
 8000d32:	f000 fee3 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2104      	movs	r1, #4
 8000d3a:	4848      	ldr	r0, [pc, #288]	; (8000e5c <main+0x73c>)
 8000d3c:	f001 fdc0 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_RASET);
 8000d40:	202b      	movs	r0, #43	; 0x2b
 8000d42:	f7ff fccd 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_DATA(0x00);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f7ff fcda 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x00);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff fcd7 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x01);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff fcd4 	bl	8000700 <ST7789V_SEND_DATA>
   ST7789V_SEND_DATA(0x3F);
 8000d58:	203f      	movs	r0, #63	; 0x3f
 8000d5a:	f7ff fcd1 	bl	8000700 <ST7789V_SEND_DATA>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2104      	movs	r1, #4
 8000d62:	483e      	ldr	r0, [pc, #248]	; (8000e5c <main+0x73c>)
 8000d64:	f001 fdac 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000d68:	20c8      	movs	r0, #200	; 0xc8
 8000d6a:	f000 fec7 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2104      	movs	r1, #4
 8000d72:	483a      	ldr	r0, [pc, #232]	; (8000e5c <main+0x73c>)
 8000d74:	f001 fda4 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000d78:	20c8      	movs	r0, #200	; 0xc8
 8000d7a:	f000 febf 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2104      	movs	r1, #4
 8000d82:	4836      	ldr	r0, [pc, #216]	; (8000e5c <main+0x73c>)
 8000d84:	f001 fd9c 	bl	80028c0 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000d88:	20c8      	movs	r0, #200	; 0xc8
 8000d8a:	f000 feb7 	bl	8001afc <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2104      	movs	r1, #4
 8000d92:	4832      	ldr	r0, [pc, #200]	; (8000e5c <main+0x73c>)
 8000d94:	f001 fd94 	bl	80028c0 <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_DISPON);
 8000d98:	2029      	movs	r0, #41	; 0x29
 8000d9a:	f7ff fca1 	bl	80006e0 <ST7789V_SEND_COMMAND>
   ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8000d9e:	202c      	movs	r0, #44	; 0x2c
 8000da0:	f7ff fc9e 	bl	80006e0 <ST7789V_SEND_COMMAND>

  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2104      	movs	r1, #4
 8000da8:	482c      	ldr	r0, [pc, #176]	; (8000e5c <main+0x73c>)
 8000daa:	f001 fd89 	bl	80028c0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000dae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000db2:	f000 fea3 	bl	8001afc <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2104      	movs	r1, #4
 8000dba:	4828      	ldr	r0, [pc, #160]	; (8000e5c <main+0x73c>)
 8000dbc:	f001 fd80 	bl	80028c0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000dc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc4:	f000 fe9a 	bl	8001afc <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2104      	movs	r1, #4
 8000dcc:	4823      	ldr	r0, [pc, #140]	; (8000e5c <main+0x73c>)
 8000dce:	f001 fd77 	bl	80028c0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd6:	f000 fe91 	bl	8001afc <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2104      	movs	r1, #4
 8000dde:	481f      	ldr	r0, [pc, #124]	; (8000e5c <main+0x73c>)
 8000de0:	f001 fd6e 	bl	80028c0 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2180      	movs	r1, #128	; 0x80
 8000de8:	481d      	ldr	r0, [pc, #116]	; (8000e60 <main+0x740>)
 8000dea:	f001 fd69 	bl	80028c0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000dee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df2:	f000 fe83 	bl	8001afc <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	4819      	ldr	r0, [pc, #100]	; (8000e60 <main+0x740>)
 8000dfc:	f001 fd60 	bl	80028c0 <HAL_GPIO_WritePin>


	  ST7789V_fill(0xFF);
 8000e00:	20ff      	movs	r0, #255	; 0xff
 8000e02:	f000 fb4d 	bl	80014a0 <ST7789V_fill>
	  HAL_Delay(1000);
 8000e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0a:	f000 fe77 	bl	8001afc <HAL_Delay>
	  ST7789V_fill(COLOR_BLUE);
 8000e0e:	201f      	movs	r0, #31
 8000e10:	f000 fb46 	bl	80014a0 <ST7789V_fill>
	  HAL_Delay(1000);
 8000e14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e18:	f000 fe70 	bl	8001afc <HAL_Delay>
	  ST7789V_fill(COLOR_GREEN);
 8000e1c:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000e20:	f000 fb3e 	bl	80014a0 <ST7789V_fill>
	  HAL_Delay(1000);;
 8000e24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e28:	f000 fe68 	bl	8001afc <HAL_Delay>
	  ST7789V_fill(COLOR_RED);
 8000e2c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000e30:	f000 fb36 	bl	80014a0 <ST7789V_fill>
	  HAL_Delay(1000);
 8000e34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e38:	f000 fe60 	bl	8001afc <HAL_Delay>
	  ST7789V_fillCircle(80, 100, 15, COLOR_BLACK);
	  //HAL_Delay(3000);
	  ST7789V_fill(COLOR_WHITE);
	  //HAL_Delay(10000);
*/
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2104      	movs	r1, #4
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <main+0x73c>)
 8000e42:	f001 fd3d 	bl	80028c0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000e46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e4a:	f000 fe57 	bl	8001afc <HAL_Delay>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2104      	movs	r1, #4
 8000e52:	4802      	ldr	r0, [pc, #8]	; (8000e5c <main+0x73c>)
 8000e54:	f001 fd34 	bl	80028c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 8000e58:	e7c4      	b.n	8000de4 <main+0x6c4>
 8000e5a:	bf00      	nop
 8000e5c:	42021800 	.word	0x42021800
 8000e60:	42020400 	.word	0x42020400

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b09e      	sub	sp, #120	; 0x78
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	2260      	movs	r2, #96	; 0x60
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f008 fbc6 	bl	8009604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]
 8000e86:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e88:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000e8c:	f002 fdb2 	bl	80039f4 <HAL_PWREx_ControlVoltageScaling>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000e96:	f000 fa9d 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000e9a:	2332      	movs	r3, #50	; 0x32
 8000e9c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eaa:	2310      	movs	r3, #16
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000eb2:	2310      	movs	r3, #16
 8000eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000ecc:	2350      	movs	r3, #80	; 0x50
 8000ece:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fe75 	bl	8003bd8 <HAL_RCC_OscConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ef4:	f000 fa6e 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef8:	231f      	movs	r3, #31
 8000efa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efc:	2303      	movs	r3, #3
 8000efe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f10:	463b      	mov	r3, r7
 8000f12:	2104      	movs	r1, #4
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 fd35 	bl	8004984 <HAL_RCC_ClockConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f20:	f000 fa58 	bl	80013d4 <Error_Handler>
  }
}
 8000f24:	bf00      	nop
 8000f26:	3778      	adds	r7, #120	; 0x78
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000f30:	f002 fe42 	bl	8003bb8 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000f34:	2002      	movs	r0, #2
 8000f36:	f002 fddf 	bl	8003af8 <HAL_PWREx_ConfigSupply>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000f40:	f000 fa48 	bl	80013d4 <Error_Handler>
  }
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <MX_ADC1_Init+0x84>)
 8000f50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000f6c:	2204      	movs	r2, #4
 8000f6e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_ADC1_Init+0x80>)
 8000fb6:	f000 fea1 	bl	8001cfc <HAL_ADC_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000fc0:	f000 fa08 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000002c 	.word	0x2000002c
 8000fcc:	42028000 	.word	0x42028000

08000fd0 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
 8000fe4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000fe6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000fea:	f7ff fb5d 	bl	80006a8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f7ff fb3e 	bl	8000670 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff fb3b 	bl	8000670 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ffe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001000:	2303      	movs	r3, #3
 8001002:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <MX_UCPD1_Init+0x64>)
 800100e:	f007 fc7a 	bl	8008906 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001016:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001018:	2303      	movs	r3, #3
 800101a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_UCPD1_Init+0x68>)
 8001026:	f007 fc6e 	bl	8008906 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	42020400 	.word	0x42020400
 8001038:	42020000 	.word	0x42020000

0800103c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001042:	4a23      	ldr	r2, [pc, #140]	; (80010d0 <MX_USART1_UART_Init+0x94>)
 8001044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_USART1_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_USART1_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_USART1_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001086:	f006 fced 	bl	8007a64 <HAL_UART_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001090:	f000 f9a0 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001094:	2100      	movs	r1, #0
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001098:	f007 f8c4 	bl	8008224 <HAL_UARTEx_SetTxFifoThreshold>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010a2:	f000 f997 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <MX_USART1_UART_Init+0x90>)
 80010aa:	f007 f8f9 	bl	80082a0 <HAL_UARTEx_SetRxFifoThreshold>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010b4:	f000 f98e 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_USART1_UART_Init+0x90>)
 80010ba:	f007 f87a 	bl	80081b2 <HAL_UARTEx_DisableFifoMode>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010c4:	f000 f986 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200000b8 	.word	0x200000b8
 80010d0:	40013800 	.word	0x40013800

080010d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010da:	4a13      	ldr	r2, [pc, #76]	; (8001128 <MX_USB_OTG_FS_PCD_Init+0x54>)
 80010dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010e0:	2206      	movs	r2, #6
 80010e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001110:	f001 fbee 	bl	80028f0 <HAL_PCD_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 800111a:	f000 f95b 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000148 	.word	0x20000148
 8001128:	42040000 	.word	0x42040000

0800112c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2220      	movs	r2, #32
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f008 fa63 	bl	8009604 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <MX_FMC_Init+0xc8>)
 8001140:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <MX_FMC_Init+0xcc>)
 8001142:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001144:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <MX_FMC_Init+0xc8>)
 8001146:	4a2d      	ldr	r2, [pc, #180]	; (80011fc <MX_FMC_Init+0xd0>)
 8001148:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <MX_FMC_Init+0xc8>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <MX_FMC_Init+0xc8>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <MX_FMC_Init+0xc8>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800115c:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <MX_FMC_Init+0xc8>)
 800115e:	2210      	movs	r2, #16
 8001160:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001162:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <MX_FMC_Init+0xc8>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <MX_FMC_Init+0xc8>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <MX_FMC_Init+0xc8>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_FMC_Init+0xc8>)
 8001176:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_FMC_Init+0xc8>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_FMC_Init+0xc8>)
 8001184:	2200      	movs	r2, #0
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_FMC_Init+0xc8>)
 800118a:	2200      	movs	r2, #0
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_FMC_Init+0xc8>)
 8001190:	2200      	movs	r2, #0
 8001192:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_FMC_Init+0xc8>)
 8001196:	2200      	movs	r2, #0
 8001198:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_FMC_Init+0xc8>)
 800119c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_FMC_Init+0xc8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_FMC_Init+0xc8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_FMC_Init+0xc8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 80011b6:	230f      	movs	r3, #15
 80011b8:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80011ba:	230f      	movs	r3, #15
 80011bc:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80011be:	23ff      	movs	r3, #255	; 0xff
 80011c0:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80011c6:	230f      	movs	r3, #15
 80011c8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011ca:	2310      	movs	r3, #16
 80011cc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011ce:	2311      	movs	r3, #17
 80011d0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80011d6:	463b      	mov	r3, r7
 80011d8:	2200      	movs	r2, #0
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_FMC_Init+0xc8>)
 80011de:	f006 fbf1 	bl	80079c4 <HAL_SRAM_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_FMC_Init+0xc0>
  {
    Error_Handler( );
 80011e8:	f000 f8f4 	bl	80013d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000654 	.word	0x20000654
 80011f8:	420d0400 	.word	0x420d0400
 80011fc:	420d0504 	.word	0x420d0504

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001216:	4b69      	ldr	r3, [pc, #420]	; (80013bc <MX_GPIO_Init+0x1bc>)
 8001218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800121c:	4a67      	ldr	r2, [pc, #412]	; (80013bc <MX_GPIO_Init+0x1bc>)
 800121e:	f043 0310 	orr.w	r3, r3, #16
 8001222:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001226:	4b65      	ldr	r3, [pc, #404]	; (80013bc <MX_GPIO_Init+0x1bc>)
 8001228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	61bb      	str	r3, [r7, #24]
 8001232:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001234:	4b61      	ldr	r3, [pc, #388]	; (80013bc <MX_GPIO_Init+0x1bc>)
 8001236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800123a:	4a60      	ldr	r2, [pc, #384]	; (80013bc <MX_GPIO_Init+0x1bc>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001244:	4b5d      	ldr	r3, [pc, #372]	; (80013bc <MX_GPIO_Init+0x1bc>)
 8001246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4b5a      	ldr	r3, [pc, #360]	; (80013bc <MX_GPIO_Init+0x1bc>)
 8001254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001258:	4a58      	ldr	r2, [pc, #352]	; (80013bc <MX_GPIO_Init+0x1bc>)
 800125a:	f043 0302 	orr.w	r3, r3, #2
 800125e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001262:	4b56      	ldr	r3, [pc, #344]	; (80013bc <MX_GPIO_Init+0x1bc>)
 8001264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001270:	4b52      	ldr	r3, [pc, #328]	; (80013bc <MX_GPIO_Init+0x1bc>)
 8001272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001276:	4a51      	ldr	r2, [pc, #324]	; (80013bc <MX_GPIO_Init+0x1bc>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001280:	4b4e      	ldr	r3, [pc, #312]	; (80013bc <MX_GPIO_Init+0x1bc>)
 8001282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800128e:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <MX_GPIO_Init+0x1bc>)
 8001290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001294:	4a49      	ldr	r2, [pc, #292]	; (80013bc <MX_GPIO_Init+0x1bc>)
 8001296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800129a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800129e:	4b47      	ldr	r3, [pc, #284]	; (80013bc <MX_GPIO_Init+0x1bc>)
 80012a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	4b43      	ldr	r3, [pc, #268]	; (80013bc <MX_GPIO_Init+0x1bc>)
 80012ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012b2:	4a42      	ldr	r2, [pc, #264]	; (80013bc <MX_GPIO_Init+0x1bc>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012bc:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <MX_GPIO_Init+0x1bc>)
 80012be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2104      	movs	r1, #4
 80012ce:	483c      	ldr	r0, [pc, #240]	; (80013c0 <MX_GPIO_Init+0x1c0>)
 80012d0:	f001 faf6 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2104      	movs	r1, #4
 80012d8:	483a      	ldr	r0, [pc, #232]	; (80013c4 <MX_GPIO_Init+0x1c4>)
 80012da:	f001 faf1 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	4839      	ldr	r0, [pc, #228]	; (80013c8 <MX_GPIO_Init+0x1c8>)
 80012e4:	f001 faec 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	21a0      	movs	r1, #160	; 0xa0
 80012ec:	4837      	ldr	r0, [pc, #220]	; (80013cc <MX_GPIO_Init+0x1cc>)
 80012ee:	f001 fae7 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FMC_RESET_Pin */
  GPIO_InitStruct.Pin = FMC_RESET_Pin;
 80012f2:	2304      	movs	r3, #4
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FMC_RESET_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	482d      	ldr	r0, [pc, #180]	; (80013c0 <MX_GPIO_Init+0x1c0>)
 800130a:	f001 f901 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800130e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001314:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <MX_GPIO_Init+0x1d0>)
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4829      	ldr	r0, [pc, #164]	; (80013c8 <MX_GPIO_Init+0x1c8>)
 8001324:	f001 f8f4 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001328:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4619      	mov	r1, r3
 800133c:	4823      	ldr	r0, [pc, #140]	; (80013cc <MX_GPIO_Init+0x1cc>)
 800133e:	f001 f8e7 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001342:	2304      	movs	r3, #4
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134a:	2301      	movs	r3, #1
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134e:	2302      	movs	r3, #2
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	481a      	ldr	r0, [pc, #104]	; (80013c4 <MX_GPIO_Init+0x1c4>)
 800135a:	f001 f8d9 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001366:	2301      	movs	r3, #1
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136a:	2302      	movs	r3, #2
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	4814      	ldr	r0, [pc, #80]	; (80013c8 <MX_GPIO_Init+0x1c8>)
 8001376:	f001 f8cb 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 800137a:	2320      	movs	r3, #32
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	480e      	ldr	r0, [pc, #56]	; (80013cc <MX_GPIO_Init+0x1cc>)
 8001392:	f001 f8bd 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139e:	2301      	movs	r3, #1
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a2:	2302      	movs	r3, #2
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <MX_GPIO_Init+0x1cc>)
 80013ae:	f001 f8af 	bl	8002510 <HAL_GPIO_Init>

}
 80013b2:	bf00      	nop
 80013b4:	3730      	adds	r7, #48	; 0x30
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	46020c00 	.word	0x46020c00
 80013c0:	42021000 	.word	0x42021000
 80013c4:	42021800 	.word	0x42021800
 80013c8:	42020800 	.word	0x42020800
 80013cc:	42020400 	.word	0x42020400
 80013d0:	10210000 	.word	0x10210000

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	e7fe      	b.n	80013dc <Error_Handler+0x8>

080013de <ST7789V_SEND_COMMAND>:
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	80fb      	strh	r3, [r7, #6]
    ST7789_REG = cmd;
 80013e8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	8013      	strh	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <ST7789V_SEND_DATA>:
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
    ST7789_RAM = data;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <ST7789V_SEND_DATA+0x1c>)
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	8013      	strh	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	60080000 	.word	0x60080000

0800141c <ST7789V_writeRegister32>:
	ST7789V_SEND_COMMAND(r);
	//ST7789V_SEND_DATA(d >> 8);
	ST7789V_SEND_DATA(d);
}

static void ST7789V_writeRegister32(uint8_t r, uint32_t d) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
	ST7789V_SEND_COMMAND(r);
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	b29b      	uxth	r3, r3
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ffd6 	bl	80013de <ST7789V_SEND_COMMAND>
	//ST7789V_SEND_DATA(d >> 24);
	ST7789V_SEND_DATA(d >> 16);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	0c1b      	lsrs	r3, r3, #16
 8001436:	b29b      	uxth	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ffdf 	bl	80013fc <ST7789V_SEND_DATA>
	//ST7789V_SEND_DATA((d >> 8));
	ST7789V_SEND_DATA(d);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ffda 	bl	80013fc <ST7789V_SEND_DATA>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <ST7789V_setCursorPosition>:

void ST7789V_setCursorPosition(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	4604      	mov	r4, r0
 8001458:	4608      	mov	r0, r1
 800145a:	4611      	mov	r1, r2
 800145c:	461a      	mov	r2, r3
 800145e:	4623      	mov	r3, r4
 8001460:	80fb      	strh	r3, [r7, #6]
 8001462:	4603      	mov	r3, r0
 8001464:	80bb      	strh	r3, [r7, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	807b      	strh	r3, [r7, #2]
 800146a:	4613      	mov	r3, r2
 800146c:	803b      	strh	r3, [r7, #0]
  uint32_t t;
  t = (x0 << 16) | x1;
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	041a      	lsls	r2, r3, #16
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	4313      	orrs	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]
  ST7789V_writeRegister32(ST7789V_CASET, t);
 8001478:	68f9      	ldr	r1, [r7, #12]
 800147a:	202a      	movs	r0, #42	; 0x2a
 800147c:	f7ff ffce 	bl	800141c <ST7789V_writeRegister32>
  t = (y0 << 16) | y1;
 8001480:	88bb      	ldrh	r3, [r7, #4]
 8001482:	041a      	lsls	r2, r3, #16
 8001484:	883b      	ldrh	r3, [r7, #0]
 8001486:	4313      	orrs	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  ST7789V_writeRegister32(ST7789V_RASET, t);
 800148a:	68f9      	ldr	r1, [r7, #12]
 800148c:	202b      	movs	r0, #43	; 0x2b
 800148e:	f7ff ffc5 	bl	800141c <ST7789V_writeRegister32>
  ST7789V_SEND_COMMAND (ST7789V_RAMWR);
 8001492:	202c      	movs	r0, #44	; 0x2c
 8001494:	f7ff ffa3 	bl	80013de <ST7789V_SEND_COMMAND>
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bd90      	pop	{r4, r7, pc}

080014a0 <ST7789V_fill>:
	ST7789V_setCursorPosition(x, y, x, y);
	ST7789V_SEND_DATA(color>>8);
	ST7789V_SEND_DATA(color&0xFF);
}

void ST7789V_fill(uint16_t color) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ST7789V_PIXEL_COUNT;
 80014aa:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80014ae:	60fb      	str	r3, [r7, #12]
	
	if(rotationNum==1 || rotationNum==3)
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <ST7789V_fill+0x7c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d003      	beq.n	80014c0 <ST7789V_fill+0x20>
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <ST7789V_fill+0x7c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d107      	bne.n	80014d0 <ST7789V_fill+0x30>
	{
		ST7789V_setCursorPosition(0, 0,   ST7789V_WIDTH -1, ST7789V_HEIGHT -1);
 80014c0:	f240 133f 	movw	r3, #319	; 0x13f
 80014c4:	22ef      	movs	r2, #239	; 0xef
 80014c6:	2100      	movs	r1, #0
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff ffc1 	bl	8001450 <ST7789V_setCursorPosition>
 80014ce:	e00e      	b.n	80014ee <ST7789V_fill+0x4e>
	}
	else if(rotationNum==2 || rotationNum==4)
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <ST7789V_fill+0x7c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d003      	beq.n	80014e0 <ST7789V_fill+0x40>
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <ST7789V_fill+0x7c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d106      	bne.n	80014ee <ST7789V_fill+0x4e>
	{
		ST7789V_setCursorPosition(0, 0, ST7789V_HEIGHT -1, ST7789V_WIDTH -1);
 80014e0:	23ef      	movs	r3, #239	; 0xef
 80014e2:	f240 123f 	movw	r2, #319	; 0x13f
 80014e6:	2100      	movs	r1, #0
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff ffb1 	bl	8001450 <ST7789V_setCursorPosition>
	}
	
	while (n) {
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00f      	beq.n	8001514 <ST7789V_fill+0x74>
	   n--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
       ST7789V_SEND_DATA(color>>8);
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff7b 	bl	80013fc <ST7789V_SEND_DATA>
	   ST7789V_SEND_DATA(color&0xff);
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff75 	bl	80013fc <ST7789V_SEND_DATA>
	while (n) {
 8001512:	e7ec      	b.n	80014ee <ST7789V_fill+0x4e>
	}
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000000 	.word	0x20000000

08001520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_MspInit+0x34>)
 8001528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800152c:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_MspInit+0x34>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_MspInit+0x34>)
 8001538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001544:	2004      	movs	r0, #4
 8001546:	f000 ffa3 	bl	8002490 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	46020c00 	.word	0x46020c00

08001558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0bc      	sub	sp, #240	; 0xf0
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	22c8      	movs	r2, #200	; 0xc8
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f008 f843 	bl	8009604 <memset>
  if(hadc->Instance==ADC1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a24      	ldr	r2, [pc, #144]	; (8001614 <HAL_ADC_MspInit+0xbc>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d140      	bne.n	800160a <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001588:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001594:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fdc5 	bl	8005130 <HAL_RCCEx_PeriphCLKConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80015ac:	f7ff ff12 	bl	80013d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_ADC_MspInit+0xc0>)
 80015b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015b6:	4a18      	ldr	r2, [pc, #96]	; (8001618 <HAL_ADC_MspInit+0xc0>)
 80015b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_ADC_MspInit+0xc0>)
 80015c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_ADC_MspInit+0xc0>)
 80015d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015d4:	4a10      	ldr	r2, [pc, #64]	; (8001618 <HAL_ADC_MspInit+0xc0>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_ADC_MspInit+0xc0>)
 80015e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80015ec:	2304      	movs	r3, #4
 80015ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f2:	2303      	movs	r3, #3
 80015f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_ADC_MspInit+0xc4>)
 8001606:	f000 ff83 	bl	8002510 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800160a:	bf00      	nop
 800160c:	37f0      	adds	r7, #240	; 0xf0
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	42028000 	.word	0x42028000
 8001618:	46020c00 	.word	0x46020c00
 800161c:	42020800 	.word	0x42020800

08001620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b0bc      	sub	sp, #240	; 0xf0
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	22c8      	movs	r2, #200	; 0xc8
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f007 ffdf 	bl	8009604 <memset>
  if(huart->Instance==USART1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a26      	ldr	r2, [pc, #152]	; (80016e4 <HAL_UART_MspInit+0xc4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d145      	bne.n	80016dc <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001650:	f04f 0201 	mov.w	r2, #1
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800165c:	2300      	movs	r3, #0
 800165e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	4618      	mov	r0, r3
 8001666:	f003 fd63 	bl	8005130 <HAL_RCCEx_PeriphCLKConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001670:	f7ff feb0 	bl	80013d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001674:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <HAL_UART_MspInit+0xc8>)
 8001676:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800167a:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <HAL_UART_MspInit+0xc8>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_UART_MspInit+0xc8>)
 8001686:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800168a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_UART_MspInit+0xc8>)
 8001694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001698:	4a13      	ldr	r2, [pc, #76]	; (80016e8 <HAL_UART_MspInit+0xc8>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_UART_MspInit+0xc8>)
 80016a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80016b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016be:	2302      	movs	r3, #2
 80016c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ca:	2307      	movs	r3, #7
 80016cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016d4:	4619      	mov	r1, r3
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <HAL_UART_MspInit+0xcc>)
 80016d8:	f000 ff1a 	bl	8002510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	37f0      	adds	r7, #240	; 0xf0
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40013800 	.word	0x40013800
 80016e8:	46020c00 	.word	0x46020c00
 80016ec:	42020000 	.word	0x42020000

080016f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0be      	sub	sp, #248	; 0xf8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001708:	f107 0318 	add.w	r3, r7, #24
 800170c:	22c8      	movs	r2, #200	; 0xc8
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f007 ff77 	bl	8009604 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a3c      	ldr	r2, [pc, #240]	; (800180c <HAL_PCD_MspInit+0x11c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d171      	bne.n	8001804 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001720:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001732:	f107 0318 	add.w	r3, r7, #24
 8001736:	4618      	mov	r0, r3
 8001738:	f003 fcfa 	bl	8005130 <HAL_RCCEx_PeriphCLKConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001742:	f7ff fe47 	bl	80013d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	4b32      	ldr	r3, [pc, #200]	; (8001810 <HAL_PCD_MspInit+0x120>)
 8001748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800174c:	4a30      	ldr	r2, [pc, #192]	; (8001810 <HAL_PCD_MspInit+0x120>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001756:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <HAL_PCD_MspInit+0x120>)
 8001758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001764:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001768:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800177e:	230a      	movs	r3, #10
 8001780:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001788:	4619      	mov	r1, r3
 800178a:	4822      	ldr	r0, [pc, #136]	; (8001814 <HAL_PCD_MspInit+0x124>)
 800178c:	f000 fec0 	bl	8002510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <HAL_PCD_MspInit+0x120>)
 8001792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001796:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <HAL_PCD_MspInit+0x120>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_PCD_MspInit+0x120>)
 80017a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_PCD_MspInit+0x120>)
 80017b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d119      	bne.n	80017f0 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_PCD_MspInit+0x120>)
 80017be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c2:	4a13      	ldr	r2, [pc, #76]	; (8001810 <HAL_PCD_MspInit+0x120>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_PCD_MspInit+0x120>)
 80017ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80017da:	f002 f9dd 	bl	8003b98 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_PCD_MspInit+0x120>)
 80017e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e4:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_PCD_MspInit+0x120>)
 80017e6:	f023 0304 	bic.w	r3, r3, #4
 80017ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80017ee:	e001      	b.n	80017f4 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80017f0:	f002 f9d2 	bl	8003b98 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	2049      	movs	r0, #73	; 0x49
 80017fa:	f000 fe54 	bl	80024a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80017fe:	2049      	movs	r0, #73	; 0x49
 8001800:	f000 fe6b 	bl	80024da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001804:	bf00      	nop
 8001806:	37f8      	adds	r7, #248	; 0xf8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	42040000 	.word	0x42040000
 8001810:	46020c00 	.word	0x46020c00
 8001814:	42020000 	.word	0x42020000

08001818 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800182c:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <HAL_FMC_MspInit+0x8c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d132      	bne.n	800189a <HAL_FMC_MspInit+0x82>
    return;
  }
  FMC_Initialized = 1;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_FMC_MspInit+0x8c>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_FMC_MspInit+0x90>)
 800183c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <HAL_FMC_MspInit+0x90>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_FMC_MspInit+0x90>)
 800184c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001858:	f64f 7380 	movw	r3, #65408	; 0xff80
 800185c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800186a:	230c      	movs	r3, #12
 800186c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	4619      	mov	r1, r3
 8001872:	480e      	ldr	r0, [pc, #56]	; (80018ac <HAL_FMC_MspInit+0x94>)
 8001874:	f000 fe4c 	bl	8002510 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001878:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 800187c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800188a:	230c      	movs	r3, #12
 800188c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4807      	ldr	r0, [pc, #28]	; (80018b0 <HAL_FMC_MspInit+0x98>)
 8001894:	f000 fe3c 	bl	8002510 <HAL_GPIO_Init>
 8001898:	e000      	b.n	800189c <HAL_FMC_MspInit+0x84>
    return;
 800189a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200006ac 	.word	0x200006ac
 80018a8:	46020c00 	.word	0x46020c00
 80018ac:	42021000 	.word	0x42021000
 80018b0:	42020c00 	.word	0x42020c00

080018b4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80018bc:	f7ff ffac 	bl	8001818 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <NMI_Handler+0x4>

080018ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <MemManage_Handler+0x4>

080018da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001914:	f000 f8d2 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <OTG_FS_IRQHandler+0x10>)
 8001922:	f001 f909 	bl	8002b38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000148 	.word	0x20000148

08001930 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <SystemInit+0x68>)
 8001936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <SystemInit+0x68>)
 800193c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <SystemInit+0x6c>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <SystemInit+0x6c>)
 800194c:	2200      	movs	r2, #0
 800194e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <SystemInit+0x6c>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <SystemInit+0x6c>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <SystemInit+0x6c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0e      	ldr	r2, [pc, #56]	; (800199c <SystemInit+0x6c>)
 8001962:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001966:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800196a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <SystemInit+0x6c>)
 800196e:	2200      	movs	r2, #0
 8001970:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <SystemInit+0x6c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <SystemInit+0x6c>)
 8001978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <SystemInit+0x6c>)
 8001980:	2200      	movs	r2, #0
 8001982:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <SystemInit+0x68>)
 8001986:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800198a:	609a      	str	r2, [r3, #8]
  #endif
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00
 800199c:	46020c00 	.word	0x46020c00

080019a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80019a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019a6:	e003      	b.n	80019b0 <LoopCopyDataInit>

080019a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019ae:	3104      	adds	r1, #4

080019b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019b0:	480b      	ldr	r0, [pc, #44]	; (80019e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80019b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019b8:	d3f6      	bcc.n	80019a8 <CopyDataInit>
	ldr	r2, =_sbss
 80019ba:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80019bc:	e002      	b.n	80019c4 <LoopFillZerobss>

080019be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019c0:	f842 3b04 	str.w	r3, [r2], #4

080019c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <LoopForever+0x16>)
	cmp	r2, r3
 80019c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019c8:	d3f9      	bcc.n	80019be <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019ca:	f7ff ffb1 	bl	8001930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ce:	f007 fdf5 	bl	80095bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019d2:	f7fe fea5 	bl	8000720 <main>

080019d6 <LoopForever>:

LoopForever:
    b LoopForever
 80019d6:	e7fe      	b.n	80019d6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80019d8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80019dc:	0800973c 	.word	0x0800973c
	ldr	r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019e4:	2000000d 	.word	0x2000000d
	ldr	r2, =_sbss
 80019e8:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80019ec:	200006b4 	.word	0x200006b4

080019f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_Init+0x4c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_Init+0x4c>)
 80019fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 fd43 	bl	8002490 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001a0a:	f003 f9ad 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_Init+0x50>)
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	490b      	ldr	r1, [pc, #44]	; (8001a48 <HAL_Init+0x54>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a20:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <HAL_Init+0x58>)
 8001a22:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a24:	2000      	movs	r0, #0
 8001a26:	f000 f813 	bl	8001a50 <HAL_InitTick>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e002      	b.n	8001a3a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a34:	f7ff fd74 	bl	8001520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40022000 	.word	0x40022000
 8001a44:	46020c00 	.word	0x46020c00
 8001a48:	0800962c 	.word	0x0800962c
 8001a4c:	20000004 	.word	0x20000004

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_InitTick+0x60>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e021      	b.n	8001aa8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <HAL_InitTick+0x64>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_InitTick+0x60>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fd3b 	bl	80024f6 <HAL_SYSTICK_Config>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00e      	b.n	8001aa8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d80a      	bhi.n	8001aa6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a90:	2200      	movs	r2, #0
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f000 fd05 	bl	80024a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a9c:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <HAL_InitTick+0x68>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000000c 	.word	0x2000000c
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	20000008 	.word	0x20000008

08001abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_IncTick+0x20>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	2000000c 	.word	0x2000000c
 8001ae0:	200006b0 	.word	0x200006b0

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_GetTick+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200006b0 	.word	0x200006b0

08001afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff ffee 	bl	8001ae4 <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d005      	beq.n	8001b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_Delay+0x44>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b22:	bf00      	nop
 8001b24:	f7ff ffde 	bl	8001ae4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d8f7      	bhi.n	8001b24 <HAL_Delay+0x28>
  {
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000000c 	.word	0x2000000c

08001b44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	601a      	str	r2, [r3, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d002      	beq.n	8001b9c <LL_ADC_SetGainCompensation+0x32>
 8001b96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b9a:	e000      	b.n	8001b9e <LL_ADC_SetGainCompensation+0x34>
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2107      	movs	r1, #7
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	401a      	ands	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bfe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6093      	str	r3, [r2, #8]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c26:	d101      	bne.n	8001c2c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c4e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	609a      	str	r2, [r3, #8]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c76:	d101      	bne.n	8001c7c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <LL_ADC_IsEnabled+0x18>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <LL_ADC_IsEnabled+0x1a>
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d101      	bne.n	8001cc8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d101      	bne.n	8001cee <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e2e3      	b.n	80022e4 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a92      	ldr	r2, [pc, #584]	; (8001f74 <HAL_ADC_Init+0x278>)
 8001d2a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff fc0f 	bl	8001558 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff60 	bl	8001c12 <LL_ADC_IsDeepPowerDownEnabled>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff46 	bl	8001bee <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff7b 	bl	8001c62 <LL_ADC_IsInternalRegulatorEnabled>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d115      	bne.n	8001d9e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff5f 	bl	8001c3a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d7c:	4b7e      	ldr	r3, [pc, #504]	; (8001f78 <HAL_ADC_Init+0x27c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	4a7e      	ldr	r2, [pc, #504]	; (8001f7c <HAL_ADC_Init+0x280>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d90:	e002      	b.n	8001d98 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f9      	bne.n	8001d92 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff5d 	bl	8001c62 <LL_ADC_IsInternalRegulatorEnabled>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10e      	bne.n	8001dcc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001db2:	f043 0210 	orr.w	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff6d 	bl	8001cb0 <LL_ADC_REG_IsConversionOngoing>
 8001dd6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f040 8274 	bne.w	80022ce <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f040 8270 	bne.w	80022ce <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001df2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001df6:	f043 0202 	orr.w	r2, r3, #2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff41 	bl	8001c8a <LL_ADC_IsEnabled>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d14e      	bne.n	8001eac <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <HAL_ADC_Init+0x278>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d028      	beq.n	8001e6a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a58      	ldr	r2, [pc, #352]	; (8001f80 <HAL_ADC_Init+0x284>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d109      	bne.n	8001e36 <HAL_ADC_Init+0x13a>
 8001e22:	4857      	ldr	r0, [pc, #348]	; (8001f80 <HAL_ADC_Init+0x284>)
 8001e24:	f7ff ff31 	bl	8001c8a <LL_ADC_IsEnabled>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	bf0c      	ite	eq
 8001e2e:	2301      	moveq	r3, #1
 8001e30:	2300      	movne	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	e008      	b.n	8001e48 <HAL_ADC_Init+0x14c>
 8001e36:	484f      	ldr	r0, [pc, #316]	; (8001f74 <HAL_ADC_Init+0x278>)
 8001e38:	f7ff ff27 	bl	8001c8a <LL_ADC_IsEnabled>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bf0c      	ite	eq
 8001e42:	2301      	moveq	r3, #1
 8001e44:	2300      	movne	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d02f      	beq.n	8001eac <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a4b      	ldr	r2, [pc, #300]	; (8001f80 <HAL_ADC_Init+0x284>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Init+0x15e>
 8001e56:	4a4b      	ldr	r2, [pc, #300]	; (8001f84 <HAL_ADC_Init+0x288>)
 8001e58:	e000      	b.n	8001e5c <HAL_ADC_Init+0x160>
 8001e5a:	4a4b      	ldr	r2, [pc, #300]	; (8001f88 <HAL_ADC_Init+0x28c>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f7ff fe6e 	bl	8001b44 <LL_ADC_SetCommonClock>
 8001e68:	e020      	b.n	8001eac <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f023 010c 	bic.w	r1, r3, #12
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d005      	beq.n	8001e8c <HAL_ADC_Init+0x190>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	e000      	b.n	8001e8e <HAL_ADC_Init+0x192>
 8001e8c:	230c      	movs	r3, #12
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	430b      	orrs	r3, r1
 8001e94:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001e96:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <HAL_ADC_Init+0x28c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ea6:	4938      	ldr	r1, [pc, #224]	; (8001f88 <HAL_ADC_Init+0x28c>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a30      	ldr	r2, [pc, #192]	; (8001f74 <HAL_ADC_Init+0x278>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d010      	beq.n	8001ed8 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ebc:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001ec2:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001ec8:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ed0:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	623b      	str	r3, [r7, #32]
 8001ed6:	e030      	b.n	8001f3a <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7f1b      	ldrb	r3, [r3, #28]
 8001edc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ee4:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ee6:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001eec:	2a00      	cmp	r2, #0
 8001eee:	d002      	beq.n	8001ef6 <HAL_ADC_Init+0x1fa>
 8001ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ef4:	e000      	b.n	8001ef8 <HAL_ADC_Init+0x1fc>
 8001ef6:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ef8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001efe:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	da04      	bge.n	8001f12 <HAL_ADC_Init+0x216>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f10:	e001      	b.n	8001f16 <HAL_ADC_Init+0x21a>
 8001f12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8001f16:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4918      	ldr	r1, [pc, #96]	; (8001f80 <HAL_ADC_Init+0x284>)
 8001f1e:	428b      	cmp	r3, r1
 8001f20:	d103      	bne.n	8001f2a <HAL_ADC_Init+0x22e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f28:	e003      	b.n	8001f32 <HAL_ADC_Init+0x236>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f30:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001f32:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f34:	6a3a      	ldr	r2, [r7, #32]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d12f      	bne.n	8001fa4 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <HAL_ADC_Init+0x278>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	3b01      	subs	r3, #1
 8001f54:	045b      	lsls	r3, r3, #17
 8001f56:	6a3a      	ldr	r2, [r7, #32]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	e022      	b.n	8001fa4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d111      	bne.n	8001f8c <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6e:	623b      	str	r3, [r7, #32]
 8001f70:	e018      	b.n	8001fa4 <HAL_ADC_Init+0x2a8>
 8001f72:	bf00      	nop
 8001f74:	46021000 	.word	0x46021000
 8001f78:	20000004 	.word	0x20000004
 8001f7c:	053e2d63 	.word	0x053e2d63
 8001f80:	42028000 	.word	0x42028000
 8001f84:	42028308 	.word	0x42028308
 8001f88:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f90:	f043 0220 	orr.w	r2, r3, #32
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f9c:	f043 0201 	orr.w	r2, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a93      	ldr	r2, [pc, #588]	; (80021f8 <HAL_ADC_Init+0x4fc>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d018      	beq.n	8001fe0 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	6a3a      	ldr	r2, [r7, #32]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	4b8a      	ldr	r3, [pc, #552]	; (80021fc <HAL_ADC_Init+0x500>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	6a39      	ldr	r1, [r7, #32]
 8001fda:	430b      	orrs	r3, r1
 8001fdc:	60d3      	str	r3, [r2, #12]
 8001fde:	e033      	b.n	8002048 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fec:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	6a3a      	ldr	r2, [r7, #32]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8002006:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	6a39      	ldr	r1, [r7, #32]
 8002010:	430b      	orrs	r3, r1
 8002012:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1a      	ldr	r2, [r3, #32]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a6a      	ldr	r2, [pc, #424]	; (80021f8 <HAL_ADC_Init+0x4fc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	f000 8093 	beq.w	800217a <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fe29 	bl	8001cb0 <LL_ADC_REG_IsConversionOngoing>
 800205e:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fe36 	bl	8001cd6 <LL_ADC_INJ_IsConversionOngoing>
 800206a:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d161      	bne.n	8002136 <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d15e      	bne.n	8002136 <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7f1b      	ldrb	r3, [r3, #28]
 800207c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	495f      	ldr	r1, [pc, #380]	; (8002200 <HAL_ADC_Init+0x504>)
 8002084:	428b      	cmp	r3, r1
 8002086:	d102      	bne.n	800208e <HAL_ADC_Init+0x392>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208c:	e002      	b.n	8002094 <HAL_ADC_Init+0x398>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002094:	4313      	orrs	r3, r2
 8002096:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020a2:	f023 0303 	bic.w	r3, r3, #3
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	6a39      	ldr	r1, [r7, #32]
 80020ac:	430b      	orrs	r3, r1
 80020ae:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f7ff fd51 	bl	8001b6a <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d11e      	bne.n	8002110 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d6:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	4b49      	ldr	r3, [pc, #292]	; (8002204 <HAL_ADC_Init+0x508>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80020e6:	0411      	lsls	r1, r2, #16
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020ec:	4311      	orrs	r1, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80020f2:	4311      	orrs	r1, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80020f8:	4311      	orrs	r1, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020fe:	0892      	lsrs	r2, r2, #2
 8002100:	430a      	orrs	r2, r1
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	611a      	str	r2, [r3, #16]
 800210e:	e007      	b.n	8002120 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d10c      	bne.n	8002158 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	f023 010f 	bic.w	r1, r3, #15
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
 8002156:	e007      	b.n	8002168 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 020f 	bic.w	r2, r2, #15
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800216c:	f023 0303 	bic.w	r3, r3, #3
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002178:	e0b2      	b.n	80022e0 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002182:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8002188:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 800218e:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	4313      	orrs	r3, r2
 8002194:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800219c:	2b01      	cmp	r3, #1
 800219e:	d103      	bne.n	80021a8 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <HAL_ADC_Init+0x50c>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	69f9      	ldr	r1, [r7, #28]
 80021b8:	430b      	orrs	r3, r1
 80021ba:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c4:	461a      	mov	r2, r3
 80021c6:	2100      	movs	r1, #0
 80021c8:	f7ff fcf2 	bl	8001bb0 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	461a      	mov	r2, r3
 80021d6:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 80021da:	f7ff fce9 	bl	8001bb0 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d112      	bne.n	800220c <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f062 020f 	orn	r2, r2, #15
 80021f4:	629a      	str	r2, [r3, #40]	; 0x28
 80021f6:	e044      	b.n	8002282 <HAL_ADC_Init+0x586>
 80021f8:	46021000 	.word	0x46021000
 80021fc:	fff0c013 	.word	0xfff0c013
 8002200:	42028000 	.word	0x42028000
 8002204:	fc00f81e 	.word	0xfc00f81e
 8002208:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002214:	d135      	bne.n	8002282 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	e00d      	b.n	8002238 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	fa22 f303 	lsr.w	r3, r2, r3
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	2b0f      	cmp	r3, #15
 8002230:	d006      	beq.n	8002240 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	3301      	adds	r3, #1
 8002236:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2b07      	cmp	r3, #7
 800223c:	d9ee      	bls.n	800221c <HAL_ADC_Init+0x520>
 800223e:	e000      	b.n	8002242 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8002240:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d108      	bne.n	800225a <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f062 020f 	orn	r2, r2, #15
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
 8002258:	e013      	b.n	8002282 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	3b01      	subs	r3, #1
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f003 031c 	and.w	r3, r3, #28
 800226c:	f06f 020f 	mvn.w	r2, #15
 8002270:	fa02 f103 	lsl.w	r1, r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	4b18      	ldr	r3, [pc, #96]	; (80022ec <HAL_ADC_Init+0x5f0>)
 800228a:	4013      	ands	r3, r2
 800228c:	6a3a      	ldr	r2, [r7, #32]
 800228e:	429a      	cmp	r2, r3
 8002290:	d10b      	bne.n	80022aa <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800229c:	f023 0303 	bic.w	r3, r3, #3
 80022a0:	f043 0201 	orr.w	r2, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022a8:	e01a      	b.n	80022e0 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ae:	f023 0312 	bic.w	r3, r3, #18
 80022b2:	f043 0210 	orr.w	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022cc:	e008      	b.n	80022e0 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022d2:	f043 0210 	orr.w	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 80022e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	833ffff3 	.word	0x833ffff3

080022f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <__NVIC_SetPriorityGrouping+0x44>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800230c:	4013      	ands	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800231c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002322:	4a04      	ldr	r2, [pc, #16]	; (8002334 <__NVIC_SetPriorityGrouping+0x44>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	60d3      	str	r3, [r2, #12]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <__NVIC_GetPriorityGrouping+0x18>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	f003 0307 	and.w	r3, r3, #7
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	2b00      	cmp	r3, #0
 8002364:	db0b      	blt.n	800237e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	4907      	ldr	r1, [pc, #28]	; (800238c <__NVIC_EnableIRQ+0x38>)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	2001      	movs	r0, #1
 8002376:	fa00 f202 	lsl.w	r2, r0, r2
 800237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000e100 	.word	0xe000e100

08002390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	db0a      	blt.n	80023ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	490c      	ldr	r1, [pc, #48]	; (80023dc <__NVIC_SetPriority+0x4c>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	0112      	lsls	r2, r2, #4
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	440b      	add	r3, r1
 80023b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b8:	e00a      	b.n	80023d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4908      	ldr	r1, [pc, #32]	; (80023e0 <__NVIC_SetPriority+0x50>)
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	3b04      	subs	r3, #4
 80023c8:	0112      	lsls	r2, r2, #4
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	440b      	add	r3, r1
 80023ce:	761a      	strb	r2, [r3, #24]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000e100 	.word	0xe000e100
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f1c3 0307 	rsb	r3, r3, #7
 80023fe:	2b04      	cmp	r3, #4
 8002400:	bf28      	it	cs
 8002402:	2304      	movcs	r3, #4
 8002404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3304      	adds	r3, #4
 800240a:	2b06      	cmp	r3, #6
 800240c:	d902      	bls.n	8002414 <NVIC_EncodePriority+0x30>
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3b03      	subs	r3, #3
 8002412:	e000      	b.n	8002416 <NVIC_EncodePriority+0x32>
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	f04f 32ff 	mov.w	r2, #4294967295
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	401a      	ands	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800242c:	f04f 31ff 	mov.w	r1, #4294967295
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	43d9      	mvns	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	4313      	orrs	r3, r2
         );
}
 800243e:	4618      	mov	r0, r3
 8002440:	3724      	adds	r7, #36	; 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800245c:	d301      	bcc.n	8002462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245e:	2301      	movs	r3, #1
 8002460:	e00f      	b.n	8002482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <SysTick_Config+0x40>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246a:	210f      	movs	r1, #15
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f7ff ff8e 	bl	8002390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <SysTick_Config+0x40>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <SysTick_Config+0x40>)
 800247c:	2207      	movs	r2, #7
 800247e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	e000e010 	.word	0xe000e010

08002490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ff29 	bl	80022f0 <__NVIC_SetPriorityGrouping>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024b4:	f7ff ff40 	bl	8002338 <__NVIC_GetPriorityGrouping>
 80024b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f7ff ff90 	bl	80023e4 <NVIC_EncodePriority>
 80024c4:	4602      	mov	r2, r0
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff5f 	bl	8002390 <__NVIC_SetPriority>
}
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff33 	bl	8002354 <__NVIC_EnableIRQ>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ffa4 	bl	800244c <SysTick_Config>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002522:	e1ba      	b.n	800289a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	4013      	ands	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 81aa 	beq.w	8002894 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a55      	ldr	r2, [pc, #340]	; (8002698 <HAL_GPIO_Init+0x188>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d15d      	bne.n	8002604 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800254e:	2201      	movs	r2, #1
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	4013      	ands	r3, r2
 800255c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0201 	and.w	r2, r3, #1
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	4313      	orrs	r3, r2
 8002570:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002578:	4a48      	ldr	r2, [pc, #288]	; (800269c <HAL_GPIO_Init+0x18c>)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002580:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002582:	4a46      	ldr	r2, [pc, #280]	; (800269c <HAL_GPIO_Init+0x18c>)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	3208      	adds	r2, #8
 8002596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	220b      	movs	r2, #11
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	08da      	lsrs	r2, r3, #3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	3208      	adds	r2, #8
 80025ce:	69f9      	ldr	r1, [r7, #28]
 80025d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2202      	movs	r2, #2
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	69fa      	ldr	r2, [r7, #28]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e067      	b.n	80026d4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x104>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b12      	cmp	r3, #18
 8002612:	d145      	bne.n	80026a0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	08da      	lsrs	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3208      	adds	r2, #8
 800261c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002620:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	4013      	ands	r3, r2
 8002636:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f003 020f 	and.w	r2, r3, #15
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	4313      	orrs	r3, r2
 8002650:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	69f9      	ldr	r1, [r7, #28]
 800265c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	4013      	ands	r3, r2
 8002676:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0203 	and.w	r2, r3, #3
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	4313      	orrs	r3, r2
 800268c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e01e      	b.n	80026d4 <HAL_GPIO_Init+0x1c4>
 8002696:	bf00      	nop
 8002698:	46020000 	.word	0x46020000
 800269c:	08009684 	.word	0x08009684
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0203 	and.w	r2, r3, #3
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d00b      	beq.n	80026f4 <HAL_GPIO_Init+0x1e4>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d007      	beq.n	80026f4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e8:	2b11      	cmp	r3, #17
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b12      	cmp	r3, #18
 80026f2:	d130      	bne.n	8002756 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	4013      	ands	r3, r2
 800270a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	4313      	orrs	r3, r2
 800271c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800272a:	2201      	movs	r2, #1
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	4013      	ands	r3, r2
 8002738:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	f003 0201 	and.w	r2, r3, #1
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	4313      	orrs	r3, r2
 800274e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b03      	cmp	r3, #3
 800275c:	d017      	beq.n	800278e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	2203      	movs	r2, #3
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	4013      	ands	r3, r2
 8002774:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	4313      	orrs	r3, r2
 8002786:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d07c      	beq.n	8002894 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800279a:	4a47      	ldr	r2, [pc, #284]	; (80028b8 <HAL_GPIO_Init+0x3a8>)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3318      	adds	r3, #24
 80027a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	220f      	movs	r2, #15
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	0a9a      	lsrs	r2, r3, #10
 80027c2:	4b3e      	ldr	r3, [pc, #248]	; (80028bc <HAL_GPIO_Init+0x3ac>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	f002 0203 	and.w	r2, r2, #3
 80027cc:	00d2      	lsls	r2, r2, #3
 80027ce:	4093      	lsls	r3, r2
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80027d6:	4938      	ldr	r1, [pc, #224]	; (80028b8 <HAL_GPIO_Init+0x3a8>)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3318      	adds	r3, #24
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80027e4:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <HAL_GPIO_Init+0x3a8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002808:	4a2b      	ldr	r2, [pc, #172]	; (80028b8 <HAL_GPIO_Init+0x3a8>)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800280e:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <HAL_GPIO_Init+0x3a8>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43db      	mvns	r3, r3
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	4013      	ands	r3, r2
 800281c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002832:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <HAL_GPIO_Init+0x3a8>)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002838:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <HAL_GPIO_Init+0x3a8>)
 800283a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800283e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	43db      	mvns	r3, r3
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	4013      	ands	r3, r2
 8002848:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800285e:	4a16      	ldr	r2, [pc, #88]	; (80028b8 <HAL_GPIO_Init+0x3a8>)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002866:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <HAL_GPIO_Init+0x3a8>)
 8002868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800286c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	43db      	mvns	r3, r3
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	4013      	ands	r3, r2
 8002876:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800288c:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <HAL_GPIO_Init+0x3a8>)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3301      	adds	r3, #1
 8002898:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f47f ae3d 	bne.w	8002524 <HAL_GPIO_Init+0x14>
  }
}
 80028aa:	bf00      	nop
 80028ac:	bf00      	nop
 80028ae:	3724      	adds	r7, #36	; 0x24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	46022000 	.word	0x46022000
 80028bc:	002f7f7f 	.word	0x002f7f7f

080028c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	4613      	mov	r3, r2
 80028ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d0:	787b      	ldrb	r3, [r7, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80028dc:	e002      	b.n	80028e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f2:	b08f      	sub	sp, #60	; 0x3c
 80028f4:	af0a      	add	r7, sp, #40	; 0x28
 80028f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e116      	b.n	8002b30 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d106      	bne.n	8002922 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7fe fee7 	bl	80016f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2203      	movs	r2, #3
 8002926:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f006 f935 	bl	8008bb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	687e      	ldr	r6, [r7, #4]
 800294e:	466d      	mov	r5, sp
 8002950:	f106 0410 	add.w	r4, r6, #16
 8002954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800295a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800295c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002960:	e885 0003 	stmia.w	r5, {r0, r1}
 8002964:	1d33      	adds	r3, r6, #4
 8002966:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002968:	6838      	ldr	r0, [r7, #0]
 800296a:	f006 f852 	bl	8008a12 <USB_CoreInit>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0d7      	b.n	8002b30 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f006 f923 	bl	8008bd2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e04a      	b.n	8002a28 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	333d      	adds	r3, #61	; 0x3d
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	333c      	adds	r3, #60	; 0x3c
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	b298      	uxth	r0, r3
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3344      	adds	r3, #68	; 0x44
 80029ce:	4602      	mov	r2, r0
 80029d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	3340      	adds	r3, #64	; 0x40
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3348      	adds	r3, #72	; 0x48
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029fa:	7bfa      	ldrb	r2, [r7, #15]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	334c      	adds	r3, #76	; 0x4c
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a0e:	7bfa      	ldrb	r2, [r7, #15]
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3354      	adds	r3, #84	; 0x54
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	3301      	adds	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d3af      	bcc.n	8002992 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]
 8002a36:	e044      	b.n	8002ac2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a7a:	7bfa      	ldrb	r2, [r7, #15]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002aa6:	7bfa      	ldrb	r2, [r7, #15]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d3b5      	bcc.n	8002a38 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	603b      	str	r3, [r7, #0]
 8002ad2:	687e      	ldr	r6, [r7, #4]
 8002ad4:	466d      	mov	r5, sp
 8002ad6:	f106 0410 	add.w	r4, r6, #16
 8002ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ae6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aea:	1d33      	adds	r3, r6, #4
 8002aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aee:	6838      	ldr	r0, [r7, #0]
 8002af0:	f006 f8bc 	bl	8008c6c <USB_DevInit>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e014      	b.n	8002b30 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d102      	bne.n	8002b24 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 ff38 	bl	8003994 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f006 fbcf 	bl	80092cc <USB_DevDisconnect>

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b38 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b08d      	sub	sp, #52	; 0x34
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f006 fc70 	bl	8009434 <USB_GetMode>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 84b7 	bne.w	80034ca <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f006 fbd4 	bl	800930e <USB_ReadInterrupts>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 84ad 	beq.w	80034c8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f006 fbc1 	bl	800930e <USB_ReadInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d107      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f002 0202 	and.w	r2, r2, #2
 8002ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f006 fbaf 	bl	800930e <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d161      	bne.n	8002c7e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699a      	ldr	r2, [r3, #24]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0210 	bic.w	r2, r2, #16
 8002bc8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f003 020f 	and.w	r2, r3, #15
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	3304      	adds	r3, #4
 8002be8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	0c5b      	lsrs	r3, r3, #17
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d124      	bne.n	8002c40 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d035      	beq.n	8002c6e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	6a38      	ldr	r0, [r7, #32]
 8002c16:	f006 fb01 	bl	800921c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c26:	441a      	add	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	6a1a      	ldr	r2, [r3, #32]
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c38:	441a      	add	r2, r3
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	621a      	str	r2, [r3, #32]
 8002c3e:	e016      	b.n	8002c6e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	0c5b      	lsrs	r3, r3, #17
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	2b06      	cmp	r3, #6
 8002c4a:	d110      	bne.n	8002c6e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c52:	2208      	movs	r2, #8
 8002c54:	4619      	mov	r1, r3
 8002c56:	6a38      	ldr	r0, [r7, #32]
 8002c58:	f006 fae0 	bl	800921c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	6a1a      	ldr	r2, [r3, #32]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c68:	441a      	add	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699a      	ldr	r2, [r3, #24]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0210 	orr.w	r2, r2, #16
 8002c7c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f006 fb43 	bl	800930e <USB_ReadInterrupts>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c92:	f040 80a7 	bne.w	8002de4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f006 fb48 	bl	8009334 <USB_ReadDevAllOutEpInterrupt>
 8002ca4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ca6:	e099      	b.n	8002ddc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 808e 	beq.w	8002dd0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f006 fb6c 	bl	800939c <USB_ReadDevOutEPInterrupt>
 8002cc4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00c      	beq.n	8002cea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2301      	movs	r3, #1
 8002ce0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ce2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fd27 	bl	8003738 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00c      	beq.n	8002d0e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d00:	461a      	mov	r2, r3
 8002d02:	2308      	movs	r3, #8
 8002d04:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fdfd 	bl	8003908 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d24:	461a      	mov	r2, r3
 8002d26:	2310      	movs	r3, #16
 8002d28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d030      	beq.n	8002d96 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3c:	2b80      	cmp	r3, #128	; 0x80
 8002d3e:	d109      	bne.n	8002d54 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d52:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	3304      	adds	r3, #4
 8002d68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	78db      	ldrb	r3, [r3, #3]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d108      	bne.n	8002d84 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2200      	movs	r2, #0
 8002d76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fbf0 	bl	8003564 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d90:	461a      	mov	r2, r3
 8002d92:	2302      	movs	r3, #2
 8002d94:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dac:	461a      	mov	r2, r3
 8002dae:	2320      	movs	r3, #32
 8002db0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	085b      	lsrs	r3, r3, #1
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f47f af62 	bne.w	8002ca8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f006 fa90 	bl	800930e <USB_ReadInterrupts>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002df8:	f040 80db 	bne.w	8002fb2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f006 fab1 	bl	8009368 <USB_ReadDevAllInEpInterrupt>
 8002e06:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e0c:	e0cd      	b.n	8002faa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80c2 	beq.w	8002f9e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f006 fad7 	bl	80093d8 <USB_ReadDevInEPInterrupt>
 8002e2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d057      	beq.n	8002ee6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69f9      	ldr	r1, [r7, #28]
 8002e52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e56:	4013      	ands	r3, r2
 8002e58:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e66:	461a      	mov	r2, r3
 8002e68:	2301      	movs	r3, #1
 8002e6a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d132      	bne.n	8002eda <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	334c      	adds	r3, #76	; 0x4c
 8002e84:	6819      	ldr	r1, [r3, #0]
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4403      	add	r3, r0
 8002e94:	3348      	adds	r3, #72	; 0x48
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4419      	add	r1, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4403      	add	r3, r0
 8002ea8:	334c      	adds	r3, #76	; 0x4c
 8002eaa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d113      	bne.n	8002eda <HAL_PCD_IRQHandler+0x3a2>
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3354      	adds	r3, #84	; 0x54
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d108      	bne.n	8002eda <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	f006 fadf 	bl	8009498 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	4619      	mov	r1, r3
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fb01 	bl	80034e8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002efc:	461a      	mov	r2, r3
 8002efe:	2308      	movs	r3, #8
 8002f00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2310      	movs	r3, #16
 8002f1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f34:	461a      	mov	r2, r3
 8002f36:	2340      	movs	r3, #64	; 0x40
 8002f38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d023      	beq.n	8002f8c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f46:	6a38      	ldr	r0, [r7, #32]
 8002f48:	f005 ffde 	bl	8008f08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	3338      	adds	r3, #56	; 0x38
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	78db      	ldrb	r3, [r3, #3]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d108      	bne.n	8002f7a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	4619      	mov	r1, r3
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fb01 	bl	800357c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f86:	461a      	mov	r2, r3
 8002f88:	2302      	movs	r3, #2
 8002f8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fb40 	bl	800361e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f47f af2e 	bne.w	8002e0e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f006 f9a9 	bl	800930e <USB_ReadInterrupts>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fc6:	d122      	bne.n	800300e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d108      	bne.n	8002ff8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fee:	2100      	movs	r1, #0
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fcf3 	bl	80039dc <HAL_PCDEx_LPM_Callback>
 8002ff6:	e002      	b.n	8002ffe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 faa9 	bl	8003550 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800300c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f006 f97b 	bl	800930e <USB_ReadInterrupts>
 8003018:	4603      	mov	r3, r0
 800301a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003022:	d112      	bne.n	800304a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d102      	bne.n	800303a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fa81 	bl	800353c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003048:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f006 f95d 	bl	800930e <USB_ReadInterrupts>
 8003054:	4603      	mov	r3, r0
 8003056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800305a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800305e:	d121      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800306e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d111      	bne.n	800309e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	f003 020f 	and.w	r2, r3, #15
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003094:	2101      	movs	r1, #1
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fca0 	bl	80039dc <HAL_PCDEx_LPM_Callback>
 800309c:	e002      	b.n	80030a4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fa4c 	bl	800353c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f006 f930 	bl	800930e <USB_ReadInterrupts>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b8:	f040 80b7 	bne.w	800322a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2110      	movs	r1, #16
 80030d6:	4618      	mov	r0, r3
 80030d8:	f005 ff16 	bl	8008f08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030dc:	2300      	movs	r3, #0
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e0:	e046      	b.n	8003170 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ee:	461a      	mov	r2, r3
 80030f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003106:	0151      	lsls	r1, r2, #5
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	440a      	add	r2, r1
 800310c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003110:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003114:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003122:	461a      	mov	r2, r3
 8003124:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003128:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800313a:	0151      	lsls	r1, r2, #5
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	440a      	add	r2, r1
 8003140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003144:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003148:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800315a:	0151      	lsls	r1, r2, #5
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	440a      	add	r2, r1
 8003160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003164:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003168:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	3301      	adds	r3, #1
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003176:	429a      	cmp	r2, r3
 8003178:	d3b3      	bcc.n	80030e2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003188:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800318c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031a6:	f043 030b 	orr.w	r3, r3, #11
 80031aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031bc:	f043 030b 	orr.w	r3, r3, #11
 80031c0:	6453      	str	r3, [r2, #68]	; 0x44
 80031c2:	e015      	b.n	80031f0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031d6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80031da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ea:	f043 030b 	orr.w	r3, r3, #11
 80031ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003202:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003214:	461a      	mov	r2, r3
 8003216:	f006 f93f 	bl	8009498 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003228:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f006 f86d 	bl	800930e <USB_ReadInterrupts>
 8003234:	4603      	mov	r3, r0
 8003236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800323a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323e:	d124      	bne.n	800328a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f006 f903 	bl	8009450 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f005 fed7 	bl	8009002 <USB_GetDevSpeed>
 8003254:	4603      	mov	r3, r0
 8003256:	461a      	mov	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681c      	ldr	r4, [r3, #0]
 8003260:	f001 fe8a 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8003264:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800326a:	b2db      	uxtb	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	4620      	mov	r0, r4
 8003270:	f005 fbfc 	bl	8008a6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f957 	bl	8003528 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695a      	ldr	r2, [r3, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003288:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f006 f83d 	bl	800930e <USB_ReadInterrupts>
 8003294:	4603      	mov	r3, r0
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b08      	cmp	r3, #8
 800329c:	d10a      	bne.n	80032b4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f938 	bl	8003514 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f002 0208 	and.w	r2, r2, #8
 80032b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f006 f828 	bl	800930e <USB_ReadInterrupts>
 80032be:	4603      	mov	r3, r0
 80032c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c4:	2b80      	cmp	r3, #128	; 0x80
 80032c6:	d122      	bne.n	800330e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032d4:	2301      	movs	r3, #1
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
 80032d8:	e014      	b.n	8003304 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d105      	bne.n	80032fe <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	4619      	mov	r1, r3
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f95f 	bl	80035bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	3301      	adds	r3, #1
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330a:	429a      	cmp	r2, r3
 800330c:	d3e5      	bcc.n	80032da <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f005 fffb 	bl	800930e <USB_ReadInterrupts>
 8003318:	4603      	mov	r3, r0
 800331a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800331e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003322:	d13b      	bne.n	800339c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003324:	2301      	movs	r3, #1
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	e02b      	b.n	8003382 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333e:	4613      	mov	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3340      	adds	r3, #64	; 0x40
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d115      	bne.n	800337c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003350:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003352:	2b00      	cmp	r3, #0
 8003354:	da12      	bge.n	800337c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	333f      	adds	r3, #63	; 0x3f
 8003366:	2201      	movs	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003372:	b2db      	uxtb	r3, r3
 8003374:	4619      	mov	r1, r3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f920 	bl	80035bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	3301      	adds	r3, #1
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	429a      	cmp	r2, r3
 800338a:	d3ce      	bcc.n	800332a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800339a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f005 ffb4 	bl	800930e <USB_ReadInterrupts>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033b0:	d155      	bne.n	800345e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033b2:	2301      	movs	r3, #1
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
 80033b6:	e045      	b.n	8003444 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d12e      	bne.n	800343e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	da2b      	bge.n	800343e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80033f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d121      	bne.n	800343e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fe:	4613      	mov	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800343a:	6053      	str	r3, [r2, #4]
            break;
 800343c:	e007      	b.n	800344e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	3301      	adds	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344a:	429a      	cmp	r2, r3
 800344c:	d3b4      	bcc.n	80033b8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800345c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f005 ff53 	bl	800930e <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003472:	d10a      	bne.n	800348a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f88d 	bl	8003594 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003488:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f005 ff3d 	bl	800930e <USB_ReadInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b04      	cmp	r3, #4
 800349c:	d115      	bne.n	80034ca <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f879 	bl	80035a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	e000      	b.n	80034ca <HAL_PCD_IRQHandler+0x992>
      return;
 80034c8:	bf00      	nop
    }
  }
}
 80034ca:	3734      	adds	r7, #52	; 0x34
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd90      	pop	{r4, r7, pc}

080034d0 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	da0c      	bge.n	80035ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	f003 020f 	and.w	r2, r3, #15
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	3338      	adds	r3, #56	; 0x38
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	3304      	adds	r3, #4
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	e00c      	b.n	8003604 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	f003 020f 	and.w	r2, r3, #15
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	4413      	add	r3, r2
 8003600:	3304      	adds	r3, #4
 8003602:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68f9      	ldr	r1, [r7, #12]
 800360a:	4618      	mov	r0, r3
 800360c:	f005 fd1e 	bl	800904c <USB_EPStopXfer>
 8003610:	4603      	mov	r3, r0
 8003612:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003614:	7afb      	ldrb	r3, [r7, #11]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b08a      	sub	sp, #40	; 0x28
 8003622:	af02      	add	r7, sp, #8
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	3338      	adds	r3, #56	; 0x38
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	3304      	adds	r3, #4
 8003644:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1a      	ldr	r2, [r3, #32]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	429a      	cmp	r2, r3
 8003650:	d901      	bls.n	8003656 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e06c      	b.n	8003730 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	429a      	cmp	r2, r3
 800366a:	d902      	bls.n	8003672 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3303      	adds	r3, #3
 8003676:	089b      	lsrs	r3, r3, #2
 8003678:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800367a:	e02b      	b.n	80036d4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	429a      	cmp	r2, r3
 8003690:	d902      	bls.n	8003698 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	3303      	adds	r3, #3
 800369c:	089b      	lsrs	r3, r3, #2
 800369e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6919      	ldr	r1, [r3, #16]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	4603      	mov	r3, r0
 80036b6:	6978      	ldr	r0, [r7, #20]
 80036b8:	f005 fd72 	bl	80091a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	441a      	add	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	441a      	add	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d809      	bhi.n	80036fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a1a      	ldr	r2, [r3, #32]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d203      	bcs.n	80036fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1be      	bne.n	800367c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	429a      	cmp	r2, r3
 8003708:	d811      	bhi.n	800372e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	2201      	movs	r2, #1
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	43db      	mvns	r3, r3
 8003724:	6939      	ldr	r1, [r7, #16]
 8003726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800372a:	4013      	ands	r3, r2
 800372c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3720      	adds	r7, #32
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	333c      	adds	r3, #60	; 0x3c
 8003750:	3304      	adds	r3, #4
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d17b      	bne.n	8003866 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d015      	beq.n	80037a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	4a61      	ldr	r2, [pc, #388]	; (8003900 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	f240 80b9 	bls.w	80038f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80b3 	beq.w	80038f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379a:	461a      	mov	r2, r3
 800379c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037a0:	6093      	str	r3, [r2, #8]
 80037a2:	e0a7      	b.n	80038f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ba:	461a      	mov	r2, r3
 80037bc:	2320      	movs	r3, #32
 80037be:	6093      	str	r3, [r2, #8]
 80037c0:	e098      	b.n	80038f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f040 8093 	bne.w	80038f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	4a4b      	ldr	r2, [pc, #300]	; (8003900 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d90f      	bls.n	80037f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ec:	461a      	mov	r2, r3
 80037ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f2:	6093      	str	r3, [r2, #8]
 80037f4:	e07e      	b.n	80038f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	3304      	adds	r3, #4
 800380a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	0159      	lsls	r1, r3, #5
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	440b      	add	r3, r1
 8003818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003822:	1ad2      	subs	r2, r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d114      	bne.n	8003858 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003840:	461a      	mov	r2, r3
 8003842:	2101      	movs	r1, #1
 8003844:	f005 fe28 	bl	8009498 <USB_EP0_OutStart>
 8003848:	e006      	b.n	8003858 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	441a      	add	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	4619      	mov	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff fe36 	bl	80034d0 <HAL_PCD_DataOutStageCallback>
 8003864:	e046      	b.n	80038f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	4a26      	ldr	r2, [pc, #152]	; (8003904 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d124      	bne.n	80038b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003884:	461a      	mov	r2, r3
 8003886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800388a:	6093      	str	r3, [r2, #8]
 800388c:	e032      	b.n	80038f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a4:	461a      	mov	r2, r3
 80038a6:	2320      	movs	r3, #32
 80038a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	4619      	mov	r1, r3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff fe0d 	bl	80034d0 <HAL_PCD_DataOutStageCallback>
 80038b6:	e01d      	b.n	80038f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d114      	bne.n	80038e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d108      	bne.n	80038e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038e0:	461a      	mov	r2, r3
 80038e2:	2100      	movs	r1, #0
 80038e4:	f005 fdd8 	bl	8009498 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	4619      	mov	r1, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff fdee 	bl	80034d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	4f54300a 	.word	0x4f54300a
 8003904:	4f54310a 	.word	0x4f54310a

08003908 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	333c      	adds	r3, #60	; 0x3c
 8003920:	3304      	adds	r3, #4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4a15      	ldr	r2, [pc, #84]	; (8003990 <PCD_EP_OutSetupPacket_int+0x88>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d90e      	bls.n	800395c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003954:	461a      	mov	r2, r3
 8003956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800395a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff fdcf 	bl	8003500 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <PCD_EP_OutSetupPacket_int+0x88>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d90c      	bls.n	8003984 <PCD_EP_OutSetupPacket_int+0x7c>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d108      	bne.n	8003984 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800397c:	461a      	mov	r2, r3
 800397e:	2101      	movs	r1, #1
 8003980:	f005 fd8a 	bl	8009498 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	4f54300a 	.word	0x4f54300a

08003994 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c6:	f043 0303 	orr.w	r3, r3, #3
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80039fc:	4b34      	ldr	r3, [pc, #208]	; (8003ad0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a04:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d101      	bne.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e057      	b.n	8003ac2 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a18:	d90a      	bls.n	8003a30 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003a1a:	4b2d      	ldr	r3, [pc, #180]	; (8003ad0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	4a2a      	ldr	r2, [pc, #168]	; (8003ad0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a2c:	60d3      	str	r3, [r2, #12]
 8003a2e:	e007      	b.n	8003a40 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003a30:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a38:	4925      	ldr	r1, [pc, #148]	; (8003ad0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003a40:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a24      	ldr	r2, [pc, #144]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	099b      	lsrs	r3, r3, #6
 8003a4c:	2232      	movs	r2, #50	; 0x32
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003a54:	fba2 2303 	umull	r2, r3, r2, r3
 8003a58:	099b      	lsrs	r3, r3, #6
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003a5e:	e002      	b.n	8003a66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003a66:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x84>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f3      	bne.n	8003a60 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01b      	beq.n	8003ab6 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	099b      	lsrs	r3, r3, #6
 8003a8a:	2232      	movs	r2, #50	; 0x32
 8003a8c:	fb02 f303 	mul.w	r3, r2, r3
 8003a90:	4a11      	ldr	r2, [pc, #68]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	099b      	lsrs	r3, r3, #6
 8003a98:	3301      	adds	r3, #1
 8003a9a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003a9c:	e002      	b.n	8003aa4 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d102      	bne.n	8003ab6 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f3      	bne.n	8003a9e <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e000      	b.n	8003ac2 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	46020800 	.word	0x46020800
 8003ad4:	20000004 	.word	0x20000004
 8003ad8:	10624dd3 	.word	0x10624dd3

08003adc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	46020800 	.word	0x46020800

08003af8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003b00:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <HAL_PWREx_ConfigSupply+0x94>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <HAL_PWREx_ConfigSupply+0x98>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	099b      	lsrs	r3, r3, #6
 8003b0c:	2232      	movs	r2, #50	; 0x32
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	4a1f      	ldr	r2, [pc, #124]	; (8003b90 <HAL_PWREx_ConfigSupply+0x98>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	099b      	lsrs	r3, r3, #6
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d113      	bne.n	8003b4c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003b24:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <HAL_PWREx_ConfigSupply+0x9c>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4a1a      	ldr	r2, [pc, #104]	; (8003b94 <HAL_PWREx_ConfigSupply+0x9c>)
 8003b2a:	f023 0302 	bic.w	r3, r3, #2
 8003b2e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003b30:	e002      	b.n	8003b38 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003b38:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <HAL_PWREx_ConfigSupply+0x9c>)
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d116      	bne.n	8003b72 <HAL_PWREx_ConfigSupply+0x7a>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f3      	bne.n	8003b32 <HAL_PWREx_ConfigSupply+0x3a>
 8003b4a:	e012      	b.n	8003b72 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003b4c:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_PWREx_ConfigSupply+0x9c>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <HAL_PWREx_ConfigSupply+0x9c>)
 8003b52:	f043 0302 	orr.w	r3, r3, #2
 8003b56:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003b58:	e002      	b.n	8003b60 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <HAL_PWREx_ConfigSupply+0x9c>)
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <HAL_PWREx_ConfigSupply+0x7a>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f3      	bne.n	8003b5a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e000      	b.n	8003b7e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	20000004 	.word	0x20000004
 8003b90:	10624dd3 	.word	0x10624dd3
 8003b94:	46020800 	.word	0x46020800

08003b98 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	6113      	str	r3, [r2, #16]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	46020800 	.word	0x46020800

08003bb8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003bc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bc6:	6113      	str	r3, [r2, #16]
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	46020800 	.word	0x46020800

08003bd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08e      	sub	sp, #56	; 0x38
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003be0:	2300      	movs	r3, #0
 8003be2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d102      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f000 bec3 	b.w	8004978 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf2:	4b9c      	ldr	r3, [pc, #624]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bfc:	4b99      	ldr	r3, [pc, #612]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8172 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <HAL_RCC_OscConfig+0x52>
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	2b0c      	cmp	r3, #12
 8003c1e:	f040 80e4 	bne.w	8003dea <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	f040 80e0 	bne.w	8003dea <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c2a:	4b8e      	ldr	r3, [pc, #568]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d006      	beq.n	8003c44 <HAL_RCC_OscConfig+0x6c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d102      	bne.n	8003c44 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f000 be9a 	b.w	8004978 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c48:	4b86      	ldr	r3, [pc, #536]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d004      	beq.n	8003c5e <HAL_RCC_OscConfig+0x86>
 8003c54:	4b83      	ldr	r3, [pc, #524]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c5c:	e005      	b.n	8003c6a <HAL_RCC_OscConfig+0x92>
 8003c5e:	4b81      	ldr	r3, [pc, #516]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c64:	041b      	lsls	r3, r3, #16
 8003c66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d255      	bcs.n	8003d1a <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f001 f9d3 	bl	8005024 <RCC_SetFlashLatencyFromMSIRange>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f000 be77 	b.w	8004978 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003c8a:	4b76      	ldr	r3, [pc, #472]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	4a75      	ldr	r2, [pc, #468]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003c90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c94:	6093      	str	r3, [r2, #8]
 8003c96:	4b73      	ldr	r3, [pc, #460]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	4970      	ldr	r1, [pc, #448]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003cb0:	d309      	bcc.n	8003cc6 <HAL_RCC_OscConfig+0xee>
 8003cb2:	4b6c      	ldr	r3, [pc, #432]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f023 021f 	bic.w	r2, r3, #31
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4969      	ldr	r1, [pc, #420]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60cb      	str	r3, [r1, #12]
 8003cc4:	e07e      	b.n	8003dc4 <HAL_RCC_OscConfig+0x1ec>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	da0a      	bge.n	8003ce4 <HAL_RCC_OscConfig+0x10c>
 8003cce:	4b65      	ldr	r3, [pc, #404]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	015b      	lsls	r3, r3, #5
 8003cdc:	4961      	ldr	r1, [pc, #388]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60cb      	str	r3, [r1, #12]
 8003ce2:	e06f      	b.n	8003dc4 <HAL_RCC_OscConfig+0x1ec>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cec:	d30a      	bcc.n	8003d04 <HAL_RCC_OscConfig+0x12c>
 8003cee:	4b5d      	ldr	r3, [pc, #372]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	029b      	lsls	r3, r3, #10
 8003cfc:	4959      	ldr	r1, [pc, #356]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60cb      	str	r3, [r1, #12]
 8003d02:	e05f      	b.n	8003dc4 <HAL_RCC_OscConfig+0x1ec>
 8003d04:	4b57      	ldr	r3, [pc, #348]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	03db      	lsls	r3, r3, #15
 8003d12:	4954      	ldr	r1, [pc, #336]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60cb      	str	r3, [r1, #12]
 8003d18:	e054      	b.n	8003dc4 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003d1a:	4b52      	ldr	r3, [pc, #328]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	4a51      	ldr	r2, [pc, #324]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003d20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d24:	6093      	str	r3, [r2, #8]
 8003d26:	4b4f      	ldr	r3, [pc, #316]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	494c      	ldr	r1, [pc, #304]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003d40:	d309      	bcc.n	8003d56 <HAL_RCC_OscConfig+0x17e>
 8003d42:	4b48      	ldr	r3, [pc, #288]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f023 021f 	bic.w	r2, r3, #31
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	4945      	ldr	r1, [pc, #276]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60cb      	str	r3, [r1, #12]
 8003d54:	e028      	b.n	8003da8 <HAL_RCC_OscConfig+0x1d0>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	da0a      	bge.n	8003d74 <HAL_RCC_OscConfig+0x19c>
 8003d5e:	4b41      	ldr	r3, [pc, #260]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	015b      	lsls	r3, r3, #5
 8003d6c:	493d      	ldr	r1, [pc, #244]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60cb      	str	r3, [r1, #12]
 8003d72:	e019      	b.n	8003da8 <HAL_RCC_OscConfig+0x1d0>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7c:	d30a      	bcc.n	8003d94 <HAL_RCC_OscConfig+0x1bc>
 8003d7e:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	029b      	lsls	r3, r3, #10
 8003d8c:	4935      	ldr	r1, [pc, #212]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60cb      	str	r3, [r1, #12]
 8003d92:	e009      	b.n	8003da8 <HAL_RCC_OscConfig+0x1d0>
 8003d94:	4b33      	ldr	r3, [pc, #204]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	03db      	lsls	r3, r3, #15
 8003da2:	4930      	ldr	r1, [pc, #192]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10a      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f936 	bl	8005024 <RCC_SetFlashLatencyFromMSIRange>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f000 bdda 	b.w	8004978 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003dc4:	f001 f8d8 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dc8:	4b27      	ldr	r3, [pc, #156]	; (8003e68 <HAL_RCC_OscConfig+0x290>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fd fe3f 	bl	8001a50 <HAL_InitTick>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 808a 	beq.w	8003ef6 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8003de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003de6:	f000 bdc7 	b.w	8004978 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d066      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003df2:	4b1c      	ldr	r3, [pc, #112]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1b      	ldr	r2, [pc, #108]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003dfe:	f7fd fe71 	bl	8001ae4 <HAL_GetTick>
 8003e02:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003e04:	e009      	b.n	8003e1a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e06:	f7fd fe6d 	bl	8001ae4 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d902      	bls.n	8003e1a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	f000 bdaf 	b.w	8004978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003e1a:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ef      	beq.n	8003e06 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003e26:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	4a0e      	ldr	r2, [pc, #56]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e30:	6093      	str	r3, [r2, #8]
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	4909      	ldr	r1, [pc, #36]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003e4c:	d30e      	bcc.n	8003e6c <HAL_RCC_OscConfig+0x294>
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f023 021f 	bic.w	r2, r3, #31
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	4902      	ldr	r1, [pc, #8]	; (8003e64 <HAL_RCC_OscConfig+0x28c>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60cb      	str	r3, [r1, #12]
 8003e60:	e04a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x320>
 8003e62:	bf00      	nop
 8003e64:	46020c00 	.word	0x46020c00
 8003e68:	20000008 	.word	0x20000008
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	da0a      	bge.n	8003e8a <HAL_RCC_OscConfig+0x2b2>
 8003e74:	4b9b      	ldr	r3, [pc, #620]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	015b      	lsls	r3, r3, #5
 8003e82:	4998      	ldr	r1, [pc, #608]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60cb      	str	r3, [r1, #12]
 8003e88:	e036      	b.n	8003ef8 <HAL_RCC_OscConfig+0x320>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e92:	d30a      	bcc.n	8003eaa <HAL_RCC_OscConfig+0x2d2>
 8003e94:	4b93      	ldr	r3, [pc, #588]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	029b      	lsls	r3, r3, #10
 8003ea2:	4990      	ldr	r1, [pc, #576]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60cb      	str	r3, [r1, #12]
 8003ea8:	e026      	b.n	8003ef8 <HAL_RCC_OscConfig+0x320>
 8003eaa:	4b8e      	ldr	r3, [pc, #568]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	03db      	lsls	r3, r3, #15
 8003eb8:	498a      	ldr	r1, [pc, #552]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60cb      	str	r3, [r1, #12]
 8003ebe:	e01b      	b.n	8003ef8 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003ec0:	4b88      	ldr	r3, [pc, #544]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a87      	ldr	r2, [pc, #540]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003ecc:	f7fd fe0a 	bl	8001ae4 <HAL_GetTick>
 8003ed0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003ed2:	e009      	b.n	8003ee8 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ed4:	f7fd fe06 	bl	8001ae4 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d902      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	f000 bd48 	b.w	8004978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003ee8:	4b7e      	ldr	r3, [pc, #504]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1ef      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x2fc>
 8003ef4:	e000      	b.n	8003ef8 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ef6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8094 	beq.w	800402e <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_OscConfig+0x340>
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	2b0c      	cmp	r3, #12
 8003f10:	d110      	bne.n	8003f34 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d10d      	bne.n	8003f34 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f18:	4b72      	ldr	r3, [pc, #456]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8083 	beq.w	800402c <HAL_RCC_OscConfig+0x454>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d17e      	bne.n	800402c <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f000 bd22 	b.w	8004978 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3c:	d106      	bne.n	8003f4c <HAL_RCC_OscConfig+0x374>
 8003f3e:	4b69      	ldr	r3, [pc, #420]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a68      	ldr	r2, [pc, #416]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	e041      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3f8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f54:	d112      	bne.n	8003f7c <HAL_RCC_OscConfig+0x3a4>
 8003f56:	4b63      	ldr	r3, [pc, #396]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a62      	ldr	r2, [pc, #392]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b60      	ldr	r3, [pc, #384]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a5f      	ldr	r2, [pc, #380]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003f68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	4b5d      	ldr	r3, [pc, #372]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a5c      	ldr	r2, [pc, #368]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e029      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3f8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003f84:	d112      	bne.n	8003fac <HAL_RCC_OscConfig+0x3d4>
 8003f86:	4b57      	ldr	r3, [pc, #348]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a56      	ldr	r2, [pc, #344]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b54      	ldr	r3, [pc, #336]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a53      	ldr	r2, [pc, #332]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4b51      	ldr	r3, [pc, #324]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a50      	ldr	r2, [pc, #320]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e011      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3f8>
 8003fac:	4b4d      	ldr	r3, [pc, #308]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a4c      	ldr	r2, [pc, #304]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b4a      	ldr	r3, [pc, #296]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a49      	ldr	r2, [pc, #292]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	4b47      	ldr	r3, [pc, #284]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a46      	ldr	r2, [pc, #280]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003fca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d014      	beq.n	8004002 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8003fd8:	f7fd fd84 	bl	8001ae4 <HAL_GetTick>
 8003fdc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fde:	e009      	b.n	8003ff4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe0:	f7fd fd80 	bl	8001ae4 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	; 0x64
 8003fec:	d902      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	f000 bcc2 	b.w	8004978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff4:	4b3b      	ldr	r3, [pc, #236]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0ef      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x408>
 8004000:	e015      	b.n	800402e <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004002:	f7fd fd6f 	bl	8001ae4 <HAL_GetTick>
 8004006:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004008:	e009      	b.n	800401e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800400a:	f7fd fd6b 	bl	8001ae4 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b64      	cmp	r3, #100	; 0x64
 8004016:	d902      	bls.n	800401e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	f000 bcad 	b.w	8004978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800401e:	4b31      	ldr	r3, [pc, #196]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1ef      	bne.n	800400a <HAL_RCC_OscConfig+0x432>
 800402a:	e000      	b.n	800402e <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800402c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d066      	beq.n	8004108 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	2b04      	cmp	r3, #4
 800403e:	d005      	beq.n	800404c <HAL_RCC_OscConfig+0x474>
 8004040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004042:	2b0c      	cmp	r3, #12
 8004044:	d11a      	bne.n	800407c <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	2b02      	cmp	r3, #2
 800404a:	d117      	bne.n	800407c <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800404c:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004054:	2b00      	cmp	r3, #0
 8004056:	d006      	beq.n	8004066 <HAL_RCC_OscConfig+0x48e>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	f000 bc89 	b.w	8004978 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004066:	4b1f      	ldr	r3, [pc, #124]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	041b      	lsls	r3, r3, #16
 8004074:	491b      	ldr	r1, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800407a:	e045      	b.n	8004108 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d024      	beq.n	80040ce <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004084:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 800408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004090:	f7fd fd28 	bl	8001ae4 <HAL_GetTick>
 8004094:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004096:	e009      	b.n	80040ac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004098:	f7fd fd24 	bl	8001ae4 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d902      	bls.n	80040ac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	f000 bc66 	b.w	8004978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ac:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0ef      	beq.n	8004098 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	041b      	lsls	r3, r3, #16
 80040c6:	4907      	ldr	r1, [pc, #28]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	610b      	str	r3, [r1, #16]
 80040cc:	e01c      	b.n	8004108 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80040ce:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a04      	ldr	r2, [pc, #16]	; (80040e4 <HAL_RCC_OscConfig+0x50c>)
 80040d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80040da:	f7fd fd03 	bl	8001ae4 <HAL_GetTick>
 80040de:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040e0:	e00c      	b.n	80040fc <HAL_RCC_OscConfig+0x524>
 80040e2:	bf00      	nop
 80040e4:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e8:	f7fd fcfc 	bl	8001ae4 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d902      	bls.n	80040fc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	f000 bc3e 	b.w	8004978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040fc:	4baf      	ldr	r3, [pc, #700]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1ef      	bne.n	80040e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80c7 	beq.w	80042a4 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411c:	4ba7      	ldr	r3, [pc, #668]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 800411e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d111      	bne.n	800414e <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412a:	4ba4      	ldr	r3, [pc, #656]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 800412c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004130:	4aa2      	ldr	r2, [pc, #648]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004132:	f043 0304 	orr.w	r3, r3, #4
 8004136:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800413a:	4ba0      	ldr	r3, [pc, #640]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 800413c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800414e:	4b9c      	ldr	r3, [pc, #624]	; (80043c0 <HAL_RCC_OscConfig+0x7e8>)
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d118      	bne.n	800418c <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800415a:	4b99      	ldr	r3, [pc, #612]	; (80043c0 <HAL_RCC_OscConfig+0x7e8>)
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	4a98      	ldr	r2, [pc, #608]	; (80043c0 <HAL_RCC_OscConfig+0x7e8>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004166:	f7fd fcbd 	bl	8001ae4 <HAL_GetTick>
 800416a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800416e:	f7fd fcb9 	bl	8001ae4 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e3fb      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004180:	4b8f      	ldr	r3, [pc, #572]	; (80043c0 <HAL_RCC_OscConfig+0x7e8>)
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d05f      	beq.n	8004254 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004194:	4b89      	ldr	r3, [pc, #548]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800419a:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d037      	beq.n	800421a <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d006      	beq.n	80041c2 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e3da      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01b      	beq.n	8004204 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 80041cc:	4b7b      	ldr	r3, [pc, #492]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 80041ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041d2:	4a7a      	ldr	r2, [pc, #488]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 80041d4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80041d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80041dc:	f7fd fc82 	bl	8001ae4 <HAL_GetTick>
 80041e0:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e4:	f7fd fc7e 	bl	8001ae4 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e3c0      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80041f6:	4b71      	ldr	r3, [pc, #452]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 80041f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1ef      	bne.n	80041e4 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004204:	4b6d      	ldr	r3, [pc, #436]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800420a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	496a      	ldr	r1, [pc, #424]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800421a:	4b68      	ldr	r3, [pc, #416]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 800421c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004220:	4a66      	ldr	r2, [pc, #408]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004222:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004226:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800422a:	f7fd fc5b 	bl	8001ae4 <HAL_GetTick>
 800422e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004232:	f7fd fc57 	bl	8001ae4 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e399      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004244:	4b5d      	ldr	r3, [pc, #372]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800424a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0ef      	beq.n	8004232 <HAL_RCC_OscConfig+0x65a>
 8004252:	e01b      	b.n	800428c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004254:	4b59      	ldr	r3, [pc, #356]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800425a:	4a58      	ldr	r2, [pc, #352]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 800425c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004260:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004264:	f7fd fc3e 	bl	8001ae4 <HAL_GetTick>
 8004268:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800426c:	f7fd fc3a 	bl	8001ae4 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e37c      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800427e:	4b4f      	ldr	r3, [pc, #316]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1ef      	bne.n	800426c <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800428c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004290:	2b01      	cmp	r3, #1
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004294:	4b49      	ldr	r3, [pc, #292]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800429a:	4a48      	ldr	r2, [pc, #288]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 800429c:	f023 0304 	bic.w	r3, r3, #4
 80042a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8112 	beq.w	80044d6 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b8:	4b40      	ldr	r3, [pc, #256]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 80042ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d111      	bne.n	80042ea <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c6:	4b3d      	ldr	r3, [pc, #244]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 80042c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042cc:	4a3b      	ldr	r2, [pc, #236]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 80042ce:	f043 0304 	orr.w	r3, r3, #4
 80042d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80042d6:	4b39      	ldr	r3, [pc, #228]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 80042d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80042e4:	2301      	movs	r3, #1
 80042e6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80042ea:	4b35      	ldr	r3, [pc, #212]	; (80043c0 <HAL_RCC_OscConfig+0x7e8>)
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d118      	bne.n	8004328 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80042f6:	4b32      	ldr	r3, [pc, #200]	; (80043c0 <HAL_RCC_OscConfig+0x7e8>)
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	4a31      	ldr	r2, [pc, #196]	; (80043c0 <HAL_RCC_OscConfig+0x7e8>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004302:	f7fd fbef 	bl	8001ae4 <HAL_GetTick>
 8004306:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430a:	f7fd fbeb 	bl	8001ae4 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e32d      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800431c:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <HAL_RCC_OscConfig+0x7e8>)
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01f      	beq.n	8004374 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d010      	beq.n	8004362 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004340:	4b1e      	ldr	r3, [pc, #120]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004346:	4a1d      	ldr	r2, [pc, #116]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004348:	f043 0304 	orr.w	r3, r3, #4
 800434c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004350:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004356:	4a19      	ldr	r2, [pc, #100]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004360:	e018      	b.n	8004394 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004362:	4b16      	ldr	r3, [pc, #88]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004368:	4a14      	ldr	r2, [pc, #80]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004372:	e00f      	b.n	8004394 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800437a:	4a10      	ldr	r2, [pc, #64]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004384:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 8004386:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800438a:	4a0c      	ldr	r2, [pc, #48]	; (80043bc <HAL_RCC_OscConfig+0x7e4>)
 800438c:	f023 0304 	bic.w	r3, r3, #4
 8004390:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d058      	beq.n	800444e <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800439c:	f7fd fba2 	bl	8001ae4 <HAL_GetTick>
 80043a0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a2:	e00f      	b.n	80043c4 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a4:	f7fd fb9e 	bl	8001ae4 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d906      	bls.n	80043c4 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e2de      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
 80043ba:	bf00      	nop
 80043bc:	46020c00 	.word	0x46020c00
 80043c0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c4:	4b9c      	ldr	r3, [pc, #624]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 80043c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0e8      	beq.n	80043a4 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01b      	beq.n	8004416 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80043de:	4b96      	ldr	r3, [pc, #600]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 80043e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043e4:	4a94      	ldr	r2, [pc, #592]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 80043e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f0:	f7fd fb78 	bl	8001ae4 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e2b8      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004406:	4b8c      	ldr	r3, [pc, #560]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 8004408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800440c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0ed      	beq.n	80043f0 <HAL_RCC_OscConfig+0x818>
 8004414:	e053      	b.n	80044be <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004416:	4b88      	ldr	r3, [pc, #544]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 8004418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800441c:	4a86      	ldr	r2, [pc, #536]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 800441e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004422:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004426:	e00a      	b.n	800443e <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004428:	f7fd fb5c 	bl	8001ae4 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	; 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e29c      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800443e:	4b7e      	ldr	r3, [pc, #504]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 8004440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ed      	bne.n	8004428 <HAL_RCC_OscConfig+0x850>
 800444c:	e037      	b.n	80044be <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800444e:	f7fd fb49 	bl	8001ae4 <HAL_GetTick>
 8004452:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004454:	e00a      	b.n	800446c <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fd fb45 	bl	8001ae4 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	; 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e285      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800446c:	4b72      	ldr	r3, [pc, #456]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 800446e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1ed      	bne.n	8004456 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800447a:	4b6f      	ldr	r3, [pc, #444]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 800447c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01a      	beq.n	80044be <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004488:	4b6b      	ldr	r3, [pc, #428]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 800448a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800448e:	4a6a      	ldr	r2, [pc, #424]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 8004490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004494:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004498:	e00a      	b.n	80044b0 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449a:	f7fd fb23 	bl	8001ae4 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e263      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044b0:	4b61      	ldr	r3, [pc, #388]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 80044b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1ed      	bne.n	800449a <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d107      	bne.n	80044d6 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c6:	4b5c      	ldr	r3, [pc, #368]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 80044c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044cc:	4a5a      	ldr	r2, [pc, #360]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 80044ce:	f023 0304 	bic.w	r3, r3, #4
 80044d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d036      	beq.n	8004550 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d019      	beq.n	800451e <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80044ea:	4b53      	ldr	r3, [pc, #332]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a52      	ldr	r2, [pc, #328]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 80044f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044f4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80044f6:	f7fd faf5 	bl	8001ae4 <HAL_GetTick>
 80044fa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044fe:	f7fd faf1 	bl	8001ae4 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e233      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004510:	4b49      	ldr	r3, [pc, #292]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCC_OscConfig+0x926>
 800451c:	e018      	b.n	8004550 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800451e:	4b46      	ldr	r3, [pc, #280]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a45      	ldr	r2, [pc, #276]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 8004524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004528:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800452a:	f7fd fadb 	bl	8001ae4 <HAL_GetTick>
 800452e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004532:	f7fd fad7 	bl	8001ae4 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e219      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004544:	4b3c      	ldr	r3, [pc, #240]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f0      	bne.n	8004532 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004558:	2b00      	cmp	r3, #0
 800455a:	d036      	beq.n	80045ca <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	2b00      	cmp	r3, #0
 8004562:	d019      	beq.n	8004598 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004564:	4b34      	ldr	r3, [pc, #208]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a33      	ldr	r2, [pc, #204]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 800456a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800456e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004570:	f7fd fab8 	bl	8001ae4 <HAL_GetTick>
 8004574:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004578:	f7fd fab4 	bl	8001ae4 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e1f6      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800458a:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0x9a0>
 8004596:	e018      	b.n	80045ca <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004598:	4b27      	ldr	r3, [pc, #156]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a26      	ldr	r2, [pc, #152]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 800459e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045a2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80045a4:	f7fd fa9e 	bl	8001ae4 <HAL_GetTick>
 80045a8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80045ac:	f7fd fa9a 	bl	8001ae4 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e1dc      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80045be:	4b1e      	ldr	r3, [pc, #120]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d07f      	beq.n	80046d6 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d062      	beq.n	80046a4 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80045de:	4b16      	ldr	r3, [pc, #88]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	4a15      	ldr	r2, [pc, #84]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 80045e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045e8:	6093      	str	r3, [r2, #8]
 80045ea:	4b13      	ldr	r3, [pc, #76]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	4910      	ldr	r1, [pc, #64]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004604:	d309      	bcc.n	800461a <HAL_RCC_OscConfig+0xa42>
 8004606:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f023 021f 	bic.w	r2, r3, #31
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	4909      	ldr	r1, [pc, #36]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 8004614:	4313      	orrs	r3, r2
 8004616:	60cb      	str	r3, [r1, #12]
 8004618:	e02a      	b.n	8004670 <HAL_RCC_OscConfig+0xa98>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	da0c      	bge.n	800463c <HAL_RCC_OscConfig+0xa64>
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	015b      	lsls	r3, r3, #5
 8004630:	4901      	ldr	r1, [pc, #4]	; (8004638 <HAL_RCC_OscConfig+0xa60>)
 8004632:	4313      	orrs	r3, r2
 8004634:	60cb      	str	r3, [r1, #12]
 8004636:	e01b      	b.n	8004670 <HAL_RCC_OscConfig+0xa98>
 8004638:	46020c00 	.word	0x46020c00
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004644:	d30a      	bcc.n	800465c <HAL_RCC_OscConfig+0xa84>
 8004646:	4ba5      	ldr	r3, [pc, #660]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	029b      	lsls	r3, r3, #10
 8004654:	49a1      	ldr	r1, [pc, #644]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004656:	4313      	orrs	r3, r2
 8004658:	60cb      	str	r3, [r1, #12]
 800465a:	e009      	b.n	8004670 <HAL_RCC_OscConfig+0xa98>
 800465c:	4b9f      	ldr	r3, [pc, #636]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	03db      	lsls	r3, r3, #15
 800466a:	499c      	ldr	r1, [pc, #624]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 800466c:	4313      	orrs	r3, r2
 800466e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004670:	4b9a      	ldr	r3, [pc, #616]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a99      	ldr	r2, [pc, #612]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004676:	f043 0310 	orr.w	r3, r3, #16
 800467a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800467c:	f7fd fa32 	bl	8001ae4 <HAL_GetTick>
 8004680:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004684:	f7fd fa2e 	bl	8001ae4 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e170      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004696:	4b91      	ldr	r3, [pc, #580]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0xaac>
 80046a2:	e018      	b.n	80046d6 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80046a4:	4b8d      	ldr	r3, [pc, #564]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a8c      	ldr	r2, [pc, #560]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 80046aa:	f023 0310 	bic.w	r3, r3, #16
 80046ae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80046b0:	f7fd fa18 	bl	8001ae4 <HAL_GetTick>
 80046b4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80046b8:	f7fd fa14 	bl	8001ae4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e156      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80046ca:	4b84      	ldr	r3, [pc, #528]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 814b 	beq.w	8004976 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e6:	4b7d      	ldr	r3, [pc, #500]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b0c      	cmp	r3, #12
 80046f0:	f000 80fa 	beq.w	80048e8 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	f040 80cc 	bne.w	8004896 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80046fe:	4b77      	ldr	r3, [pc, #476]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a76      	ldr	r2, [pc, #472]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004708:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800470a:	f7fd f9eb 	bl	8001ae4 <HAL_GetTick>
 800470e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004712:	f7fd f9e7 	bl	8001ae4 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e129      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004724:	4b6d      	ldr	r3, [pc, #436]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1f0      	bne.n	8004712 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004730:	4b6a      	ldr	r3, [pc, #424]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d111      	bne.n	8004762 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800473e:	4b67      	ldr	r3, [pc, #412]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004744:	4a65      	ldr	r2, [pc, #404]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004746:	f043 0304 	orr.w	r3, r3, #4
 800474a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800474e:	4b63      	ldr	r3, [pc, #396]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800475c:	2301      	movs	r3, #1
 800475e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004762:	4b5f      	ldr	r3, [pc, #380]	; (80048e0 <HAL_RCC_OscConfig+0xd08>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800476e:	d102      	bne.n	8004776 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8004770:	2301      	movs	r3, #1
 8004772:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004776:	4b5a      	ldr	r3, [pc, #360]	; (80048e0 <HAL_RCC_OscConfig+0xd08>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	4a59      	ldr	r2, [pc, #356]	; (80048e0 <HAL_RCC_OscConfig+0xd08>)
 800477c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004780:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004782:	4b56      	ldr	r3, [pc, #344]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800478a:	f023 0303 	bic.w	r3, r3, #3
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004796:	3a01      	subs	r2, #1
 8004798:	0212      	lsls	r2, r2, #8
 800479a:	4311      	orrs	r1, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047a0:	430a      	orrs	r2, r1
 80047a2:	494e      	ldr	r1, [pc, #312]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	628b      	str	r3, [r1, #40]	; 0x28
 80047a8:	4b4c      	ldr	r3, [pc, #304]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 80047aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ac:	4b4d      	ldr	r3, [pc, #308]	; (80048e4 <HAL_RCC_OscConfig+0xd0c>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047b4:	3a01      	subs	r2, #1
 80047b6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80047be:	3a01      	subs	r2, #1
 80047c0:	0252      	lsls	r2, r2, #9
 80047c2:	b292      	uxth	r2, r2
 80047c4:	4311      	orrs	r1, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047ca:	3a01      	subs	r2, #1
 80047cc:	0412      	lsls	r2, r2, #16
 80047ce:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80047d2:	4311      	orrs	r1, r2
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80047d8:	3a01      	subs	r2, #1
 80047da:	0612      	lsls	r2, r2, #24
 80047dc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80047e0:	430a      	orrs	r2, r1
 80047e2:	493e      	ldr	r1, [pc, #248]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80047e8:	4b3c      	ldr	r3, [pc, #240]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	4a3b      	ldr	r2, [pc, #236]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 80047ee:	f023 0310 	bic.w	r3, r3, #16
 80047f2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80047f4:	4b39      	ldr	r3, [pc, #228]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004804:	00d2      	lsls	r2, r2, #3
 8004806:	4935      	ldr	r1, [pc, #212]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004808:	4313      	orrs	r3, r2
 800480a:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 800480c:	4b33      	ldr	r3, [pc, #204]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	4a32      	ldr	r2, [pc, #200]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004812:	f043 0310 	orr.w	r3, r3, #16
 8004816:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004818:	4b30      	ldr	r3, [pc, #192]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	f023 020c 	bic.w	r2, r3, #12
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	492d      	ldr	r1, [pc, #180]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004826:	4313      	orrs	r3, r2
 8004828:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800482a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800482e:	2b01      	cmp	r3, #1
 8004830:	d105      	bne.n	800483e <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004832:	4b2b      	ldr	r3, [pc, #172]	; (80048e0 <HAL_RCC_OscConfig+0xd08>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	4a2a      	ldr	r2, [pc, #168]	; (80048e0 <HAL_RCC_OscConfig+0xd08>)
 8004838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800483c:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800483e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004842:	2b01      	cmp	r3, #1
 8004844:	d107      	bne.n	8004856 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004846:	4b25      	ldr	r3, [pc, #148]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484c:	4a23      	ldr	r2, [pc, #140]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 800484e:	f023 0304 	bic.w	r3, r3, #4
 8004852:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004856:	4b21      	ldr	r3, [pc, #132]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	4a20      	ldr	r2, [pc, #128]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 800485c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004860:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004862:	4b1e      	ldr	r3, [pc, #120]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1d      	ldr	r2, [pc, #116]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004868:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800486c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800486e:	f7fd f939 	bl	8001ae4 <HAL_GetTick>
 8004872:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004876:	f7fd f935 	bl	8001ae4 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e077      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004888:	4b14      	ldr	r3, [pc, #80]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0xc9e>
 8004894:	e06f      	b.n	8004976 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004896:	4b11      	ldr	r3, [pc, #68]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a10      	ldr	r2, [pc, #64]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 800489c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80048a2:	f7fd f91f 	bl	8001ae4 <HAL_GetTick>
 80048a6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048aa:	f7fd f91b 	bl	8001ae4 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e05d      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048bc:	4b07      	ldr	r3, [pc, #28]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f0      	bne.n	80048aa <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80048c8:	4b04      	ldr	r3, [pc, #16]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	4a03      	ldr	r2, [pc, #12]	; (80048dc <HAL_RCC_OscConfig+0xd04>)
 80048ce:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80048d2:	f023 0303 	bic.w	r3, r3, #3
 80048d6:	6293      	str	r3, [r2, #40]	; 0x28
 80048d8:	e04d      	b.n	8004976 <HAL_RCC_OscConfig+0xd9e>
 80048da:	bf00      	nop
 80048dc:	46020c00 	.word	0x46020c00
 80048e0:	46020800 	.word	0x46020800
 80048e4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <HAL_RCC_OscConfig+0xda8>)
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <HAL_RCC_OscConfig+0xda8>)
 80048f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d03a      	beq.n	8004972 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 0203 	and.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d133      	bne.n	8004972 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d12a      	bne.n	8004972 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	0b1b      	lsrs	r3, r3, #12
 8004920:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004928:	429a      	cmp	r2, r3
 800492a:	d122      	bne.n	8004972 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004936:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d11a      	bne.n	8004972 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	0a5b      	lsrs	r3, r3, #9
 8004940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004948:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d111      	bne.n	8004972 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	0c1b      	lsrs	r3, r3, #16
 8004952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d108      	bne.n	8004972 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	0e1b      	lsrs	r3, r3, #24
 8004964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d001      	beq.n	8004976 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3738      	adds	r7, #56	; 0x38
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	46020c00 	.word	0x46020c00

08004984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e1d9      	b.n	8004d4c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004998:	4b9b      	ldr	r3, [pc, #620]	; (8004c08 <HAL_RCC_ClockConfig+0x284>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d910      	bls.n	80049c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b98      	ldr	r3, [pc, #608]	; (8004c08 <HAL_RCC_ClockConfig+0x284>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 020f 	bic.w	r2, r3, #15
 80049ae:	4996      	ldr	r1, [pc, #600]	; (8004c08 <HAL_RCC_ClockConfig+0x284>)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b94      	ldr	r3, [pc, #592]	; (8004c08 <HAL_RCC_ClockConfig+0x284>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e1c1      	b.n	8004d4c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d010      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	4b8c      	ldr	r3, [pc, #560]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d908      	bls.n	80049f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80049e4:	4b89      	ldr	r3, [pc, #548]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	4986      	ldr	r1, [pc, #536]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d012      	beq.n	8004a28 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	4b81      	ldr	r3, [pc, #516]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	091b      	lsrs	r3, r3, #4
 8004a0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d909      	bls.n	8004a28 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004a14:	4b7d      	ldr	r3, [pc, #500]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	497a      	ldr	r1, [pc, #488]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d010      	beq.n	8004a56 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	4b74      	ldr	r3, [pc, #464]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d908      	bls.n	8004a56 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004a44:	4b71      	ldr	r3, [pc, #452]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	496e      	ldr	r1, [pc, #440]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d010      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	4b69      	ldr	r3, [pc, #420]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d908      	bls.n	8004a84 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004a72:	4b66      	ldr	r3, [pc, #408]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f023 020f 	bic.w	r2, r3, #15
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	4963      	ldr	r1, [pc, #396]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80d2 	beq.w	8004c36 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004a92:	2300      	movs	r3, #0
 8004a94:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d143      	bne.n	8004b26 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a9e:	4b5b      	ldr	r3, [pc, #364]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d110      	bne.n	8004ace <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004aac:	4b57      	ldr	r3, [pc, #348]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ab2:	4a56      	ldr	r2, [pc, #344]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004ab4:	f043 0304 	orr.w	r3, r3, #4
 8004ab8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004abc:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004aca:	2301      	movs	r3, #1
 8004acc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004ace:	f7fd f809 	bl	8001ae4 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004ad4:	4b4e      	ldr	r3, [pc, #312]	; (8004c10 <HAL_RCC_ClockConfig+0x28c>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00f      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004ae2:	f7fc ffff 	bl	8001ae4 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e12b      	b.n	8004d4c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004af4:	4b46      	ldr	r3, [pc, #280]	; (8004c10 <HAL_RCC_ClockConfig+0x28c>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f0      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004b06:	4b41      	ldr	r3, [pc, #260]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b0c:	4a3f      	ldr	r2, [pc, #252]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004b0e:	f023 0304 	bic.w	r3, r3, #4
 8004b12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004b16:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d121      	bne.n	8004b66 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e112      	b.n	8004d4c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d107      	bne.n	8004b3e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b2e:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d115      	bne.n	8004b66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e106      	b.n	8004d4c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d107      	bne.n	8004b56 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b46:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d109      	bne.n	8004b66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e0fa      	b.n	8004d4c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b56:	4b2d      	ldr	r3, [pc, #180]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e0f2      	b.n	8004d4c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f023 0203 	bic.w	r2, r3, #3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	4926      	ldr	r1, [pc, #152]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004b78:	f7fc ffb4 	bl	8001ae4 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d112      	bne.n	8004bac <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b86:	e00a      	b.n	8004b9e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b88:	f7fc ffac 	bl	8001ae4 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e0d6      	b.n	8004d4c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b9e:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
 8004ba6:	2b0c      	cmp	r3, #12
 8004ba8:	d1ee      	bne.n	8004b88 <HAL_RCC_ClockConfig+0x204>
 8004baa:	e044      	b.n	8004c36 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d112      	bne.n	8004bda <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bb4:	e00a      	b.n	8004bcc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb6:	f7fc ff95 	bl	8001ae4 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e0bf      	b.n	8004d4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f003 030c 	and.w	r3, r3, #12
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d1ee      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0x232>
 8004bd8:	e02d      	b.n	8004c36 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d123      	bne.n	8004c2a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be4:	f7fc ff7e 	bl	8001ae4 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e0a8      	b.n	8004d4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bfa:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <HAL_RCC_ClockConfig+0x288>)
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1ee      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x260>
 8004c06:	e016      	b.n	8004c36 <HAL_RCC_ClockConfig+0x2b2>
 8004c08:	40022000 	.word	0x40022000
 8004c0c:	46020c00 	.word	0x46020c00
 8004c10:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c14:	f7fc ff66 	bl	8001ae4 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e090      	b.n	8004d4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c2a:	4b4a      	ldr	r3, [pc, #296]	; (8004d54 <HAL_RCC_ClockConfig+0x3d0>)
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d1ee      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d010      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	4b43      	ldr	r3, [pc, #268]	; (8004d54 <HAL_RCC_ClockConfig+0x3d0>)
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d208      	bcs.n	8004c64 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004c52:	4b40      	ldr	r3, [pc, #256]	; (8004d54 <HAL_RCC_ClockConfig+0x3d0>)
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	f023 020f 	bic.w	r2, r3, #15
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	493d      	ldr	r1, [pc, #244]	; (8004d54 <HAL_RCC_ClockConfig+0x3d0>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c64:	4b3c      	ldr	r3, [pc, #240]	; (8004d58 <HAL_RCC_ClockConfig+0x3d4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d210      	bcs.n	8004c94 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b39      	ldr	r3, [pc, #228]	; (8004d58 <HAL_RCC_ClockConfig+0x3d4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 020f 	bic.w	r2, r3, #15
 8004c7a:	4937      	ldr	r1, [pc, #220]	; (8004d58 <HAL_RCC_ClockConfig+0x3d4>)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c82:	4b35      	ldr	r3, [pc, #212]	; (8004d58 <HAL_RCC_ClockConfig+0x3d4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e05b      	b.n	8004d4c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d010      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <HAL_RCC_ClockConfig+0x3d0>)
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d208      	bcs.n	8004cc2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004cb0:	4b28      	ldr	r3, [pc, #160]	; (8004d54 <HAL_RCC_ClockConfig+0x3d0>)
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4925      	ldr	r1, [pc, #148]	; (8004d54 <HAL_RCC_ClockConfig+0x3d0>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d012      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	4b20      	ldr	r3, [pc, #128]	; (8004d54 <HAL_RCC_ClockConfig+0x3d0>)
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	091b      	lsrs	r3, r3, #4
 8004cd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d209      	bcs.n	8004cf4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004ce0:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <HAL_RCC_ClockConfig+0x3d0>)
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	4919      	ldr	r1, [pc, #100]	; (8004d54 <HAL_RCC_ClockConfig+0x3d0>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d010      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <HAL_RCC_ClockConfig+0x3d0>)
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d208      	bcs.n	8004d22 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004d10:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <HAL_RCC_ClockConfig+0x3d0>)
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	490d      	ldr	r1, [pc, #52]	; (8004d54 <HAL_RCC_ClockConfig+0x3d0>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004d22:	f000 f821 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8004d26:	4602      	mov	r2, r0
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <HAL_RCC_ClockConfig+0x3d0>)
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	490a      	ldr	r1, [pc, #40]	; (8004d5c <HAL_RCC_ClockConfig+0x3d8>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
 8004d38:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <HAL_RCC_ClockConfig+0x3dc>)
 8004d3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <HAL_RCC_ClockConfig+0x3e0>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fc fe85 	bl	8001a50 <HAL_InitTick>
 8004d46:	4603      	mov	r3, r0
 8004d48:	73fb      	strb	r3, [r7, #15]

  return status;
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	46020c00 	.word	0x46020c00
 8004d58:	40022000 	.word	0x40022000
 8004d5c:	0800962c 	.word	0x0800962c
 8004d60:	20000004 	.word	0x20000004
 8004d64:	20000008 	.word	0x20000008

08004d68 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b08b      	sub	sp, #44	; 0x2c
 8004d6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d76:	4b7b      	ldr	r3, [pc, #492]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d80:	4b78      	ldr	r3, [pc, #480]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <HAL_RCC_GetSysClockFreq+0x34>
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b0c      	cmp	r3, #12
 8004d94:	d121      	bne.n	8004dda <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d11e      	bne.n	8004dda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004d9c:	4b71      	ldr	r3, [pc, #452]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d107      	bne.n	8004db8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004da8:	4b6e      	ldr	r3, [pc, #440]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004daa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dae:	0b1b      	lsrs	r3, r3, #12
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
 8004db6:	e005      	b.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004db8:	4b6a      	ldr	r3, [pc, #424]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	0f1b      	lsrs	r3, r3, #28
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004dc4:	4a68      	ldr	r2, [pc, #416]	; (8004f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d110      	bne.n	8004df6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004dd8:	e00d      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dda:	4b62      	ldr	r3, [pc, #392]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f003 030c 	and.w	r3, r3, #12
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d102      	bne.n	8004dec <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004de6:	4b61      	ldr	r3, [pc, #388]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8004de8:	623b      	str	r3, [r7, #32]
 8004dea:	e004      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d101      	bne.n	8004df6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004df2:	4b5e      	ldr	r3, [pc, #376]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8004df4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b0c      	cmp	r3, #12
 8004dfa:	f040 80ac 	bne.w	8004f56 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004dfe:	4b59      	ldr	r3, [pc, #356]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004e08:	4b56      	ldr	r3, [pc, #344]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	0a1b      	lsrs	r3, r3, #8
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	3301      	adds	r3, #1
 8004e14:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004e16:	4b53      	ldr	r3, [pc, #332]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e22:	4b50      	ldr	r3, [pc, #320]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	08db      	lsrs	r3, r3, #3
 8004e28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8086 	beq.w	8004f52 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d003      	beq.n	8004e54 <HAL_RCC_GetSysClockFreq+0xec>
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d022      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0x130>
 8004e52:	e043      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004f70 <HAL_RCC_GetSysClockFreq+0x208>
 8004e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e66:	4b3f      	ldr	r3, [pc, #252]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004e76:	ed97 6a01 	vldr	s12, [r7, #4]
 8004e7a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004f74 <HAL_RCC_GetSysClockFreq+0x20c>
 8004e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004e96:	e046      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	eddf 6a33 	vldr	s13, [pc, #204]	; 8004f70 <HAL_RCC_GetSysClockFreq+0x208>
 8004ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eaa:	4b2e      	ldr	r3, [pc, #184]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004eba:	ed97 6a01 	vldr	s12, [r7, #4]
 8004ebe:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004f74 <HAL_RCC_GetSysClockFreq+0x20c>
 8004ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004eda:	e024      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efc:	ee07 3a90 	vmov	s15, r3
 8004f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f04:	ed97 6a01 	vldr	s12, [r7, #4]
 8004f08:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8004f74 <HAL_RCC_GetSysClockFreq+0x20c>
 8004f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f20:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004f24:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004f26:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2a:	0e1b      	lsrs	r3, r3, #24
 8004f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f30:	3301      	adds	r3, #1
 8004f32:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f4a:	ee17 3a90 	vmov	r3, s15
 8004f4e:	623b      	str	r3, [r7, #32]
 8004f50:	e001      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8004f56:	6a3b      	ldr	r3, [r7, #32]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	372c      	adds	r7, #44	; 0x2c
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	46020c00 	.word	0x46020c00
 8004f68:	08009644 	.word	0x08009644
 8004f6c:	00f42400 	.word	0x00f42400
 8004f70:	4b742400 	.word	0x4b742400
 8004f74:	46000000 	.word	0x46000000

08004f78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004f7c:	f7ff fef4 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8004f80:	4602      	mov	r2, r0
 8004f82:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <HAL_RCC_GetHCLKFreq+0x28>)
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	4906      	ldr	r1, [pc, #24]	; (8004fa4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004f8c:	5ccb      	ldrb	r3, [r1, r3]
 8004f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f92:	4a05      	ldr	r2, [pc, #20]	; (8004fa8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004f94:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004f96:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004f98:	681b      	ldr	r3, [r3, #0]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	46020c00 	.word	0x46020c00
 8004fa4:	0800962c 	.word	0x0800962c
 8004fa8:	20000004 	.word	0x20000004

08004fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004fb0:	f7ff ffe2 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	091b      	lsrs	r3, r3, #4
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	4903      	ldr	r1, [pc, #12]	; (8004fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fc2:	5ccb      	ldrb	r3, [r1, r3]
 8004fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	46020c00 	.word	0x46020c00
 8004fd0:	0800963c 	.word	0x0800963c

08004fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004fd8:	f7ff ffce 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	0a1b      	lsrs	r3, r3, #8
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	4903      	ldr	r1, [pc, #12]	; (8004ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fea:	5ccb      	ldrb	r3, [r1, r3]
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	46020c00 	.word	0x46020c00
 8004ff8:	0800963c 	.word	0x0800963c

08004ffc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005000:	f7ff ffba 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <HAL_RCC_GetPCLK3Freq+0x20>)
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4903      	ldr	r1, [pc, #12]	; (8005020 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	46020c00 	.word	0x46020c00
 8005020:	0800963c 	.word	0x0800963c

08005024 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800502c:	4b3e      	ldr	r3, [pc, #248]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800502e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800503a:	f7fe fd4f 	bl	8003adc <HAL_PWREx_GetVoltageRange>
 800503e:	6178      	str	r0, [r7, #20]
 8005040:	e019      	b.n	8005076 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005042:	4b39      	ldr	r3, [pc, #228]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005048:	4a37      	ldr	r2, [pc, #220]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800504a:	f043 0304 	orr.w	r3, r3, #4
 800504e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005052:	4b35      	ldr	r3, [pc, #212]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005060:	f7fe fd3c 	bl	8003adc <HAL_PWREx_GetVoltageRange>
 8005064:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005066:	4b30      	ldr	r3, [pc, #192]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800506c:	4a2e      	ldr	r2, [pc, #184]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800506e:	f023 0304 	bic.w	r3, r3, #4
 8005072:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800507c:	d003      	beq.n	8005086 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005084:	d109      	bne.n	800509a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800508c:	d202      	bcs.n	8005094 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800508e:	2301      	movs	r3, #1
 8005090:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005092:	e033      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005094:	2300      	movs	r3, #0
 8005096:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005098:	e030      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050a0:	d208      	bcs.n	80050b4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a8:	d102      	bne.n	80050b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80050aa:	2303      	movs	r3, #3
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e025      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e035      	b.n	8005120 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ba:	d90f      	bls.n	80050dc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050c8:	d902      	bls.n	80050d0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80050ca:	2300      	movs	r3, #0
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	e015      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80050d0:	2301      	movs	r3, #1
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	e012      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	e00f      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050e2:	d109      	bne.n	80050f8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ea:	d102      	bne.n	80050f2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80050ec:	2301      	movs	r3, #1
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	e004      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80050f2:	2302      	movs	r3, #2
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	e001      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80050f8:	2301      	movs	r3, #1
 80050fa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050fc:	4b0b      	ldr	r3, [pc, #44]	; (800512c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f023 020f 	bic.w	r2, r3, #15
 8005104:	4909      	ldr	r1, [pc, #36]	; (800512c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800510c:	4b07      	ldr	r3, [pc, #28]	; (800512c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	429a      	cmp	r2, r3
 8005118:	d001      	beq.n	800511e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	46020c00 	.word	0x46020c00
 800512c:	40022000 	.word	0x40022000

08005130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005134:	b0ba      	sub	sp, #232	; 0xe8
 8005136:	af00      	add	r7, sp, #0
 8005138:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800513c:	2300      	movs	r3, #0
 800513e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005142:	2300      	movs	r3, #0
 8005144:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005148:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f002 0401 	and.w	r4, r2, #1
 8005154:	2500      	movs	r5, #0
 8005156:	ea54 0305 	orrs.w	r3, r4, r5
 800515a:	d00b      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800515c:	4bcb      	ldr	r3, [pc, #812]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800515e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005162:	f023 0103 	bic.w	r1, r3, #3
 8005166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800516a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516c:	4ac7      	ldr	r2, [pc, #796]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800516e:	430b      	orrs	r3, r1
 8005170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005174:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f002 0802 	and.w	r8, r2, #2
 8005180:	f04f 0900 	mov.w	r9, #0
 8005184:	ea58 0309 	orrs.w	r3, r8, r9
 8005188:	d00b      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800518a:	4bc0      	ldr	r3, [pc, #768]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800518c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005190:	f023 010c 	bic.w	r1, r3, #12
 8005194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519a:	4abc      	ldr	r2, [pc, #752]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800519c:	430b      	orrs	r3, r1
 800519e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	f002 0a04 	and.w	sl, r2, #4
 80051ae:	f04f 0b00 	mov.w	fp, #0
 80051b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80051b6:	d00b      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80051b8:	4bb4      	ldr	r3, [pc, #720]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051be:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80051c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	4ab0      	ldr	r2, [pc, #704]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ca:	430b      	orrs	r3, r1
 80051cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f002 0308 	and.w	r3, r2, #8
 80051dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051e0:	2300      	movs	r3, #0
 80051e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80051ea:	460b      	mov	r3, r1
 80051ec:	4313      	orrs	r3, r2
 80051ee:	d00b      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80051f0:	4ba6      	ldr	r3, [pc, #664]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005200:	4aa2      	ldr	r2, [pc, #648]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005202:	430b      	orrs	r3, r1
 8005204:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f002 0310 	and.w	r3, r2, #16
 8005214:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005218:	2300      	movs	r3, #0
 800521a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800521e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005222:	460b      	mov	r3, r1
 8005224:	4313      	orrs	r3, r2
 8005226:	d00b      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005228:	4b98      	ldr	r3, [pc, #608]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800522a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800522e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005238:	4a94      	ldr	r2, [pc, #592]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800523a:	430b      	orrs	r3, r1
 800523c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005240:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f002 0320 	and.w	r3, r2, #32
 800524c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005250:	2300      	movs	r3, #0
 8005252:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005256:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800525a:	460b      	mov	r3, r1
 800525c:	4313      	orrs	r3, r2
 800525e:	d00b      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005260:	4b8a      	ldr	r3, [pc, #552]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005266:	f023 0107 	bic.w	r1, r3, #7
 800526a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800526e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005270:	4a86      	ldr	r2, [pc, #536]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005272:	430b      	orrs	r3, r1
 8005274:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005288:	2300      	movs	r3, #0
 800528a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800528e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005292:	460b      	mov	r3, r1
 8005294:	4313      	orrs	r3, r2
 8005296:	d00b      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005298:	4b7c      	ldr	r3, [pc, #496]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800529a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800529e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80052a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052a8:	4a78      	ldr	r2, [pc, #480]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052aa:	430b      	orrs	r3, r1
 80052ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80052bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052c0:	2300      	movs	r3, #0
 80052c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052ca:	460b      	mov	r3, r1
 80052cc:	4313      	orrs	r3, r2
 80052ce:	d00b      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80052d0:	4b6e      	ldr	r3, [pc, #440]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052e0:	4a6a      	ldr	r2, [pc, #424]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052e2:	430b      	orrs	r3, r1
 80052e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80052f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052f8:	2300      	movs	r3, #0
 80052fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80052fe:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005302:	460b      	mov	r3, r1
 8005304:	4313      	orrs	r3, r2
 8005306:	d00b      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005308:	4b60      	ldr	r3, [pc, #384]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800530a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800530e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005318:	4a5c      	ldr	r2, [pc, #368]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800531a:	430b      	orrs	r3, r1
 800531c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005328:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800532c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005330:	2300      	movs	r3, #0
 8005332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005336:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800533a:	460b      	mov	r3, r1
 800533c:	4313      	orrs	r3, r2
 800533e:	d00b      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005340:	4b52      	ldr	r3, [pc, #328]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005346:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800534a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800534e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005350:	4a4e      	ldr	r2, [pc, #312]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005352:	430b      	orrs	r3, r1
 8005354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005364:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005368:	2300      	movs	r3, #0
 800536a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800536e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005372:	460b      	mov	r3, r1
 8005374:	4313      	orrs	r3, r2
 8005376:	d00b      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005378:	4b44      	ldr	r3, [pc, #272]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800537a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800537e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005386:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005388:	4a40      	ldr	r2, [pc, #256]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800538a:	430b      	orrs	r3, r1
 800538c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800539c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053a0:	2300      	movs	r3, #0
 80053a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80053a6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80053aa:	460b      	mov	r3, r1
 80053ac:	4313      	orrs	r3, r2
 80053ae:	d00b      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80053b0:	4b36      	ldr	r3, [pc, #216]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053b6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80053ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c0:	4a32      	ldr	r2, [pc, #200]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053c2:	430b      	orrs	r3, r1
 80053c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80053c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80053d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053d8:	2300      	movs	r3, #0
 80053da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80053e2:	460b      	mov	r3, r1
 80053e4:	4313      	orrs	r3, r2
 80053e6:	d00c      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80053e8:	4b28      	ldr	r3, [pc, #160]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053fa:	4a24      	ldr	r2, [pc, #144]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053fc:	430b      	orrs	r3, r1
 80053fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800540e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005410:	2300      	movs	r3, #0
 8005412:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005414:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005418:	460b      	mov	r3, r1
 800541a:	4313      	orrs	r3, r2
 800541c:	d04f      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800541e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	2b80      	cmp	r3, #128	; 0x80
 8005428:	d02d      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800542a:	2b80      	cmp	r3, #128	; 0x80
 800542c:	d827      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800542e:	2b60      	cmp	r3, #96	; 0x60
 8005430:	d02e      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005432:	2b60      	cmp	r3, #96	; 0x60
 8005434:	d823      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d006      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800543a:	2b40      	cmp	r3, #64	; 0x40
 800543c:	d81f      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005442:	2b20      	cmp	r3, #32
 8005444:	d011      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005446:	e01a      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005448:	4b10      	ldr	r3, [pc, #64]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544c:	4a0f      	ldr	r2, [pc, #60]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800544e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005452:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005454:	e01d      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800545a:	3308      	adds	r3, #8
 800545c:	4618      	mov	r0, r3
 800545e:	f002 f981 	bl	8007764 <RCCEx_PLL2_Config>
 8005462:	4603      	mov	r3, r0
 8005464:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005468:	e013      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800546a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800546e:	332c      	adds	r3, #44	; 0x2c
 8005470:	4618      	mov	r0, r3
 8005472:	f002 fa0f 	bl	8007894 <RCCEx_PLL3_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800547c:	e009      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005484:	e005      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8005486:	bf00      	nop
 8005488:	e003      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800548a:	bf00      	nop
 800548c:	46020c00 	.word	0x46020c00
        break;
 8005490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005492:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10d      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800549a:	4bb6      	ldr	r3, [pc, #728]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800549c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054a0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80054a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ac:	4ab1      	ldr	r2, [pc, #708]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80054ae:	430b      	orrs	r3, r1
 80054b0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80054b4:	e003      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80054ba:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80054be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80054ca:	673b      	str	r3, [r7, #112]	; 0x70
 80054cc:	2300      	movs	r3, #0
 80054ce:	677b      	str	r3, [r7, #116]	; 0x74
 80054d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80054d4:	460b      	mov	r3, r1
 80054d6:	4313      	orrs	r3, r2
 80054d8:	d053      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80054da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e6:	d033      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ec:	d82c      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80054ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054f2:	d02f      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80054f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054f8:	d826      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80054fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054fe:	d008      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005504:	d820      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800550a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800550e:	d011      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005510:	e01a      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005512:	4b98      	ldr	r3, [pc, #608]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	4a97      	ldr	r2, [pc, #604]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800551c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800551e:	e01a      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005520:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005524:	3308      	adds	r3, #8
 8005526:	4618      	mov	r0, r3
 8005528:	f002 f91c 	bl	8007764 <RCCEx_PLL2_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005532:	e010      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005538:	332c      	adds	r3, #44	; 0x2c
 800553a:	4618      	mov	r0, r3
 800553c:	f002 f9aa 	bl	8007894 <RCCEx_PLL3_Config>
 8005540:	4603      	mov	r3, r0
 8005542:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005546:	e006      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800554e:	e002      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005550:	bf00      	nop
 8005552:	e000      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005556:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10d      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800555e:	4b85      	ldr	r3, [pc, #532]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005560:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005564:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005568:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800556c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005570:	4a80      	ldr	r2, [pc, #512]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005572:	430b      	orrs	r3, r1
 8005574:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005578:	e003      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800557e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800558e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005590:	2300      	movs	r3, #0
 8005592:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005594:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005598:	460b      	mov	r3, r1
 800559a:	4313      	orrs	r3, r2
 800559c:	d046      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800559e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055a6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80055aa:	d028      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80055ac:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80055b0:	d821      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80055b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055b6:	d022      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80055b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055bc:	d81b      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80055be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055c2:	d01c      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80055c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055c8:	d815      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80055ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ce:	d008      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80055d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d4:	d80f      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d011      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055de:	d00e      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80055e0:	e009      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055e6:	3308      	adds	r3, #8
 80055e8:	4618      	mov	r0, r3
 80055ea:	f002 f8bb 	bl	8007764 <RCCEx_PLL2_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80055f4:	e004      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80055fc:	e000      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80055fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005600:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10d      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005608:	4b5a      	ldr	r3, [pc, #360]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800560a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800560e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005616:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800561a:	4a56      	ldr	r2, [pc, #344]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800561c:	430b      	orrs	r3, r1
 800561e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005622:	e003      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005624:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005628:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800562c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005638:	663b      	str	r3, [r7, #96]	; 0x60
 800563a:	2300      	movs	r3, #0
 800563c:	667b      	str	r3, [r7, #100]	; 0x64
 800563e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005642:	460b      	mov	r3, r1
 8005644:	4313      	orrs	r3, r2
 8005646:	d03f      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005650:	2b04      	cmp	r3, #4
 8005652:	d81e      	bhi.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005654:	a201      	add	r2, pc, #4	; (adr r2, 800565c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	0800569b 	.word	0x0800569b
 8005660:	08005671 	.word	0x08005671
 8005664:	0800567f 	.word	0x0800567f
 8005668:	0800569b 	.word	0x0800569b
 800566c:	0800569b 	.word	0x0800569b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005670:	4b40      	ldr	r3, [pc, #256]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	4a3f      	ldr	r2, [pc, #252]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800567a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800567c:	e00e      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800567e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005682:	332c      	adds	r3, #44	; 0x2c
 8005684:	4618      	mov	r0, r3
 8005686:	f002 f905 	bl	8007894 <RCCEx_PLL3_Config>
 800568a:	4603      	mov	r3, r0
 800568c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005690:	e004      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005698:	e000      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800569a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800569c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10d      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80056a4:	4b33      	ldr	r3, [pc, #204]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80056a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80056aa:	f023 0107 	bic.w	r1, r3, #7
 80056ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b6:	4a2f      	ldr	r2, [pc, #188]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80056b8:	430b      	orrs	r3, r1
 80056ba:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80056be:	e003      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80056c4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80056c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80056d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80056d6:	2300      	movs	r3, #0
 80056d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80056de:	460b      	mov	r3, r1
 80056e0:	4313      	orrs	r3, r2
 80056e2:	d04d      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80056e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056f0:	d028      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80056f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056f6:	d821      	bhi.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80056f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056fc:	d024      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80056fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005702:	d81b      	bhi.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005708:	d00e      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800570a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800570e:	d815      	bhi.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01b      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005718:	d110      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800571a:	4b16      	ldr	r3, [pc, #88]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	4a15      	ldr	r2, [pc, #84]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005724:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005726:	e012      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005728:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800572c:	332c      	adds	r3, #44	; 0x2c
 800572e:	4618      	mov	r0, r3
 8005730:	f002 f8b0 	bl	8007894 <RCCEx_PLL3_Config>
 8005734:	4603      	mov	r3, r0
 8005736:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800573a:	e008      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005742:	e004      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005744:	bf00      	nop
 8005746:	e002      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005748:	bf00      	nop
 800574a:	e000      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800574c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800574e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d110      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005756:	4b07      	ldr	r3, [pc, #28]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800575c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005760:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005768:	4a02      	ldr	r2, [pc, #8]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800576a:	430b      	orrs	r3, r1
 800576c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005770:	e006      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005772:	bf00      	nop
 8005774:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005778:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800577c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005780:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800578c:	653b      	str	r3, [r7, #80]	; 0x50
 800578e:	2300      	movs	r3, #0
 8005790:	657b      	str	r3, [r7, #84]	; 0x54
 8005792:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005796:	460b      	mov	r3, r1
 8005798:	4313      	orrs	r3, r2
 800579a:	f000 80b5 	beq.w	8005908 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800579e:	2300      	movs	r3, #0
 80057a0:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057a4:	4b9d      	ldr	r3, [pc, #628]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80057a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057aa:	f003 0304 	and.w	r3, r3, #4
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d113      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b2:	4b9a      	ldr	r3, [pc, #616]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80057b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057b8:	4a98      	ldr	r2, [pc, #608]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80057ba:	f043 0304 	orr.w	r3, r3, #4
 80057be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80057c2:	4b96      	ldr	r3, [pc, #600]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80057c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80057da:	4b91      	ldr	r3, [pc, #580]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	4a90      	ldr	r2, [pc, #576]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057e6:	f7fc f97d 	bl	8001ae4 <HAL_GetTick>
 80057ea:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80057ee:	e00b      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f0:	f7fc f978 	bl	8001ae4 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d903      	bls.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005806:	e005      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005808:	4b85      	ldr	r3, [pc, #532]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0ed      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005814:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d165      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800581c:	4b7f      	ldr	r3, [pc, #508]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800581e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800582a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582e:	2b00      	cmp	r3, #0
 8005830:	d023      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005836:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800583a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583e:	4293      	cmp	r3, r2
 8005840:	d01b      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005842:	4b76      	ldr	r3, [pc, #472]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005850:	4b72      	ldr	r3, [pc, #456]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005856:	4a71      	ldr	r2, [pc, #452]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005860:	4b6e      	ldr	r3, [pc, #440]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005866:	4a6d      	ldr	r2, [pc, #436]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800586c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005870:	4a6a      	ldr	r2, [pc, #424]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005876:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800587a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d019      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005886:	f7fc f92d 	bl	8001ae4 <HAL_GetTick>
 800588a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800588e:	e00d      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005890:	f7fc f928 	bl	8001ae4 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800589a:	1ad2      	subs	r2, r2, r3
 800589c:	f241 3388 	movw	r3, #5000	; 0x1388
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d903      	bls.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80058aa:	e006      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ac:	4b5b      	ldr	r3, [pc, #364]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0ea      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80058ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10d      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80058c2:	4b56      	ldr	r3, [pc, #344]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80058d4:	4a51      	ldr	r2, [pc, #324]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058d6:	430b      	orrs	r3, r1
 80058d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80058dc:	e008      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058de:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80058e2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80058e6:	e003      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80058ec:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058f0:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d107      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058f8:	4b48      	ldr	r3, [pc, #288]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058fe:	4a47      	ldr	r2, [pc, #284]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005900:	f023 0304 	bic.w	r3, r3, #4
 8005904:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005908:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005914:	64bb      	str	r3, [r7, #72]	; 0x48
 8005916:	2300      	movs	r3, #0
 8005918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800591a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800591e:	460b      	mov	r3, r1
 8005920:	4313      	orrs	r3, r2
 8005922:	d042      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005924:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005928:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800592c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005930:	d022      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005932:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005936:	d81b      	bhi.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800593c:	d011      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800593e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005942:	d815      	bhi.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d019      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800594c:	d110      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800594e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005952:	3308      	adds	r3, #8
 8005954:	4618      	mov	r0, r3
 8005956:	f001 ff05 	bl	8007764 <RCCEx_PLL2_Config>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005960:	e00d      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005962:	4b2e      	ldr	r3, [pc, #184]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005966:	4a2d      	ldr	r2, [pc, #180]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800596c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800596e:	e006      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005976:	e002      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005978:	bf00      	nop
 800597a:	e000      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800597c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800597e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10d      	bne.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005986:	4b25      	ldr	r3, [pc, #148]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800598c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005990:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005994:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005998:	4a20      	ldr	r2, [pc, #128]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800599a:	430b      	orrs	r3, r1
 800599c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059a0:	e003      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80059a6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80059b6:	643b      	str	r3, [r7, #64]	; 0x40
 80059b8:	2300      	movs	r3, #0
 80059ba:	647b      	str	r3, [r7, #68]	; 0x44
 80059bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80059c0:	460b      	mov	r3, r1
 80059c2:	4313      	orrs	r3, r2
 80059c4:	d032      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80059c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d2:	d00b      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80059d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d8:	d804      	bhi.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d008      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80059de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e2:	d007      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80059ea:	e004      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80059ec:	bf00      	nop
 80059ee:	e002      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80059f0:	bf00      	nop
 80059f2:	e000      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80059f4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80059f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d112      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80059fe:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a10:	4a02      	ldr	r2, [pc, #8]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a12:	430b      	orrs	r3, r1
 8005a14:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005a18:	e008      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005a1a:	bf00      	nop
 8005a1c:	46020c00 	.word	0x46020c00
 8005a20:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a24:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a28:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005a2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005a38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005a42:	460b      	mov	r3, r1
 8005a44:	4313      	orrs	r3, r2
 8005a46:	d00c      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005a48:	4b98      	ldr	r3, [pc, #608]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a4e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8005a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a5a:	4a94      	ldr	r2, [pc, #592]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a70:	2300      	movs	r3, #0
 8005a72:	637b      	str	r3, [r7, #52]	; 0x34
 8005a74:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	d019      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a8a:	d105      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a8c:	4b87      	ldr	r3, [pc, #540]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	4a86      	ldr	r2, [pc, #536]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a96:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005a98:	4b84      	ldr	r3, [pc, #528]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a9e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005aaa:	4a80      	ldr	r2, [pc, #512]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005aac:	430b      	orrs	r3, r1
 8005aae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aba:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4313      	orrs	r3, r2
 8005acc:	d00c      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005ace:	4b77      	ldr	r3, [pc, #476]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ad4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005adc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ae0:	4972      	ldr	r1, [pc, #456]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005ae8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005af4:	623b      	str	r3, [r7, #32]
 8005af6:	2300      	movs	r3, #0
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
 8005afa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005afe:	460b      	mov	r3, r1
 8005b00:	4313      	orrs	r3, r2
 8005b02:	d00c      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005b04:	4b69      	ldr	r3, [pc, #420]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b16:	4965      	ldr	r1, [pc, #404]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005b2a:	61bb      	str	r3, [r7, #24]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61fb      	str	r3, [r7, #28]
 8005b30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b34:	460b      	mov	r3, r1
 8005b36:	4313      	orrs	r3, r2
 8005b38:	d00c      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005b3a:	4b5c      	ldr	r3, [pc, #368]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b40:	f023 0218 	bic.w	r2, r3, #24
 8005b44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b4c:	4957      	ldr	r1, [pc, #348]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005b54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005b60:	613b      	str	r3, [r7, #16]
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	d032      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005b70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b7c:	d105      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b7e:	4b4b      	ldr	r3, [pc, #300]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	4a4a      	ldr	r2, [pc, #296]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b88:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b96:	d108      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 fde0 	bl	8007764 <RCCEx_PLL2_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8005baa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10d      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005bb2:	4b3e      	ldr	r3, [pc, #248]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005bb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bc4:	4939      	ldr	r1, [pc, #228]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005bcc:	e003      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bce:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005bd2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005be2:	60bb      	str	r3, [r7, #8]
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005bec:	460b      	mov	r3, r1
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	d03a      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bfe:	d00e      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005c00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c04:	d815      	bhi.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d017      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005c0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c0e:	d110      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c10:	4b26      	ldr	r3, [pc, #152]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c14:	4a25      	ldr	r2, [pc, #148]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c1a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005c1c:	e00e      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c22:	3308      	adds	r3, #8
 8005c24:	4618      	mov	r0, r3
 8005c26:	f001 fd9d 	bl	8007764 <RCCEx_PLL2_Config>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005c30:	e004      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005c38:	e000      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8005c3a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10d      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005c44:	4b19      	ldr	r3, [pc, #100]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c56:	4915      	ldr	r1, [pc, #84]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005c5e:	e003      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c60:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c64:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005c68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005c74:	603b      	str	r3, [r7, #0]
 8005c76:	2300      	movs	r3, #0
 8005c78:	607b      	str	r3, [r7, #4]
 8005c7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4313      	orrs	r3, r2
 8005c82:	d00c      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005c84:	4b09      	ldr	r3, [pc, #36]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c8a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c96:	4905      	ldr	r1, [pc, #20]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005c9e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	37e8      	adds	r7, #232	; 0xe8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cac:	46020c00 	.word	0x46020c00

08005cb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b089      	sub	sp, #36	; 0x24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005cb8:	4bac      	ldr	r3, [pc, #688]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005cc2:	4baa      	ldr	r3, [pc, #680]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005ccc:	4ba7      	ldr	r3, [pc, #668]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005cda:	4ba4      	ldr	r3, [pc, #656]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	f003 0310 	and.w	r3, r3, #16
 8005ce2:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ce4:	4ba1      	ldr	r3, [pc, #644]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	08db      	lsrs	r3, r3, #3
 8005cea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	fb02 f303 	mul.w	r3, r2, r3
 8005cf4:	ee07 3a90 	vmov	s15, r3
 8005cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfc:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8123 	beq.w	8005f4e <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d062      	beq.n	8005dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	f200 8081 	bhi.w	8005e18 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d024      	beq.n	8005d66 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d17a      	bne.n	8005e18 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	ee07 3a90 	vmov	s15, r3
 8005d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005f70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005d30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d34:	4b8d      	ldr	r3, [pc, #564]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3c:	ee07 3a90 	vmov	s15, r3
 8005d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d44:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d48:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005f74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d64:	e08f      	b.n	8005e86 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005d66:	4b81      	ldr	r3, [pc, #516]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d005      	beq.n	8005d7e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8005d72:	4b7e      	ldr	r3, [pc, #504]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	0f1b      	lsrs	r3, r3, #28
 8005d78:	f003 030f 	and.w	r3, r3, #15
 8005d7c:	e006      	b.n	8005d8c <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8005d7e:	4b7b      	ldr	r3, [pc, #492]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d84:	041b      	lsls	r3, r3, #16
 8005d86:	0f1b      	lsrs	r3, r3, #28
 8005d88:	f003 030f 	and.w	r3, r3, #15
 8005d8c:	4a7a      	ldr	r2, [pc, #488]	; (8005f78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	ee07 3a90 	vmov	s15, r3
 8005da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	ee07 3a90 	vmov	s15, r3
 8005dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005db6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005f74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dd2:	e058      	b.n	8005e86 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dde:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005f70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de6:	4b61      	ldr	r3, [pc, #388]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dfa:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005f74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e16:	e036      	b.n	8005e86 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005e18:	4b54      	ldr	r3, [pc, #336]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8005e24:	4b51      	ldr	r3, [pc, #324]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	0f1b      	lsrs	r3, r3, #28
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	e006      	b.n	8005e3e <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8005e30:	4b4e      	ldr	r3, [pc, #312]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005e32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e36:	041b      	lsls	r3, r3, #16
 8005e38:	0f1b      	lsrs	r3, r3, #28
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	4a4e      	ldr	r2, [pc, #312]	; (8005f78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e44:	ee07 3a90 	vmov	s15, r3
 8005e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	ee07 3a90 	vmov	s15, r3
 8005e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e64:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e68:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005f74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005e6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e84:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005e86:	4b39      	ldr	r3, [pc, #228]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d017      	beq.n	8005ec2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e92:	4b36      	ldr	r3, [pc, #216]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e96:	0a5b      	lsrs	r3, r3, #9
 8005e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e9c:	ee07 3a90 	vmov	s15, r3
 8005ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005ea4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ea8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005eac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eb8:	ee17 2a90 	vmov	r2, s15
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	e002      	b.n	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005ec8:	4b28      	ldr	r3, [pc, #160]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d017      	beq.n	8005f04 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ed4:	4b25      	ldr	r3, [pc, #148]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed8:	0c1b      	lsrs	r3, r3, #16
 8005eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eea:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005efa:	ee17 2a90 	vmov	r2, s15
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	605a      	str	r2, [r3, #4]
 8005f02:	e002      	b.n	8005f0a <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005f0a:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d017      	beq.n	8005f46 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005f16:	4b15      	ldr	r3, [pc, #84]	; (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1a:	0e1b      	lsrs	r3, r3, #24
 8005f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005f28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f3c:	ee17 2a90 	vmov	r2, s15
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005f44:	e00c      	b.n	8005f60 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	609a      	str	r2, [r3, #8]
}
 8005f4c:	e008      	b.n	8005f60 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	609a      	str	r2, [r3, #8]
}
 8005f60:	bf00      	nop
 8005f62:	3724      	adds	r7, #36	; 0x24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	46020c00 	.word	0x46020c00
 8005f70:	4b742400 	.word	0x4b742400
 8005f74:	46000000 	.word	0x46000000
 8005f78:	08009644 	.word	0x08009644

08005f7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b089      	sub	sp, #36	; 0x24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005f84:	4bac      	ldr	r3, [pc, #688]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005f8e:	4baa      	ldr	r3, [pc, #680]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005f98:	4ba7      	ldr	r3, [pc, #668]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	0a1b      	lsrs	r3, r3, #8
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005fa6:	4ba4      	ldr	r3, [pc, #656]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	f003 0310 	and.w	r3, r3, #16
 8005fae:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005fb0:	4ba1      	ldr	r3, [pc, #644]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	08db      	lsrs	r3, r3, #3
 8005fb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	fb02 f303 	mul.w	r3, r2, r3
 8005fc0:	ee07 3a90 	vmov	s15, r3
 8005fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 8123 	beq.w	800621a <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d062      	beq.n	80060a0 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	f200 8081 	bhi.w	80060e4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d024      	beq.n	8006032 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d17a      	bne.n	80060e4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff8:	eddf 6a90 	vldr	s13, [pc, #576]	; 800623c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8005ffc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006000:	4b8d      	ldr	r3, [pc, #564]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006008:	ee07 3a90 	vmov	s15, r3
 800600c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006010:	ed97 6a02 	vldr	s12, [r7, #8]
 8006014:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006240 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006018:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800601c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006020:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006024:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006030:	e08f      	b.n	8006152 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006032:	4b81      	ldr	r3, [pc, #516]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800603e:	4b7e      	ldr	r3, [pc, #504]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	0f1b      	lsrs	r3, r3, #28
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	e006      	b.n	8006058 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800604a:	4b7b      	ldr	r3, [pc, #492]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800604c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006050:	041b      	lsls	r3, r3, #16
 8006052:	0f1b      	lsrs	r3, r3, #28
 8006054:	f003 030f 	and.w	r3, r3, #15
 8006058:	4a7a      	ldr	r2, [pc, #488]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800605a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	ee07 3a90 	vmov	s15, r3
 800606c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006082:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006240 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006092:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800609e:	e058      	b.n	8006152 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060aa:	eddf 6a64 	vldr	s13, [pc, #400]	; 800623c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80060ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b2:	4b61      	ldr	r3, [pc, #388]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80060b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80060c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80060c6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006240 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80060ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80060ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80060d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80060da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060e2:	e036      	b.n	8006152 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80060e4:	4b54      	ldr	r3, [pc, #336]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 80060f0:	4b51      	ldr	r3, [pc, #324]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	0f1b      	lsrs	r3, r3, #28
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	e006      	b.n	800610a <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 80060fc:	4b4e      	ldr	r3, [pc, #312]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80060fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006102:	041b      	lsls	r3, r3, #16
 8006104:	0f1b      	lsrs	r3, r3, #28
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	4a4e      	ldr	r2, [pc, #312]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800610c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	ee07 3a90 	vmov	s15, r3
 800612c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006130:	ed97 6a02 	vldr	s12, [r7, #8]
 8006134:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006240 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006138:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006140:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006144:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006150:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006152:	4b39      	ldr	r3, [pc, #228]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d017      	beq.n	800618e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800615e:	4b36      	ldr	r3, [pc, #216]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006162:	0a5b      	lsrs	r3, r3, #9
 8006164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006168:	ee07 3a90 	vmov	s15, r3
 800616c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006170:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006174:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006178:	edd7 6a07 	vldr	s13, [r7, #28]
 800617c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006184:	ee17 2a90 	vmov	r2, s15
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	e002      	b.n	8006194 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006194:	4b28      	ldr	r3, [pc, #160]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d017      	beq.n	80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80061a0:	4b25      	ldr	r3, [pc, #148]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80061a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a4:	0c1b      	lsrs	r3, r3, #16
 80061a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80061b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061b6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80061ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80061be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c6:	ee17 2a90 	vmov	r2, s15
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	605a      	str	r2, [r3, #4]
 80061ce:	e002      	b.n	80061d6 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80061d6:	4b18      	ldr	r3, [pc, #96]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d017      	beq.n	8006212 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80061e2:	4b15      	ldr	r3, [pc, #84]	; (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80061e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e6:	0e1b      	lsrs	r3, r3, #24
 80061e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ec:	ee07 3a90 	vmov	s15, r3
 80061f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80061f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061f8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80061fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006208:	ee17 2a90 	vmov	r2, s15
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006210:	e00c      	b.n	800622c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	609a      	str	r2, [r3, #8]
}
 8006218:	e008      	b.n	800622c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	609a      	str	r2, [r3, #8]
}
 800622c:	bf00      	nop
 800622e:	3724      	adds	r7, #36	; 0x24
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	46020c00 	.word	0x46020c00
 800623c:	4b742400 	.word	0x4b742400
 8006240:	46000000 	.word	0x46000000
 8006244:	08009644 	.word	0x08009644

08006248 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006248:	b480      	push	{r7}
 800624a:	b089      	sub	sp, #36	; 0x24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006250:	4bac      	ldr	r3, [pc, #688]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006258:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800625a:	4baa      	ldr	r3, [pc, #680]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006264:	4ba7      	ldr	r3, [pc, #668]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006268:	0a1b      	lsrs	r3, r3, #8
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	3301      	adds	r3, #1
 8006270:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006272:	4ba4      	ldr	r3, [pc, #656]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	f003 0310 	and.w	r3, r3, #16
 800627a:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800627c:	4ba1      	ldr	r3, [pc, #644]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800627e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006280:	08db      	lsrs	r3, r3, #3
 8006282:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	fb02 f303 	mul.w	r3, r2, r3
 800628c:	ee07 3a90 	vmov	s15, r3
 8006290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006294:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8123 	beq.w	80064e6 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d062      	beq.n	800636c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	f200 8081 	bhi.w	80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d024      	beq.n	80062fe <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d17a      	bne.n	80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	ee07 3a90 	vmov	s15, r3
 80062c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c4:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006508 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80062c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062cc:	4b8d      	ldr	r3, [pc, #564]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80062ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d4:	ee07 3a90 	vmov	s15, r3
 80062d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80062dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80062e0:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800650c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80062e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80062e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80062ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80062f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f8:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80062fc:	e08f      	b.n	800641e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80062fe:	4b81      	ldr	r3, [pc, #516]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800630a:	4b7e      	ldr	r3, [pc, #504]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	0f1b      	lsrs	r3, r3, #28
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	e006      	b.n	8006324 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8006316:	4b7b      	ldr	r3, [pc, #492]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800631c:	041b      	lsls	r3, r3, #16
 800631e:	0f1b      	lsrs	r3, r3, #28
 8006320:	f003 030f 	and.w	r3, r3, #15
 8006324:	4a7a      	ldr	r2, [pc, #488]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	ee07 3a90 	vmov	s15, r3
 8006338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634a:	ed97 6a02 	vldr	s12, [r7, #8]
 800634e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800650c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800635e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800636a:	e058      	b.n	800641e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006376:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006508 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800637a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800637e:	4b61      	ldr	r3, [pc, #388]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800638e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006392:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800650c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006396:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800639a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800639e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80063a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063ae:	e036      	b.n	800641e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80063b0:	4b54      	ldr	r3, [pc, #336]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 80063bc:	4b51      	ldr	r3, [pc, #324]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	0f1b      	lsrs	r3, r3, #28
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	e006      	b.n	80063d6 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 80063c8:	4b4e      	ldr	r3, [pc, #312]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80063ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063ce:	041b      	lsls	r3, r3, #16
 80063d0:	0f1b      	lsrs	r3, r3, #28
 80063d2:	f003 030f 	and.w	r3, r3, #15
 80063d6:	4a4e      	ldr	r2, [pc, #312]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80063d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063dc:	ee07 3a90 	vmov	s15, r3
 80063e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	ee07 3a90 	vmov	s15, r3
 80063ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	ee07 3a90 	vmov	s15, r3
 80063f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006400:	eddf 5a42 	vldr	s11, [pc, #264]	; 800650c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006404:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006410:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006418:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800641c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800641e:	4b39      	ldr	r3, [pc, #228]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d017      	beq.n	800645a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800642a:	4b36      	ldr	r3, [pc, #216]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800642c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642e:	0a5b      	lsrs	r3, r3, #9
 8006430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006434:	ee07 3a90 	vmov	s15, r3
 8006438:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800643c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006440:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006444:	edd7 6a07 	vldr	s13, [r7, #28]
 8006448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800644c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006450:	ee17 2a90 	vmov	r2, s15
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	e002      	b.n	8006460 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006460:	4b28      	ldr	r3, [pc, #160]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d017      	beq.n	800649c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800646c:	4b25      	ldr	r3, [pc, #148]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800646e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006470:	0c1b      	lsrs	r3, r3, #16
 8006472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800647e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006482:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006486:	edd7 6a07 	vldr	s13, [r7, #28]
 800648a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800648e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006492:	ee17 2a90 	vmov	r2, s15
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	605a      	str	r2, [r3, #4]
 800649a:	e002      	b.n	80064a2 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80064a2:	4b18      	ldr	r3, [pc, #96]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80064a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d017      	beq.n	80064de <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80064ae:	4b15      	ldr	r3, [pc, #84]	; (8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80064b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b2:	0e1b      	lsrs	r3, r3, #24
 80064b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b8:	ee07 3a90 	vmov	s15, r3
 80064bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80064c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064c4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80064c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80064cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064d4:	ee17 2a90 	vmov	r2, s15
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80064dc:	e00c      	b.n	80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	609a      	str	r2, [r3, #8]
}
 80064e4:	e008      	b.n	80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	609a      	str	r2, [r3, #8]
}
 80064f8:	bf00      	nop
 80064fa:	3724      	adds	r7, #36	; 0x24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	46020c00 	.word	0x46020c00
 8006508:	4b742400 	.word	0x4b742400
 800650c:	46000000 	.word	0x46000000
 8006510:	08009644 	.word	0x08009644

08006514 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08e      	sub	sp, #56	; 0x38
 8006518:	af00      	add	r7, sp, #0
 800651a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800651e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006522:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8006526:	430b      	orrs	r3, r1
 8006528:	d145      	bne.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800652a:	4ba7      	ldr	r3, [pc, #668]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800652c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006534:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006536:	4ba4      	ldr	r3, [pc, #656]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b02      	cmp	r3, #2
 8006542:	d108      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800654a:	d104      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800654c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006550:	637b      	str	r3, [r7, #52]	; 0x34
 8006552:	f001 b8fc 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006556:	4b9c      	ldr	r3, [pc, #624]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800655c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006564:	d114      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800656c:	d110      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800656e:	4b96      	ldr	r3, [pc, #600]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800657c:	d103      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800657e:	23fa      	movs	r3, #250	; 0xfa
 8006580:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006582:	f001 b8e4 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006586:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800658a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800658c:	f001 b8df 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006590:	4b8d      	ldr	r3, [pc, #564]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800659c:	d107      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065a4:	d103      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80065a6:	4b89      	ldr	r3, [pc, #548]	; (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80065a8:	637b      	str	r3, [r7, #52]	; 0x34
 80065aa:	f001 b8d0 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	637b      	str	r3, [r7, #52]	; 0x34
 80065b2:	f001 b8cc 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80065b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ba:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80065be:	430b      	orrs	r3, r1
 80065c0:	d151      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80065c2:	4b81      	ldr	r3, [pc, #516]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80065c8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80065cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	2b80      	cmp	r3, #128	; 0x80
 80065d2:	d035      	beq.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	2b80      	cmp	r3, #128	; 0x80
 80065d8:	d841      	bhi.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	2b60      	cmp	r3, #96	; 0x60
 80065de:	d02a      	beq.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	2b60      	cmp	r3, #96	; 0x60
 80065e4:	d83b      	bhi.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	2b40      	cmp	r3, #64	; 0x40
 80065ea:	d009      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	2b40      	cmp	r3, #64	; 0x40
 80065f0:	d835      	bhi.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00c      	beq.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d012      	beq.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80065fe:	e02e      	b.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006604:	4618      	mov	r0, r3
 8006606:	f7ff fb53 	bl	8005cb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800660e:	f001 b89e 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006612:	f107 0318 	add.w	r3, r7, #24
 8006616:	4618      	mov	r0, r3
 8006618:	f7ff fcb0 	bl	8005f7c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006620:	f001 b895 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006624:	f107 030c 	add.w	r3, r7, #12
 8006628:	4618      	mov	r0, r3
 800662a:	f7ff fe0d 	bl	8006248 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006632:	f001 b88c 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006636:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800663c:	f001 b887 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006640:	4b61      	ldr	r3, [pc, #388]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664c:	d103      	bne.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800664e:	4b60      	ldr	r3, [pc, #384]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006650:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006652:	f001 b87c 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800665a:	f001 b878 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006662:	f001 b874 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800666a:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800666e:	430b      	orrs	r3, r1
 8006670:	d158      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006672:	4b55      	ldr	r3, [pc, #340]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006674:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006678:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800667c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006684:	d03b      	beq.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668c:	d846      	bhi.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006694:	d02e      	beq.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800669c:	d83e      	bhi.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a4:	d00b      	beq.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ac:	d836      	bhi.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00d      	beq.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ba:	d012      	beq.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80066bc:	e02e      	b.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7ff faf4 	bl	8005cb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066cc:	f001 b83f 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066d0:	f107 0318 	add.w	r3, r7, #24
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff fc51 	bl	8005f7c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066de:	f001 b836 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066e2:	f107 030c 	add.w	r3, r7, #12
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fdae 	bl	8006248 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066f0:	f001 b82d 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80066f4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80066f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066fa:	f001 b828 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066fe:	4b32      	ldr	r3, [pc, #200]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670a:	d103      	bne.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800670c:	4b30      	ldr	r3, [pc, #192]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006710:	f001 b81d 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006718:	f001 b819 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006720:	f001 b815 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006728:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800672c:	430b      	orrs	r3, r1
 800672e:	d126      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006730:	4b25      	ldr	r3, [pc, #148]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006732:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800673a:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800673c:	4b22      	ldr	r3, [pc, #136]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006748:	d106      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	2b00      	cmp	r3, #0
 800674e:	d103      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006750:	4b1f      	ldr	r3, [pc, #124]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006752:	637b      	str	r3, [r7, #52]	; 0x34
 8006754:	f000 bffb 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006758:	4b1b      	ldr	r3, [pc, #108]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006764:	d107      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676c:	d103      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800676e:	4b19      	ldr	r3, [pc, #100]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006770:	637b      	str	r3, [r7, #52]	; 0x34
 8006772:	f000 bfec 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	637b      	str	r3, [r7, #52]	; 0x34
 800677a:	f000 bfe8 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800677e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006782:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8006786:	430b      	orrs	r3, r1
 8006788:	d164      	bne.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800678a:	4b0f      	ldr	r3, [pc, #60]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800678c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006790:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006794:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800679c:	d03d      	beq.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80067a4:	d852      	bhi.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ac:	d014      	beq.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067b4:	d84a      	bhi.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01f      	beq.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80067bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067c2:	d012      	beq.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80067c4:	e042      	b.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80067c6:	bf00      	nop
 80067c8:	46020c00 	.word	0x46020c00
 80067cc:	0007a120 	.word	0x0007a120
 80067d0:	00f42400 	.word	0x00f42400
 80067d4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff fa67 	bl	8005cb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067e6:	f000 bfb2 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ea:	f107 0318 	add.w	r3, r7, #24
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fbc4 	bl	8005f7c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067f8:	f000 bfa9 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80067fc:	4bab      	ldr	r3, [pc, #684]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006808:	d103      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800680a:	4ba9      	ldr	r3, [pc, #676]	; (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800680c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800680e:	f000 bf9e 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006816:	f000 bf9a 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800681a:	4ba4      	ldr	r3, [pc, #656]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d005      	beq.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006826:	4ba1      	ldr	r3, [pc, #644]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	0e1b      	lsrs	r3, r3, #24
 800682c:	f003 030f 	and.w	r3, r3, #15
 8006830:	e006      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8006832:	4b9e      	ldr	r3, [pc, #632]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006838:	041b      	lsls	r3, r3, #16
 800683a:	0e1b      	lsrs	r3, r3, #24
 800683c:	f003 030f 	and.w	r3, r3, #15
 8006840:	4a9c      	ldr	r2, [pc, #624]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006846:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006848:	f000 bf81 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006850:	f000 bf7d 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006858:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800685c:	430b      	orrs	r3, r1
 800685e:	d175      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006860:	4b92      	ldr	r3, [pc, #584]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006862:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800686a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	2b00      	cmp	r3, #0
 8006870:	d15b      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006872:	4b8e      	ldr	r3, [pc, #568]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006878:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800687c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006884:	d034      	beq.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800688c:	d849      	bhi.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006894:	d00b      	beq.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800689c:	d841      	bhi.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d016      	beq.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068aa:	d009      	beq.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80068ac:	e039      	b.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff f9fc 	bl	8005cb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80068bc:	f000 bf47 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068c0:	f107 0318 	add.w	r3, r7, #24
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff fb59 	bl	8005f7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80068ce:	f000 bf3e 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80068d2:	4b76      	ldr	r3, [pc, #472]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068de:	d103      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 80068e0:	4b73      	ldr	r3, [pc, #460]	; (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80068e2:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80068e4:	f000 bf33 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80068ec:	f000 bf2f 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068f0:	4b6e      	ldr	r3, [pc, #440]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80068fc:	4b6b      	ldr	r3, [pc, #428]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	0e1b      	lsrs	r3, r3, #24
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	e006      	b.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8006908:	4b68      	ldr	r3, [pc, #416]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800690a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800690e:	041b      	lsls	r3, r3, #16
 8006910:	0e1b      	lsrs	r3, r3, #24
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	4a67      	ldr	r2, [pc, #412]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800691c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800691e:	f000 bf16 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006926:	f000 bf12 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006930:	d108      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006936:	4618      	mov	r0, r3
 8006938:	f7ff f9ba 	bl	8005cb0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	637b      	str	r3, [r7, #52]	; 0x34
 8006940:	f000 bf05 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	637b      	str	r3, [r7, #52]	; 0x34
 8006948:	f000 bf01 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800694c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006950:	1e51      	subs	r1, r2, #1
 8006952:	430b      	orrs	r3, r1
 8006954:	d136      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006956:	4b55      	ldr	r3, [pc, #340]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800695c:	f003 0303 	and.w	r3, r3, #3
 8006960:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	2b00      	cmp	r3, #0
 8006966:	d104      	bne.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006968:	f7fe fb34 	bl	8004fd4 <HAL_RCC_GetPCLK2Freq>
 800696c:	6378      	str	r0, [r7, #52]	; 0x34
 800696e:	f000 beee 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	2b01      	cmp	r3, #1
 8006976:	d104      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006978:	f7fe f9f6 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 800697c:	6378      	str	r0, [r7, #52]	; 0x34
 800697e:	f000 bee6 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006982:	4b4a      	ldr	r3, [pc, #296]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800698a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800698e:	d106      	bne.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006992:	2b02      	cmp	r3, #2
 8006994:	d103      	bne.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8006996:	4b48      	ldr	r3, [pc, #288]	; (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006998:	637b      	str	r3, [r7, #52]	; 0x34
 800699a:	f000 bed8 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800699e:	4b43      	ldr	r3, [pc, #268]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80069a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d107      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d104      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 80069b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069b6:	637b      	str	r3, [r7, #52]	; 0x34
 80069b8:	f000 bec9 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	637b      	str	r3, [r7, #52]	; 0x34
 80069c0:	f000 bec5 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80069c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c8:	1e91      	subs	r1, r2, #2
 80069ca:	430b      	orrs	r3, r1
 80069cc:	d136      	bne.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80069ce:	4b37      	ldr	r3, [pc, #220]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80069d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069d4:	f003 030c 	and.w	r3, r3, #12
 80069d8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069e0:	f7fe fae4 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 80069e4:	6378      	str	r0, [r7, #52]	; 0x34
 80069e6:	f000 beb2 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d104      	bne.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069f0:	f7fe f9ba 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 80069f4:	6378      	str	r0, [r7, #52]	; 0x34
 80069f6:	f000 beaa 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80069fa:	4b2c      	ldr	r3, [pc, #176]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a06:	d106      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8006a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	d103      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8006a0e:	4b2a      	ldr	r3, [pc, #168]	; (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
 8006a12:	f000 be9c 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006a16:	4b25      	ldr	r3, [pc, #148]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d107      	bne.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	2b0c      	cmp	r3, #12
 8006a28:	d104      	bne.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8006a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a30:	f000 be8d 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	637b      	str	r3, [r7, #52]	; 0x34
 8006a38:	f000 be89 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a40:	1f11      	subs	r1, r2, #4
 8006a42:	430b      	orrs	r3, r1
 8006a44:	d13e      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006a46:	4b19      	ldr	r3, [pc, #100]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a50:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d104      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a58:	f7fe faa8 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 8006a5c:	6378      	str	r0, [r7, #52]	; 0x34
 8006a5e:	f000 be76 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	2b10      	cmp	r3, #16
 8006a66:	d104      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a68:	f7fe f97e 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8006a6c:	6378      	str	r0, [r7, #52]	; 0x34
 8006a6e:	f000 be6e 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006a72:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a7e:	d106      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d103      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8006a86:	4b0c      	ldr	r3, [pc, #48]	; (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006a88:	637b      	str	r3, [r7, #52]	; 0x34
 8006a8a:	f000 be60 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006a8e:	4b07      	ldr	r3, [pc, #28]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d10f      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	2b30      	cmp	r3, #48	; 0x30
 8006aa0:	d10c      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8006aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa8:	f000 be51 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006aac:	46020c00 	.word	0x46020c00
 8006ab0:	02dc6c00 	.word	0x02dc6c00
 8006ab4:	08009644 	.word	0x08009644
 8006ab8:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac0:	f000 be45 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac8:	f1a2 0108 	sub.w	r1, r2, #8
 8006acc:	430b      	orrs	r3, r1
 8006ace:	d136      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006ad0:	4b9f      	ldr	r3, [pc, #636]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ad6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ada:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ae2:	f7fe fa63 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 8006ae6:	6378      	str	r0, [r7, #52]	; 0x34
 8006ae8:	f000 be31 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	d104      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006af2:	f7fe f939 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8006af6:	6378      	str	r0, [r7, #52]	; 0x34
 8006af8:	f000 be29 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006afc:	4b94      	ldr	r3, [pc, #592]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b08:	d106      	bne.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	2b80      	cmp	r3, #128	; 0x80
 8006b0e:	d103      	bne.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8006b10:	4b90      	ldr	r3, [pc, #576]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b12:	637b      	str	r3, [r7, #52]	; 0x34
 8006b14:	f000 be1b 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006b18:	4b8d      	ldr	r3, [pc, #564]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d107      	bne.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	2bc0      	cmp	r3, #192	; 0xc0
 8006b2a:	d104      	bne.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8006b2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
 8006b32:	f000 be0c 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	637b      	str	r3, [r7, #52]	; 0x34
 8006b3a:	f000 be08 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006b3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b42:	f1a2 0110 	sub.w	r1, r2, #16
 8006b46:	430b      	orrs	r3, r1
 8006b48:	d139      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006b4a:	4b81      	ldr	r3, [pc, #516]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b54:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d104      	bne.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b5c:	f7fe fa26 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 8006b60:	6378      	str	r0, [r7, #52]	; 0x34
 8006b62:	f000 bdf4 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b6c:	d104      	bne.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b6e:	f7fe f8fb 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8006b72:	6378      	str	r0, [r7, #52]	; 0x34
 8006b74:	f000 bdeb 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006b78:	4b75      	ldr	r3, [pc, #468]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b84:	d107      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b8c:	d103      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8006b8e:	4b71      	ldr	r3, [pc, #452]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
 8006b92:	f000 bddc 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006b96:	4b6e      	ldr	r3, [pc, #440]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d108      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006baa:	d104      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8006bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb2:	f000 bdcc 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bba:	f000 bdc8 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc2:	f1a2 0120 	sub.w	r1, r2, #32
 8006bc6:	430b      	orrs	r3, r1
 8006bc8:	d158      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006bca:	4b61      	ldr	r3, [pc, #388]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d104      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006bdc:	f7fe fa0e 	bl	8004ffc <HAL_RCC_GetPCLK3Freq>
 8006be0:	6378      	str	r0, [r7, #52]	; 0x34
 8006be2:	f000 bdb4 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d104      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006bec:	f7fe f8bc 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8006bf0:	6378      	str	r0, [r7, #52]	; 0x34
 8006bf2:	f000 bdac 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006bf6:	4b56      	ldr	r3, [pc, #344]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c02:	d106      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d103      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8006c0a:	4b52      	ldr	r3, [pc, #328]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c0e:	f000 bd9e 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006c12:	4b4f      	ldr	r3, [pc, #316]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d107      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d104      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8006c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2c:	f000 bd8f 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006c30:	4b47      	ldr	r3, [pc, #284]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0320 	and.w	r3, r3, #32
 8006c38:	2b20      	cmp	r3, #32
 8006c3a:	d11b      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d118      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c42:	4b43      	ldr	r3, [pc, #268]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006c4e:	4b40      	ldr	r3, [pc, #256]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	0e1b      	lsrs	r3, r3, #24
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	e006      	b.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8006c5a:	4b3d      	ldr	r3, [pc, #244]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c60:	041b      	lsls	r3, r3, #16
 8006c62:	0e1b      	lsrs	r3, r3, #24
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	4a3b      	ldr	r2, [pc, #236]	; (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c70:	f000 bd6d 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	637b      	str	r3, [r7, #52]	; 0x34
 8006c78:	f000 bd69 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c80:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006c84:	430b      	orrs	r3, r1
 8006c86:	d169      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006c88:	4b31      	ldr	r3, [pc, #196]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c8e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006c92:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9a:	d104      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c9c:	f7fe f864 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8006ca0:	6378      	str	r0, [r7, #52]	; 0x34
 8006ca2:	f000 bd54 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cac:	d108      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cae:	f107 0318 	add.w	r3, r7, #24
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff f962 	bl	8005f7c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	637b      	str	r3, [r7, #52]	; 0x34
 8006cbc:	f000 bd47 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d104      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006cc6:	f7fe f957 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8006cca:	6378      	str	r0, [r7, #52]	; 0x34
 8006ccc:	f000 bd3f 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006cd6:	d118      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006cd8:	4b1d      	ldr	r3, [pc, #116]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006ce4:	4b1a      	ldr	r3, [pc, #104]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	0f1b      	lsrs	r3, r3, #28
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	e006      	b.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006cf0:	4b17      	ldr	r3, [pc, #92]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006cf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cf6:	041b      	lsls	r3, r3, #16
 8006cf8:	0f1b      	lsrs	r3, r3, #28
 8006cfa:	f003 030f 	and.w	r3, r3, #15
 8006cfe:	4a16      	ldr	r2, [pc, #88]	; (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
 8006d06:	f000 bd22 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006d0a:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d16:	d107      	bne.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d1e:	d103      	bne.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8006d20:	4b0c      	ldr	r3, [pc, #48]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d22:	637b      	str	r3, [r7, #52]	; 0x34
 8006d24:	f000 bd13 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006d28:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d34:	d107      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d3c:	d103      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8006d3e:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
 8006d42:	f000 bd04 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	637b      	str	r3, [r7, #52]	; 0x34
 8006d4a:	f000 bd00 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006d4e:	bf00      	nop
 8006d50:	46020c00 	.word	0x46020c00
 8006d54:	00f42400 	.word	0x00f42400
 8006d58:	08009644 	.word	0x08009644
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d60:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006d64:	430b      	orrs	r3, r1
 8006d66:	d14e      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006d68:	4ba8      	ldr	r3, [pc, #672]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006d6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	2b04      	cmp	r3, #4
 8006d78:	d841      	bhi.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006d7a:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006db9 	.word	0x08006db9
 8006d84:	08006d95 	.word	0x08006d95
 8006d88:	08006da7 	.word	0x08006da7
 8006d8c:	08006dc3 	.word	0x08006dc3
 8006d90:	08006dcd 	.word	0x08006dcd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe ff89 	bl	8005cb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006da2:	f000 bcd4 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006da6:	f107 030c 	add.w	r3, r7, #12
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7ff fa4c 	bl	8006248 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006db4:	f000 bccb 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006db8:	f7fe f8de 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8006dbc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006dbe:	f000 bcc6 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006dc2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006dc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dc8:	f000 bcc1 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006dcc:	4b8f      	ldr	r3, [pc, #572]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d005      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8006dd8:	4b8c      	ldr	r3, [pc, #560]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	0e1b      	lsrs	r3, r3, #24
 8006dde:	f003 030f 	and.w	r3, r3, #15
 8006de2:	e006      	b.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006de4:	4b89      	ldr	r3, [pc, #548]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006de6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dea:	041b      	lsls	r3, r3, #16
 8006dec:	0e1b      	lsrs	r3, r3, #24
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	4a87      	ldr	r2, [pc, #540]	; (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006df8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dfa:	f000 bca8 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e02:	f000 bca4 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006e0e:	430b      	orrs	r3, r1
 8006e10:	d15d      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006e12:	4b7e      	ldr	r3, [pc, #504]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e18:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006e1c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e24:	d036      	beq.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e2c:	d84b      	bhi.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e34:	d029      	beq.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e3c:	d843      	bhi.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e44:	d013      	beq.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e4c:	d83b      	bhi.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d015      	beq.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e5a:	d134      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fe ff25 	bl	8005cb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e6a:	f000 bc70 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e6e:	f107 030c 	add.w	r3, r7, #12
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff f9e8 	bl	8006248 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e7c:	f000 bc67 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006e80:	f7fe f87a 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8006e84:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006e86:	f000 bc62 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006e8a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e90:	f000 bc5d 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e94:	4b5d      	ldr	r3, [pc, #372]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006ea0:	4b5a      	ldr	r3, [pc, #360]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	0e1b      	lsrs	r3, r3, #24
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	e006      	b.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8006eac:	4b57      	ldr	r3, [pc, #348]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006eb2:	041b      	lsls	r3, r3, #16
 8006eb4:	0e1b      	lsrs	r3, r3, #24
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	4a55      	ldr	r2, [pc, #340]	; (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ec0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ec2:	f000 bc44 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006eca:	f000 bc40 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ed2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	d14a      	bne.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006eda:	4b4c      	ldr	r3, [pc, #304]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ee0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ee4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d104      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006eec:	f7fe f85e 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 8006ef0:	6378      	str	r0, [r7, #52]	; 0x34
 8006ef2:	f000 bc2c 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efc:	d104      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006efe:	f7fd ff33 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8006f02:	6378      	str	r0, [r7, #52]	; 0x34
 8006f04:	f000 bc23 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006f08:	4b40      	ldr	r3, [pc, #256]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f14:	d107      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f1c:	d103      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8006f1e:	4b3d      	ldr	r3, [pc, #244]	; (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006f20:	637b      	str	r3, [r7, #52]	; 0x34
 8006f22:	f000 bc14 	b.w	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006f26:	4b39      	ldr	r3, [pc, #228]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d11b      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f38:	d117      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f3a:	4b34      	ldr	r3, [pc, #208]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8006f46:	4b31      	ldr	r3, [pc, #196]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	0e1b      	lsrs	r3, r3, #24
 8006f4c:	f003 030f 	and.w	r3, r3, #15
 8006f50:	e006      	b.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006f52:	4b2e      	ldr	r3, [pc, #184]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f58:	041b      	lsls	r3, r3, #16
 8006f5a:	0e1b      	lsrs	r3, r3, #24
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	4a2b      	ldr	r2, [pc, #172]	; (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f66:	637b      	str	r3, [r7, #52]	; 0x34
 8006f68:	e3f1      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f6e:	e3ee      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f74:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8006f78:	430b      	orrs	r3, r1
 8006f7a:	d14d      	bne.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006f7c:	4b23      	ldr	r3, [pc, #140]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f86:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d103      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f8e:	f7fe f80d 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 8006f92:	6378      	str	r0, [r7, #52]	; 0x34
 8006f94:	e3db      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f9c:	d103      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f9e:	f7fd fee3 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8006fa2:	6378      	str	r0, [r7, #52]	; 0x34
 8006fa4:	e3d3      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006fa6:	4b19      	ldr	r3, [pc, #100]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fb2:	d106      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fba:	d102      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8006fbc:	4b15      	ldr	r3, [pc, #84]	; (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8006fc0:	e3c5      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006fc2:	4b12      	ldr	r3, [pc, #72]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d11b      	bne.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fd4:	d117      	bne.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fd6:	4b0d      	ldr	r3, [pc, #52]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d005      	beq.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8006fe2:	4b0a      	ldr	r3, [pc, #40]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	0e1b      	lsrs	r3, r3, #24
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	e006      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006fee:	4b07      	ldr	r3, [pc, #28]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ff0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ff4:	041b      	lsls	r3, r3, #16
 8006ff6:	0e1b      	lsrs	r3, r3, #24
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	4a04      	ldr	r2, [pc, #16]	; (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
 8007004:	e3a3      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	637b      	str	r3, [r7, #52]	; 0x34
 800700a:	e3a0      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800700c:	46020c00 	.word	0x46020c00
 8007010:	08009644 	.word	0x08009644
 8007014:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800701c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007020:	430b      	orrs	r3, r1
 8007022:	d148      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007024:	4b9d      	ldr	r3, [pc, #628]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800702a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800702e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	2bc0      	cmp	r3, #192	; 0xc0
 8007034:	d024      	beq.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	2bc0      	cmp	r3, #192	; 0xc0
 800703a:	d839      	bhi.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703e:	2b80      	cmp	r3, #128	; 0x80
 8007040:	d00d      	beq.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	2b80      	cmp	r3, #128	; 0x80
 8007046:	d833      	bhi.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	2b40      	cmp	r3, #64	; 0x40
 8007052:	d011      	beq.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007054:	e02c      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007056:	f7fd ffd1 	bl	8004ffc <HAL_RCC_GetPCLK3Freq>
 800705a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800705c:	e377      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800705e:	4b8f      	ldr	r3, [pc, #572]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800706a:	d102      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 800706c:	4b8c      	ldr	r3, [pc, #560]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800706e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007070:	e36d      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007076:	e36a      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007078:	f7fd fe76 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 800707c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800707e:	e366      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007080:	4b86      	ldr	r3, [pc, #536]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800708c:	4b83      	ldr	r3, [pc, #524]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	0f1b      	lsrs	r3, r3, #28
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	e006      	b.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007098:	4b80      	ldr	r3, [pc, #512]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800709a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800709e:	041b      	lsls	r3, r3, #16
 80070a0:	0f1b      	lsrs	r3, r3, #28
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	4a7f      	ldr	r2, [pc, #508]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80070a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070ae:	e34e      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070b4:	e34b      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80070b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ba:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80070be:	430b      	orrs	r3, r1
 80070c0:	d147      	bne.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80070c2:	4b76      	ldr	r3, [pc, #472]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80070c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80070cc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80070d4:	f7fd ff6a 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 80070d8:	6378      	str	r0, [r7, #52]	; 0x34
 80070da:	e338      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070e2:	d103      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070e4:	f7fd fe40 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 80070e8:	6378      	str	r0, [r7, #52]	; 0x34
 80070ea:	e330      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80070ec:	4b6b      	ldr	r3, [pc, #428]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f8:	d106      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007100:	d102      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8007102:	4b67      	ldr	r3, [pc, #412]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007104:	637b      	str	r3, [r7, #52]	; 0x34
 8007106:	e322      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007108:	4b64      	ldr	r3, [pc, #400]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b20      	cmp	r3, #32
 8007112:	d11b      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800711a:	d117      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800711c:	4b5f      	ldr	r3, [pc, #380]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007128:	4b5c      	ldr	r3, [pc, #368]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	0e1b      	lsrs	r3, r3, #24
 800712e:	f003 030f 	and.w	r3, r3, #15
 8007132:	e006      	b.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8007134:	4b59      	ldr	r3, [pc, #356]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800713a:	041b      	lsls	r3, r3, #16
 800713c:	0e1b      	lsrs	r3, r3, #24
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	4a58      	ldr	r2, [pc, #352]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007148:	637b      	str	r3, [r7, #52]	; 0x34
 800714a:	e300      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	637b      	str	r3, [r7, #52]	; 0x34
 8007150:	e2fd      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007156:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800715a:	430b      	orrs	r3, r1
 800715c:	d15b      	bne.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800715e:	4b4f      	ldr	r3, [pc, #316]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007168:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	2b00      	cmp	r3, #0
 800716e:	d117      	bne.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007170:	4b4a      	ldr	r3, [pc, #296]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 800717c:	4b47      	ldr	r3, [pc, #284]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	0e1b      	lsrs	r3, r3, #24
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	e006      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8007188:	4b44      	ldr	r3, [pc, #272]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800718a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800718e:	041b      	lsls	r3, r3, #16
 8007190:	0e1b      	lsrs	r3, r3, #24
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	4a43      	ldr	r2, [pc, #268]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800719c:	637b      	str	r3, [r7, #52]	; 0x34
 800719e:	e2d6      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80071a0:	4b3e      	ldr	r3, [pc, #248]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80071a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071ae:	d112      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b6:	d10e      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071b8:	4b38      	ldr	r3, [pc, #224]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80071ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071c6:	d102      	bne.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 80071c8:	23fa      	movs	r3, #250	; 0xfa
 80071ca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071cc:	e2bf      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80071ce:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80071d2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071d4:	e2bb      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80071d6:	4b31      	ldr	r3, [pc, #196]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e2:	d106      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ea:	d102      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 80071ec:	4b2c      	ldr	r3, [pc, #176]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80071ee:	637b      	str	r3, [r7, #52]	; 0x34
 80071f0:	e2ad      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80071f2:	4b2a      	ldr	r3, [pc, #168]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80071f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d107      	bne.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007206:	d103      	bne.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8007208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800720c:	637b      	str	r3, [r7, #52]	; 0x34
 800720e:	e29e      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	637b      	str	r3, [r7, #52]	; 0x34
 8007214:	e29b      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800721a:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800721e:	430b      	orrs	r3, r1
 8007220:	d162      	bne.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007222:	4b1e      	ldr	r3, [pc, #120]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007228:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800722c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	2b00      	cmp	r3, #0
 8007232:	d117      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007234:	4b19      	ldr	r3, [pc, #100]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007240:	4b16      	ldr	r3, [pc, #88]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	0e1b      	lsrs	r3, r3, #24
 8007246:	f003 030f 	and.w	r3, r3, #15
 800724a:	e006      	b.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800724c:	4b13      	ldr	r3, [pc, #76]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800724e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007252:	041b      	lsls	r3, r3, #16
 8007254:	0e1b      	lsrs	r3, r3, #24
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	4a12      	ldr	r2, [pc, #72]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800725c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
 8007262:	e274      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007264:	4b0d      	ldr	r3, [pc, #52]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800726a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800726e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007272:	d119      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8007274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800727a:	d115      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800727c:	4b07      	ldr	r3, [pc, #28]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800727e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800728a:	d102      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800728c:	23fa      	movs	r3, #250	; 0xfa
 800728e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007290:	e25d      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007292:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007296:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007298:	e259      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800729a:	bf00      	nop
 800729c:	46020c00 	.word	0x46020c00
 80072a0:	00f42400 	.word	0x00f42400
 80072a4:	08009644 	.word	0x08009644
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80072a8:	4b9d      	ldr	r3, [pc, #628]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b4:	d106      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80072b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072bc:	d102      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 80072be:	4b99      	ldr	r3, [pc, #612]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80072c0:	637b      	str	r3, [r7, #52]	; 0x34
 80072c2:	e244      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80072c4:	4b96      	ldr	r3, [pc, #600]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80072c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d107      	bne.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 80072d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072d8:	d103      	bne.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 80072da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072de:	637b      	str	r3, [r7, #52]	; 0x34
 80072e0:	e235      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	637b      	str	r3, [r7, #52]	; 0x34
 80072e6:	e232      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80072e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072ec:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80072f0:	430b      	orrs	r3, r1
 80072f2:	d147      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80072f4:	4b8a      	ldr	r3, [pc, #552]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80072f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072fa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80072fe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	2b00      	cmp	r3, #0
 8007304:	d103      	bne.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007306:	f7fd fe51 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 800730a:	6378      	str	r0, [r7, #52]	; 0x34
 800730c:	e21f      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800730e:	4b84      	ldr	r3, [pc, #528]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800731c:	d112      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007324:	d10e      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007326:	4b7e      	ldr	r3, [pc, #504]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800732c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007330:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007334:	d102      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8007336:	23fa      	movs	r3, #250	; 0xfa
 8007338:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800733a:	e208      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800733c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007340:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007342:	e204      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007344:	4b76      	ldr	r3, [pc, #472]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800734c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007350:	d106      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007358:	d102      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800735a:	4b72      	ldr	r3, [pc, #456]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800735c:	637b      	str	r3, [r7, #52]	; 0x34
 800735e:	e1f6      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007360:	4b6f      	ldr	r3, [pc, #444]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b02      	cmp	r3, #2
 800736c:	d107      	bne.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007374:	d103      	bne.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8007376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800737a:	637b      	str	r3, [r7, #52]	; 0x34
 800737c:	e1e7      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	637b      	str	r3, [r7, #52]	; 0x34
 8007382:	e1e4      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007388:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800738c:	430b      	orrs	r3, r1
 800738e:	d12d      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007390:	4b63      	ldr	r3, [pc, #396]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007396:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800739a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800739c:	4b60      	ldr	r3, [pc, #384]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073a8:	d105      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d102      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 80073b0:	4b5c      	ldr	r3, [pc, #368]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80073b2:	637b      	str	r3, [r7, #52]	; 0x34
 80073b4:	e1cb      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073bc:	d107      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe fc74 	bl	8005cb0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	637b      	str	r3, [r7, #52]	; 0x34
 80073cc:	e1bf      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073d4:	d107      	bne.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073d6:	f107 0318 	add.w	r3, r7, #24
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fe fdce 	bl	8005f7c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	637b      	str	r3, [r7, #52]	; 0x34
 80073e4:	e1b3      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	637b      	str	r3, [r7, #52]	; 0x34
 80073ea:	e1b0      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80073ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073f0:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80073f4:	430b      	orrs	r3, r1
 80073f6:	d14d      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80073f8:	4b49      	ldr	r3, [pc, #292]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80073fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007402:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800740a:	d028      	beq.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007412:	d83c      	bhi.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800741a:	d013      	beq.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007422:	d834      	bhi.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	2b00      	cmp	r3, #0
 8007428:	d004      	beq.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007430:	d004      	beq.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8007432:	e02c      	b.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007434:	f7fd fdce 	bl	8004fd4 <HAL_RCC_GetPCLK2Freq>
 8007438:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800743a:	e188      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800743c:	f7fd fc94 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8007440:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007442:	e184      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007444:	4b36      	ldr	r3, [pc, #216]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800744c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007450:	d102      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8007452:	4b34      	ldr	r3, [pc, #208]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007454:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007456:	e17a      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800745c:	e177      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800745e:	4b30      	ldr	r3, [pc, #192]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d005      	beq.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800746a:	4b2d      	ldr	r3, [pc, #180]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	0e1b      	lsrs	r3, r3, #24
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	e006      	b.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8007476:	4b2a      	ldr	r3, [pc, #168]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800747c:	041b      	lsls	r3, r3, #16
 800747e:	0e1b      	lsrs	r3, r3, #24
 8007480:	f003 030f 	and.w	r3, r3, #15
 8007484:	4a28      	ldr	r2, [pc, #160]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8007486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800748a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800748c:	e15f      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007492:	e15c      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007498:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800749c:	430b      	orrs	r3, r1
 800749e:	d154      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80074a0:	4b1f      	ldr	r3, [pc, #124]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80074a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074aa:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074b2:	d028      	beq.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074ba:	d843      	bhi.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074c2:	d013      	beq.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074ca:	d83b      	bhi.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d004      	beq.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074d8:	d004      	beq.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80074da:	e033      	b.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80074dc:	f7fd fd66 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 80074e0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80074e2:	e134      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80074e4:	f7fd fc40 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 80074e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80074ea:	e130      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074ec:	4b0c      	ldr	r3, [pc, #48]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074f8:	d102      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80074fa:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80074fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074fe:	e126      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007504:	e123      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007506:	4b06      	ldr	r3, [pc, #24]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00c      	beq.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8007512:	4b03      	ldr	r3, [pc, #12]	; (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	0e1b      	lsrs	r3, r3, #24
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	e00d      	b.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800751e:	bf00      	nop
 8007520:	46020c00 	.word	0x46020c00
 8007524:	00f42400 	.word	0x00f42400
 8007528:	08009644 	.word	0x08009644
 800752c:	4b8a      	ldr	r3, [pc, #552]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800752e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	0e1b      	lsrs	r3, r3, #24
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	4a88      	ldr	r2, [pc, #544]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800753c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007540:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007542:	e104      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007548:	e101      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800754a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800754e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8007552:	430b      	orrs	r3, r1
 8007554:	d16e      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007556:	4b80      	ldr	r3, [pc, #512]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800755c:	f003 0318 	and.w	r3, r3, #24
 8007560:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	2b18      	cmp	r3, #24
 8007566:	d862      	bhi.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8007568:	a201      	add	r2, pc, #4	; (adr r2, 8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756e:	bf00      	nop
 8007570:	080075d5 	.word	0x080075d5
 8007574:	0800762f 	.word	0x0800762f
 8007578:	0800762f 	.word	0x0800762f
 800757c:	0800762f 	.word	0x0800762f
 8007580:	0800762f 	.word	0x0800762f
 8007584:	0800762f 	.word	0x0800762f
 8007588:	0800762f 	.word	0x0800762f
 800758c:	0800762f 	.word	0x0800762f
 8007590:	080075dd 	.word	0x080075dd
 8007594:	0800762f 	.word	0x0800762f
 8007598:	0800762f 	.word	0x0800762f
 800759c:	0800762f 	.word	0x0800762f
 80075a0:	0800762f 	.word	0x0800762f
 80075a4:	0800762f 	.word	0x0800762f
 80075a8:	0800762f 	.word	0x0800762f
 80075ac:	0800762f 	.word	0x0800762f
 80075b0:	080075e5 	.word	0x080075e5
 80075b4:	0800762f 	.word	0x0800762f
 80075b8:	0800762f 	.word	0x0800762f
 80075bc:	0800762f 	.word	0x0800762f
 80075c0:	0800762f 	.word	0x0800762f
 80075c4:	0800762f 	.word	0x0800762f
 80075c8:	0800762f 	.word	0x0800762f
 80075cc:	0800762f 	.word	0x0800762f
 80075d0:	080075ff 	.word	0x080075ff
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80075d4:	f7fd fd12 	bl	8004ffc <HAL_RCC_GetPCLK3Freq>
 80075d8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80075da:	e0b8      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80075dc:	f7fd fbc4 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 80075e0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80075e2:	e0b4      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075e4:	4b5c      	ldr	r3, [pc, #368]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075f0:	d102      	bne.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 80075f2:	4b5b      	ldr	r3, [pc, #364]	; (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075f6:	e0aa      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075fc:	e0a7      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075fe:	4b56      	ldr	r3, [pc, #344]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800760a:	4b53      	ldr	r3, [pc, #332]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	0e1b      	lsrs	r3, r3, #24
 8007610:	f003 030f 	and.w	r3, r3, #15
 8007614:	e006      	b.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8007616:	4b50      	ldr	r3, [pc, #320]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007618:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800761c:	041b      	lsls	r3, r3, #16
 800761e:	0e1b      	lsrs	r3, r3, #24
 8007620:	f003 030f 	and.w	r3, r3, #15
 8007624:	4a4d      	ldr	r2, [pc, #308]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8007626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800762a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800762c:	e08f      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007632:	e08c      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007638:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800763c:	430b      	orrs	r3, r1
 800763e:	d14c      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007640:	4b45      	ldr	r3, [pc, #276]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007642:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007646:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800764a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007652:	d013      	beq.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800765a:	d83b      	bhi.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007662:	d013      	beq.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8007664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800766a:	d833      	bhi.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	2b00      	cmp	r3, #0
 8007670:	d014      	beq.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007678:	d014      	beq.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800767a:	e02b      	b.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800767c:	f107 0318 	add.w	r3, r7, #24
 8007680:	4618      	mov	r0, r3
 8007682:	f7fe fc7b 	bl	8005f7c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800768a:	e060      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800768c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe fb0d 	bl	8005cb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800769a:	e058      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800769c:	f7fd fb64 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 80076a0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80076a2:	e054      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076a4:	4b2c      	ldr	r3, [pc, #176]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d005      	beq.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80076b0:	4b29      	ldr	r3, [pc, #164]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	0e1b      	lsrs	r3, r3, #24
 80076b6:	f003 030f 	and.w	r3, r3, #15
 80076ba:	e006      	b.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80076bc:	4b26      	ldr	r3, [pc, #152]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80076be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076c2:	041b      	lsls	r3, r3, #16
 80076c4:	0e1b      	lsrs	r3, r3, #24
 80076c6:	f003 030f 	and.w	r3, r3, #15
 80076ca:	4a24      	ldr	r2, [pc, #144]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80076cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076d2:	e03c      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076d8:	e039      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80076da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076de:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80076e2:	430b      	orrs	r3, r1
 80076e4:	d131      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80076e6:	4b1c      	ldr	r3, [pc, #112]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80076e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80076ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076f0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80076f2:	4b19      	ldr	r3, [pc, #100]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80076f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d106      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	2b00      	cmp	r3, #0
 8007704:	d103      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8007706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800770a:	637b      	str	r3, [r7, #52]	; 0x34
 800770c:	e01f      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800770e:	4b12      	ldr	r3, [pc, #72]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800771c:	d112      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007724:	d10e      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007726:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800772c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007734:	d102      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8007736:	23fa      	movs	r3, #250	; 0xfa
 8007738:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800773a:	e008      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800773c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007740:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007742:	e004      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	637b      	str	r3, [r7, #52]	; 0x34
 8007748:	e001      	b.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800774a:	2300      	movs	r3, #0
 800774c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800774e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007750:	4618      	mov	r0, r3
 8007752:	3738      	adds	r7, #56	; 0x38
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	46020c00 	.word	0x46020c00
 800775c:	08009644 	.word	0x08009644
 8007760:	00f42400 	.word	0x00f42400

08007764 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800776c:	4b47      	ldr	r3, [pc, #284]	; (800788c <RCCEx_PLL2_Config+0x128>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a46      	ldr	r2, [pc, #280]	; (800788c <RCCEx_PLL2_Config+0x128>)
 8007772:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007776:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007778:	f7fa f9b4 	bl	8001ae4 <HAL_GetTick>
 800777c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800777e:	e008      	b.n	8007792 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007780:	f7fa f9b0 	bl	8001ae4 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b02      	cmp	r3, #2
 800778c:	d901      	bls.n	8007792 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e077      	b.n	8007882 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007792:	4b3e      	ldr	r3, [pc, #248]	; (800788c <RCCEx_PLL2_Config+0x128>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1f0      	bne.n	8007780 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800779e:	4b3b      	ldr	r3, [pc, #236]	; (800788c <RCCEx_PLL2_Config+0x128>)
 80077a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80077a6:	f023 0303 	bic.w	r3, r3, #3
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	6811      	ldr	r1, [r2, #0]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6852      	ldr	r2, [r2, #4]
 80077b2:	3a01      	subs	r2, #1
 80077b4:	0212      	lsls	r2, r2, #8
 80077b6:	430a      	orrs	r2, r1
 80077b8:	4934      	ldr	r1, [pc, #208]	; (800788c <RCCEx_PLL2_Config+0x128>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	62cb      	str	r3, [r1, #44]	; 0x2c
 80077be:	4b33      	ldr	r3, [pc, #204]	; (800788c <RCCEx_PLL2_Config+0x128>)
 80077c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077c2:	4b33      	ldr	r3, [pc, #204]	; (8007890 <RCCEx_PLL2_Config+0x12c>)
 80077c4:	4013      	ands	r3, r2
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	6892      	ldr	r2, [r2, #8]
 80077ca:	3a01      	subs	r2, #1
 80077cc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	68d2      	ldr	r2, [r2, #12]
 80077d4:	3a01      	subs	r2, #1
 80077d6:	0252      	lsls	r2, r2, #9
 80077d8:	b292      	uxth	r2, r2
 80077da:	4311      	orrs	r1, r2
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	6912      	ldr	r2, [r2, #16]
 80077e0:	3a01      	subs	r2, #1
 80077e2:	0412      	lsls	r2, r2, #16
 80077e4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80077e8:	4311      	orrs	r1, r2
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6952      	ldr	r2, [r2, #20]
 80077ee:	3a01      	subs	r2, #1
 80077f0:	0612      	lsls	r2, r2, #24
 80077f2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80077f6:	430a      	orrs	r2, r1
 80077f8:	4924      	ldr	r1, [pc, #144]	; (800788c <RCCEx_PLL2_Config+0x128>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80077fe:	4b23      	ldr	r3, [pc, #140]	; (800788c <RCCEx_PLL2_Config+0x128>)
 8007800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007802:	f023 020c 	bic.w	r2, r3, #12
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	4920      	ldr	r1, [pc, #128]	; (800788c <RCCEx_PLL2_Config+0x128>)
 800780c:	4313      	orrs	r3, r2
 800780e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007810:	4b1e      	ldr	r3, [pc, #120]	; (800788c <RCCEx_PLL2_Config+0x128>)
 8007812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	491c      	ldr	r1, [pc, #112]	; (800788c <RCCEx_PLL2_Config+0x128>)
 800781a:	4313      	orrs	r3, r2
 800781c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800781e:	4b1b      	ldr	r3, [pc, #108]	; (800788c <RCCEx_PLL2_Config+0x128>)
 8007820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007822:	4a1a      	ldr	r2, [pc, #104]	; (800788c <RCCEx_PLL2_Config+0x128>)
 8007824:	f023 0310 	bic.w	r3, r3, #16
 8007828:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800782a:	4b18      	ldr	r3, [pc, #96]	; (800788c <RCCEx_PLL2_Config+0x128>)
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007832:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	69d2      	ldr	r2, [r2, #28]
 800783a:	00d2      	lsls	r2, r2, #3
 800783c:	4913      	ldr	r1, [pc, #76]	; (800788c <RCCEx_PLL2_Config+0x128>)
 800783e:	4313      	orrs	r3, r2
 8007840:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007842:	4b12      	ldr	r3, [pc, #72]	; (800788c <RCCEx_PLL2_Config+0x128>)
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	4a11      	ldr	r2, [pc, #68]	; (800788c <RCCEx_PLL2_Config+0x128>)
 8007848:	f043 0310 	orr.w	r3, r3, #16
 800784c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800784e:	4b0f      	ldr	r3, [pc, #60]	; (800788c <RCCEx_PLL2_Config+0x128>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a0e      	ldr	r2, [pc, #56]	; (800788c <RCCEx_PLL2_Config+0x128>)
 8007854:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007858:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800785a:	f7fa f943 	bl	8001ae4 <HAL_GetTick>
 800785e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007860:	e008      	b.n	8007874 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007862:	f7fa f93f 	bl	8001ae4 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d901      	bls.n	8007874 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e006      	b.n	8007882 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007874:	4b05      	ldr	r3, [pc, #20]	; (800788c <RCCEx_PLL2_Config+0x128>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0f0      	beq.n	8007862 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007880:	2300      	movs	r3, #0

}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	46020c00 	.word	0x46020c00
 8007890:	80800000 	.word	0x80800000

08007894 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800789c:	4b47      	ldr	r3, [pc, #284]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a46      	ldr	r2, [pc, #280]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 80078a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078a8:	f7fa f91c 	bl	8001ae4 <HAL_GetTick>
 80078ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078ae:	e008      	b.n	80078c2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078b0:	f7fa f918 	bl	8001ae4 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d901      	bls.n	80078c2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e077      	b.n	80079b2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078c2:	4b3e      	ldr	r3, [pc, #248]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f0      	bne.n	80078b0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80078ce:	4b3b      	ldr	r3, [pc, #236]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 80078d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80078d6:	f023 0303 	bic.w	r3, r3, #3
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	6811      	ldr	r1, [r2, #0]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	6852      	ldr	r2, [r2, #4]
 80078e2:	3a01      	subs	r2, #1
 80078e4:	0212      	lsls	r2, r2, #8
 80078e6:	430a      	orrs	r2, r1
 80078e8:	4934      	ldr	r1, [pc, #208]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	630b      	str	r3, [r1, #48]	; 0x30
 80078ee:	4b33      	ldr	r3, [pc, #204]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 80078f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078f2:	4b33      	ldr	r3, [pc, #204]	; (80079c0 <RCCEx_PLL3_Config+0x12c>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6892      	ldr	r2, [r2, #8]
 80078fa:	3a01      	subs	r2, #1
 80078fc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	68d2      	ldr	r2, [r2, #12]
 8007904:	3a01      	subs	r2, #1
 8007906:	0252      	lsls	r2, r2, #9
 8007908:	b292      	uxth	r2, r2
 800790a:	4311      	orrs	r1, r2
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	6912      	ldr	r2, [r2, #16]
 8007910:	3a01      	subs	r2, #1
 8007912:	0412      	lsls	r2, r2, #16
 8007914:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007918:	4311      	orrs	r1, r2
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6952      	ldr	r2, [r2, #20]
 800791e:	3a01      	subs	r2, #1
 8007920:	0612      	lsls	r2, r2, #24
 8007922:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007926:	430a      	orrs	r2, r1
 8007928:	4924      	ldr	r1, [pc, #144]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 800792a:	4313      	orrs	r3, r2
 800792c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800792e:	4b23      	ldr	r3, [pc, #140]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	f023 020c 	bic.w	r2, r3, #12
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	4920      	ldr	r1, [pc, #128]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 800793c:	4313      	orrs	r3, r2
 800793e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007940:	4b1e      	ldr	r3, [pc, #120]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 8007942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	491c      	ldr	r1, [pc, #112]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 800794a:	4313      	orrs	r3, r2
 800794c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800794e:	4b1b      	ldr	r3, [pc, #108]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 8007950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007952:	4a1a      	ldr	r2, [pc, #104]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 8007954:	f023 0310 	bic.w	r3, r3, #16
 8007958:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800795a:	4b18      	ldr	r3, [pc, #96]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 800795c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800795e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007962:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	69d2      	ldr	r2, [r2, #28]
 800796a:	00d2      	lsls	r2, r2, #3
 800796c:	4913      	ldr	r1, [pc, #76]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 800796e:	4313      	orrs	r3, r2
 8007970:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007972:	4b12      	ldr	r3, [pc, #72]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	4a11      	ldr	r2, [pc, #68]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 8007978:	f043 0310 	orr.w	r3, r3, #16
 800797c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800797e:	4b0f      	ldr	r3, [pc, #60]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a0e      	ldr	r2, [pc, #56]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 8007984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007988:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800798a:	f7fa f8ab 	bl	8001ae4 <HAL_GetTick>
 800798e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007990:	e008      	b.n	80079a4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007992:	f7fa f8a7 	bl	8001ae4 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e006      	b.n	80079b2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <RCCEx_PLL3_Config+0x128>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0f0      	beq.n	8007992 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	46020c00 	.word	0x46020c00
 80079c0:	80800000 	.word	0x80800000

080079c4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e03e      	b.n	8007a58 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d106      	bne.n	80079f4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f7f9 ff60 	bl	80018b4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3308      	adds	r3, #8
 80079fc:	4619      	mov	r1, r3
 80079fe:	4610      	mov	r0, r2
 8007a00:	f000 fcda 	bl	80083b8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6818      	ldr	r0, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	f000 fda2 	bl	8008558 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6858      	ldr	r0, [r3, #4]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	6879      	ldr	r1, [r7, #4]
 8007a22:	f000 fdeb 	bl	80085fc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	6892      	ldr	r2, [r2, #8]
 8007a2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	6892      	ldr	r2, [r2, #8]
 8007a3a:	f041 0101 	orr.w	r1, r1, #1
 8007a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007a42:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <HAL_SRAM_Init+0x9c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a06      	ldr	r2, [pc, #24]	; (8007a60 <HAL_SRAM_Init+0x9c>)
 8007a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a4c:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	420d0400 	.word	0x420d0400

08007a64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e042      	b.n	8007afc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7f9 fdc9 	bl	8001620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2224      	movs	r2, #36	; 0x24
 8007a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f022 0201 	bic.w	r2, r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f82c 	bl	8007b04 <UART_SetConfig>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d101      	bne.n	8007ab6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e022      	b.n	8007afc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f9c2 	bl	8007e48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ad2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ae2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0201 	orr.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fa49 	bl	8007f8c <UART_CheckIdleState>
 8007afa:	4603      	mov	r3, r0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b08:	b094      	sub	sp, #80	; 0x50
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	4b7e      	ldr	r3, [pc, #504]	; (8007d14 <UART_SetConfig+0x210>)
 8007b1a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	431a      	orrs	r2, r3
 8007b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4977      	ldr	r1, [pc, #476]	; (8007d18 <UART_SetConfig+0x214>)
 8007b3c:	4019      	ands	r1, r3
 8007b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b44:	430b      	orrs	r3, r1
 8007b46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b54:	68d9      	ldr	r1, [r3, #12]
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	ea40 0301 	orr.w	r3, r0, r1
 8007b5e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	4b6a      	ldr	r3, [pc, #424]	; (8007d14 <UART_SetConfig+0x210>)
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d009      	beq.n	8007b84 <UART_SetConfig+0x80>
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	4b69      	ldr	r3, [pc, #420]	; (8007d1c <UART_SetConfig+0x218>)
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d004      	beq.n	8007b84 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7c:	6a1a      	ldr	r2, [r3, #32]
 8007b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b80:	4313      	orrs	r3, r2
 8007b82:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007b8e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba2:	f023 000f 	bic.w	r0, r3, #15
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	ea40 0301 	orr.w	r3, r0, r1
 8007bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	4b59      	ldr	r3, [pc, #356]	; (8007d20 <UART_SetConfig+0x21c>)
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d102      	bne.n	8007bc4 <UART_SetConfig+0xc0>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bc2:	e029      	b.n	8007c18 <UART_SetConfig+0x114>
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	4b56      	ldr	r3, [pc, #344]	; (8007d24 <UART_SetConfig+0x220>)
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d102      	bne.n	8007bd4 <UART_SetConfig+0xd0>
 8007bce:	2302      	movs	r3, #2
 8007bd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bd2:	e021      	b.n	8007c18 <UART_SetConfig+0x114>
 8007bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	4b53      	ldr	r3, [pc, #332]	; (8007d28 <UART_SetConfig+0x224>)
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d102      	bne.n	8007be4 <UART_SetConfig+0xe0>
 8007bde:	2304      	movs	r3, #4
 8007be0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007be2:	e019      	b.n	8007c18 <UART_SetConfig+0x114>
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	4b50      	ldr	r3, [pc, #320]	; (8007d2c <UART_SetConfig+0x228>)
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d102      	bne.n	8007bf4 <UART_SetConfig+0xf0>
 8007bee:	2308      	movs	r3, #8
 8007bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bf2:	e011      	b.n	8007c18 <UART_SetConfig+0x114>
 8007bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	4b4d      	ldr	r3, [pc, #308]	; (8007d30 <UART_SetConfig+0x22c>)
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d102      	bne.n	8007c04 <UART_SetConfig+0x100>
 8007bfe:	2310      	movs	r3, #16
 8007c00:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c02:	e009      	b.n	8007c18 <UART_SetConfig+0x114>
 8007c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	4b42      	ldr	r3, [pc, #264]	; (8007d14 <UART_SetConfig+0x210>)
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d102      	bne.n	8007c14 <UART_SetConfig+0x110>
 8007c0e:	2320      	movs	r3, #32
 8007c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c12:	e001      	b.n	8007c18 <UART_SetConfig+0x114>
 8007c14:	2300      	movs	r3, #0
 8007c16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	4b3d      	ldr	r3, [pc, #244]	; (8007d14 <UART_SetConfig+0x210>)
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d005      	beq.n	8007c2e <UART_SetConfig+0x12a>
 8007c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	4b3d      	ldr	r3, [pc, #244]	; (8007d1c <UART_SetConfig+0x218>)
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	f040 8085 	bne.w	8007d38 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c30:	2200      	movs	r2, #0
 8007c32:	623b      	str	r3, [r7, #32]
 8007c34:	627a      	str	r2, [r7, #36]	; 0x24
 8007c36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007c3a:	f7fe fc6b 	bl	8006514 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c3e:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 80e8 	beq.w	8007e18 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	4a39      	ldr	r2, [pc, #228]	; (8007d34 <UART_SetConfig+0x230>)
 8007c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c52:	461a      	mov	r2, r3
 8007c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c5a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	4613      	mov	r3, r2
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	4413      	add	r3, r2
 8007c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d305      	bcc.n	8007c78 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d903      	bls.n	8007c80 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007c7e:	e048      	b.n	8007d12 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c82:	2200      	movs	r2, #0
 8007c84:	61bb      	str	r3, [r7, #24]
 8007c86:	61fa      	str	r2, [r7, #28]
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	4a29      	ldr	r2, [pc, #164]	; (8007d34 <UART_SetConfig+0x230>)
 8007c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2200      	movs	r2, #0
 8007c96:	613b      	str	r3, [r7, #16]
 8007c98:	617a      	str	r2, [r7, #20]
 8007c9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007ca2:	f7f8 fae7 	bl	8000274 <__aeabi_uldivmod>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4610      	mov	r0, r2
 8007cac:	4619      	mov	r1, r3
 8007cae:	f04f 0200 	mov.w	r2, #0
 8007cb2:	f04f 0300 	mov.w	r3, #0
 8007cb6:	020b      	lsls	r3, r1, #8
 8007cb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cbc:	0202      	lsls	r2, r0, #8
 8007cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cc0:	6849      	ldr	r1, [r1, #4]
 8007cc2:	0849      	lsrs	r1, r1, #1
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	4605      	mov	r5, r0
 8007cca:	eb12 0804 	adds.w	r8, r2, r4
 8007cce:	eb43 0905 	adc.w	r9, r3, r5
 8007cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	60bb      	str	r3, [r7, #8]
 8007cda:	60fa      	str	r2, [r7, #12]
 8007cdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ce0:	4640      	mov	r0, r8
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	f7f8 fac6 	bl	8000274 <__aeabi_uldivmod>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	4613      	mov	r3, r2
 8007cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cf6:	d308      	bcc.n	8007d0a <UART_SetConfig+0x206>
 8007cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cfe:	d204      	bcs.n	8007d0a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d06:	60da      	str	r2, [r3, #12]
 8007d08:	e003      	b.n	8007d12 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007d10:	e082      	b.n	8007e18 <UART_SetConfig+0x314>
 8007d12:	e081      	b.n	8007e18 <UART_SetConfig+0x314>
 8007d14:	46002400 	.word	0x46002400
 8007d18:	cfff69f3 	.word	0xcfff69f3
 8007d1c:	56002400 	.word	0x56002400
 8007d20:	40013800 	.word	0x40013800
 8007d24:	40004400 	.word	0x40004400
 8007d28:	40004800 	.word	0x40004800
 8007d2c:	40004c00 	.word	0x40004c00
 8007d30:	40005000 	.word	0x40005000
 8007d34:	08009704 	.word	0x08009704
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d40:	d13c      	bne.n	8007dbc <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d44:	2200      	movs	r2, #0
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	607a      	str	r2, [r7, #4]
 8007d4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d4e:	f7fe fbe1 	bl	8006514 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d52:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d05e      	beq.n	8007e18 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	4a39      	ldr	r2, [pc, #228]	; (8007e44 <UART_SetConfig+0x340>)
 8007d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d64:	461a      	mov	r2, r3
 8007d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d6c:	005a      	lsls	r2, r3, #1
 8007d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	085b      	lsrs	r3, r3, #1
 8007d74:	441a      	add	r2, r3
 8007d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d82:	2b0f      	cmp	r3, #15
 8007d84:	d916      	bls.n	8007db4 <UART_SetConfig+0x2b0>
 8007d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d8c:	d212      	bcs.n	8007db4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	f023 030f 	bic.w	r3, r3, #15
 8007d96:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9a:	085b      	lsrs	r3, r3, #1
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	f003 0307 	and.w	r3, r3, #7
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007da6:	4313      	orrs	r3, r2
 8007da8:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007db0:	60da      	str	r2, [r3, #12]
 8007db2:	e031      	b.n	8007e18 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007dba:	e02d      	b.n	8007e18 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	4693      	mov	fp, r2
 8007dc4:	4650      	mov	r0, sl
 8007dc6:	4659      	mov	r1, fp
 8007dc8:	f7fe fba4 	bl	8006514 <HAL_RCCEx_GetPeriphCLKFreq>
 8007dcc:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d021      	beq.n	8007e18 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	4a1a      	ldr	r2, [pc, #104]	; (8007e44 <UART_SetConfig+0x340>)
 8007dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dde:	461a      	mov	r2, r3
 8007de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	085b      	lsrs	r3, r3, #1
 8007dec:	441a      	add	r2, r3
 8007dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfa:	2b0f      	cmp	r3, #15
 8007dfc:	d909      	bls.n	8007e12 <UART_SetConfig+0x30e>
 8007dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e04:	d205      	bcs.n	8007e12 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60da      	str	r2, [r3, #12]
 8007e10:	e002      	b.n	8007e18 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e22:	2201      	movs	r2, #1
 8007e24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e30:	2200      	movs	r2, #0
 8007e32:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3750      	adds	r7, #80	; 0x50
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e42:	bf00      	nop
 8007e44:	08009704 	.word	0x08009704

08007e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eba:	f003 0308 	and.w	r3, r3, #8
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00a      	beq.n	8007ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007edc:	f003 0310 	and.w	r3, r3, #16
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00a      	beq.n	8007efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01a      	beq.n	8007f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f46:	d10a      	bne.n	8007f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00a      	beq.n	8007f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	605a      	str	r2, [r3, #4]
  }
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f9c:	f7f9 fda2 	bl	8001ae4 <HAL_GetTick>
 8007fa0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d10e      	bne.n	8007fce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f82f 	bl	8008022 <UART_WaitOnFlagUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e025      	b.n	800801a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d10e      	bne.n	8007ffa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f819 	bl	8008022 <UART_WaitOnFlagUntilTimeout>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e00f      	b.n	800801a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2220      	movs	r2, #32
 8008006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b09c      	sub	sp, #112	; 0x70
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	603b      	str	r3, [r7, #0]
 800802e:	4613      	mov	r3, r2
 8008030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008032:	e0a9      	b.n	8008188 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803a:	f000 80a5 	beq.w	8008188 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800803e:	f7f9 fd51 	bl	8001ae4 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800804a:	429a      	cmp	r2, r3
 800804c:	d302      	bcc.n	8008054 <UART_WaitOnFlagUntilTimeout+0x32>
 800804e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008050:	2b00      	cmp	r3, #0
 8008052:	d140      	bne.n	80080d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800805c:	e853 3f00 	ldrex	r3, [r3]
 8008060:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008064:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008068:	667b      	str	r3, [r7, #100]	; 0x64
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008074:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008076:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008078:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800807a:	e841 2300 	strex	r3, r2, [r1]
 800807e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1e6      	bne.n	8008054 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3308      	adds	r3, #8
 800808c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008090:	e853 3f00 	ldrex	r3, [r3]
 8008094:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008098:	f023 0301 	bic.w	r3, r3, #1
 800809c:	663b      	str	r3, [r7, #96]	; 0x60
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3308      	adds	r3, #8
 80080a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80080a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080ae:	e841 2300 	strex	r3, r2, [r1]
 80080b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1e5      	bne.n	8008086 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2220      	movs	r2, #32
 80080be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2220      	movs	r2, #32
 80080c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e069      	b.n	80081aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d051      	beq.n	8008188 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080f2:	d149      	bne.n	8008188 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008112:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	461a      	mov	r2, r3
 800811a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
 800811e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008124:	e841 2300 	strex	r3, r2, [r1]
 8008128:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e6      	bne.n	80080fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3308      	adds	r3, #8
 8008136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	e853 3f00 	ldrex	r3, [r3]
 800813e:	613b      	str	r3, [r7, #16]
   return(result);
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f023 0301 	bic.w	r3, r3, #1
 8008146:	66bb      	str	r3, [r7, #104]	; 0x68
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3308      	adds	r3, #8
 800814e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008150:	623a      	str	r2, [r7, #32]
 8008152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	69f9      	ldr	r1, [r7, #28]
 8008156:	6a3a      	ldr	r2, [r7, #32]
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	61bb      	str	r3, [r7, #24]
   return(result);
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e5      	bne.n	8008130 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2220      	movs	r2, #32
 8008168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2220      	movs	r2, #32
 8008170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2220      	movs	r2, #32
 8008178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e010      	b.n	80081aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	69da      	ldr	r2, [r3, #28]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	4013      	ands	r3, r2
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	429a      	cmp	r2, r3
 8008196:	bf0c      	ite	eq
 8008198:	2301      	moveq	r3, #1
 800819a:	2300      	movne	r3, #0
 800819c:	b2db      	uxtb	r3, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	f43f af46 	beq.w	8008034 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3770      	adds	r7, #112	; 0x70
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80081c4:	2302      	movs	r3, #2
 80081c6:	e027      	b.n	8008218 <HAL_UARTEx_DisableFifoMode+0x66>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2224      	movs	r2, #36	; 0x24
 80081d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f022 0201 	bic.w	r2, r2, #1
 80081ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80081f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2220      	movs	r2, #32
 800820a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008234:	2b01      	cmp	r3, #1
 8008236:	d101      	bne.n	800823c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008238:	2302      	movs	r3, #2
 800823a:	e02d      	b.n	8008298 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2224      	movs	r2, #36	; 0x24
 8008248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f022 0201 	bic.w	r2, r2, #1
 8008262:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	430a      	orrs	r2, r1
 8008276:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f84f 	bl	800831c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2220      	movs	r2, #32
 800828a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d101      	bne.n	80082b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082b4:	2302      	movs	r3, #2
 80082b6:	e02d      	b.n	8008314 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2224      	movs	r2, #36	; 0x24
 80082c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 0201 	bic.w	r2, r2, #1
 80082de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f811 	bl	800831c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008328:	2b00      	cmp	r3, #0
 800832a:	d108      	bne.n	800833e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800833c:	e031      	b.n	80083a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800833e:	2308      	movs	r3, #8
 8008340:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008342:	2308      	movs	r3, #8
 8008344:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	0e5b      	lsrs	r3, r3, #25
 800834e:	b2db      	uxtb	r3, r3
 8008350:	f003 0307 	and.w	r3, r3, #7
 8008354:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	0f5b      	lsrs	r3, r3, #29
 800835e:	b2db      	uxtb	r3, r3
 8008360:	f003 0307 	and.w	r3, r3, #7
 8008364:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	7b3a      	ldrb	r2, [r7, #12]
 800836a:	4911      	ldr	r1, [pc, #68]	; (80083b0 <UARTEx_SetNbDataToProcess+0x94>)
 800836c:	5c8a      	ldrb	r2, [r1, r2]
 800836e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008372:	7b3a      	ldrb	r2, [r7, #12]
 8008374:	490f      	ldr	r1, [pc, #60]	; (80083b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008376:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008378:	fb93 f3f2 	sdiv	r3, r3, r2
 800837c:	b29a      	uxth	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	7b7a      	ldrb	r2, [r7, #13]
 8008388:	4909      	ldr	r1, [pc, #36]	; (80083b0 <UARTEx_SetNbDataToProcess+0x94>)
 800838a:	5c8a      	ldrb	r2, [r1, r2]
 800838c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008390:	7b7a      	ldrb	r2, [r7, #13]
 8008392:	4908      	ldr	r1, [pc, #32]	; (80083b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008394:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008396:	fb93 f3f2 	sdiv	r3, r3, r2
 800839a:	b29a      	uxth	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	0800971c 	.word	0x0800971c
 80083b4:	08009724 	.word	0x08009724

080083b8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	6812      	ldr	r2, [r2, #0]
 80083d0:	f023 0101 	bic.w	r1, r3, #1
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	2b08      	cmp	r3, #8
 80083e0:	d102      	bne.n	80083e8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80083e2:	2340      	movs	r3, #64	; 0x40
 80083e4:	617b      	str	r3, [r7, #20]
 80083e6:	e001      	b.n	80083ec <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80083e8:	2300      	movs	r3, #0
 80083ea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80083f8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80083fe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008404:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800840a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008410:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8008416:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800841c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8008422:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8008428:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800842e:	4313      	orrs	r3, r2
 8008430:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	4313      	orrs	r3, r2
 800843a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	4313      	orrs	r3, r2
 8008444:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	4313      	orrs	r3, r2
 8008458:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800845a:	4b3e      	ldr	r3, [pc, #248]	; (8008554 <FMC_NORSRAM_Init+0x19c>)
 800845c:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008464:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800846c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8008474:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800847c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	43db      	mvns	r3, r3
 800848c:	ea02 0103 	and.w	r1, r2, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	4319      	orrs	r1, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084a6:	d10c      	bne.n	80084c2 <FMC_NORSRAM_Init+0x10a>
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d008      	beq.n	80084c2 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084bc:	431a      	orrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d006      	beq.n	80084d8 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d2:	431a      	orrs	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d12f      	bne.n	8008542 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	0c1b      	lsrs	r3, r3, #16
 80084e8:	041b      	lsls	r3, r3, #16
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80084ee:	431a      	orrs	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	d014      	beq.n	8008526 <FMC_NORSRAM_Init+0x16e>
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	d819      	bhi.n	8008534 <FMC_NORSRAM_Init+0x17c>
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <FMC_NORSRAM_Init+0x152>
 8008504:	2b02      	cmp	r3, #2
 8008506:	d007      	beq.n	8008518 <FMC_NORSRAM_Init+0x160>
 8008508:	e014      	b.n	8008534 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	621a      	str	r2, [r3, #32]
        break;
 8008516:	e015      	b.n	8008544 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a1b      	ldr	r3, [r3, #32]
 800851c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	621a      	str	r2, [r3, #32]
        break;
 8008524:	e00e      	b.n	8008544 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	621a      	str	r2, [r3, #32]
        break;
 8008532:	e007      	b.n	8008544 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	621a      	str	r2, [r3, #32]
        break;
 8008540:	e000      	b.n	8008544 <FMC_NORSRAM_Init+0x18c>
    }
  }
 8008542:	bf00      	nop

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	371c      	adds	r7, #28
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	0008fb7f 	.word	0x0008fb7f

08008558 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	1c5a      	adds	r2, r3, #1
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	011b      	lsls	r3, r3, #4
 8008578:	431a      	orrs	r2, r3
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	021b      	lsls	r3, r3, #8
 8008580:	431a      	orrs	r2, r3
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	079b      	lsls	r3, r3, #30
 8008588:	431a      	orrs	r2, r3
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	041b      	lsls	r3, r3, #16
 8008590:	431a      	orrs	r2, r3
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	3b01      	subs	r3, #1
 8008598:	051b      	lsls	r3, r3, #20
 800859a:	431a      	orrs	r2, r3
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	3b02      	subs	r3, #2
 80085a2:	061b      	lsls	r3, r3, #24
 80085a4:	ea42 0103 	orr.w	r1, r2, r3
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	69db      	ldr	r3, [r3, #28]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	3201      	adds	r2, #1
 80085b0:	4319      	orrs	r1, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085c4:	d113      	bne.n	80085ee <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085ce:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	3b01      	subs	r3, #1
 80085d6:	051b      	lsls	r3, r3, #20
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	4313      	orrs	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	431a      	orrs	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	371c      	adds	r7, #28
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008610:	d121      	bne.n	8008656 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800861a:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	6819      	ldr	r1, [r3, #0]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	011b      	lsls	r3, r3, #4
 8008628:	4319      	orrs	r1, r3
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	021b      	lsls	r3, r3, #8
 8008630:	4319      	orrs	r1, r3
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	079b      	lsls	r3, r3, #30
 8008638:	4319      	orrs	r1, r3
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	4319      	orrs	r1, r3
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	041b      	lsls	r3, r3, #16
 8008646:	430b      	orrs	r3, r1
 8008648:	ea42 0103 	orr.w	r1, r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008654:	e005      	b.n	8008662 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800865e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008670:	b480      	push	{r7}
 8008672:	b08b      	sub	sp, #44	; 0x2c
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	fa93 f3a3 	rbit	r3, r3
 800868a:	613b      	str	r3, [r7, #16]
  return result;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008696:	2320      	movs	r3, #32
 8008698:	e003      	b.n	80086a2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	fab3 f383 	clz	r3, r3
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	2103      	movs	r1, #3
 80086a6:	fa01 f303 	lsl.w	r3, r1, r3
 80086aa:	43db      	mvns	r3, r3
 80086ac:	401a      	ands	r2, r3
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	fa93 f3a3 	rbit	r3, r3
 80086b8:	61fb      	str	r3, [r7, #28]
  return result;
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80086c4:	2320      	movs	r3, #32
 80086c6:	e003      	b.n	80086d0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	fab3 f383 	clz	r3, r3
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	fa01 f303 	lsl.w	r3, r1, r3
 80086d8:	431a      	orrs	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	601a      	str	r2, [r3, #0]
}
 80086de:	bf00      	nop
 80086e0:	372c      	adds	r7, #44	; 0x2c
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b085      	sub	sp, #20
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	43db      	mvns	r3, r3
 80086fe:	401a      	ands	r2, r3
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	6879      	ldr	r1, [r7, #4]
 8008704:	fb01 f303 	mul.w	r3, r1, r3
 8008708:	431a      	orrs	r2, r3
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	605a      	str	r2, [r3, #4]
}
 800870e:	bf00      	nop
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800871a:	b480      	push	{r7}
 800871c:	b08b      	sub	sp, #44	; 0x2c
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	689a      	ldr	r2, [r3, #8]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	fa93 f3a3 	rbit	r3, r3
 8008734:	613b      	str	r3, [r7, #16]
  return result;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008740:	2320      	movs	r3, #32
 8008742:	e003      	b.n	800874c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	fab3 f383 	clz	r3, r3
 800874a:	b2db      	uxtb	r3, r3
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	2103      	movs	r1, #3
 8008750:	fa01 f303 	lsl.w	r3, r1, r3
 8008754:	43db      	mvns	r3, r3
 8008756:	401a      	ands	r2, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	fa93 f3a3 	rbit	r3, r3
 8008762:	61fb      	str	r3, [r7, #28]
  return result;
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800876e:	2320      	movs	r3, #32
 8008770:	e003      	b.n	800877a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	fab3 f383 	clz	r3, r3
 8008778:	b2db      	uxtb	r3, r3
 800877a:	005b      	lsls	r3, r3, #1
 800877c:	6879      	ldr	r1, [r7, #4]
 800877e:	fa01 f303 	lsl.w	r3, r1, r3
 8008782:	431a      	orrs	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008788:	bf00      	nop
 800878a:	372c      	adds	r7, #44	; 0x2c
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008794:	b480      	push	{r7}
 8008796:	b08b      	sub	sp, #44	; 0x2c
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	68da      	ldr	r2, [r3, #12]
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	fa93 f3a3 	rbit	r3, r3
 80087ae:	613b      	str	r3, [r7, #16]
  return result;
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80087ba:	2320      	movs	r3, #32
 80087bc:	e003      	b.n	80087c6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	fab3 f383 	clz	r3, r3
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	005b      	lsls	r3, r3, #1
 80087c8:	2103      	movs	r1, #3
 80087ca:	fa01 f303 	lsl.w	r3, r1, r3
 80087ce:	43db      	mvns	r3, r3
 80087d0:	401a      	ands	r2, r3
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	fa93 f3a3 	rbit	r3, r3
 80087dc:	61fb      	str	r3, [r7, #28]
  return result;
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80087e8:	2320      	movs	r3, #32
 80087ea:	e003      	b.n	80087f4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	fab3 f383 	clz	r3, r3
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	fa01 f303 	lsl.w	r3, r1, r3
 80087fc:	431a      	orrs	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	60da      	str	r2, [r3, #12]
}
 8008802:	bf00      	nop
 8008804:	372c      	adds	r7, #44	; 0x2c
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800880e:	b480      	push	{r7}
 8008810:	b08b      	sub	sp, #44	; 0x2c
 8008812:	af00      	add	r7, sp, #0
 8008814:	60f8      	str	r0, [r7, #12]
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6a1a      	ldr	r2, [r3, #32]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	fa93 f3a3 	rbit	r3, r3
 8008828:	613b      	str	r3, [r7, #16]
  return result;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008834:	2320      	movs	r3, #32
 8008836:	e003      	b.n	8008840 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	fab3 f383 	clz	r3, r3
 800883e:	b2db      	uxtb	r3, r3
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	210f      	movs	r1, #15
 8008844:	fa01 f303 	lsl.w	r3, r1, r3
 8008848:	43db      	mvns	r3, r3
 800884a:	401a      	ands	r2, r3
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	fa93 f3a3 	rbit	r3, r3
 8008856:	61fb      	str	r3, [r7, #28]
  return result;
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008862:	2320      	movs	r3, #32
 8008864:	e003      	b.n	800886e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	fab3 f383 	clz	r3, r3
 800886c:	b2db      	uxtb	r3, r3
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	fa01 f303 	lsl.w	r3, r1, r3
 8008876:	431a      	orrs	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800887c:	bf00      	nop
 800887e:	372c      	adds	r7, #44	; 0x2c
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008888:	b480      	push	{r7}
 800888a:	b08b      	sub	sp, #44	; 0x2c
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	0a1b      	lsrs	r3, r3, #8
 800889c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	fa93 f3a3 	rbit	r3, r3
 80088a4:	613b      	str	r3, [r7, #16]
  return result;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80088b0:	2320      	movs	r3, #32
 80088b2:	e003      	b.n	80088bc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	fab3 f383 	clz	r3, r3
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	210f      	movs	r1, #15
 80088c0:	fa01 f303 	lsl.w	r3, r1, r3
 80088c4:	43db      	mvns	r3, r3
 80088c6:	401a      	ands	r2, r3
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	0a1b      	lsrs	r3, r3, #8
 80088cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	fa93 f3a3 	rbit	r3, r3
 80088d4:	61fb      	str	r3, [r7, #28]
  return result;
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80088e0:	2320      	movs	r3, #32
 80088e2:	e003      	b.n	80088ec <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	fab3 f383 	clz	r3, r3
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	6879      	ldr	r1, [r7, #4]
 80088f0:	fa01 f303 	lsl.w	r3, r1, r3
 80088f4:	431a      	orrs	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80088fa:	bf00      	nop
 80088fc:	372c      	adds	r7, #44	; 0x2c
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b08a      	sub	sp, #40	; 0x28
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	fa93 f3a3 	rbit	r3, r3
 800891c:	617b      	str	r3, [r7, #20]
  return result;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <LL_GPIO_Init+0x26>
    return 32U;
 8008928:	2320      	movs	r3, #32
 800892a:	e003      	b.n	8008934 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	fab3 f383 	clz	r3, r3
 8008932:	b2db      	uxtb	r3, r3
 8008934:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008936:	e050      	b.n	80089da <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	2101      	movs	r1, #1
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	fa01 f303 	lsl.w	r3, r1, r3
 8008944:	4013      	ands	r3, r2
 8008946:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d042      	beq.n	80089d4 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	461a      	mov	r2, r3
 8008954:	6a39      	ldr	r1, [r7, #32]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff fe8a 	bl	8008670 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d003      	beq.n	800896c <LL_GPIO_Init+0x66>
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	2b02      	cmp	r3, #2
 800896a:	d106      	bne.n	800897a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	461a      	mov	r2, r3
 8008972:	6a39      	ldr	r1, [r7, #32]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff fed0 	bl	800871a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	461a      	mov	r2, r3
 8008980:	6a39      	ldr	r1, [r7, #32]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff ff06 	bl	8008794 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	2b02      	cmp	r3, #2
 800898e:	d121      	bne.n	80089d4 <LL_GPIO_Init+0xce>
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	fa93 f3a3 	rbit	r3, r3
 800899a:	60bb      	str	r3, [r7, #8]
  return result;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <LL_GPIO_Init+0xa4>
    return 32U;
 80089a6:	2320      	movs	r3, #32
 80089a8:	e003      	b.n	80089b2 <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	fab3 f383 	clz	r3, r3
 80089b0:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 80089b2:	2b07      	cmp	r3, #7
 80089b4:	d807      	bhi.n	80089c6 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	461a      	mov	r2, r3
 80089bc:	6a39      	ldr	r1, [r7, #32]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7ff ff25 	bl	800880e <LL_GPIO_SetAFPin_0_7>
 80089c4:	e006      	b.n	80089d4 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	461a      	mov	r2, r3
 80089cc:	6a39      	ldr	r1, [r7, #32]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7ff ff5a 	bl	8008888 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	3301      	adds	r3, #1
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	fa22 f303 	lsr.w	r3, r2, r3
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1a7      	bne.n	8008938 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d003      	beq.n	80089f8 <LL_GPIO_Init+0xf2>
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d107      	bne.n	8008a08 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	6819      	ldr	r1, [r3, #0]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	461a      	mov	r2, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7ff fe71 	bl	80086ea <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3728      	adds	r7, #40	; 0x28
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a12:	b084      	sub	sp, #16
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	f107 001c 	add.w	r0, r7, #28
 8008a20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fd8f 	bl	8009554 <USB_CoreReset>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d106      	bne.n	8008a4e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	639a      	str	r2, [r3, #56]	; 0x38
 8008a4c:	e005      	b.n	8008a5a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a66:	b004      	add	sp, #16
 8008a68:	4770      	bx	lr
	...

08008a6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	4613      	mov	r3, r2
 8008a78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d165      	bne.n	8008b4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	4a41      	ldr	r2, [pc, #260]	; (8008b88 <USB_SetTurnaroundTime+0x11c>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d906      	bls.n	8008a96 <USB_SetTurnaroundTime+0x2a>
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4a40      	ldr	r2, [pc, #256]	; (8008b8c <USB_SetTurnaroundTime+0x120>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d202      	bcs.n	8008a96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008a90:	230f      	movs	r3, #15
 8008a92:	617b      	str	r3, [r7, #20]
 8008a94:	e062      	b.n	8008b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	4a3c      	ldr	r2, [pc, #240]	; (8008b8c <USB_SetTurnaroundTime+0x120>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d306      	bcc.n	8008aac <USB_SetTurnaroundTime+0x40>
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	4a3b      	ldr	r2, [pc, #236]	; (8008b90 <USB_SetTurnaroundTime+0x124>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d202      	bcs.n	8008aac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008aa6:	230e      	movs	r3, #14
 8008aa8:	617b      	str	r3, [r7, #20]
 8008aaa:	e057      	b.n	8008b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	4a38      	ldr	r2, [pc, #224]	; (8008b90 <USB_SetTurnaroundTime+0x124>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d306      	bcc.n	8008ac2 <USB_SetTurnaroundTime+0x56>
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	4a37      	ldr	r2, [pc, #220]	; (8008b94 <USB_SetTurnaroundTime+0x128>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d202      	bcs.n	8008ac2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008abc:	230d      	movs	r3, #13
 8008abe:	617b      	str	r3, [r7, #20]
 8008ac0:	e04c      	b.n	8008b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	4a33      	ldr	r2, [pc, #204]	; (8008b94 <USB_SetTurnaroundTime+0x128>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d306      	bcc.n	8008ad8 <USB_SetTurnaroundTime+0x6c>
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	4a32      	ldr	r2, [pc, #200]	; (8008b98 <USB_SetTurnaroundTime+0x12c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d802      	bhi.n	8008ad8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008ad2:	230c      	movs	r3, #12
 8008ad4:	617b      	str	r3, [r7, #20]
 8008ad6:	e041      	b.n	8008b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	4a2f      	ldr	r2, [pc, #188]	; (8008b98 <USB_SetTurnaroundTime+0x12c>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d906      	bls.n	8008aee <USB_SetTurnaroundTime+0x82>
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	4a2e      	ldr	r2, [pc, #184]	; (8008b9c <USB_SetTurnaroundTime+0x130>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d802      	bhi.n	8008aee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008ae8:	230b      	movs	r3, #11
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	e036      	b.n	8008b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	4a2a      	ldr	r2, [pc, #168]	; (8008b9c <USB_SetTurnaroundTime+0x130>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d906      	bls.n	8008b04 <USB_SetTurnaroundTime+0x98>
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	4a29      	ldr	r2, [pc, #164]	; (8008ba0 <USB_SetTurnaroundTime+0x134>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d802      	bhi.n	8008b04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008afe:	230a      	movs	r3, #10
 8008b00:	617b      	str	r3, [r7, #20]
 8008b02:	e02b      	b.n	8008b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	4a26      	ldr	r2, [pc, #152]	; (8008ba0 <USB_SetTurnaroundTime+0x134>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d906      	bls.n	8008b1a <USB_SetTurnaroundTime+0xae>
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	4a25      	ldr	r2, [pc, #148]	; (8008ba4 <USB_SetTurnaroundTime+0x138>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d202      	bcs.n	8008b1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b14:	2309      	movs	r3, #9
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	e020      	b.n	8008b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	4a21      	ldr	r2, [pc, #132]	; (8008ba4 <USB_SetTurnaroundTime+0x138>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d306      	bcc.n	8008b30 <USB_SetTurnaroundTime+0xc4>
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	4a20      	ldr	r2, [pc, #128]	; (8008ba8 <USB_SetTurnaroundTime+0x13c>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d802      	bhi.n	8008b30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	e015      	b.n	8008b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	4a1d      	ldr	r2, [pc, #116]	; (8008ba8 <USB_SetTurnaroundTime+0x13c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d906      	bls.n	8008b46 <USB_SetTurnaroundTime+0xda>
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	4a1c      	ldr	r2, [pc, #112]	; (8008bac <USB_SetTurnaroundTime+0x140>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d202      	bcs.n	8008b46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008b40:	2307      	movs	r3, #7
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e00a      	b.n	8008b5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008b46:	2306      	movs	r3, #6
 8008b48:	617b      	str	r3, [r7, #20]
 8008b4a:	e007      	b.n	8008b5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008b4c:	79fb      	ldrb	r3, [r7, #7]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d102      	bne.n	8008b58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008b52:	2309      	movs	r3, #9
 8008b54:	617b      	str	r3, [r7, #20]
 8008b56:	e001      	b.n	8008b5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008b58:	2309      	movs	r3, #9
 8008b5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	029b      	lsls	r3, r3, #10
 8008b70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008b74:	431a      	orrs	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	00d8acbf 	.word	0x00d8acbf
 8008b8c:	00e4e1c0 	.word	0x00e4e1c0
 8008b90:	00f42400 	.word	0x00f42400
 8008b94:	01067380 	.word	0x01067380
 8008b98:	011a499f 	.word	0x011a499f
 8008b9c:	01312cff 	.word	0x01312cff
 8008ba0:	014ca43f 	.word	0x014ca43f
 8008ba4:	016e3600 	.word	0x016e3600
 8008ba8:	01a6ab1f 	.word	0x01a6ab1f
 8008bac:	01e84800 	.word	0x01e84800

08008bb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f023 0201 	bic.w	r2, r3, #1
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	460b      	mov	r3, r1
 8008bdc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008bee:	78fb      	ldrb	r3, [r7, #3]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d115      	bne.n	8008c20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c00:	2001      	movs	r0, #1
 8008c02:	f7f8 ff7b 	bl	8001afc <HAL_Delay>
      ms++;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fc11 	bl	8009434 <USB_GetMode>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d01e      	beq.n	8008c56 <USB_SetCurrentMode+0x84>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b31      	cmp	r3, #49	; 0x31
 8008c1c:	d9f0      	bls.n	8008c00 <USB_SetCurrentMode+0x2e>
 8008c1e:	e01a      	b.n	8008c56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d115      	bne.n	8008c52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c32:	2001      	movs	r0, #1
 8008c34:	f7f8 ff62 	bl	8001afc <HAL_Delay>
      ms++;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fbf8 	bl	8009434 <USB_GetMode>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d005      	beq.n	8008c56 <USB_SetCurrentMode+0x84>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2b31      	cmp	r3, #49	; 0x31
 8008c4e:	d9f0      	bls.n	8008c32 <USB_SetCurrentMode+0x60>
 8008c50:	e001      	b.n	8008c56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e005      	b.n	8008c62 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b32      	cmp	r3, #50	; 0x32
 8008c5a:	d101      	bne.n	8008c60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e000      	b.n	8008c62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
	...

08008c6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b086      	sub	sp, #24
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008c86:	2300      	movs	r3, #0
 8008c88:	613b      	str	r3, [r7, #16]
 8008c8a:	e009      	b.n	8008ca0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	3340      	adds	r3, #64	; 0x40
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	2200      	movs	r2, #0
 8008c98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	613b      	str	r3, [r7, #16]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	2b0e      	cmp	r3, #14
 8008ca4:	d9f2      	bls.n	8008c8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d11c      	bne.n	8008ce6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cba:	f043 0302 	orr.w	r3, r3, #2
 8008cbe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	e005      	b.n	8008cf2 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d04:	4619      	mov	r1, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	680b      	ldr	r3, [r1, #0]
 8008d10:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d12:	2103      	movs	r1, #3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f95b 	bl	8008fd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d1a:	2110      	movs	r1, #16
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f8f3 	bl	8008f08 <USB_FlushTxFifo>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f91f 	bl	8008f70 <USB_FlushRxFifo>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d42:	461a      	mov	r2, r3
 8008d44:	2300      	movs	r3, #0
 8008d46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4e:	461a      	mov	r2, r3
 8008d50:	2300      	movs	r3, #0
 8008d52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d60:	2300      	movs	r3, #0
 8008d62:	613b      	str	r3, [r7, #16]
 8008d64:	e043      	b.n	8008dee <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d7c:	d118      	bne.n	8008db0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10a      	bne.n	8008d9a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	015a      	lsls	r2, r3, #5
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d90:	461a      	mov	r2, r3
 8008d92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	e013      	b.n	8008dc2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da6:	461a      	mov	r2, r3
 8008da8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dac:	6013      	str	r3, [r2, #0]
 8008dae:	e008      	b.n	8008dc2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	015a      	lsls	r2, r3, #5
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dce:	461a      	mov	r2, r3
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de0:	461a      	mov	r2, r3
 8008de2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008de6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	3301      	adds	r3, #1
 8008dec:	613b      	str	r3, [r7, #16]
 8008dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d3b7      	bcc.n	8008d66 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008df6:	2300      	movs	r3, #0
 8008df8:	613b      	str	r3, [r7, #16]
 8008dfa:	e043      	b.n	8008e84 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e12:	d118      	bne.n	8008e46 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10a      	bne.n	8008e30 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e26:	461a      	mov	r2, r3
 8008e28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	e013      	b.n	8008e58 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	015a      	lsls	r2, r3, #5
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	e008      	b.n	8008e58 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e52:	461a      	mov	r2, r3
 8008e54:	2300      	movs	r3, #0
 8008e56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e64:	461a      	mov	r2, r3
 8008e66:	2300      	movs	r3, #0
 8008e68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e76:	461a      	mov	r2, r3
 8008e78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	3301      	adds	r3, #1
 8008e82:	613b      	str	r3, [r7, #16]
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d3b7      	bcc.n	8008dfc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008eac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d105      	bne.n	8008ec0 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	f043 0210 	orr.w	r2, r3, #16
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	699a      	ldr	r2, [r3, #24]
 8008ec4:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <USB_DevInit+0x298>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d005      	beq.n	8008ede <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	f043 0208 	orr.w	r2, r3, #8
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d107      	bne.n	8008ef4 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008eec:	f043 0304 	orr.w	r3, r3, #4
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f00:	b004      	add	sp, #16
 8008f02:	4770      	bx	lr
 8008f04:	803c3800 	.word	0x803c3800

08008f08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4a13      	ldr	r2, [pc, #76]	; (8008f6c <USB_FlushTxFifo+0x64>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d901      	bls.n	8008f28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e01b      	b.n	8008f60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	daf2      	bge.n	8008f16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	019b      	lsls	r3, r3, #6
 8008f38:	f043 0220 	orr.w	r2, r3, #32
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3301      	adds	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4a08      	ldr	r2, [pc, #32]	; (8008f6c <USB_FlushTxFifo+0x64>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d901      	bls.n	8008f52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e006      	b.n	8008f60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b20      	cmp	r3, #32
 8008f5c:	d0f0      	beq.n	8008f40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	00030d40 	.word	0x00030d40

08008f70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	4a11      	ldr	r2, [pc, #68]	; (8008fcc <USB_FlushRxFifo+0x5c>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d901      	bls.n	8008f8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e018      	b.n	8008fc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	daf2      	bge.n	8008f7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2210      	movs	r2, #16
 8008f9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	4a08      	ldr	r2, [pc, #32]	; (8008fcc <USB_FlushRxFifo+0x5c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d901      	bls.n	8008fb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e006      	b.n	8008fc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	f003 0310 	and.w	r3, r3, #16
 8008fba:	2b10      	cmp	r3, #16
 8008fbc:	d0f0      	beq.n	8008fa0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	00030d40 	.word	0x00030d40

08008fd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	68f9      	ldr	r1, [r7, #12]
 8008fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009002:	b480      	push	{r7}
 8009004:	b087      	sub	sp, #28
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	f003 0306 	and.w	r3, r3, #6
 800901a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d102      	bne.n	8009028 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009022:	2300      	movs	r3, #0
 8009024:	75fb      	strb	r3, [r7, #23]
 8009026:	e00a      	b.n	800903e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b02      	cmp	r3, #2
 800902c:	d002      	beq.n	8009034 <USB_GetDevSpeed+0x32>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b06      	cmp	r3, #6
 8009032:	d102      	bne.n	800903a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009034:	2302      	movs	r3, #2
 8009036:	75fb      	strb	r3, [r7, #23]
 8009038:	e001      	b.n	800903e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800903a:	230f      	movs	r3, #15
 800903c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800903e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009040:	4618      	mov	r0, r3
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	785b      	ldrb	r3, [r3, #1]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d14a      	bne.n	8009100 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800907e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009082:	f040 8086 	bne.w	8009192 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	015a      	lsls	r2, r3, #5
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	4413      	add	r3, r2
 8009090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	7812      	ldrb	r2, [r2, #0]
 800909a:	0151      	lsls	r1, r2, #5
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	440a      	add	r2, r1
 80090a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	7812      	ldrb	r2, [r2, #0]
 80090be:	0151      	lsls	r1, r2, #5
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	440a      	add	r2, r1
 80090c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3301      	adds	r3, #1
 80090d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80090da:	4293      	cmp	r3, r2
 80090dc:	d902      	bls.n	80090e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	75fb      	strb	r3, [r7, #23]
          break;
 80090e2:	e056      	b.n	8009192 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090fc:	d0e7      	beq.n	80090ce <USB_EPStopXfer+0x82>
 80090fe:	e048      	b.n	8009192 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	4413      	add	r3, r2
 800910a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009118:	d13b      	bne.n	8009192 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	7812      	ldrb	r2, [r2, #0]
 800912e:	0151      	lsls	r1, r2, #5
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	440a      	add	r2, r1
 8009134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009138:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800913c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	015a      	lsls	r2, r3, #5
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	4413      	add	r3, r2
 8009148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	7812      	ldrb	r2, [r2, #0]
 8009152:	0151      	lsls	r1, r2, #5
 8009154:	693a      	ldr	r2, [r7, #16]
 8009156:	440a      	add	r2, r1
 8009158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800915c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009160:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f242 7210 	movw	r2, #10000	; 0x2710
 800916e:	4293      	cmp	r3, r2
 8009170:	d902      	bls.n	8009178 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	75fb      	strb	r3, [r7, #23]
          break;
 8009176:	e00c      	b.n	8009192 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	4413      	add	r3, r2
 8009182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800918c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009190:	d0e7      	beq.n	8009162 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009192:	7dfb      	ldrb	r3, [r7, #23]
}
 8009194:	4618      	mov	r0, r3
 8009196:	371c      	adds	r7, #28
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b089      	sub	sp, #36	; 0x24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	4611      	mov	r1, r2
 80091ac:	461a      	mov	r2, r3
 80091ae:	460b      	mov	r3, r1
 80091b0:	71fb      	strb	r3, [r7, #7]
 80091b2:	4613      	mov	r3, r2
 80091b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80091be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d123      	bne.n	800920e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80091c6:	88bb      	ldrh	r3, [r7, #4]
 80091c8:	3303      	adds	r3, #3
 80091ca:	089b      	lsrs	r3, r3, #2
 80091cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80091ce:	2300      	movs	r3, #0
 80091d0:	61bb      	str	r3, [r7, #24]
 80091d2:	e018      	b.n	8009206 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80091d4:	79fb      	ldrb	r3, [r7, #7]
 80091d6:	031a      	lsls	r2, r3, #12
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e0:	461a      	mov	r2, r3
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	3301      	adds	r3, #1
 80091ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	3301      	adds	r3, #1
 80091f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	3301      	adds	r3, #1
 80091f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	3301      	adds	r3, #1
 80091fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	3301      	adds	r3, #1
 8009204:	61bb      	str	r3, [r7, #24]
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	429a      	cmp	r2, r3
 800920c:	d3e2      	bcc.n	80091d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3724      	adds	r7, #36	; 0x24
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800921c:	b480      	push	{r7}
 800921e:	b08b      	sub	sp, #44	; 0x2c
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	4613      	mov	r3, r2
 8009228:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009232:	88fb      	ldrh	r3, [r7, #6]
 8009234:	089b      	lsrs	r3, r3, #2
 8009236:	b29b      	uxth	r3, r3
 8009238:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800923a:	88fb      	ldrh	r3, [r7, #6]
 800923c:	f003 0303 	and.w	r3, r3, #3
 8009240:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009242:	2300      	movs	r3, #0
 8009244:	623b      	str	r3, [r7, #32]
 8009246:	e014      	b.n	8009272 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	601a      	str	r2, [r3, #0]
    pDest++;
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	3301      	adds	r3, #1
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	3301      	adds	r3, #1
 800925e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	3301      	adds	r3, #1
 8009264:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009268:	3301      	adds	r3, #1
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	3301      	adds	r3, #1
 8009270:	623b      	str	r3, [r7, #32]
 8009272:	6a3a      	ldr	r2, [r7, #32]
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	429a      	cmp	r2, r3
 8009278:	d3e6      	bcc.n	8009248 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800927a:	8bfb      	ldrh	r3, [r7, #30]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d01e      	beq.n	80092be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009280:	2300      	movs	r3, #0
 8009282:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800928a:	461a      	mov	r2, r3
 800928c:	f107 0310 	add.w	r3, r7, #16
 8009290:	6812      	ldr	r2, [r2, #0]
 8009292:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	b2db      	uxtb	r3, r3
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	fa22 f303 	lsr.w	r3, r2, r3
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	701a      	strb	r2, [r3, #0]
      i++;
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	3301      	adds	r3, #1
 80092aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	3301      	adds	r3, #1
 80092b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80092b2:	8bfb      	ldrh	r3, [r7, #30]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80092b8:	8bfb      	ldrh	r3, [r7, #30]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1ea      	bne.n	8009294 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	372c      	adds	r7, #44	; 0x2c
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092e6:	f023 0303 	bic.w	r3, r3, #3
 80092ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092fa:	f043 0302 	orr.w	r3, r3, #2
 80092fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800930e:	b480      	push	{r7}
 8009310:	b085      	sub	sp, #20
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	4013      	ands	r3, r2
 8009324:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009326:	68fb      	ldr	r3, [r7, #12]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	4013      	ands	r3, r2
 8009356:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	0c1b      	lsrs	r3, r3, #16
}
 800935c:	4618      	mov	r0, r3
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009384:	69db      	ldr	r3, [r3, #28]
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	4013      	ands	r3, r2
 800938a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	b29b      	uxth	r3, r3
}
 8009390:	4618      	mov	r0, r3
 8009392:	3714      	adds	r7, #20
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80093ac:	78fb      	ldrb	r3, [r7, #3]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c2:	695b      	ldr	r3, [r3, #20]
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	4013      	ands	r3, r2
 80093c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80093ca:	68bb      	ldr	r3, [r7, #8]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80093d8:	b480      	push	{r7}
 80093da:	b087      	sub	sp, #28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	f003 030f 	and.w	r3, r3, #15
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	fa22 f303 	lsr.w	r3, r2, r3
 8009408:	01db      	lsls	r3, r3, #7
 800940a:	b2db      	uxtb	r3, r3
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	4313      	orrs	r3, r2
 8009410:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009412:	78fb      	ldrb	r3, [r7, #3]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	4413      	add	r3, r2
 800941a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	4013      	ands	r3, r2
 8009424:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009426:	68bb      	ldr	r3, [r7, #8]
}
 8009428:	4618      	mov	r0, r3
 800942a:	371c      	adds	r7, #28
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	f003 0301 	and.w	r3, r3, #1
}
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800946a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800946e:	f023 0307 	bic.w	r3, r3, #7
 8009472:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009486:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
	...

08009498 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009498:	b480      	push	{r7}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	460b      	mov	r3, r1
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	333c      	adds	r3, #60	; 0x3c
 80094ae:	3304      	adds	r3, #4
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	4a26      	ldr	r2, [pc, #152]	; (8009550 <USB_EP0_OutStart+0xb8>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d90a      	bls.n	80094d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094cc:	d101      	bne.n	80094d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	e037      	b.n	8009542 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d8:	461a      	mov	r2, r3
 80094da:	2300      	movs	r3, #0
 80094dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009500:	f043 0318 	orr.w	r3, r3, #24
 8009504:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009514:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009518:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800951a:	7afb      	ldrb	r3, [r7, #11]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d10f      	bne.n	8009540 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009526:	461a      	mov	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800953a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800953e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	371c      	adds	r7, #28
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	4f54300a 	.word	0x4f54300a

08009554 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	3301      	adds	r3, #1
 8009564:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4a13      	ldr	r2, [pc, #76]	; (80095b8 <USB_CoreReset+0x64>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d901      	bls.n	8009572 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e01b      	b.n	80095aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	daf2      	bge.n	8009560 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800957a:	2300      	movs	r3, #0
 800957c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	f043 0201 	orr.w	r2, r3, #1
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	3301      	adds	r3, #1
 800958e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4a09      	ldr	r2, [pc, #36]	; (80095b8 <USB_CoreReset+0x64>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d901      	bls.n	800959c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e006      	b.n	80095aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	f003 0301 	and.w	r3, r3, #1
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d0f0      	beq.n	800958a <USB_CoreReset+0x36>

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	00030d40 	.word	0x00030d40

080095bc <__libc_init_array>:
 80095bc:	b570      	push	{r4, r5, r6, lr}
 80095be:	4d0d      	ldr	r5, [pc, #52]	; (80095f4 <__libc_init_array+0x38>)
 80095c0:	2600      	movs	r6, #0
 80095c2:	4c0d      	ldr	r4, [pc, #52]	; (80095f8 <__libc_init_array+0x3c>)
 80095c4:	1b64      	subs	r4, r4, r5
 80095c6:	10a4      	asrs	r4, r4, #2
 80095c8:	42a6      	cmp	r6, r4
 80095ca:	d109      	bne.n	80095e0 <__libc_init_array+0x24>
 80095cc:	4d0b      	ldr	r5, [pc, #44]	; (80095fc <__libc_init_array+0x40>)
 80095ce:	2600      	movs	r6, #0
 80095d0:	4c0b      	ldr	r4, [pc, #44]	; (8009600 <__libc_init_array+0x44>)
 80095d2:	f000 f81f 	bl	8009614 <_init>
 80095d6:	1b64      	subs	r4, r4, r5
 80095d8:	10a4      	asrs	r4, r4, #2
 80095da:	42a6      	cmp	r6, r4
 80095dc:	d105      	bne.n	80095ea <__libc_init_array+0x2e>
 80095de:	bd70      	pop	{r4, r5, r6, pc}
 80095e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095e4:	3601      	adds	r6, #1
 80095e6:	4798      	blx	r3
 80095e8:	e7ee      	b.n	80095c8 <__libc_init_array+0xc>
 80095ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ee:	3601      	adds	r6, #1
 80095f0:	4798      	blx	r3
 80095f2:	e7f2      	b.n	80095da <__libc_init_array+0x1e>
 80095f4:	08009734 	.word	0x08009734
 80095f8:	08009734 	.word	0x08009734
 80095fc:	08009734 	.word	0x08009734
 8009600:	08009738 	.word	0x08009738

08009604 <memset>:
 8009604:	4402      	add	r2, r0
 8009606:	4603      	mov	r3, r0
 8009608:	4293      	cmp	r3, r2
 800960a:	d100      	bne.n	800960e <memset+0xa>
 800960c:	4770      	bx	lr
 800960e:	f803 1b01 	strb.w	r1, [r3], #1
 8009612:	e7f9      	b.n	8009608 <memset+0x4>

08009614 <_init>:
 8009614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009616:	bf00      	nop
 8009618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800961a:	bc08      	pop	{r3}
 800961c:	469e      	mov	lr, r3
 800961e:	4770      	bx	lr

08009620 <_fini>:
 8009620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009622:	bf00      	nop
 8009624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009626:	bc08      	pop	{r3}
 8009628:	469e      	mov	lr, r3
 800962a:	4770      	bx	lr
