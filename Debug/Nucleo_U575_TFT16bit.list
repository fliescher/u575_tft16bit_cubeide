
Nucleo_U575_TFT16bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ea0  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080090d4  080090d4  000190d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080091d4  080091d4  000191d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080091dc  080091dc  000191dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080091e0  080091e0  000191e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00025809  20000000  080091e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006a4  2002580c  0802e9ed  0004580c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20025eb0  0802e9ed  00045eb0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00045809  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d389  00000000  00000000  0004583f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000366f  00000000  00000000  00062bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013f8  00000000  00000000  00066238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000012d0  00000000  00000000  00067630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003af80  00000000  00000000  00068900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000198cc  00000000  00000000  000a3880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00164272  00000000  00000000  000bd14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002213be  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005550  00000000  00000000  00221410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2002580c 	.word	0x2002580c
 8000250:	00000000 	.word	0x00000000
 8000254:	080090bc 	.word	0x080090bc

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20025810 	.word	0x20025810
 8000270:	080090bc 	.word	0x080090bc

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <FMCSRAMInit>:

	// set to the maximum of the two
	timing->AddressSetupTime = (addset1 > addset2) ? addset1 : addset2;
}

void FMCSRAMInit(ExternalSRAMSpecStruct * sramSpec, uint8_t bank) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b0a0      	sub	sp, #128	; 0x80
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
	/* FMC configuration */
	SRAM_HandleTypeDef sram;
	FMC_NORSRAM_TimingTypeDef timing = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2220      	movs	r2, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f008 fd7f 	bl	80090ac <memset>

	sram.Instance = FMC_NORSRAM_DEVICE;
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <FMCSRAMInit+0xc4>)
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
	sram.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80005b2:	4b2a      	ldr	r3, [pc, #168]	; (800065c <FMCSRAMInit+0xc8>)
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (bank==1) {
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d102      	bne.n	80005c2 <FMCSRAMInit+0x2e>
		sram.Init.NSBank = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
 80005c0:	e005      	b.n	80005ce <FMCSRAMInit+0x3a>
	} else {
		sram.Init.NSBank = 1 << (bank-1);
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	2201      	movs	r2, #1
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if (sramSpec -> dataSize == 8) {
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b08      	cmp	r3, #8
 80005d4:	d102      	bne.n	80005dc <FMCSRAMInit+0x48>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80005d6:	2300      	movs	r3, #0
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005da:	e008      	b.n	80005ee <FMCSRAMInit+0x5a>
	} else if (sramSpec -> dataSize == 16) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b10      	cmp	r3, #16
 80005e2:	d102      	bne.n	80005ea <FMCSRAMInit+0x56>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005e4:	2310      	movs	r3, #16
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005e8:	e001      	b.n	80005ee <FMCSRAMInit+0x5a>
	} else {
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 80005ea:	2320      	movs	r3, #32
 80005ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	sram.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	637b      	str	r3, [r7, #52]	; 0x34
	sram.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80005f2:	2300      	movs	r3, #0
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
	sram.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	643b      	str	r3, [r7, #64]	; 0x40
	sram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
	sram.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80005fe:	2300      	movs	r3, #0
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
	sram.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
	sram.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	653b      	str	r3, [r7, #80]	; 0x50
	sram.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	657b      	str	r3, [r7, #84]	; 0x54
	sram.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	65bb      	str	r3, [r7, #88]	; 0x58
	sram.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	65fb      	str	r3, [r7, #92]	; 0x5c
	sram.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000618:	2300      	movs	r3, #0
 800061a:	663b      	str	r3, [r7, #96]	; 0x60
	sram.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 800061c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000620:	667b      	str	r3, [r7, #100]	; 0x64
	sram.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000622:	2300      	movs	r3, #0
 8000624:	66bb      	str	r3, [r7, #104]	; 0x68

	/* Timing */
	timing.BusTurnAroundDuration = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
	timing.AccessMode = FMC_ACCESS_MODE_A;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	; 0x24

	timing.AddressSetupTime = 6; //MAX_ADDSET_TIME;
 800062e:	2306      	movs	r3, #6
 8000630:	60bb      	str	r3, [r7, #8]
	timing.DataSetupTime = 6;//MAX_DATAST_TIME;
 8000632:	2306      	movs	r3, #6
 8000634:	613b      	str	r3, [r7, #16]

	//FMCComputeAddsetDatast(sramSpec, &timing);

	if (HAL_SRAM_Init(&sram, &timing, NULL) != HAL_OK)
 8000636:	f107 0108 	add.w	r1, r7, #8
 800063a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800063e:	2200      	movs	r2, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f006 ff13 	bl	800746c <HAL_SRAM_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <FMCSRAMInit+0xbc>
	{
		FMC_Error_Handler( );
 800064c:	f000 f808 	bl	8000660 <FMC_Error_Handler>
	}

#if MEM_SWAPPING
	HAL_EnableFMCMemorySwapping();
#endif
}
 8000650:	bf00      	nop
 8000652:	3780      	adds	r7, #128	; 0x80
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	420d0400 	.word	0x420d0400
 800065c:	420d0504 	.word	0x420d0504

08000660 <FMC_Error_Handler>:

void FMC_Error_Handler() {
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
	...

08000670 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800067a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800067e:	4909      	ldr	r1, [pc, #36]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4313      	orrs	r3, r2
 8000684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800068a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4013      	ands	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000694:	68fb      	ldr	r3, [r7, #12]
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	46020c00 	.word	0x46020c00

080006a8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80006b6:	4909      	ldr	r1, [pc, #36]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4013      	ands	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006cc:	68fb      	ldr	r3, [r7, #12]
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	46020c00 	.word	0x46020c00

080006e0 <ST7789V_SEND_COMMAND>:
#define ST7789V_Ax          18
//#define ST7789V_SEND_COMMAND(command)   FMC_LCD_8BIT_SEND_COMMAND(ST7789V_SRAM_BANK, command)              //maybe this needs to be changed to 8bit as ST7789V always reads commands on [D0:D7]
//#define ST7789V_SEND_DATA(data)         FMC_LCD_16BIT_SEND_DATA(ST7789V_SRAM_BANK, ST7789V_Ax, data)

static void ST7789V_SEND_COMMAND(uint16_t cmd)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
    ST7789_REG = cmd;
 80006ea:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80006ee:	88fb      	ldrh	r3, [r7, #6]
 80006f0:	8013      	strh	r3, [r2, #0]

}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <ST7789V_SEND_DATA>:
static void ST7789V_SEND_DATA(uint16_t data)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	80fb      	strh	r3, [r7, #6]
    ST7789_RAM = data;
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <ST7789V_SEND_DATA+0x1c>)
 800070c:	88fb      	ldrh	r3, [r7, #6]
 800070e:	8013      	strh	r3, [r2, #0]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	60080000 	.word	0x60080000

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f000 feb9 	bl	800149c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f86b 	bl	8000804 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800072e:	f000 f8cd 	bl	80008cc <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000732:	f000 fa35 	bl	8000ba0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000736:	f000 f8d7 	bl	80008e8 <MX_ADC1_Init>
  MX_UCPD1_Init();
 800073a:	f000 f919 	bl	8000970 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 800073e:	f000 f94d 	bl	80009dc <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000742:	f000 f997 	bl	8000a74 <MX_USB_OTG_FS_PCD_Init>
  MX_FMC_Init();
 8000746:	f000 f9c1 	bl	8000acc <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  ST7789V_init();
 800074a:	f000 fb37 	bl	8000dbc <ST7789V_init>
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 800074e:	202c      	movs	r0, #44	; 0x2c
 8000750:	f7ff ffc6 	bl	80006e0 <ST7789V_SEND_COMMAND>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int round_num = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 8000758:	2201      	movs	r2, #1
 800075a:	2180      	movs	r1, #128	; 0x80
 800075c:	4826      	ldr	r0, [pc, #152]	; (80007f8 <main+0xd8>)
 800075e:	f001 fe03 	bl	8002368 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000766:	f000 ff1d 	bl	80015a4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	4822      	ldr	r0, [pc, #136]	; (80007f8 <main+0xd8>)
 8000770:	f001 fdfa 	bl	8002368 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 8000774:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000778:	f000 ff14 	bl	80015a4 <HAL_Delay>


	  if(round_num == 0)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d111      	bne.n	80007a6 <main+0x86>
	  {
		  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	e006      	b.n	8000796 <main+0x76>
		  {
			  ST7789V_SEND_DATA(COLOR_RED);
 8000788:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800078c:	f7ff ffb8 	bl	8000700 <ST7789V_SEND_DATA>
		  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	3301      	adds	r3, #1
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800079c:	dbf4      	blt.n	8000788 <main+0x68>
		  }
		  round_num++;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	e019      	b.n	80007da <main+0xba>
	   		  ST7789V_SEND_DATA(COLOR_WHITE);
	   	  }
	   	  round_num++;
	  }
*/
	  else if(round_num == 1)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d116      	bne.n	80007da <main+0xba>
	  {
	  	  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	e009      	b.n	80007c6 <main+0xa6>
	   	  {
	   		  ST7789V_SEND_DATA(kuhmuh[i]);
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <main+0xdc>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ffa0 	bl	8000700 <ST7789V_SEND_DATA>
	  	  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80007cc:	dbf1      	blt.n	80007b2 <main+0x92>
	   	  }
	  	  HAL_Delay(3000);
 80007ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007d2:	f000 fee7 	bl	80015a4 <HAL_Delay>
	   	  round_num = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
	  	  	  {
	  	  		 ST7789V_SEND_DATA(COLOR_BLUE);
	  	  	  }
	  	  	  */

	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	2104      	movs	r1, #4
 80007de:	4808      	ldr	r0, [pc, #32]	; (8000800 <main+0xe0>)
 80007e0:	f001 fdc2 	bl	8002368 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80007e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e8:	f000 fedc 	bl	80015a4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2104      	movs	r1, #4
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <main+0xe0>)
 80007f2:	f001 fdb9 	bl	8002368 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 80007f6:	e7af      	b.n	8000758 <main+0x38>
 80007f8:	42020400 	.word	0x42020400
 80007fc:	20000000 	.word	0x20000000
 8000800:	42021800 	.word	0x42021800

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b09e      	sub	sp, #120	; 0x78
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	2260      	movs	r2, #96	; 0x60
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f008 fc4a 	bl	80090ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	463b      	mov	r3, r7
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
 8000826:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000828:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800082c:	f002 fe36 	bl	800349c <HAL_PWREx_ControlVoltageScaling>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000836:	f000 fa9d 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800083a:	2332      	movs	r3, #50	; 0x32
 800083c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084a:	2310      	movs	r3, #16
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800084e:	2301      	movs	r3, #1
 8000850:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000852:	2310      	movs	r3, #16
 8000854:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800085a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085c:	2302      	movs	r3, #2
 800085e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000860:	2301      	movs	r3, #1
 8000862:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000868:	2301      	movs	r3, #1
 800086a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800086c:	2350      	movs	r3, #80	; 0x50
 800086e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000870:	2302      	movs	r3, #2
 8000872:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000878:	2302      	movs	r3, #2
 800087a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 800087c:	2300      	movs	r3, #0
 800087e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0318 	add.w	r3, r7, #24
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fef9 	bl	8003680 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000894:	f000 fa6e 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	231f      	movs	r3, #31
 800089a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089c:	2303      	movs	r3, #3
 800089e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	2104      	movs	r1, #4
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 fdb9 	bl	800442c <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008c0:	f000 fa58 	bl	8000d74 <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	3778      	adds	r7, #120	; 0x78
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80008d0:	f002 fec6 	bl	8003660 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80008d4:	2002      	movs	r0, #2
 80008d6:	f002 fe63 	bl	80035a0 <HAL_PWREx_ConfigSupply>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80008e0:	f000 fa48 	bl	8000d74 <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_ADC1_Init+0x80>)
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <MX_ADC1_Init+0x84>)
 80008f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_ADC1_Init+0x80>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_ADC1_Init+0x80>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_ADC1_Init+0x80>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_ADC1_Init+0x80>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_ADC1_Init+0x80>)
 800090c:	2204      	movs	r2, #4
 800090e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_ADC1_Init+0x80>)
 8000912:	2200      	movs	r2, #0
 8000914:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_ADC1_Init+0x80>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_ADC1_Init+0x80>)
 8000920:	2201      	movs	r2, #1
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_ADC1_Init+0x80>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_ADC1_Init+0x80>)
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_ADC1_Init+0x80>)
 8000936:	2200      	movs	r2, #0
 8000938:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_ADC1_Init+0x80>)
 800093c:	2200      	movs	r2, #0
 800093e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_ADC1_Init+0x80>)
 8000942:	2200      	movs	r2, #0
 8000944:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_ADC1_Init+0x80>)
 8000948:	2200      	movs	r2, #0
 800094a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_ADC1_Init+0x80>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_ADC1_Init+0x80>)
 8000956:	f000 ff25 	bl	80017a4 <HAL_ADC_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000960:	f000 fa08 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20025828 	.word	0x20025828
 800096c:	42028000 	.word	0x42028000

08000970 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	463b      	mov	r3, r7
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000986:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800098a:	f7ff fe8d 	bl	80006a8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800098e:	2002      	movs	r0, #2
 8000990:	f7ff fe6e 	bl	8000670 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fe6b 	bl	8000670 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800099a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800099e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009a0:	2303      	movs	r3, #3
 80009a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	4809      	ldr	r0, [pc, #36]	; (80009d4 <MX_UCPD1_Init+0x64>)
 80009ae:	f007 fcfe 	bl	80083ae <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009b8:	2303      	movs	r3, #3
 80009ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	463b      	mov	r3, r7
 80009c2:	4619      	mov	r1, r3
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_UCPD1_Init+0x68>)
 80009c6:	f007 fcf2 	bl	80083ae <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	42020400 	.word	0x42020400
 80009d8:	42020000 	.word	0x42020000

080009dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 80009e2:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <MX_USART1_UART_Init+0x94>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a24:	4811      	ldr	r0, [pc, #68]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 8000a26:	f006 fd71 	bl	800750c <HAL_UART_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a30:	f000 f9a0 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 8000a38:	f007 f948 	bl	8007ccc <HAL_UARTEx_SetTxFifoThreshold>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a42:	f000 f997 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 8000a4a:	f007 f97d 	bl	8007d48 <HAL_UARTEx_SetRxFifoThreshold>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a54:	f000 f98e 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_USART1_UART_Init+0x90>)
 8000a5a:	f007 f8fe 	bl	8007c5a <HAL_UARTEx_DisableFifoMode>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a64:	f000 f986 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200258b4 	.word	0x200258b4
 8000a70:	40013800 	.word	0x40013800

08000a74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a7a:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x54>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a80:	2206      	movs	r2, #6
 8000a82:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a86:	2202      	movs	r2, #2
 8000a88:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ab0:	f001 fc72 	bl	8002398 <HAL_PCD_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8000aba:	f000 f95b 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20025944 	.word	0x20025944
 8000ac8:	42040000 	.word	0x42040000

08000acc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2220      	movs	r2, #32
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 fae7 	bl	80090ac <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000ae0:	4a2d      	ldr	r2, [pc, #180]	; (8000b98 <MX_FMC_Init+0xcc>)
 8000ae2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000ae6:	4a2d      	ldr	r2, [pc, #180]	; (8000b9c <MX_FMC_Init+0xd0>)
 8000ae8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000aea:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000af6:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000afe:	2210      	movs	r2, #16
 8000b00:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000b02:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000b16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000b3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b40:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 7;
 8000b56:	2307      	movs	r3, #7
 8000b58:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 3;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 3;
 8000b62:	2303      	movs	r3, #3
 8000b64:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000b66:	230f      	movs	r3, #15
 8000b68:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000b6e:	2311      	movs	r3, #17
 8000b70:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b76:	463b      	mov	r3, r7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_FMC_Init+0xc8>)
 8000b7e:	f006 fc75 	bl	800746c <HAL_SRAM_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_FMC_Init+0xc0>
  {
    Error_Handler( );
 8000b88:	f000 f8f4 	bl	8000d74 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20025e50 	.word	0x20025e50
 8000b98:	420d0400 	.word	0x420d0400
 8000b9c:	420d0504 	.word	0x420d0504

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb6:	4b69      	ldr	r3, [pc, #420]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bbc:	4a67      	ldr	r2, [pc, #412]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bc6:	4b65      	ldr	r3, [pc, #404]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd4:	4b61      	ldr	r3, [pc, #388]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bda:	4a60      	ldr	r2, [pc, #384]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000be4:	4b5d      	ldr	r3, [pc, #372]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b5a      	ldr	r3, [pc, #360]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bf8:	4a58      	ldr	r2, [pc, #352]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c02:	4b56      	ldr	r3, [pc, #344]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c10:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c16:	4a51      	ldr	r2, [pc, #324]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c20:	4b4e      	ldr	r3, [pc, #312]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c2e:	4b4b      	ldr	r3, [pc, #300]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c34:	4a49      	ldr	r2, [pc, #292]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c3e:	4b47      	ldr	r3, [pc, #284]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c52:	4a42      	ldr	r2, [pc, #264]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c5c:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	483c      	ldr	r0, [pc, #240]	; (8000d60 <MX_GPIO_Init+0x1c0>)
 8000c70:	f001 fb7a 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2104      	movs	r1, #4
 8000c78:	483a      	ldr	r0, [pc, #232]	; (8000d64 <MX_GPIO_Init+0x1c4>)
 8000c7a:	f001 fb75 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2180      	movs	r1, #128	; 0x80
 8000c82:	4839      	ldr	r0, [pc, #228]	; (8000d68 <MX_GPIO_Init+0x1c8>)
 8000c84:	f001 fb70 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	21a0      	movs	r1, #160	; 0xa0
 8000c8c:	4837      	ldr	r0, [pc, #220]	; (8000d6c <MX_GPIO_Init+0x1cc>)
 8000c8e:	f001 fb6b 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FMC_RESET_Pin */
  GPIO_InitStruct.Pin = FMC_RESET_Pin;
 8000c92:	2304      	movs	r3, #4
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FMC_RESET_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	482d      	ldr	r0, [pc, #180]	; (8000d60 <MX_GPIO_Init+0x1c0>)
 8000caa:	f001 f985 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cb4:	4b2e      	ldr	r3, [pc, #184]	; (8000d70 <MX_GPIO_Init+0x1d0>)
 8000cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4829      	ldr	r0, [pc, #164]	; (8000d68 <MX_GPIO_Init+0x1c8>)
 8000cc4:	f001 f978 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000cc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4823      	ldr	r0, [pc, #140]	; (8000d6c <MX_GPIO_Init+0x1cc>)
 8000cde:	f001 f96b 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	481a      	ldr	r0, [pc, #104]	; (8000d64 <MX_GPIO_Init+0x1c4>)
 8000cfa:	f001 f95d 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	4814      	ldr	r0, [pc, #80]	; (8000d68 <MX_GPIO_Init+0x1c8>)
 8000d16:	f001 f94f 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000d1a:	2320      	movs	r3, #32
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480e      	ldr	r0, [pc, #56]	; (8000d6c <MX_GPIO_Init+0x1cc>)
 8000d32:	f001 f941 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d42:	2302      	movs	r3, #2
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4807      	ldr	r0, [pc, #28]	; (8000d6c <MX_GPIO_Init+0x1cc>)
 8000d4e:	f001 f933 	bl	8001fb8 <HAL_GPIO_Init>

}
 8000d52:	bf00      	nop
 8000d54:	3730      	adds	r7, #48	; 0x30
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	46020c00 	.word	0x46020c00
 8000d60:	42021000 	.word	0x42021000
 8000d64:	42021800 	.word	0x42021800
 8000d68:	42020800 	.word	0x42020800
 8000d6c:	42020400 	.word	0x42020400
 8000d70:	10210000 	.word	0x10210000

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>

08000d7e <ST7789V_SEND_COMMAND>:
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	80fb      	strh	r3, [r7, #6]
    ST7789_REG = cmd;
 8000d88:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	8013      	strh	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <ST7789V_SEND_DATA>:
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
    ST7789_RAM = data;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <ST7789V_SEND_DATA+0x1c>)
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	8013      	strh	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	60080000 	.word	0x60080000

08000dbc <ST7789V_init>:
	/* invert area */
	ST7789V_SEND_COMMAND(ST7789V_INVON);
}

void ST7789V_init(void)
 {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
   ExternalSRAMSpecStruct ST7789VSpec = {
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	f8c3 2003 	str.w	r2, [r3, #3]
 8000dcc:	2310      	movs	r3, #16
 8000dce:	703b      	strb	r3, [r7, #0]
 8000dd0:	2332      	movs	r3, #50	; 0x32
 8000dd2:	713b      	strb	r3, [r7, #4]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	71bb      	strb	r3, [r7, #6]
		   //.tCycWrite = 66,
		   .writeOnly = 1

   };

   FMCSRAMInit(&ST7789VSpec, ST7789V_SRAM_BANK);
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2101      	movs	r1, #1
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fbd9 	bl	8000594 <FMCSRAMInit>

   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2104      	movs	r1, #4
 8000de6:	4877      	ldr	r0, [pc, #476]	; (8000fc4 <ST7789V_init+0x208>)
 8000de8:	f001 fabe 	bl	8002368 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f000 fbd9 	bl	80015a4 <HAL_Delay>
      HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2104      	movs	r1, #4
 8000df6:	4873      	ldr	r0, [pc, #460]	; (8000fc4 <ST7789V_init+0x208>)
 8000df8:	f001 fab6 	bl	8002368 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8000dfc:	200a      	movs	r0, #10
 8000dfe:	f000 fbd1 	bl	80015a4 <HAL_Delay>
      HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2104      	movs	r1, #4
 8000e06:	486f      	ldr	r0, [pc, #444]	; (8000fc4 <ST7789V_init+0x208>)
 8000e08:	f001 faae 	bl	8002368 <HAL_GPIO_WritePin>
      HAL_Delay(120);
 8000e0c:	2078      	movs	r0, #120	; 0x78
 8000e0e:	f000 fbc9 	bl	80015a4 <HAL_Delay>


      ST7789V_SEND_COMMAND(ST7789V_SLPOUT);
 8000e12:	2011      	movs	r0, #17
 8000e14:	f7ff ffb3 	bl	8000d7e <ST7789V_SEND_COMMAND>
      HAL_Delay(120);
 8000e18:	2078      	movs	r0, #120	; 0x78
 8000e1a:	f000 fbc3 	bl	80015a4 <HAL_Delay>

      ST7789V_SEND_COMMAND(ST7789V_MADCTL); //Memory data acccess control
 8000e1e:	2036      	movs	r0, #54	; 0x36
 8000e20:	f7ff ffad 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff ffb9 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PORCTRL); //Porch Setting
 8000e2a:	20b2      	movs	r0, #178	; 0xb2
 8000e2c:	f7ff ffa7 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x0C);
 8000e30:	200c      	movs	r0, #12
 8000e32:	f7ff ffb3 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0C);
 8000e36:	200c      	movs	r0, #12
 8000e38:	f7ff ffb0 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff ffad 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x33);
 8000e42:	2033      	movs	r0, #51	; 0x33
 8000e44:	f7ff ffaa 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x33);
 8000e48:	2033      	movs	r0, #51	; 0x33
 8000e4a:	f7ff ffa7 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_GCTRL); //Gate Control
 8000e4e:	20b7      	movs	r0, #183	; 0xb7
 8000e50:	f7ff ff95 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x70); //VGH, VGL
 8000e54:	2070      	movs	r0, #112	; 0x70
 8000e56:	f7ff ffa1 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VCOMS);
 8000e5a:	20bb      	movs	r0, #187	; 0xbb
 8000e5c:	f7ff ff8f 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x3A);
 8000e60:	203a      	movs	r0, #58	; 0x3a
 8000e62:	f7ff ff9b 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_LCMCTRL);
 8000e66:	20c0      	movs	r0, #192	; 0xc0
 8000e68:	f7ff ff89 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x2C);
 8000e6c:	202c      	movs	r0, #44	; 0x2c
 8000e6e:	f7ff ff95 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VDVVRHEN);
 8000e72:	20c2      	movs	r0, #194	; 0xc2
 8000e74:	f7ff ff83 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x01);
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff ff8f 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VRHS);
 8000e7e:	20c3      	movs	r0, #195	; 0xc3
 8000e80:	f7ff ff7d 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x14);
 8000e84:	2014      	movs	r0, #20
 8000e86:	f7ff ff89 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VDVS);
 8000e8a:	20c4      	movs	r0, #196	; 0xc4
 8000e8c:	f7ff ff77 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x20);
 8000e90:	2020      	movs	r0, #32
 8000e92:	f7ff ff83 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_FRCTRL2);
 8000e96:	20c6      	movs	r0, #198	; 0xc6
 8000e98:	f7ff ff71 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x0F); //60Hz 0A
 8000e9c:	200f      	movs	r0, #15
 8000e9e:	f7ff ff7d 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PWCTRL1);
 8000ea2:	20d0      	movs	r0, #208	; 0xd0
 8000ea4:	f7ff ff6b 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xA4);
 8000ea8:	20a4      	movs	r0, #164	; 0xa4
 8000eaa:	f7ff ff77 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0xA1); //AVDD VCL
 8000eae:	20a1      	movs	r0, #161	; 0xa1
 8000eb0:	f7ff ff74 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PVGAMCTRL);
 8000eb4:	20e0      	movs	r0, #224	; 0xe0
 8000eb6:	f7ff ff62 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xD0);
 8000eba:	20d0      	movs	r0, #208	; 0xd0
 8000ebc:	f7ff ff6e 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x07);
 8000ec0:	2007      	movs	r0, #7
 8000ec2:	f7ff ff6b 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0D);
 8000ec6:	200d      	movs	r0, #13
 8000ec8:	f7ff ff68 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000ecc:	2009      	movs	r0, #9
 8000ece:	f7ff ff65 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x08);
 8000ed2:	2008      	movs	r0, #8
 8000ed4:	f7ff ff62 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x25);
 8000ed8:	2025      	movs	r0, #37	; 0x25
 8000eda:	f7ff ff5f 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x28);
 8000ede:	2028      	movs	r0, #40	; 0x28
 8000ee0:	f7ff ff5c 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x53);
 8000ee4:	2053      	movs	r0, #83	; 0x53
 8000ee6:	f7ff ff59 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x39);
 8000eea:	2039      	movs	r0, #57	; 0x39
 8000eec:	f7ff ff56 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x12);
 8000ef0:	2012      	movs	r0, #18
 8000ef2:	f7ff ff53 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0B);
 8000ef6:	200b      	movs	r0, #11
 8000ef8:	f7ff ff50 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000efc:	200a      	movs	r0, #10
 8000efe:	f7ff ff4d 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x17);
 8000f02:	2017      	movs	r0, #23
 8000f04:	f7ff ff4a 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x34);
 8000f08:	2034      	movs	r0, #52	; 0x34
 8000f0a:	f7ff ff47 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_NVGAMCTRL);
 8000f0e:	20e1      	movs	r0, #225	; 0xe1
 8000f10:	f7ff ff35 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xD0);
 8000f14:	20d0      	movs	r0, #208	; 0xd0
 8000f16:	f7ff ff41 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x07);
 8000f1a:	2007      	movs	r0, #7
 8000f1c:	f7ff ff3e 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0D);
 8000f20:	200d      	movs	r0, #13
 8000f22:	f7ff ff3b 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000f26:	2009      	movs	r0, #9
 8000f28:	f7ff ff38 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000f2c:	2009      	movs	r0, #9
 8000f2e:	f7ff ff35 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x25);
 8000f32:	2025      	movs	r0, #37	; 0x25
 8000f34:	f7ff ff32 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x29);
 8000f38:	2029      	movs	r0, #41	; 0x29
 8000f3a:	f7ff ff2f 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x35);
 8000f3e:	2035      	movs	r0, #53	; 0x35
 8000f40:	f7ff ff2c 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x39);
 8000f44:	2039      	movs	r0, #57	; 0x39
 8000f46:	f7ff ff29 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x13);
 8000f4a:	2013      	movs	r0, #19
 8000f4c:	f7ff ff26 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000f50:	200a      	movs	r0, #10
 8000f52:	f7ff ff23 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000f56:	200a      	movs	r0, #10
 8000f58:	f7ff ff20 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x16);
 8000f5c:	2016      	movs	r0, #22
 8000f5e:	f7ff ff1d 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x34);
 8000f62:	2034      	movs	r0, #52	; 0x34
 8000f64:	f7ff ff1a 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_INVON);
 8000f68:	2021      	movs	r0, #33	; 0x21
 8000f6a:	f7ff ff08 	bl	8000d7e <ST7789V_SEND_COMMAND>

      ST7789V_SEND_COMMAND(ST7789V_COLMOD);
 8000f6e:	203a      	movs	r0, #58	; 0x3a
 8000f70:	f7ff ff05 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x55); //65K colors, 16 bit/px
 8000f74:	2055      	movs	r0, #85	; 0x55
 8000f76:	f7ff ff11 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_CASET);
 8000f7a:	202a      	movs	r0, #42	; 0x2a
 8000f7c:	f7ff feff 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff ff0b 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff ff08 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff ff05 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0xEF);
 8000f92:	20ef      	movs	r0, #239	; 0xef
 8000f94:	f7ff ff02 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_RASET);
 8000f98:	202b      	movs	r0, #43	; 0x2b
 8000f9a:	f7ff fef0 	bl	8000d7e <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fefc 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff fef9 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x01);
 8000faa:	2001      	movs	r0, #1
 8000fac:	f7ff fef6 	bl	8000d9c <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x3F);
 8000fb0:	203f      	movs	r0, #63	; 0x3f
 8000fb2:	f7ff fef3 	bl	8000d9c <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_DISPON);
 8000fb6:	2029      	movs	r0, #41	; 0x29
 8000fb8:	f7ff fee1 	bl	8000d7e <ST7789V_SEND_COMMAND>
//      ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 }
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	42021000 	.word	0x42021000

08000fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_MspInit+0x34>)
 8000fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fd4:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <HAL_MspInit+0x34>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_MspInit+0x34>)
 8000fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000fec:	2004      	movs	r0, #4
 8000fee:	f000 ffa3 	bl	8001f38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	46020c00 	.word	0x46020c00

08001000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0bc      	sub	sp, #240	; 0xf0
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	22c8      	movs	r2, #200	; 0xc8
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f008 f843 	bl	80090ac <memset>
  if(hadc->Instance==ADC1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a24      	ldr	r2, [pc, #144]	; (80010bc <HAL_ADC_MspInit+0xbc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d140      	bne.n	80010b2 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001030:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800103c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001040:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fdc5 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001054:	f7ff fe8e 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 800105a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800105e:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 8001060:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001064:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 800106a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800106e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 8001078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800107c:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_ADC_MspInit+0xc0>)
 8001088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001094:	2304      	movs	r3, #4
 8001096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109a:	2303      	movs	r3, #3
 800109c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <HAL_ADC_MspInit+0xc4>)
 80010ae:	f000 ff83 	bl	8001fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	37f0      	adds	r7, #240	; 0xf0
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	42028000 	.word	0x42028000
 80010c0:	46020c00 	.word	0x46020c00
 80010c4:	42020800 	.word	0x42020800

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0bc      	sub	sp, #240	; 0xf0
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	22c8      	movs	r2, #200	; 0xc8
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f007 ffdf 	bl	80090ac <memset>
  if(huart->Instance==USART1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a26      	ldr	r2, [pc, #152]	; (800118c <HAL_UART_MspInit+0xc4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d145      	bne.n	8001184 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010f8:	f04f 0201 	mov.w	r2, #1
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001104:	2300      	movs	r3, #0
 8001106:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4618      	mov	r0, r3
 800110e:	f003 fd63 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001118:	f7ff fe2c 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_UART_MspInit+0xc8>)
 800111e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001122:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <HAL_UART_MspInit+0xc8>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_UART_MspInit+0xc8>)
 800112e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_UART_MspInit+0xc8>)
 800113c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001140:	4a13      	ldr	r2, [pc, #76]	; (8001190 <HAL_UART_MspInit+0xc8>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_UART_MspInit+0xc8>)
 800114c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001158:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800115c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001172:	2307      	movs	r3, #7
 8001174:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800117c:	4619      	mov	r1, r3
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_UART_MspInit+0xcc>)
 8001180:	f000 ff1a 	bl	8001fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001184:	bf00      	nop
 8001186:	37f0      	adds	r7, #240	; 0xf0
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40013800 	.word	0x40013800
 8001190:	46020c00 	.word	0x46020c00
 8001194:	42020000 	.word	0x42020000

08001198 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0be      	sub	sp, #248	; 0xf8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b0:	f107 0318 	add.w	r3, r7, #24
 80011b4:	22c8      	movs	r2, #200	; 0xc8
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f007 ff77 	bl	80090ac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a3c      	ldr	r2, [pc, #240]	; (80012b4 <HAL_PCD_MspInit+0x11c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d171      	bne.n	80012ac <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011da:	f107 0318 	add.w	r3, r7, #24
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 fcfa 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 80011ea:	f7ff fdc3 	bl	8000d74 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <HAL_PCD_MspInit+0x120>)
 80011f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011f4:	4a30      	ldr	r2, [pc, #192]	; (80012b8 <HAL_PCD_MspInit+0x120>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <HAL_PCD_MspInit+0x120>)
 8001200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800120c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001210:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001226:	230a      	movs	r3, #10
 8001228:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001230:	4619      	mov	r1, r3
 8001232:	4822      	ldr	r0, [pc, #136]	; (80012bc <HAL_PCD_MspInit+0x124>)
 8001234:	f000 fec0 	bl	8001fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_PCD_MspInit+0x120>)
 800123a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800123e:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <HAL_PCD_MspInit+0x120>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001244:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_PCD_MspInit+0x120>)
 800124a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_PCD_MspInit+0x120>)
 8001258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d119      	bne.n	8001298 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_PCD_MspInit+0x120>)
 8001266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <HAL_PCD_MspInit+0x120>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_PCD_MspInit+0x120>)
 8001276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001282:	f002 f9dd 	bl	8003640 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_PCD_MspInit+0x120>)
 8001288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <HAL_PCD_MspInit+0x120>)
 800128e:	f023 0304 	bic.w	r3, r3, #4
 8001292:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001296:	e001      	b.n	800129c <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001298:	f002 f9d2 	bl	8003640 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2049      	movs	r0, #73	; 0x49
 80012a2:	f000 fe54 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80012a6:	2049      	movs	r0, #73	; 0x49
 80012a8:	f000 fe6b 	bl	8001f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	37f8      	adds	r7, #248	; 0xf8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	42040000 	.word	0x42040000
 80012b8:	46020c00 	.word	0x46020c00
 80012bc:	42020000 	.word	0x42020000

080012c0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <HAL_FMC_MspInit+0x8c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d132      	bne.n	8001342 <HAL_FMC_MspInit+0x82>
    return;
  }
  FMC_Initialized = 1;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_FMC_MspInit+0x8c>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_FMC_MspInit+0x90>)
 80012e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e8:	4a19      	ldr	r2, [pc, #100]	; (8001350 <HAL_FMC_MspInit+0x90>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_FMC_MspInit+0x90>)
 80012f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001300:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001304:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001312:	230c      	movs	r3, #12
 8001314:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	4619      	mov	r1, r3
 800131a:	480e      	ldr	r0, [pc, #56]	; (8001354 <HAL_FMC_MspInit+0x94>)
 800131c:	f000 fe4c 	bl	8001fb8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001320:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8001324:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001332:	230c      	movs	r3, #12
 8001334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	4807      	ldr	r0, [pc, #28]	; (8001358 <HAL_FMC_MspInit+0x98>)
 800133c:	f000 fe3c 	bl	8001fb8 <HAL_GPIO_Init>
 8001340:	e000      	b.n	8001344 <HAL_FMC_MspInit+0x84>
    return;
 8001342:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20025ea8 	.word	0x20025ea8
 8001350:	46020c00 	.word	0x46020c00
 8001354:	42021000 	.word	0x42021000
 8001358:	42020c00 	.word	0x42020c00

0800135c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001364:	f7ff ffac 	bl	80012c0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <NMI_Handler+0x4>

08001376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 f8d2 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <OTG_FS_IRQHandler+0x10>)
 80013ca:	f001 f909 	bl	80025e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20025944 	.word	0x20025944

080013d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <SystemInit+0x68>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <SystemInit+0x68>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <SystemInit+0x6c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <SystemInit+0x6c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <SystemInit+0x6c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <SystemInit+0x6c>)
 8001400:	2200      	movs	r2, #0
 8001402:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <SystemInit+0x6c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <SystemInit+0x6c>)
 800140a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800140e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001412:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <SystemInit+0x6c>)
 8001416:	2200      	movs	r2, #0
 8001418:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <SystemInit+0x6c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a09      	ldr	r2, [pc, #36]	; (8001444 <SystemInit+0x6c>)
 8001420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001424:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <SystemInit+0x6c>)
 8001428:	2200      	movs	r2, #0
 800142a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SystemInit+0x68>)
 800142e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001432:	609a      	str	r2, [r3, #8]
  #endif
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00
 8001444:	46020c00 	.word	0x46020c00

08001448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001480 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800144c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800144e:	e003      	b.n	8001458 <LoopCopyDataInit>

08001450 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001452:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001454:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001456:	3104      	adds	r1, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001458:	480b      	ldr	r0, [pc, #44]	; (8001488 <LoopForever+0xa>)
	ldr	r3, =_edata
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <LoopForever+0xe>)
	adds	r2, r0, r1
 800145c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800145e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001460:	d3f6      	bcc.n	8001450 <CopyDataInit>
	ldr	r2, =_sbss
 8001462:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001464:	e002      	b.n	800146c <LoopFillZerobss>

08001466 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001466:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001468:	f842 3b04 	str.w	r3, [r2], #4

0800146c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <LoopForever+0x16>)
	cmp	r2, r3
 800146e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001470:	d3f9      	bcc.n	8001466 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001472:	f7ff ffb1 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001476:	f007 fdf5 	bl	8009064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800147a:	f7ff f951 	bl	8000720 <main>

0800147e <LoopForever>:

LoopForever:
    b LoopForever
 800147e:	e7fe      	b.n	800147e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001480:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001484:	080091e4 	.word	0x080091e4
	ldr	r0, =_sdata
 8001488:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800148c:	20025809 	.word	0x20025809
	ldr	r2, =_sbss
 8001490:	2002580c 	.word	0x2002580c
	ldr	r3, = _ebss
 8001494:	20025eb0 	.word	0x20025eb0

08001498 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC1_IRQHandler>
	...

0800149c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_Init+0x4c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <HAL_Init+0x4c>)
 80014a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 fd43 	bl	8001f38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80014b2:	f003 f9ad 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80014b6:	4602      	mov	r2, r0
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_Init+0x50>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	490b      	ldr	r1, [pc, #44]	; (80014f0 <HAL_Init+0x54>)
 80014c2:	5ccb      	ldrb	r3, [r1, r3]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <HAL_Init+0x58>)
 80014ca:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014cc:	2000      	movs	r0, #0
 80014ce:	f000 f813 	bl	80014f8 <HAL_InitTick>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e002      	b.n	80014e2 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014dc:	f7ff fd74 	bl	8000fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000
 80014ec:	46020c00 	.word	0x46020c00
 80014f0:	080090d4 	.word	0x080090d4
 80014f4:	20025800 	.word	0x20025800

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_InitTick+0x60>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e021      	b.n	8001550 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <HAL_InitTick+0x64>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_InitTick+0x60>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 fd3b 	bl	8001f9e <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00e      	b.n	8001550 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d80a      	bhi.n	800154e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f000 fd05 	bl	8001f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_InitTick+0x68>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20025808 	.word	0x20025808
 800155c:	20025800 	.word	0x20025800
 8001560:	20025804 	.word	0x20025804

08001564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x20>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x24>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <HAL_IncTick+0x24>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20025808 	.word	0x20025808
 8001588:	20025eac 	.word	0x20025eac

0800158c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_GetTick+0x14>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20025eac 	.word	0x20025eac

080015a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff ffee 	bl	800158c <HAL_GetTick>
 80015b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015bc:	d005      	beq.n	80015ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_Delay+0x44>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ca:	bf00      	nop
 80015cc:	f7ff ffde 	bl	800158c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d8f7      	bhi.n	80015cc <HAL_Delay+0x28>
  {
  }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20025808 	.word	0x20025808

080015ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	2a00      	cmp	r2, #0
 800163c:	d002      	beq.n	8001644 <LL_ADC_SetGainCompensation+0x32>
 800163e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001642:	e000      	b.n	8001646 <LL_ADC_SetGainCompensation+0x34>
 8001644:	2200      	movs	r2, #0
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2107      	movs	r1, #7
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	401a      	ands	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	431a      	orrs	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6093      	str	r3, [r2, #8]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016ce:	d101      	bne.n	80016d4 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80016f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	609a      	str	r2, [r3, #8]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800171e:	d101      	bne.n	8001724 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <LL_ADC_IsEnabled+0x18>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <LL_ADC_IsEnabled+0x1a>
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b04      	cmp	r3, #4
 800176a:	d101      	bne.n	8001770 <LL_ADC_REG_IsConversionOngoing+0x18>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b08      	cmp	r3, #8
 8001790:	d101      	bne.n	8001796 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e2e3      	b.n	8001d8c <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a92      	ldr	r2, [pc, #584]	; (8001a1c <HAL_ADC_Init+0x278>)
 80017d2:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d109      	bne.n	80017f0 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff fc0f 	bl	8001000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff60 	bl	80016ba <LL_ADC_IsDeepPowerDownEnabled>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff46 	bl	8001696 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ff7b 	bl	800170a <LL_ADC_IsInternalRegulatorEnabled>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d115      	bne.n	8001846 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff5f 	bl	80016e2 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001824:	4b7e      	ldr	r3, [pc, #504]	; (8001a20 <HAL_ADC_Init+0x27c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	099b      	lsrs	r3, r3, #6
 800182a:	4a7e      	ldr	r2, [pc, #504]	; (8001a24 <HAL_ADC_Init+0x280>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	099b      	lsrs	r3, r3, #6
 8001832:	3301      	adds	r3, #1
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001838:	e002      	b.n	8001840 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3b01      	subs	r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f9      	bne.n	800183a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff5d 	bl	800170a <LL_ADC_IsInternalRegulatorEnabled>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10e      	bne.n	8001874 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800185a:	f043 0210 	orr.w	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001866:	f043 0201 	orr.w	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff6d 	bl	8001758 <LL_ADC_REG_IsConversionOngoing>
 800187e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b00      	cmp	r3, #0
 800188a:	f040 8274 	bne.w	8001d76 <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2b00      	cmp	r3, #0
 8001892:	f040 8270 	bne.w	8001d76 <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800189a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800189e:	f043 0202 	orr.w	r2, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff41 	bl	8001732 <LL_ADC_IsEnabled>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d14e      	bne.n	8001954 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a58      	ldr	r2, [pc, #352]	; (8001a1c <HAL_ADC_Init+0x278>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d028      	beq.n	8001912 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a58      	ldr	r2, [pc, #352]	; (8001a28 <HAL_ADC_Init+0x284>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d109      	bne.n	80018de <HAL_ADC_Init+0x13a>
 80018ca:	4857      	ldr	r0, [pc, #348]	; (8001a28 <HAL_ADC_Init+0x284>)
 80018cc:	f7ff ff31 	bl	8001732 <LL_ADC_IsEnabled>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf0c      	ite	eq
 80018d6:	2301      	moveq	r3, #1
 80018d8:	2300      	movne	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	e008      	b.n	80018f0 <HAL_ADC_Init+0x14c>
 80018de:	484f      	ldr	r0, [pc, #316]	; (8001a1c <HAL_ADC_Init+0x278>)
 80018e0:	f7ff ff27 	bl	8001732 <LL_ADC_IsEnabled>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf0c      	ite	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	2300      	movne	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d02f      	beq.n	8001954 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a4b      	ldr	r2, [pc, #300]	; (8001a28 <HAL_ADC_Init+0x284>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_Init+0x15e>
 80018fe:	4a4b      	ldr	r2, [pc, #300]	; (8001a2c <HAL_ADC_Init+0x288>)
 8001900:	e000      	b.n	8001904 <HAL_ADC_Init+0x160>
 8001902:	4a4b      	ldr	r2, [pc, #300]	; (8001a30 <HAL_ADC_Init+0x28c>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4619      	mov	r1, r3
 800190a:	4610      	mov	r0, r2
 800190c:	f7ff fe6e 	bl	80015ec <LL_ADC_SetCommonClock>
 8001910:	e020      	b.n	8001954 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f023 010c 	bic.w	r1, r3, #12
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001924:	4293      	cmp	r3, r2
 8001926:	d005      	beq.n	8001934 <HAL_ADC_Init+0x190>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	3b01      	subs	r3, #1
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	e000      	b.n	8001936 <HAL_ADC_Init+0x192>
 8001934:	230c      	movs	r3, #12
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	430b      	orrs	r3, r1
 800193c:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800193e:	4b3c      	ldr	r3, [pc, #240]	; (8001a30 <HAL_ADC_Init+0x28c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800194e:	4938      	ldr	r1, [pc, #224]	; (8001a30 <HAL_ADC_Init+0x28c>)
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a30      	ldr	r2, [pc, #192]	; (8001a1c <HAL_ADC_Init+0x278>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d010      	beq.n	8001980 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001964:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800196a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001970:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001978:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800197a:	4313      	orrs	r3, r2
 800197c:	623b      	str	r3, [r7, #32]
 800197e:	e030      	b.n	80019e2 <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7f1b      	ldrb	r3, [r3, #28]
 8001984:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800198c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800198e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001994:	2a00      	cmp	r2, #0
 8001996:	d002      	beq.n	800199e <HAL_ADC_Init+0x1fa>
 8001998:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800199c:	e000      	b.n	80019a0 <HAL_ADC_Init+0x1fc>
 800199e:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80019a0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80019a6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	da04      	bge.n	80019ba <HAL_ADC_Init+0x216>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019b8:	e001      	b.n	80019be <HAL_ADC_Init+0x21a>
 80019ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 80019be:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4918      	ldr	r1, [pc, #96]	; (8001a28 <HAL_ADC_Init+0x284>)
 80019c6:	428b      	cmp	r3, r1
 80019c8:	d103      	bne.n	80019d2 <HAL_ADC_Init+0x22e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019d0:	e003      	b.n	80019da <HAL_ADC_Init+0x236>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019d8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80019da:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019dc:	6a3a      	ldr	r2, [r7, #32]
 80019de:	4313      	orrs	r3, r2
 80019e0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d12f      	bne.n	8001a4c <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <HAL_ADC_Init+0x278>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d007      	beq.n	8001a06 <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	3b01      	subs	r3, #1
 80019fc:	045b      	lsls	r3, r3, #17
 80019fe:	6a3a      	ldr	r2, [r7, #32]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	e022      	b.n	8001a4c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d111      	bne.n	8001a34 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a16:	623b      	str	r3, [r7, #32]
 8001a18:	e018      	b.n	8001a4c <HAL_ADC_Init+0x2a8>
 8001a1a:	bf00      	nop
 8001a1c:	46021000 	.word	0x46021000
 8001a20:	20025800 	.word	0x20025800
 8001a24:	053e2d63 	.word	0x053e2d63
 8001a28:	42028000 	.word	0x42028000
 8001a2c:	42028308 	.word	0x42028308
 8001a30:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a38:	f043 0220 	orr.w	r2, r3, #32
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a44:	f043 0201 	orr.w	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a93      	ldr	r2, [pc, #588]	; (8001ca0 <HAL_ADC_Init+0x4fc>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d018      	beq.n	8001a88 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a62:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	6a3a      	ldr	r2, [r7, #32]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4b8a      	ldr	r3, [pc, #552]	; (8001ca4 <HAL_ADC_Init+0x500>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	6a39      	ldr	r1, [r7, #32]
 8001a82:	430b      	orrs	r3, r1
 8001a84:	60d3      	str	r3, [r2, #12]
 8001a86:	e033      	b.n	8001af0 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d009      	beq.n	8001aa4 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a94:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	6a3a      	ldr	r2, [r7, #32]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8001aae:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	6a39      	ldr	r1, [r7, #32]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1a      	ldr	r2, [r3, #32]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d008      	beq.n	8001af0 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a6a      	ldr	r2, [pc, #424]	; (8001ca0 <HAL_ADC_Init+0x4fc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	f000 8093 	beq.w	8001c22 <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fe29 	bl	8001758 <LL_ADC_REG_IsConversionOngoing>
 8001b06:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fe36 	bl	800177e <LL_ADC_INJ_IsConversionOngoing>
 8001b12:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d161      	bne.n	8001bde <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d15e      	bne.n	8001bde <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7f1b      	ldrb	r3, [r3, #28]
 8001b24:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	495f      	ldr	r1, [pc, #380]	; (8001ca8 <HAL_ADC_Init+0x504>)
 8001b2c:	428b      	cmp	r3, r1
 8001b2e:	d102      	bne.n	8001b36 <HAL_ADC_Init+0x392>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b34:	e002      	b.n	8001b3c <HAL_ADC_Init+0x398>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	6a39      	ldr	r1, [r7, #32]
 8001b54:	430b      	orrs	r3, r1
 8001b56:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f7ff fd51 	bl	8001612 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d11e      	bne.n	8001bb8 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7e:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	4b49      	ldr	r3, [pc, #292]	; (8001cac <HAL_ADC_Init+0x508>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001b8e:	0411      	lsls	r1, r2, #16
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b94:	4311      	orrs	r1, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001b9a:	4311      	orrs	r1, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001ba0:	4311      	orrs	r1, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ba6:	0892      	lsrs	r2, r2, #2
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 0201 	orr.w	r2, r2, #1
 8001bb4:	611a      	str	r2, [r3, #16]
 8001bb6:	e007      	b.n	8001bc8 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10c      	bne.n	8001c00 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	f023 010f 	bic.w	r1, r3, #15
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	1e5a      	subs	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8001bfe:	e007      	b.n	8001c10 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 020f 	bic.w	r2, r2, #15
 8001c0e:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c14:	f023 0303 	bic.w	r3, r3, #3
 8001c18:	f043 0201 	orr.w	r2, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c20:	e0b2      	b.n	8001d88 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001c2a:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8001c30:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8001c36:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d103      	bne.n	8001c50 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_ADC_Init+0x50c>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	69f9      	ldr	r1, [r7, #28]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2100      	movs	r1, #0
 8001c70:	f7ff fcf2 	bl	8001658 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8001c82:	f7ff fce9 	bl	8001658 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d112      	bne.n	8001cb4 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f062 020f 	orn	r2, r2, #15
 8001c9c:	629a      	str	r2, [r3, #40]	; 0x28
 8001c9e:	e044      	b.n	8001d2a <HAL_ADC_Init+0x586>
 8001ca0:	46021000 	.word	0x46021000
 8001ca4:	fff0c013 	.word	0xfff0c013
 8001ca8:	42028000 	.word	0x42028000
 8001cac:	fc00f81e 	.word	0xfc00f81e
 8001cb0:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cbc:	d135      	bne.n	8001d2a <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	e00d      	b.n	8001ce0 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	2b0f      	cmp	r3, #15
 8001cd8:	d006      	beq.n	8001ce8 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2b07      	cmp	r3, #7
 8001ce4:	d9ee      	bls.n	8001cc4 <HAL_ADC_Init+0x520>
 8001ce6:	e000      	b.n	8001cea <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8001ce8:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d108      	bne.n	8001d02 <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f062 020f 	orn	r2, r2, #15
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8001d00:	e013      	b.n	8001d2a <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	f003 031c 	and.w	r3, r3, #28
 8001d14:	f06f 020f 	mvn.w	r2, #15
 8001d18:	fa02 f103 	lsl.w	r1, r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_ADC_Init+0x5f0>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	6a3a      	ldr	r2, [r7, #32]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d10b      	bne.n	8001d52 <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d44:	f023 0303 	bic.w	r3, r3, #3
 8001d48:	f043 0201 	orr.w	r2, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d50:	e01a      	b.n	8001d88 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d56:	f023 0312 	bic.w	r3, r3, #18
 8001d5a:	f043 0210 	orr.w	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d74:	e008      	b.n	8001d88 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d7a:	f043 0210 	orr.w	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8001d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3728      	adds	r7, #40	; 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	833ffff3 	.word	0x833ffff3

08001d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db4:	4013      	ands	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dca:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	60d3      	str	r3, [r2, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <__NVIC_GetPriorityGrouping+0x18>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f003 0307 	and.w	r3, r3, #7
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	db0b      	blt.n	8001e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4907      	ldr	r1, [pc, #28]	; (8001e34 <__NVIC_EnableIRQ+0x38>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000e100 	.word	0xe000e100

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	; (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	; (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	; 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	bf28      	it	cs
 8001eaa:	2304      	movcs	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d902      	bls.n	8001ebc <NVIC_EncodePriority+0x30>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b03      	subs	r3, #3
 8001eba:	e000      	b.n	8001ebe <NVIC_EncodePriority+0x32>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	4313      	orrs	r3, r2
         );
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f04:	d301      	bcc.n	8001f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00f      	b.n	8001f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <SysTick_Config+0x40>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f12:	210f      	movs	r1, #15
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	f7ff ff8e 	bl	8001e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <SysTick_Config+0x40>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <SysTick_Config+0x40>)
 8001f24:	2207      	movs	r2, #7
 8001f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	e000e010 	.word	0xe000e010

08001f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff29 	bl	8001d98 <__NVIC_SetPriorityGrouping>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5c:	f7ff ff40 	bl	8001de0 <__NVIC_GetPriorityGrouping>
 8001f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7ff ff90 	bl	8001e8c <NVIC_EncodePriority>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff5f 	bl	8001e38 <__NVIC_SetPriority>
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff33 	bl	8001dfc <__NVIC_EnableIRQ>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ffa4 	bl	8001ef4 <SysTick_Config>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001fca:	e1ba      	b.n	8002342 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 81aa 	beq.w	800233c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a55      	ldr	r2, [pc, #340]	; (8002140 <HAL_GPIO_Init+0x188>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d15d      	bne.n	80020ac <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	4013      	ands	r3, r2
 8002004:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0201 	and.w	r2, r3, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	4313      	orrs	r3, r2
 8002018:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002020:	4a48      	ldr	r2, [pc, #288]	; (8002144 <HAL_GPIO_Init+0x18c>)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002028:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800202a:	4a46      	ldr	r2, [pc, #280]	; (8002144 <HAL_GPIO_Init+0x18c>)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	08da      	lsrs	r2, r3, #3
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	3208      	adds	r2, #8
 800203e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002042:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	4013      	ands	r3, r2
 8002058:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	220b      	movs	r2, #11
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	4313      	orrs	r3, r2
 800206c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	08da      	lsrs	r2, r3, #3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	3208      	adds	r2, #8
 8002076:	69f9      	ldr	r1, [r7, #28]
 8002078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	4013      	ands	r3, r2
 8002092:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2202      	movs	r2, #2
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e067      	b.n	800217c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x104>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b12      	cmp	r3, #18
 80020ba:	d145      	bne.n	8002148 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	220f      	movs	r2, #15
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	4013      	ands	r3, r2
 80020de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	f003 020f 	and.w	r2, r3, #15
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3208      	adds	r2, #8
 8002102:	69f9      	ldr	r1, [r7, #28]
 8002104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	4013      	ands	r3, r2
 800211e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0203 	and.w	r2, r3, #3
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	4313      	orrs	r3, r2
 8002134:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e01e      	b.n	800217c <HAL_GPIO_Init+0x1c4>
 800213e:	bf00      	nop
 8002140:	46020000 	.word	0x46020000
 8002144:	0800912c 	.word	0x0800912c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	4013      	ands	r3, r2
 800215e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0203 	and.w	r2, r3, #3
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	4313      	orrs	r3, r2
 8002174:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d00b      	beq.n	800219c <HAL_GPIO_Init+0x1e4>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d007      	beq.n	800219c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002190:	2b11      	cmp	r3, #17
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b12      	cmp	r3, #18
 800219a:	d130      	bne.n	80021fe <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80021d2:	2201      	movs	r2, #1
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	4013      	ands	r3, r2
 80021e0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	f003 0201 	and.w	r2, r3, #1
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b03      	cmp	r3, #3
 8002204:	d017      	beq.n	8002236 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	4013      	ands	r3, r2
 800221c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	4313      	orrs	r3, r2
 800222e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d07c      	beq.n	800233c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002242:	4a47      	ldr	r2, [pc, #284]	; (8002360 <HAL_GPIO_Init+0x3a8>)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3318      	adds	r3, #24
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	4013      	ands	r3, r2
 8002264:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	0a9a      	lsrs	r2, r3, #10
 800226a:	4b3e      	ldr	r3, [pc, #248]	; (8002364 <HAL_GPIO_Init+0x3ac>)
 800226c:	4013      	ands	r3, r2
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	f002 0203 	and.w	r2, r2, #3
 8002274:	00d2      	lsls	r2, r2, #3
 8002276:	4093      	lsls	r3, r2
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	4313      	orrs	r3, r2
 800227c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800227e:	4938      	ldr	r1, [pc, #224]	; (8002360 <HAL_GPIO_Init+0x3a8>)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	3318      	adds	r3, #24
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800228c:	4b34      	ldr	r3, [pc, #208]	; (8002360 <HAL_GPIO_Init+0x3a8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	43db      	mvns	r3, r3
 8002296:	69fa      	ldr	r2, [r7, #28]
 8002298:	4013      	ands	r3, r2
 800229a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80022b0:	4a2b      	ldr	r2, [pc, #172]	; (8002360 <HAL_GPIO_Init+0x3a8>)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_GPIO_Init+0x3a8>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <HAL_GPIO_Init+0x3a8>)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80022e0:	4b1f      	ldr	r3, [pc, #124]	; (8002360 <HAL_GPIO_Init+0x3a8>)
 80022e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002306:	4a16      	ldr	r2, [pc, #88]	; (8002360 <HAL_GPIO_Init+0x3a8>)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_GPIO_Init+0x3a8>)
 8002310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002314:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43db      	mvns	r3, r3
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	4013      	ands	r3, r2
 800231e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_GPIO_Init+0x3a8>)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	3301      	adds	r3, #1
 8002340:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	f47f ae3d 	bne.w	8001fcc <HAL_GPIO_Init+0x14>
  }
}
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	3724      	adds	r7, #36	; 0x24
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	46022000 	.word	0x46022000
 8002364:	002f7f7f 	.word	0x002f7f7f

08002368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
 8002374:	4613      	mov	r3, r2
 8002376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002378:	787b      	ldrb	r3, [r7, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002384:	e002      	b.n	800238c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239a:	b08f      	sub	sp, #60	; 0x3c
 800239c:	af0a      	add	r7, sp, #40	; 0x28
 800239e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e116      	b.n	80025d8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d106      	bne.n	80023ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7fe fee7 	bl	8001198 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2203      	movs	r2, #3
 80023ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f006 f935 	bl	8008658 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	687e      	ldr	r6, [r7, #4]
 80023f6:	466d      	mov	r5, sp
 80023f8:	f106 0410 	add.w	r4, r6, #16
 80023fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002404:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002408:	e885 0003 	stmia.w	r5, {r0, r1}
 800240c:	1d33      	adds	r3, r6, #4
 800240e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002410:	6838      	ldr	r0, [r7, #0]
 8002412:	f006 f852 	bl	80084ba <USB_CoreInit>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0d7      	b.n	80025d8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f006 f923 	bl	800867a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002434:	2300      	movs	r3, #0
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	e04a      	b.n	80024d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	333d      	adds	r3, #61	; 0x3d
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	333c      	adds	r3, #60	; 0x3c
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	b298      	uxth	r0, r3
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	3344      	adds	r3, #68	; 0x44
 8002476:	4602      	mov	r2, r0
 8002478:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	3340      	adds	r3, #64	; 0x40
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	3348      	adds	r3, #72	; 0x48
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	334c      	adds	r3, #76	; 0x4c
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3354      	adds	r3, #84	; 0x54
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	3301      	adds	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d3af      	bcc.n	800243a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	e044      	b.n	800256a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	3301      	adds	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	429a      	cmp	r2, r3
 8002572:	d3b5      	bcc.n	80024e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	603b      	str	r3, [r7, #0]
 800257a:	687e      	ldr	r6, [r7, #4]
 800257c:	466d      	mov	r5, sp
 800257e:	f106 0410 	add.w	r4, r6, #16
 8002582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800258a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800258e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002592:	1d33      	adds	r3, r6, #4
 8002594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002596:	6838      	ldr	r0, [r7, #0]
 8002598:	f006 f8bc 	bl	8008714 <USB_DevInit>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2202      	movs	r2, #2
 80025a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e014      	b.n	80025d8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d102      	bne.n	80025cc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 ff38 	bl	800343c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f006 fbcf 	bl	8008d74 <USB_DevDisconnect>

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b08d      	sub	sp, #52	; 0x34
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f006 fc70 	bl	8008edc <USB_GetMode>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 84b7 	bne.w	8002f72 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f006 fbd4 	bl	8008db6 <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 84ad 	beq.w	8002f70 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f006 fbc1 	bl	8008db6 <USB_ReadInterrupts>
 8002634:	4603      	mov	r3, r0
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b02      	cmp	r3, #2
 800263c:	d107      	bne.n	800264e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f002 0202 	and.w	r2, r2, #2
 800264c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f006 fbaf 	bl	8008db6 <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b10      	cmp	r3, #16
 8002660:	d161      	bne.n	8002726 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0210 	bic.w	r2, r2, #16
 8002670:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f003 020f 	and.w	r2, r3, #15
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	3304      	adds	r3, #4
 8002690:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	0c5b      	lsrs	r3, r3, #17
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	2b02      	cmp	r3, #2
 800269c:	d124      	bne.n	80026e8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d035      	beq.n	8002716 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	6a38      	ldr	r0, [r7, #32]
 80026be:	f006 fb01 	bl	8008cc4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ce:	441a      	add	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	6a1a      	ldr	r2, [r3, #32]
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026e0:	441a      	add	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	621a      	str	r2, [r3, #32]
 80026e6:	e016      	b.n	8002716 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	0c5b      	lsrs	r3, r3, #17
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	2b06      	cmp	r3, #6
 80026f2:	d110      	bne.n	8002716 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026fa:	2208      	movs	r2, #8
 80026fc:	4619      	mov	r1, r3
 80026fe:	6a38      	ldr	r0, [r7, #32]
 8002700:	f006 fae0 	bl	8008cc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	6a1a      	ldr	r2, [r3, #32]
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002710:	441a      	add	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0210 	orr.w	r2, r2, #16
 8002724:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f006 fb43 	bl	8008db6 <USB_ReadInterrupts>
 8002730:	4603      	mov	r3, r0
 8002732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002736:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800273a:	f040 80a7 	bne.w	800288c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f006 fb48 	bl	8008ddc <USB_ReadDevAllOutEpInterrupt>
 800274c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800274e:	e099      	b.n	8002884 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 808e 	beq.w	8002878 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f006 fb6c 	bl	8008e44 <USB_ReadDevOutEPInterrupt>
 800276c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00c      	beq.n	8002792 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002784:	461a      	mov	r2, r3
 8002786:	2301      	movs	r3, #1
 8002788:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800278a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fd27 	bl	80031e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00c      	beq.n	80027b6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a8:	461a      	mov	r2, r3
 80027aa:	2308      	movs	r3, #8
 80027ac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fdfd 	bl	80033b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027cc:	461a      	mov	r2, r3
 80027ce:	2310      	movs	r3, #16
 80027d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d030      	beq.n	800283e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d109      	bne.n	80027fc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027fa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	3304      	adds	r3, #4
 8002810:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	78db      	ldrb	r3, [r3, #3]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d108      	bne.n	800282c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2200      	movs	r2, #0
 800281e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	b2db      	uxtb	r3, r3
 8002824:	4619      	mov	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fbf0 	bl	800300c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002838:	461a      	mov	r2, r3
 800283a:	2302      	movs	r3, #2
 800283c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002854:	461a      	mov	r2, r3
 8002856:	2320      	movs	r3, #32
 8002858:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d009      	beq.n	8002878 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002870:	461a      	mov	r2, r3
 8002872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002876:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	3301      	adds	r3, #1
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	f47f af62 	bne.w	8002750 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f006 fa90 	bl	8008db6 <USB_ReadInterrupts>
 8002896:	4603      	mov	r3, r0
 8002898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028a0:	f040 80db 	bne.w	8002a5a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f006 fab1 	bl	8008e10 <USB_ReadDevAllInEpInterrupt>
 80028ae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028b4:	e0cd      	b.n	8002a52 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80c2 	beq.w	8002a46 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f006 fad7 	bl	8008e80 <USB_ReadDevInEPInterrupt>
 80028d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d057      	beq.n	800298e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	2201      	movs	r2, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69f9      	ldr	r1, [r7, #28]
 80028fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028fe:	4013      	ands	r3, r2
 8002900:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	4413      	add	r3, r2
 800290a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800290e:	461a      	mov	r2, r3
 8002910:	2301      	movs	r3, #1
 8002912:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d132      	bne.n	8002982 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	334c      	adds	r3, #76	; 0x4c
 800292c:	6819      	ldr	r1, [r3, #0]
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4403      	add	r3, r0
 800293c:	3348      	adds	r3, #72	; 0x48
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4419      	add	r1, r3
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002946:	4613      	mov	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4403      	add	r3, r0
 8002950:	334c      	adds	r3, #76	; 0x4c
 8002952:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	2b00      	cmp	r3, #0
 8002958:	d113      	bne.n	8002982 <HAL_PCD_IRQHandler+0x3a2>
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3354      	adds	r3, #84	; 0x54
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d108      	bne.n	8002982 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800297a:	461a      	mov	r2, r3
 800297c:	2101      	movs	r1, #1
 800297e:	f006 fadf 	bl	8008f40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	b2db      	uxtb	r3, r3
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fb01 	bl	8002f90 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a4:	461a      	mov	r2, r3
 80029a6:	2308      	movs	r3, #8
 80029a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c0:	461a      	mov	r2, r3
 80029c2:	2310      	movs	r3, #16
 80029c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029dc:	461a      	mov	r2, r3
 80029de:	2340      	movs	r3, #64	; 0x40
 80029e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d023      	beq.n	8002a34 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ee:	6a38      	ldr	r0, [r7, #32]
 80029f0:	f005 ffde 	bl	80089b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	3338      	adds	r3, #56	; 0x38
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4413      	add	r3, r2
 8002a04:	3304      	adds	r3, #4
 8002a06:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	78db      	ldrb	r3, [r3, #3]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d108      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2200      	movs	r2, #0
 8002a14:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fb01 	bl	8003024 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2302      	movs	r3, #2
 8002a32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fb40 	bl	80030c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	3301      	adds	r3, #1
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f47f af2e 	bne.w	80028b6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f006 f9a9 	bl	8008db6 <USB_ReadInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a6e:	d122      	bne.n	8002ab6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d108      	bne.n	8002aa0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a96:	2100      	movs	r1, #0
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fcf3 	bl	8003484 <HAL_PCDEx_LPM_Callback>
 8002a9e:	e002      	b.n	8002aa6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 faa9 	bl	8002ff8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ab4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f006 f97b 	bl	8008db6 <USB_ReadInterrupts>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aca:	d112      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d102      	bne.n	8002ae2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fa81 	bl	8002fe4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f006 f95d 	bl	8008db6 <USB_ReadInterrupts>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b06:	d121      	bne.n	8002b4c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002b16:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d111      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	f003 020f 	and.w	r2, r3, #15
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fca0 	bl	8003484 <HAL_PCDEx_LPM_Callback>
 8002b44:	e002      	b.n	8002b4c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa4c 	bl	8002fe4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f006 f930 	bl	8008db6 <USB_ReadInterrupts>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b60:	f040 80b7 	bne.w	8002cd2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	69fa      	ldr	r2, [r7, #28]
 8002b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2110      	movs	r1, #16
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f005 ff16 	bl	80089b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b88:	e046      	b.n	8002c18 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b96:	461a      	mov	r2, r3
 8002b98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b9c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bae:	0151      	lsls	r1, r2, #5
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	440a      	add	r2, r1
 8002bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002bb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bbc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bd0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be2:	0151      	lsls	r1, r2, #5
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	440a      	add	r2, r1
 8002be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bf0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c02:	0151      	lsls	r1, r2, #5
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	440a      	add	r2, r1
 8002c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c10:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	3301      	adds	r3, #1
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d3b3      	bcc.n	8002b8a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c30:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c34:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d016      	beq.n	8002c6c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c4e:	f043 030b 	orr.w	r3, r3, #11
 8002c52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c64:	f043 030b 	orr.w	r3, r3, #11
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	e015      	b.n	8002c98 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c7e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c82:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c92:	f043 030b 	orr.w	r3, r3, #11
 8002c96:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ca6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002caa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f006 f93f 	bl	8008f40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002cd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f006 f86d 	bl	8008db6 <USB_ReadInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce6:	d124      	bne.n	8002d32 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f006 f903 	bl	8008ef8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f005 fed7 	bl	8008aaa <USB_GetDevSpeed>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	461a      	mov	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681c      	ldr	r4, [r3, #0]
 8002d08:	f001 fe8a 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	4620      	mov	r0, r4
 8002d18:	f005 fbfc 	bl	8008514 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f957 	bl	8002fd0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f006 f83d 	bl	8008db6 <USB_ReadInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d10a      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f938 	bl	8002fbc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f002 0208 	and.w	r2, r2, #8
 8002d5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f006 f828 	bl	8008db6 <USB_ReadInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6c:	2b80      	cmp	r3, #128	; 0x80
 8002d6e:	d122      	bne.n	8002db6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d80:	e014      	b.n	8002dac <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d105      	bne.n	8002da6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f95f 	bl	8003064 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	3301      	adds	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d3e5      	bcc.n	8002d82 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f005 fffb 	bl	8008db6 <USB_ReadInterrupts>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dca:	d13b      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dcc:	2301      	movs	r3, #1
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd0:	e02b      	b.n	8002e2a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3340      	adds	r3, #64	; 0x40
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d115      	bne.n	8002e24 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002df8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	da12      	bge.n	8002e24 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	333f      	adds	r3, #63	; 0x3f
 8002e0e:	2201      	movs	r2, #1
 8002e10:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f920 	bl	8003064 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	3301      	adds	r3, #1
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d3ce      	bcc.n	8002dd2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f005 ffb4 	bl	8008db6 <USB_ReadInterrupts>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e58:	d155      	bne.n	8002f06 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5e:	e045      	b.n	8002eec <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d12e      	bne.n	8002ee6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e88:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	da2b      	bge.n	8002ee6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002e9a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d121      	bne.n	8002ee6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ee2:	6053      	str	r3, [r2, #4]
            break;
 8002ee4:	e007      	b.n	8002ef6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	3301      	adds	r3, #1
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d3b4      	bcc.n	8002e60 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f005 ff53 	bl	8008db6 <USB_ReadInterrupts>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1a:	d10a      	bne.n	8002f32 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f88d 	bl	800303c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f005 ff3d 	bl	8008db6 <USB_ReadInterrupts>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d115      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f879 	bl	8003050 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	e000      	b.n	8002f72 <HAL_PCD_IRQHandler+0x992>
      return;
 8002f70:	bf00      	nop
    }
  }
}
 8002f72:	3734      	adds	r7, #52	; 0x34
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd90      	pop	{r4, r7, pc}

08002f78 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003074:	2b00      	cmp	r3, #0
 8003076:	da0c      	bge.n	8003092 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	f003 020f 	and.w	r2, r3, #15
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	3338      	adds	r3, #56	; 0x38
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	3304      	adds	r3, #4
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e00c      	b.n	80030ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	3304      	adds	r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68f9      	ldr	r1, [r7, #12]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f005 fd1e 	bl	8008af4 <USB_EPStopXfer>
 80030b8:	4603      	mov	r3, r0
 80030ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030bc:	7afb      	ldrb	r3, [r7, #11]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b08a      	sub	sp, #40	; 0x28
 80030ca:	af02      	add	r7, sp, #8
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	3338      	adds	r3, #56	; 0x38
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	3304      	adds	r3, #4
 80030ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d901      	bls.n	80030fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e06c      	b.n	80031d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	429a      	cmp	r2, r3
 8003112:	d902      	bls.n	800311a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3303      	adds	r3, #3
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003122:	e02b      	b.n	800317c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	429a      	cmp	r2, r3
 8003138:	d902      	bls.n	8003140 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	3303      	adds	r3, #3
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6919      	ldr	r1, [r3, #16]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003158:	b2db      	uxtb	r3, r3
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	4603      	mov	r3, r0
 800315e:	6978      	ldr	r0, [r7, #20]
 8003160:	f005 fd72 	bl	8008c48 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	441a      	add	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a1a      	ldr	r2, [r3, #32]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	441a      	add	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	b29b      	uxth	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	429a      	cmp	r2, r3
 8003190:	d809      	bhi.n	80031a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1a      	ldr	r2, [r3, #32]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800319a:	429a      	cmp	r2, r3
 800319c:	d203      	bcs.n	80031a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1be      	bne.n	8003124 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d811      	bhi.n	80031d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	2201      	movs	r2, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	6939      	ldr	r1, [r7, #16]
 80031ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031d2:	4013      	ands	r3, r2
 80031d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	333c      	adds	r3, #60	; 0x3c
 80031f8:	3304      	adds	r3, #4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d17b      	bne.n	800330e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d015      	beq.n	800324c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	4a61      	ldr	r2, [pc, #388]	; (80033a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	f240 80b9 	bls.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80b3 	beq.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003242:	461a      	mov	r2, r3
 8003244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003248:	6093      	str	r3, [r2, #8]
 800324a:	e0a7      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003262:	461a      	mov	r2, r3
 8003264:	2320      	movs	r3, #32
 8003266:	6093      	str	r3, [r2, #8]
 8003268:	e098      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	f040 8093 	bne.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	4a4b      	ldr	r2, [pc, #300]	; (80033a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d90f      	bls.n	800329e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003294:	461a      	mov	r2, r3
 8003296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329a:	6093      	str	r3, [r2, #8]
 800329c:	e07e      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	3304      	adds	r3, #4
 80032b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	0159      	lsls	r1, r3, #5
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	440b      	add	r3, r1
 80032c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ca:	1ad2      	subs	r2, r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d114      	bne.n	8003300 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032e8:	461a      	mov	r2, r3
 80032ea:	2101      	movs	r1, #1
 80032ec:	f005 fe28 	bl	8008f40 <USB_EP0_OutStart>
 80032f0:	e006      	b.n	8003300 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	441a      	add	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff fe36 	bl	8002f78 <HAL_PCD_DataOutStageCallback>
 800330c:	e046      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	4a26      	ldr	r2, [pc, #152]	; (80033ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d124      	bne.n	8003360 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332c:	461a      	mov	r2, r3
 800332e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003332:	6093      	str	r3, [r2, #8]
 8003334:	e032      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	2320      	movs	r3, #32
 8003350:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff fe0d 	bl	8002f78 <HAL_PCD_DataOutStageCallback>
 800335e:	e01d      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d114      	bne.n	8003390 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d108      	bne.n	8003390 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003388:	461a      	mov	r2, r3
 800338a:	2100      	movs	r1, #0
 800338c:	f005 fdd8 	bl	8008f40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	4619      	mov	r1, r3
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff fdee 	bl	8002f78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	4f54300a 	.word	0x4f54300a
 80033ac:	4f54310a 	.word	0x4f54310a

080033b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	333c      	adds	r3, #60	; 0x3c
 80033c8:	3304      	adds	r3, #4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a15      	ldr	r2, [pc, #84]	; (8003438 <PCD_EP_OutSetupPacket_int+0x88>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d90e      	bls.n	8003404 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d009      	beq.n	8003404 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fc:	461a      	mov	r2, r3
 80033fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003402:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff fdcf 	bl	8002fa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <PCD_EP_OutSetupPacket_int+0x88>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d90c      	bls.n	800342c <PCD_EP_OutSetupPacket_int+0x7c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d108      	bne.n	800342c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003424:	461a      	mov	r2, r3
 8003426:	2101      	movs	r1, #1
 8003428:	f005 fd8a 	bl	8008f40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	4f54300a 	.word	0x4f54300a

0800343c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346e:	f043 0303 	orr.w	r3, r3, #3
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80034a4:	4b34      	ldr	r3, [pc, #208]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ac:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d101      	bne.n	80034ba <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e057      	b.n	800356a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c0:	d90a      	bls.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80034c2:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	4a2a      	ldr	r2, [pc, #168]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80034d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d4:	60d3      	str	r3, [r2, #12]
 80034d6:	e007      	b.n	80034e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80034d8:	4b27      	ldr	r3, [pc, #156]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80034e0:	4925      	ldr	r1, [pc, #148]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80034e8:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a24      	ldr	r2, [pc, #144]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	099b      	lsrs	r3, r3, #6
 80034f4:	2232      	movs	r2, #50	; 0x32
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	4a21      	ldr	r2, [pc, #132]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	099b      	lsrs	r3, r3, #6
 8003502:	3301      	adds	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003506:	e002      	b.n	800350e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3b01      	subs	r3, #1
 800350c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800350e:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <HAL_PWREx_ControlVoltageScaling+0x84>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f3      	bne.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01b      	beq.n	800355e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a15      	ldr	r2, [pc, #84]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	099b      	lsrs	r3, r3, #6
 8003532:	2232      	movs	r2, #50	; 0x32
 8003534:	fb02 f303 	mul.w	r3, r2, r3
 8003538:	4a11      	ldr	r2, [pc, #68]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	099b      	lsrs	r3, r3, #6
 8003540:	3301      	adds	r3, #1
 8003542:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003544:	e002      	b.n	800354c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3b01      	subs	r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <HAL_PWREx_ControlVoltageScaling+0xc2>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f3      	bne.n	8003546 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e000      	b.n	800356a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	46020800 	.word	0x46020800
 800357c:	20025800 	.word	0x20025800
 8003580:	10624dd3 	.word	0x10624dd3

08003584 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <HAL_PWREx_GetVoltageRange+0x18>)
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	46020800 	.word	0x46020800

080035a0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_PWREx_ConfigSupply+0x94>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a22      	ldr	r2, [pc, #136]	; (8003638 <HAL_PWREx_ConfigSupply+0x98>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	2232      	movs	r2, #50	; 0x32
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	4a1f      	ldr	r2, [pc, #124]	; (8003638 <HAL_PWREx_ConfigSupply+0x98>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	3301      	adds	r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d113      	bne.n	80035f4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_PWREx_ConfigSupply+0x9c>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a1a      	ldr	r2, [pc, #104]	; (800363c <HAL_PWREx_ConfigSupply+0x9c>)
 80035d2:	f023 0302 	bic.w	r3, r3, #2
 80035d6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80035d8:	e002      	b.n	80035e0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3b01      	subs	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <HAL_PWREx_ConfigSupply+0x9c>)
 80035e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d116      	bne.n	800361a <HAL_PWREx_ConfigSupply+0x7a>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f3      	bne.n	80035da <HAL_PWREx_ConfigSupply+0x3a>
 80035f2:	e012      	b.n	800361a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_PWREx_ConfigSupply+0x9c>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a10      	ldr	r2, [pc, #64]	; (800363c <HAL_PWREx_ConfigSupply+0x9c>)
 80035fa:	f043 0302 	orr.w	r3, r3, #2
 80035fe:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003600:	e002      	b.n	8003608 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3b01      	subs	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <HAL_PWREx_ConfigSupply+0x9c>)
 800360a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <HAL_PWREx_ConfigSupply+0x7a>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f3      	bne.n	8003602 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e000      	b.n	8003626 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20025800 	.word	0x20025800
 8003638:	10624dd3 	.word	0x10624dd3
 800363c:	46020800 	.word	0x46020800

08003640 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <HAL_PWREx_EnableVddUSB+0x1c>)
 800364a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364e:	6113      	str	r3, [r2, #16]
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	46020800 	.word	0x46020800

08003660 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	4a04      	ldr	r2, [pc, #16]	; (800367c <HAL_PWREx_EnableVddIO2+0x1c>)
 800366a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800366e:	6113      	str	r3, [r2, #16]
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	46020800 	.word	0x46020800

08003680 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08e      	sub	sp, #56	; 0x38
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003688:	2300      	movs	r3, #0
 800368a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d102      	bne.n	800369a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	f000 bec3 	b.w	8004420 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800369a:	4b9c      	ldr	r3, [pc, #624]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a4:	4b99      	ldr	r3, [pc, #612]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8172 	beq.w	80039a0 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <HAL_RCC_OscConfig+0x52>
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	2b0c      	cmp	r3, #12
 80036c6:	f040 80e4 	bne.w	8003892 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	f040 80e0 	bne.w	8003892 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036d2:	4b8e      	ldr	r3, [pc, #568]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d006      	beq.n	80036ec <HAL_RCC_OscConfig+0x6c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f000 be9a 	b.w	8004420 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f0:	4b86      	ldr	r3, [pc, #536]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d004      	beq.n	8003706 <HAL_RCC_OscConfig+0x86>
 80036fc:	4b83      	ldr	r3, [pc, #524]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003704:	e005      	b.n	8003712 <HAL_RCC_OscConfig+0x92>
 8003706:	4b81      	ldr	r3, [pc, #516]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 8003708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800370c:	041b      	lsls	r3, r3, #16
 800370e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003712:	4293      	cmp	r3, r2
 8003714:	d255      	bcs.n	80037c2 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	4618      	mov	r0, r3
 8003722:	f001 f9d3 	bl	8004acc <RCC_SetFlashLatencyFromMSIRange>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	f000 be77 	b.w	8004420 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003732:	4b76      	ldr	r3, [pc, #472]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	4a75      	ldr	r2, [pc, #468]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 8003738:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800373c:	6093      	str	r3, [r2, #8]
 800373e:	4b73      	ldr	r3, [pc, #460]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	4970      	ldr	r1, [pc, #448]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 800374c:	4313      	orrs	r3, r2
 800374e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003758:	d309      	bcc.n	800376e <HAL_RCC_OscConfig+0xee>
 800375a:	4b6c      	ldr	r3, [pc, #432]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f023 021f 	bic.w	r2, r3, #31
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4969      	ldr	r1, [pc, #420]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 8003768:	4313      	orrs	r3, r2
 800376a:	60cb      	str	r3, [r1, #12]
 800376c:	e07e      	b.n	800386c <HAL_RCC_OscConfig+0x1ec>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	2b00      	cmp	r3, #0
 8003774:	da0a      	bge.n	800378c <HAL_RCC_OscConfig+0x10c>
 8003776:	4b65      	ldr	r3, [pc, #404]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	015b      	lsls	r3, r3, #5
 8003784:	4961      	ldr	r1, [pc, #388]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 8003786:	4313      	orrs	r3, r2
 8003788:	60cb      	str	r3, [r1, #12]
 800378a:	e06f      	b.n	800386c <HAL_RCC_OscConfig+0x1ec>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003794:	d30a      	bcc.n	80037ac <HAL_RCC_OscConfig+0x12c>
 8003796:	4b5d      	ldr	r3, [pc, #372]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	029b      	lsls	r3, r3, #10
 80037a4:	4959      	ldr	r1, [pc, #356]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60cb      	str	r3, [r1, #12]
 80037aa:	e05f      	b.n	800386c <HAL_RCC_OscConfig+0x1ec>
 80037ac:	4b57      	ldr	r3, [pc, #348]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	03db      	lsls	r3, r3, #15
 80037ba:	4954      	ldr	r1, [pc, #336]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	60cb      	str	r3, [r1, #12]
 80037c0:	e054      	b.n	800386c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80037c2:	4b52      	ldr	r3, [pc, #328]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	4a51      	ldr	r2, [pc, #324]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80037c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037cc:	6093      	str	r3, [r2, #8]
 80037ce:	4b4f      	ldr	r3, [pc, #316]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	494c      	ldr	r1, [pc, #304]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80037e8:	d309      	bcc.n	80037fe <HAL_RCC_OscConfig+0x17e>
 80037ea:	4b48      	ldr	r3, [pc, #288]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f023 021f 	bic.w	r2, r3, #31
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4945      	ldr	r1, [pc, #276]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60cb      	str	r3, [r1, #12]
 80037fc:	e028      	b.n	8003850 <HAL_RCC_OscConfig+0x1d0>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	2b00      	cmp	r3, #0
 8003804:	da0a      	bge.n	800381c <HAL_RCC_OscConfig+0x19c>
 8003806:	4b41      	ldr	r3, [pc, #260]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	015b      	lsls	r3, r3, #5
 8003814:	493d      	ldr	r1, [pc, #244]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 8003816:	4313      	orrs	r3, r2
 8003818:	60cb      	str	r3, [r1, #12]
 800381a:	e019      	b.n	8003850 <HAL_RCC_OscConfig+0x1d0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d30a      	bcc.n	800383c <HAL_RCC_OscConfig+0x1bc>
 8003826:	4b39      	ldr	r3, [pc, #228]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	029b      	lsls	r3, r3, #10
 8003834:	4935      	ldr	r1, [pc, #212]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 8003836:	4313      	orrs	r3, r2
 8003838:	60cb      	str	r3, [r1, #12]
 800383a:	e009      	b.n	8003850 <HAL_RCC_OscConfig+0x1d0>
 800383c:	4b33      	ldr	r3, [pc, #204]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	03db      	lsls	r3, r3, #15
 800384a:	4930      	ldr	r1, [pc, #192]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 800384c:	4313      	orrs	r3, r2
 800384e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10a      	bne.n	800386c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	4618      	mov	r0, r3
 800385c:	f001 f936 	bl	8004acc <RCC_SetFlashLatencyFromMSIRange>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	f000 bdda 	b.w	8004420 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800386c:	f001 f8d8 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <HAL_RCC_OscConfig+0x290>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fd fe3f 	bl	80014f8 <HAL_InitTick>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 808a 	beq.w	800399e <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800388a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800388e:	f000 bdc7 	b.w	8004420 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d066      	beq.n	8003968 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800389a:	4b1c      	ldr	r3, [pc, #112]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1b      	ldr	r2, [pc, #108]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80038a6:	f7fd fe71 	bl	800158c <HAL_GetTick>
 80038aa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80038ac:	e009      	b.n	80038c2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ae:	f7fd fe6d 	bl	800158c <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d902      	bls.n	80038c2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	f000 bdaf 	b.w	8004420 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80038c2:	4b12      	ldr	r3, [pc, #72]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0ef      	beq.n	80038ae <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	4a0e      	ldr	r2, [pc, #56]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80038d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038d8:	6093      	str	r3, [r2, #8]
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	4909      	ldr	r1, [pc, #36]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80038f4:	d30e      	bcc.n	8003914 <HAL_RCC_OscConfig+0x294>
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f023 021f 	bic.w	r2, r3, #31
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	4902      	ldr	r1, [pc, #8]	; (800390c <HAL_RCC_OscConfig+0x28c>)
 8003904:	4313      	orrs	r3, r2
 8003906:	60cb      	str	r3, [r1, #12]
 8003908:	e04a      	b.n	80039a0 <HAL_RCC_OscConfig+0x320>
 800390a:	bf00      	nop
 800390c:	46020c00 	.word	0x46020c00
 8003910:	20025804 	.word	0x20025804
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2b00      	cmp	r3, #0
 800391a:	da0a      	bge.n	8003932 <HAL_RCC_OscConfig+0x2b2>
 800391c:	4b9b      	ldr	r3, [pc, #620]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	015b      	lsls	r3, r3, #5
 800392a:	4998      	ldr	r1, [pc, #608]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 800392c:	4313      	orrs	r3, r2
 800392e:	60cb      	str	r3, [r1, #12]
 8003930:	e036      	b.n	80039a0 <HAL_RCC_OscConfig+0x320>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393a:	d30a      	bcc.n	8003952 <HAL_RCC_OscConfig+0x2d2>
 800393c:	4b93      	ldr	r3, [pc, #588]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	029b      	lsls	r3, r3, #10
 800394a:	4990      	ldr	r1, [pc, #576]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 800394c:	4313      	orrs	r3, r2
 800394e:	60cb      	str	r3, [r1, #12]
 8003950:	e026      	b.n	80039a0 <HAL_RCC_OscConfig+0x320>
 8003952:	4b8e      	ldr	r3, [pc, #568]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	03db      	lsls	r3, r3, #15
 8003960:	498a      	ldr	r1, [pc, #552]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003962:	4313      	orrs	r3, r2
 8003964:	60cb      	str	r3, [r1, #12]
 8003966:	e01b      	b.n	80039a0 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003968:	4b88      	ldr	r3, [pc, #544]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a87      	ldr	r2, [pc, #540]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003974:	f7fd fe0a 	bl	800158c <HAL_GetTick>
 8003978:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800397a:	e009      	b.n	8003990 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800397c:	f7fd fe06 	bl	800158c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d902      	bls.n	8003990 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	f000 bd48 	b.w	8004420 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003990:	4b7e      	ldr	r3, [pc, #504]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ef      	bne.n	800397c <HAL_RCC_OscConfig+0x2fc>
 800399c:	e000      	b.n	80039a0 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800399e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8094 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_OscConfig+0x340>
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	2b0c      	cmp	r3, #12
 80039b8:	d110      	bne.n	80039dc <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d10d      	bne.n	80039dc <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c0:	4b72      	ldr	r3, [pc, #456]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8083 	beq.w	8003ad4 <HAL_RCC_OscConfig+0x454>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d17e      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f000 bd22 	b.w	8004420 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e4:	d106      	bne.n	80039f4 <HAL_RCC_OscConfig+0x374>
 80039e6:	4b69      	ldr	r3, [pc, #420]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a68      	ldr	r2, [pc, #416]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e041      	b.n	8003a78 <HAL_RCC_OscConfig+0x3f8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039fc:	d112      	bne.n	8003a24 <HAL_RCC_OscConfig+0x3a4>
 80039fe:	4b63      	ldr	r3, [pc, #396]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a62      	ldr	r2, [pc, #392]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b60      	ldr	r3, [pc, #384]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a5f      	ldr	r2, [pc, #380]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a10:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4b5d      	ldr	r3, [pc, #372]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5c      	ldr	r2, [pc, #368]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e029      	b.n	8003a78 <HAL_RCC_OscConfig+0x3f8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003a2c:	d112      	bne.n	8003a54 <HAL_RCC_OscConfig+0x3d4>
 8003a2e:	4b57      	ldr	r3, [pc, #348]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a56      	ldr	r2, [pc, #344]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b54      	ldr	r3, [pc, #336]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a53      	ldr	r2, [pc, #332]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b51      	ldr	r3, [pc, #324]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a50      	ldr	r2, [pc, #320]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e011      	b.n	8003a78 <HAL_RCC_OscConfig+0x3f8>
 8003a54:	4b4d      	ldr	r3, [pc, #308]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a4c      	ldr	r2, [pc, #304]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	4b4a      	ldr	r3, [pc, #296]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a49      	ldr	r2, [pc, #292]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a46      	ldr	r2, [pc, #280]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d014      	beq.n	8003aaa <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8003a80:	f7fd fd84 	bl	800158c <HAL_GetTick>
 8003a84:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a86:	e009      	b.n	8003a9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fd fd80 	bl	800158c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d902      	bls.n	8003a9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	f000 bcc2 	b.w	8004420 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a9c:	4b3b      	ldr	r3, [pc, #236]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ef      	beq.n	8003a88 <HAL_RCC_OscConfig+0x408>
 8003aa8:	e015      	b.n	8003ad6 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003aaa:	f7fd fd6f 	bl	800158c <HAL_GetTick>
 8003aae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ab0:	e009      	b.n	8003ac6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab2:	f7fd fd6b 	bl	800158c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b64      	cmp	r3, #100	; 0x64
 8003abe:	d902      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	f000 bcad 	b.w	8004420 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ac6:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1ef      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x432>
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d066      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_OscConfig+0x474>
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d11a      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d117      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af4:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d006      	beq.n	8003b0e <HAL_RCC_OscConfig+0x48e>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d102      	bne.n	8003b0e <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	f000 bc89 	b.w	8004420 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003b0e:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	041b      	lsls	r3, r3, #16
 8003b1c:	491b      	ldr	r1, [pc, #108]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b22:	e045      	b.n	8003bb0 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d024      	beq.n	8003b76 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003b2c:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b36:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b38:	f7fd fd28 	bl	800158c <HAL_GetTick>
 8003b3c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b3e:	e009      	b.n	8003b54 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b40:	f7fd fd24 	bl	800158c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d902      	bls.n	8003b54 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	f000 bc66 	b.w	8004420 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b54:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0ef      	beq.n	8003b40 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	4907      	ldr	r1, [pc, #28]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	610b      	str	r3, [r1, #16]
 8003b74:	e01c      	b.n	8003bb0 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003b76:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <HAL_RCC_OscConfig+0x50c>)
 8003b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b80:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b82:	f7fd fd03 	bl	800158c <HAL_GetTick>
 8003b86:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b88:	e00c      	b.n	8003ba4 <HAL_RCC_OscConfig+0x524>
 8003b8a:	bf00      	nop
 8003b8c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b90:	f7fd fcfc 	bl	800158c <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d902      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	f000 bc3e 	b.w	8004420 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ba4:	4baf      	ldr	r3, [pc, #700]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1ef      	bne.n	8003b90 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80c7 	beq.w	8003d4c <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc4:	4ba7      	ldr	r3, [pc, #668]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d111      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	4ba4      	ldr	r3, [pc, #656]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd8:	4aa2      	ldr	r2, [pc, #648]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003bda:	f043 0304 	orr.w	r3, r3, #4
 8003bde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003be2:	4ba0      	ldr	r3, [pc, #640]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003bf6:	4b9c      	ldr	r3, [pc, #624]	; (8003e68 <HAL_RCC_OscConfig+0x7e8>)
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d118      	bne.n	8003c34 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c02:	4b99      	ldr	r3, [pc, #612]	; (8003e68 <HAL_RCC_OscConfig+0x7e8>)
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	4a98      	ldr	r2, [pc, #608]	; (8003e68 <HAL_RCC_OscConfig+0x7e8>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0e:	f7fd fcbd 	bl	800158c <HAL_GetTick>
 8003c12:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fd fcb9 	bl	800158c <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e3fb      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c28:	4b8f      	ldr	r3, [pc, #572]	; (8003e68 <HAL_RCC_OscConfig+0x7e8>)
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d05f      	beq.n	8003cfc <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003c3c:	4b89      	ldr	r3, [pc, #548]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c42:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d037      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d006      	beq.n	8003c6a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e3da      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01b      	beq.n	8003cac <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8003c74:	4b7b      	ldr	r3, [pc, #492]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c7a:	4a7a      	ldr	r2, [pc, #488]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003c7c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003c80:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8003c84:	f7fd fc82 	bl	800158c <HAL_GetTick>
 8003c88:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8c:	f7fd fc7e 	bl	800158c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e3c0      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003c9e:	4b71      	ldr	r3, [pc, #452]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1ef      	bne.n	8003c8c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003cac:	4b6d      	ldr	r3, [pc, #436]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	496a      	ldr	r1, [pc, #424]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003cc2:	4b68      	ldr	r3, [pc, #416]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cc8:	4a66      	ldr	r2, [pc, #408]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003cca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003cd2:	f7fd fc5b 	bl	800158c <HAL_GetTick>
 8003cd6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cda:	f7fd fc57 	bl	800158c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e399      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003cec:	4b5d      	ldr	r3, [pc, #372]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0ef      	beq.n	8003cda <HAL_RCC_OscConfig+0x65a>
 8003cfa:	e01b      	b.n	8003d34 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003cfc:	4b59      	ldr	r3, [pc, #356]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d02:	4a58      	ldr	r2, [pc, #352]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003d04:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003d08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003d0c:	f7fd fc3e 	bl	800158c <HAL_GetTick>
 8003d10:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d14:	f7fd fc3a 	bl	800158c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e37c      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d26:	4b4f      	ldr	r3, [pc, #316]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1ef      	bne.n	8003d14 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d34:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3c:	4b49      	ldr	r3, [pc, #292]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d42:	4a48      	ldr	r2, [pc, #288]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003d44:	f023 0304 	bic.w	r3, r3, #4
 8003d48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8112 	beq.w	8003f7e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d60:	4b40      	ldr	r3, [pc, #256]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d111      	bne.n	8003d92 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	4b3d      	ldr	r3, [pc, #244]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d74:	4a3b      	ldr	r2, [pc, #236]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003d76:	f043 0304 	orr.w	r3, r3, #4
 8003d7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003d7e:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d92:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <HAL_RCC_OscConfig+0x7e8>)
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d118      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003d9e:	4b32      	ldr	r3, [pc, #200]	; (8003e68 <HAL_RCC_OscConfig+0x7e8>)
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	4a31      	ldr	r2, [pc, #196]	; (8003e68 <HAL_RCC_OscConfig+0x7e8>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003daa:	f7fd fbef 	bl	800158c <HAL_GetTick>
 8003dae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db2:	f7fd fbeb 	bl	800158c <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e32d      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003dc4:	4b28      	ldr	r3, [pc, #160]	; (8003e68 <HAL_RCC_OscConfig+0x7e8>)
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01f      	beq.n	8003e1c <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d010      	beq.n	8003e0a <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003de8:	4b1e      	ldr	r3, [pc, #120]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003dea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dee:	4a1d      	ldr	r2, [pc, #116]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003df0:	f043 0304 	orr.w	r3, r3, #4
 8003df4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003df8:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003dfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dfe:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003e08:	e018      	b.n	8003e3c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e0a:	4b16      	ldr	r3, [pc, #88]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e10:	4a14      	ldr	r2, [pc, #80]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003e1a:	e00f      	b.n	8003e3c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e1c:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003e1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e22:	4a10      	ldr	r2, [pc, #64]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e2c:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e32:	4a0c      	ldr	r2, [pc, #48]	; (8003e64 <HAL_RCC_OscConfig+0x7e4>)
 8003e34:	f023 0304 	bic.w	r3, r3, #4
 8003e38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d058      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8003e44:	f7fd fba2 	bl	800158c <HAL_GetTick>
 8003e48:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4a:	e00f      	b.n	8003e6c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4c:	f7fd fb9e 	bl	800158c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d906      	bls.n	8003e6c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e2de      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
 8003e62:	bf00      	nop
 8003e64:	46020c00 	.word	0x46020c00
 8003e68:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6c:	4b9c      	ldr	r3, [pc, #624]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003e6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0e8      	beq.n	8003e4c <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01b      	beq.n	8003ebe <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003e86:	4b96      	ldr	r3, [pc, #600]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e8c:	4a94      	ldr	r2, [pc, #592]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e98:	f7fd fb78 	bl	800158c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e2b8      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003eae:	4b8c      	ldr	r3, [pc, #560]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0ed      	beq.n	8003e98 <HAL_RCC_OscConfig+0x818>
 8003ebc:	e053      	b.n	8003f66 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ebe:	4b88      	ldr	r3, [pc, #544]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ec4:	4a86      	ldr	r2, [pc, #536]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed0:	f7fd fb5c 	bl	800158c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e29c      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ee6:	4b7e      	ldr	r3, [pc, #504]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1ed      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x850>
 8003ef4:	e037      	b.n	8003f66 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003ef6:	f7fd fb49 	bl	800158c <HAL_GetTick>
 8003efa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fd fb45 	bl	800158c <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e285      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f14:	4b72      	ldr	r3, [pc, #456]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1ed      	bne.n	8003efe <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003f22:	4b6f      	ldr	r3, [pc, #444]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01a      	beq.n	8003f66 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f30:	4b6b      	ldr	r3, [pc, #428]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f36:	4a6a      	ldr	r2, [pc, #424]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f40:	e00a      	b.n	8003f58 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f42:	f7fd fb23 	bl	800158c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e263      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f58:	4b61      	ldr	r3, [pc, #388]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1ed      	bne.n	8003f42 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f66:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d107      	bne.n	8003f7e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6e:	4b5c      	ldr	r3, [pc, #368]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f74:	4a5a      	ldr	r2, [pc, #360]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003f76:	f023 0304 	bic.w	r3, r3, #4
 8003f7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d036      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d019      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003f92:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a52      	ldr	r2, [pc, #328]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003f98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f9c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003f9e:	f7fd faf5 	bl	800158c <HAL_GetTick>
 8003fa2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fa6:	f7fd faf1 	bl	800158c <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e233      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003fb8:	4b49      	ldr	r3, [pc, #292]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x926>
 8003fc4:	e018      	b.n	8003ff8 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003fc6:	4b46      	ldr	r3, [pc, #280]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a45      	ldr	r2, [pc, #276]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fd0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003fd2:	f7fd fadb 	bl	800158c <HAL_GetTick>
 8003fd6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fda:	f7fd fad7 	bl	800158c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e219      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003fec:	4b3c      	ldr	r3, [pc, #240]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	2b00      	cmp	r3, #0
 8004002:	d036      	beq.n	8004072 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	2b00      	cmp	r3, #0
 800400a:	d019      	beq.n	8004040 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800400c:	4b34      	ldr	r3, [pc, #208]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a33      	ldr	r2, [pc, #204]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8004012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004016:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004018:	f7fd fab8 	bl	800158c <HAL_GetTick>
 800401c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004020:	f7fd fab4 	bl	800158c <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e1f6      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004032:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x9a0>
 800403e:	e018      	b.n	8004072 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004040:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a26      	ldr	r2, [pc, #152]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8004046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800404a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800404c:	f7fd fa9e 	bl	800158c <HAL_GetTick>
 8004050:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004054:	f7fd fa9a 	bl	800158c <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e1dc      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	2b00      	cmp	r3, #0
 800407c:	d07f      	beq.n	800417e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004082:	2b00      	cmp	r3, #0
 8004084:	d062      	beq.n	800414c <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004086:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 800408c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004090:	6093      	str	r3, [r2, #8]
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	4910      	ldr	r1, [pc, #64]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80040ac:	d309      	bcc.n	80040c2 <HAL_RCC_OscConfig+0xa42>
 80040ae:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f023 021f 	bic.w	r2, r3, #31
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	4909      	ldr	r1, [pc, #36]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	60cb      	str	r3, [r1, #12]
 80040c0:	e02a      	b.n	8004118 <HAL_RCC_OscConfig+0xa98>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	da0c      	bge.n	80040e4 <HAL_RCC_OscConfig+0xa64>
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	015b      	lsls	r3, r3, #5
 80040d8:	4901      	ldr	r1, [pc, #4]	; (80040e0 <HAL_RCC_OscConfig+0xa60>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	60cb      	str	r3, [r1, #12]
 80040de:	e01b      	b.n	8004118 <HAL_RCC_OscConfig+0xa98>
 80040e0:	46020c00 	.word	0x46020c00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ec:	d30a      	bcc.n	8004104 <HAL_RCC_OscConfig+0xa84>
 80040ee:	4ba5      	ldr	r3, [pc, #660]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	029b      	lsls	r3, r3, #10
 80040fc:	49a1      	ldr	r1, [pc, #644]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	60cb      	str	r3, [r1, #12]
 8004102:	e009      	b.n	8004118 <HAL_RCC_OscConfig+0xa98>
 8004104:	4b9f      	ldr	r3, [pc, #636]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	03db      	lsls	r3, r3, #15
 8004112:	499c      	ldr	r1, [pc, #624]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004114:	4313      	orrs	r3, r2
 8004116:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004118:	4b9a      	ldr	r3, [pc, #616]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a99      	ldr	r2, [pc, #612]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 800411e:	f043 0310 	orr.w	r3, r3, #16
 8004122:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004124:	f7fd fa32 	bl	800158c <HAL_GetTick>
 8004128:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800412c:	f7fd fa2e 	bl	800158c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e170      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800413e:	4b91      	ldr	r3, [pc, #580]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0xaac>
 800414a:	e018      	b.n	800417e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800414c:	4b8d      	ldr	r3, [pc, #564]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a8c      	ldr	r2, [pc, #560]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004152:	f023 0310 	bic.w	r3, r3, #16
 8004156:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004158:	f7fd fa18 	bl	800158c <HAL_GetTick>
 800415c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004160:	f7fd fa14 	bl	800158c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e156      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004172:	4b84      	ldr	r3, [pc, #528]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 814b 	beq.w	800441e <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004188:	2300      	movs	r3, #0
 800418a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800418e:	4b7d      	ldr	r3, [pc, #500]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	2b0c      	cmp	r3, #12
 8004198:	f000 80fa 	beq.w	8004390 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	f040 80cc 	bne.w	800433e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80041a6:	4b77      	ldr	r3, [pc, #476]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a76      	ldr	r2, [pc, #472]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80041ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041b2:	f7fd f9eb 	bl	800158c <HAL_GetTick>
 80041b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ba:	f7fd f9e7 	bl	800158c <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e129      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041cc:	4b6d      	ldr	r3, [pc, #436]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f0      	bne.n	80041ba <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d8:	4b6a      	ldr	r3, [pc, #424]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80041da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d111      	bne.n	800420a <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80041e6:	4b67      	ldr	r3, [pc, #412]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80041e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ec:	4a65      	ldr	r2, [pc, #404]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80041ee:	f043 0304 	orr.w	r3, r3, #4
 80041f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80041f6:	4b63      	ldr	r3, [pc, #396]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80041f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800420a:	4b5f      	ldr	r3, [pc, #380]	; (8004388 <HAL_RCC_OscConfig+0xd08>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004212:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004216:	d102      	bne.n	800421e <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800421e:	4b5a      	ldr	r3, [pc, #360]	; (8004388 <HAL_RCC_OscConfig+0xd08>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	4a59      	ldr	r2, [pc, #356]	; (8004388 <HAL_RCC_OscConfig+0xd08>)
 8004224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004228:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800422a:	4b56      	ldr	r3, [pc, #344]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004232:	f023 0303 	bic.w	r3, r3, #3
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800423e:	3a01      	subs	r2, #1
 8004240:	0212      	lsls	r2, r2, #8
 8004242:	4311      	orrs	r1, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004248:	430a      	orrs	r2, r1
 800424a:	494e      	ldr	r1, [pc, #312]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 800424c:	4313      	orrs	r3, r2
 800424e:	628b      	str	r3, [r1, #40]	; 0x28
 8004250:	4b4c      	ldr	r3, [pc, #304]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004254:	4b4d      	ldr	r3, [pc, #308]	; (800438c <HAL_RCC_OscConfig+0xd0c>)
 8004256:	4013      	ands	r3, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800425c:	3a01      	subs	r2, #1
 800425e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004266:	3a01      	subs	r2, #1
 8004268:	0252      	lsls	r2, r2, #9
 800426a:	b292      	uxth	r2, r2
 800426c:	4311      	orrs	r1, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004272:	3a01      	subs	r2, #1
 8004274:	0412      	lsls	r2, r2, #16
 8004276:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800427a:	4311      	orrs	r1, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004280:	3a01      	subs	r2, #1
 8004282:	0612      	lsls	r2, r2, #24
 8004284:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004288:	430a      	orrs	r2, r1
 800428a:	493e      	ldr	r1, [pc, #248]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 800428c:	4313      	orrs	r3, r2
 800428e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004290:	4b3c      	ldr	r3, [pc, #240]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	4a3b      	ldr	r2, [pc, #236]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004296:	f023 0310 	bic.w	r3, r3, #16
 800429a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800429c:	4b39      	ldr	r3, [pc, #228]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042ac:	00d2      	lsls	r2, r2, #3
 80042ae:	4935      	ldr	r1, [pc, #212]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80042b4:	4b33      	ldr	r3, [pc, #204]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	4a32      	ldr	r2, [pc, #200]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80042ba:	f043 0310 	orr.w	r3, r3, #16
 80042be:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80042c0:	4b30      	ldr	r3, [pc, #192]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	f023 020c 	bic.w	r2, r3, #12
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042cc:	492d      	ldr	r1, [pc, #180]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80042d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d105      	bne.n	80042e6 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80042da:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <HAL_RCC_OscConfig+0xd08>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	4a2a      	ldr	r2, [pc, #168]	; (8004388 <HAL_RCC_OscConfig+0xd08>)
 80042e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e4:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80042e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80042ee:	4b25      	ldr	r3, [pc, #148]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80042f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f4:	4a23      	ldr	r2, [pc, #140]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 80042f6:	f023 0304 	bic.w	r3, r3, #4
 80042fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80042fe:	4b21      	ldr	r3, [pc, #132]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	4a20      	ldr	r2, [pc, #128]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004308:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800430a:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1d      	ldr	r2, [pc, #116]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004310:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004314:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004316:	f7fd f939 	bl	800158c <HAL_GetTick>
 800431a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431e:	f7fd f935 	bl	800158c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e077      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004330:	4b14      	ldr	r3, [pc, #80]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0xc9e>
 800433c:	e06f      	b.n	800441e <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a10      	ldr	r2, [pc, #64]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004348:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800434a:	f7fd f91f 	bl	800158c <HAL_GetTick>
 800434e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004352:	f7fd f91b 	bl	800158c <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e05d      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004364:	4b07      	ldr	r3, [pc, #28]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f0      	bne.n	8004352 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	4a03      	ldr	r2, [pc, #12]	; (8004384 <HAL_RCC_OscConfig+0xd04>)
 8004376:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800437a:	f023 0303 	bic.w	r3, r3, #3
 800437e:	6293      	str	r3, [r2, #40]	; 0x28
 8004380:	e04d      	b.n	800441e <HAL_RCC_OscConfig+0xd9e>
 8004382:	bf00      	nop
 8004384:	46020c00 	.word	0x46020c00
 8004388:	46020800 	.word	0x46020800
 800438c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004390:	4b25      	ldr	r3, [pc, #148]	; (8004428 <HAL_RCC_OscConfig+0xda8>)
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004396:	4b24      	ldr	r3, [pc, #144]	; (8004428 <HAL_RCC_OscConfig+0xda8>)
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d03a      	beq.n	800441a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f003 0203 	and.w	r2, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d133      	bne.n	800441a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	0a1b      	lsrs	r3, r3, #8
 80043b6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d12a      	bne.n	800441a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	0b1b      	lsrs	r3, r3, #12
 80043c8:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d122      	bne.n	800441a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043de:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d11a      	bne.n	800441a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	0a5b      	lsrs	r3, r3, #9
 80043e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d111      	bne.n	800441a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	0c1b      	lsrs	r3, r3, #16
 80043fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004402:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004404:	429a      	cmp	r2, r3
 8004406:	d108      	bne.n	800441a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	0e1b      	lsrs	r3, r3, #24
 800440c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d001      	beq.n	800441e <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3738      	adds	r7, #56	; 0x38
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	46020c00 	.word	0x46020c00

0800442c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e1d9      	b.n	80047f4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004440:	4b9b      	ldr	r3, [pc, #620]	; (80046b0 <HAL_RCC_ClockConfig+0x284>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d910      	bls.n	8004470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b98      	ldr	r3, [pc, #608]	; (80046b0 <HAL_RCC_ClockConfig+0x284>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 020f 	bic.w	r2, r3, #15
 8004456:	4996      	ldr	r1, [pc, #600]	; (80046b0 <HAL_RCC_ClockConfig+0x284>)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b94      	ldr	r3, [pc, #592]	; (80046b0 <HAL_RCC_ClockConfig+0x284>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e1c1      	b.n	80047f4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b00      	cmp	r3, #0
 800447a:	d010      	beq.n	800449e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	4b8c      	ldr	r3, [pc, #560]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004488:	429a      	cmp	r2, r3
 800448a:	d908      	bls.n	800449e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800448c:	4b89      	ldr	r3, [pc, #548]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	4986      	ldr	r1, [pc, #536]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 800449a:	4313      	orrs	r3, r2
 800449c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d012      	beq.n	80044d0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	4b81      	ldr	r3, [pc, #516]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d909      	bls.n	80044d0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80044bc:	4b7d      	ldr	r3, [pc, #500]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	497a      	ldr	r1, [pc, #488]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d010      	beq.n	80044fe <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	4b74      	ldr	r3, [pc, #464]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d908      	bls.n	80044fe <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80044ec:	4b71      	ldr	r3, [pc, #452]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	496e      	ldr	r1, [pc, #440]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d010      	beq.n	800452c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	4b69      	ldr	r3, [pc, #420]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	429a      	cmp	r2, r3
 8004518:	d908      	bls.n	800452c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800451a:	4b66      	ldr	r3, [pc, #408]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f023 020f 	bic.w	r2, r3, #15
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	4963      	ldr	r1, [pc, #396]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 8004528:	4313      	orrs	r3, r2
 800452a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80d2 	beq.w	80046de <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800453a:	2300      	movs	r3, #0
 800453c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b03      	cmp	r3, #3
 8004544:	d143      	bne.n	80045ce <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004546:	4b5b      	ldr	r3, [pc, #364]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 8004548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d110      	bne.n	8004576 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004554:	4b57      	ldr	r3, [pc, #348]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 8004556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800455a:	4a56      	ldr	r2, [pc, #344]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 800455c:	f043 0304 	orr.w	r3, r3, #4
 8004560:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004564:	4b53      	ldr	r3, [pc, #332]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 8004566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004572:	2301      	movs	r3, #1
 8004574:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004576:	f7fd f809 	bl	800158c <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800457c:	4b4e      	ldr	r3, [pc, #312]	; (80046b8 <HAL_RCC_ClockConfig+0x28c>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00f      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004588:	e008      	b.n	800459c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800458a:	f7fc ffff 	bl	800158c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e12b      	b.n	80047f4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800459c:	4b46      	ldr	r3, [pc, #280]	; (80046b8 <HAL_RCC_ClockConfig+0x28c>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80045ae:	4b41      	ldr	r3, [pc, #260]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 80045b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b4:	4a3f      	ldr	r2, [pc, #252]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 80045b6:	f023 0304 	bic.w	r3, r3, #4
 80045ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80045be:	4b3d      	ldr	r3, [pc, #244]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d121      	bne.n	800460e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e112      	b.n	80047f4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d107      	bne.n	80045e6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d6:	4b37      	ldr	r3, [pc, #220]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d115      	bne.n	800460e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e106      	b.n	80047f4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d107      	bne.n	80045fe <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80045ee:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e0fa      	b.n	80047f4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045fe:	4b2d      	ldr	r3, [pc, #180]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e0f2      	b.n	80047f4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800460e:	4b29      	ldr	r3, [pc, #164]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f023 0203 	bic.w	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4926      	ldr	r1, [pc, #152]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 800461c:	4313      	orrs	r3, r2
 800461e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004620:	f7fc ffb4 	bl	800158c <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b03      	cmp	r3, #3
 800462c:	d112      	bne.n	8004654 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800462e:	e00a      	b.n	8004646 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004630:	f7fc ffac 	bl	800158c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	; 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e0d6      	b.n	80047f4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004646:	4b1b      	ldr	r3, [pc, #108]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d1ee      	bne.n	8004630 <HAL_RCC_ClockConfig+0x204>
 8004652:	e044      	b.n	80046de <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d112      	bne.n	8004682 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800465c:	e00a      	b.n	8004674 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465e:	f7fc ff95 	bl	800158c <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	f241 3288 	movw	r2, #5000	; 0x1388
 800466c:	4293      	cmp	r3, r2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e0bf      	b.n	80047f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	f003 030c 	and.w	r3, r3, #12
 800467c:	2b08      	cmp	r3, #8
 800467e:	d1ee      	bne.n	800465e <HAL_RCC_ClockConfig+0x232>
 8004680:	e02d      	b.n	80046de <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d123      	bne.n	80046d2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468c:	f7fc ff7e 	bl	800158c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e0a8      	b.n	80047f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046a2:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <HAL_RCC_ClockConfig+0x288>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1ee      	bne.n	800468c <HAL_RCC_ClockConfig+0x260>
 80046ae:	e016      	b.n	80046de <HAL_RCC_ClockConfig+0x2b2>
 80046b0:	40022000 	.word	0x40022000
 80046b4:	46020c00 	.word	0x46020c00
 80046b8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046bc:	f7fc ff66 	bl	800158c <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e090      	b.n	80047f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046d2:	4b4a      	ldr	r3, [pc, #296]	; (80047fc <HAL_RCC_ClockConfig+0x3d0>)
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d1ee      	bne.n	80046bc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d010      	beq.n	800470c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	4b43      	ldr	r3, [pc, #268]	; (80047fc <HAL_RCC_ClockConfig+0x3d0>)
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d208      	bcs.n	800470c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80046fa:	4b40      	ldr	r3, [pc, #256]	; (80047fc <HAL_RCC_ClockConfig+0x3d0>)
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f023 020f 	bic.w	r2, r3, #15
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	493d      	ldr	r1, [pc, #244]	; (80047fc <HAL_RCC_ClockConfig+0x3d0>)
 8004708:	4313      	orrs	r3, r2
 800470a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800470c:	4b3c      	ldr	r3, [pc, #240]	; (8004800 <HAL_RCC_ClockConfig+0x3d4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d210      	bcs.n	800473c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471a:	4b39      	ldr	r3, [pc, #228]	; (8004800 <HAL_RCC_ClockConfig+0x3d4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 020f 	bic.w	r2, r3, #15
 8004722:	4937      	ldr	r1, [pc, #220]	; (8004800 <HAL_RCC_ClockConfig+0x3d4>)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	4313      	orrs	r3, r2
 8004728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472a:	4b35      	ldr	r3, [pc, #212]	; (8004800 <HAL_RCC_ClockConfig+0x3d4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e05b      	b.n	80047f4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d010      	beq.n	800476a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	4b2b      	ldr	r3, [pc, #172]	; (80047fc <HAL_RCC_ClockConfig+0x3d0>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004754:	429a      	cmp	r2, r3
 8004756:	d208      	bcs.n	800476a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004758:	4b28      	ldr	r3, [pc, #160]	; (80047fc <HAL_RCC_ClockConfig+0x3d0>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4925      	ldr	r1, [pc, #148]	; (80047fc <HAL_RCC_ClockConfig+0x3d0>)
 8004766:	4313      	orrs	r3, r2
 8004768:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d012      	beq.n	800479c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	4b20      	ldr	r3, [pc, #128]	; (80047fc <HAL_RCC_ClockConfig+0x3d0>)
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	091b      	lsrs	r3, r3, #4
 8004780:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004784:	429a      	cmp	r2, r3
 8004786:	d209      	bcs.n	800479c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004788:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <HAL_RCC_ClockConfig+0x3d0>)
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	4919      	ldr	r1, [pc, #100]	; (80047fc <HAL_RCC_ClockConfig+0x3d0>)
 8004798:	4313      	orrs	r3, r2
 800479a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d010      	beq.n	80047ca <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	695a      	ldr	r2, [r3, #20]
 80047ac:	4b13      	ldr	r3, [pc, #76]	; (80047fc <HAL_RCC_ClockConfig+0x3d0>)
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d208      	bcs.n	80047ca <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80047b8:	4b10      	ldr	r3, [pc, #64]	; (80047fc <HAL_RCC_ClockConfig+0x3d0>)
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	490d      	ldr	r1, [pc, #52]	; (80047fc <HAL_RCC_ClockConfig+0x3d0>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80047ca:	f000 f821 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80047ce:	4602      	mov	r2, r0
 80047d0:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <HAL_RCC_ClockConfig+0x3d0>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	490a      	ldr	r1, [pc, #40]	; (8004804 <HAL_RCC_ClockConfig+0x3d8>)
 80047da:	5ccb      	ldrb	r3, [r1, r3]
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
 80047e0:	4a09      	ldr	r2, [pc, #36]	; (8004808 <HAL_RCC_ClockConfig+0x3dc>)
 80047e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047e4:	4b09      	ldr	r3, [pc, #36]	; (800480c <HAL_RCC_ClockConfig+0x3e0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fc fe85 	bl	80014f8 <HAL_InitTick>
 80047ee:	4603      	mov	r3, r0
 80047f0:	73fb      	strb	r3, [r7, #15]

  return status;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	46020c00 	.word	0x46020c00
 8004800:	40022000 	.word	0x40022000
 8004804:	080090d4 	.word	0x080090d4
 8004808:	20025800 	.word	0x20025800
 800480c:	20025804 	.word	0x20025804

08004810 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004810:	b480      	push	{r7}
 8004812:	b08b      	sub	sp, #44	; 0x2c
 8004814:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800481e:	4b7b      	ldr	r3, [pc, #492]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004828:	4b78      	ldr	r3, [pc, #480]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0x34>
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b0c      	cmp	r3, #12
 800483c:	d121      	bne.n	8004882 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d11e      	bne.n	8004882 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004844:	4b71      	ldr	r3, [pc, #452]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d107      	bne.n	8004860 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004850:	4b6e      	ldr	r3, [pc, #440]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004856:	0b1b      	lsrs	r3, r3, #12
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	627b      	str	r3, [r7, #36]	; 0x24
 800485e:	e005      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004860:	4b6a      	ldr	r3, [pc, #424]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	0f1b      	lsrs	r3, r3, #28
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800486c:	4a68      	ldr	r2, [pc, #416]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x200>)
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004874:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d110      	bne.n	800489e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004880:	e00d      	b.n	800489e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004882:	4b62      	ldr	r3, [pc, #392]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b04      	cmp	r3, #4
 800488c:	d102      	bne.n	8004894 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800488e:	4b61      	ldr	r3, [pc, #388]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004890:	623b      	str	r3, [r7, #32]
 8004892:	e004      	b.n	800489e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b08      	cmp	r3, #8
 8004898:	d101      	bne.n	800489e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800489a:	4b5e      	ldr	r3, [pc, #376]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x204>)
 800489c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b0c      	cmp	r3, #12
 80048a2:	f040 80ac 	bne.w	80049fe <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80048a6:	4b59      	ldr	r3, [pc, #356]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80048b0:	4b56      	ldr	r3, [pc, #344]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	0a1b      	lsrs	r3, r3, #8
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80048be:	4b53      	ldr	r3, [pc, #332]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	091b      	lsrs	r3, r3, #4
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80048ca:	4b50      	ldr	r3, [pc, #320]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	08db      	lsrs	r3, r3, #3
 80048d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	fb02 f303 	mul.w	r3, r2, r3
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8086 	beq.w	80049fa <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d003      	beq.n	80048fc <HAL_RCC_GetSysClockFreq+0xec>
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	d022      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x130>
 80048fa:	e043      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004906:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004a18 <HAL_RCC_GetSysClockFreq+0x208>
 800490a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800490e:	4b3f      	ldr	r3, [pc, #252]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800491e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004922:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004a1c <HAL_RCC_GetSysClockFreq+0x20c>
 8004926:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800492a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800492e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004932:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800493e:	e046      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8004a18 <HAL_RCC_GetSysClockFreq+0x208>
 800494e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004952:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004962:	ed97 6a01 	vldr	s12, [r7, #4]
 8004966:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004a1c <HAL_RCC_GetSysClockFreq+0x20c>
 800496a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800496e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004976:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800497a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004982:	e024      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499c:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a4:	ee07 3a90 	vmov	s15, r3
 80049a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049ac:	ed97 6a01 	vldr	s12, [r7, #4]
 80049b0:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8004a1c <HAL_RCC_GetSysClockFreq+0x20c>
 80049b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80049cc:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80049d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d2:	0e1b      	lsrs	r3, r3, #24
 80049d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d8:	3301      	adds	r3, #1
 80049da:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f2:	ee17 3a90 	vmov	r3, s15
 80049f6:	623b      	str	r3, [r7, #32]
 80049f8:	e001      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80049fe:	6a3b      	ldr	r3, [r7, #32]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	372c      	adds	r7, #44	; 0x2c
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	46020c00 	.word	0x46020c00
 8004a10:	080090ec 	.word	0x080090ec
 8004a14:	00f42400 	.word	0x00f42400
 8004a18:	4b742400 	.word	0x4b742400
 8004a1c:	46000000 	.word	0x46000000

08004a20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004a24:	f7ff fef4 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <HAL_RCC_GetHCLKFreq+0x28>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	4906      	ldr	r1, [pc, #24]	; (8004a4c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004a34:	5ccb      	ldrb	r3, [r1, r3]
 8004a36:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3a:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <HAL_RCC_GetHCLKFreq+0x30>)
 8004a3c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004a3e:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <HAL_RCC_GetHCLKFreq+0x30>)
 8004a40:	681b      	ldr	r3, [r3, #0]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	46020c00 	.word	0x46020c00
 8004a4c:	080090d4 	.word	0x080090d4
 8004a50:	20025800 	.word	0x20025800

08004a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004a58:	f7ff ffe2 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	091b      	lsrs	r3, r3, #4
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	4903      	ldr	r1, [pc, #12]	; (8004a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a6a:	5ccb      	ldrb	r3, [r1, r3]
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	46020c00 	.word	0x46020c00
 8004a78:	080090e4 	.word	0x080090e4

08004a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004a80:	f7ff ffce 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	0a1b      	lsrs	r3, r3, #8
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	4903      	ldr	r1, [pc, #12]	; (8004aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a92:	5ccb      	ldrb	r3, [r1, r3]
 8004a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	46020c00 	.word	0x46020c00
 8004aa0:	080090e4 	.word	0x080090e4

08004aa4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004aa8:	f7ff ffba 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	4903      	ldr	r1, [pc, #12]	; (8004ac8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004aba:	5ccb      	ldrb	r3, [r1, r3]
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	46020c00 	.word	0x46020c00
 8004ac8:	080090e4 	.word	0x080090e4

08004acc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ad4:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ae2:	f7fe fd4f 	bl	8003584 <HAL_PWREx_GetVoltageRange>
 8004ae6:	6178      	str	r0, [r7, #20]
 8004ae8:	e019      	b.n	8004b1e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aea:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004af0:	4a37      	ldr	r2, [pc, #220]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004af2:	f043 0304 	orr.w	r3, r3, #4
 8004af6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004afa:	4b35      	ldr	r3, [pc, #212]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b08:	f7fe fd3c 	bl	8003584 <HAL_PWREx_GetVoltageRange>
 8004b0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b0e:	4b30      	ldr	r3, [pc, #192]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b14:	4a2e      	ldr	r2, [pc, #184]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b16:	f023 0304 	bic.w	r3, r3, #4
 8004b1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b24:	d003      	beq.n	8004b2e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b2c:	d109      	bne.n	8004b42 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b34:	d202      	bcs.n	8004b3c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004b36:	2301      	movs	r3, #1
 8004b38:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004b3a:	e033      	b.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004b40:	e030      	b.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b48:	d208      	bcs.n	8004b5c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b50:	d102      	bne.n	8004b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004b52:	2303      	movs	r3, #3
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e025      	b.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e035      	b.n	8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b62:	d90f      	bls.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d109      	bne.n	8004b7e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b70:	d902      	bls.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004b72:	2300      	movs	r3, #0
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	e015      	b.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004b78:	2301      	movs	r3, #1
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	e012      	b.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004b7e:	2300      	movs	r3, #0
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	e00f      	b.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b8a:	d109      	bne.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b92:	d102      	bne.n	8004b9a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004b94:	2301      	movs	r3, #1
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	e004      	b.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	e001      	b.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f023 020f 	bic.w	r2, r3, #15
 8004bac:	4909      	ldr	r1, [pc, #36]	; (8004bd4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004bb4:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d001      	beq.n	8004bc6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	46020c00 	.word	0x46020c00
 8004bd4:	40022000 	.word	0x40022000

08004bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bdc:	b0ba      	sub	sp, #232	; 0xe8
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bea:	2300      	movs	r3, #0
 8004bec:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f002 0401 	and.w	r4, r2, #1
 8004bfc:	2500      	movs	r5, #0
 8004bfe:	ea54 0305 	orrs.w	r3, r4, r5
 8004c02:	d00b      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004c04:	4bcb      	ldr	r3, [pc, #812]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c0a:	f023 0103 	bic.w	r1, r3, #3
 8004c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c14:	4ac7      	ldr	r2, [pc, #796]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c16:	430b      	orrs	r3, r1
 8004c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	f002 0802 	and.w	r8, r2, #2
 8004c28:	f04f 0900 	mov.w	r9, #0
 8004c2c:	ea58 0309 	orrs.w	r3, r8, r9
 8004c30:	d00b      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004c32:	4bc0      	ldr	r3, [pc, #768]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c38:	f023 010c 	bic.w	r1, r3, #12
 8004c3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c42:	4abc      	ldr	r2, [pc, #752]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c44:	430b      	orrs	r3, r1
 8004c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	f002 0a04 	and.w	sl, r2, #4
 8004c56:	f04f 0b00 	mov.w	fp, #0
 8004c5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004c5e:	d00b      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004c60:	4bb4      	ldr	r3, [pc, #720]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c66:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c70:	4ab0      	ldr	r2, [pc, #704]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c72:	430b      	orrs	r3, r1
 8004c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	f002 0308 	and.w	r3, r2, #8
 8004c84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004c92:	460b      	mov	r3, r1
 8004c94:	4313      	orrs	r3, r2
 8004c96:	d00b      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004c98:	4ba6      	ldr	r3, [pc, #664]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca8:	4aa2      	ldr	r2, [pc, #648]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004caa:	430b      	orrs	r3, r1
 8004cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	f002 0310 	and.w	r3, r2, #16
 8004cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cc6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	d00b      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004cd0:	4b98      	ldr	r3, [pc, #608]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce0:	4a94      	ldr	r2, [pc, #592]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ce8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	f002 0320 	and.w	r3, r2, #32
 8004cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004cfe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004d02:	460b      	mov	r3, r1
 8004d04:	4313      	orrs	r3, r2
 8004d06:	d00b      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004d08:	4b8a      	ldr	r3, [pc, #552]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d0e:	f023 0107 	bic.w	r1, r3, #7
 8004d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d18:	4a86      	ldr	r2, [pc, #536]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d1a:	430b      	orrs	r3, r1
 8004d1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d30:	2300      	movs	r3, #0
 8004d32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	d00b      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004d40:	4b7c      	ldr	r3, [pc, #496]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d46:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d50:	4a78      	ldr	r2, [pc, #480]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d52:	430b      	orrs	r3, r1
 8004d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d60:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004d64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d6e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d72:	460b      	mov	r3, r1
 8004d74:	4313      	orrs	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004d78:	4b6e      	ldr	r3, [pc, #440]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d88:	4a6a      	ldr	r2, [pc, #424]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004d9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004da0:	2300      	movs	r3, #0
 8004da2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004da6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4313      	orrs	r3, r2
 8004dae:	d00b      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004db0:	4b60      	ldr	r3, [pc, #384]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004db2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004db6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	4a5c      	ldr	r2, [pc, #368]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dde:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004de2:	460b      	mov	r3, r1
 8004de4:	4313      	orrs	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004de8:	4b52      	ldr	r3, [pc, #328]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dee:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8004df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df8:	4a4e      	ldr	r2, [pc, #312]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004e0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e10:	2300      	movs	r3, #0
 8004e12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	d00b      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004e20:	4b44      	ldr	r3, [pc, #272]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e26:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e30:	4a40      	ldr	r2, [pc, #256]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e32:	430b      	orrs	r3, r1
 8004e34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e40:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e4e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004e52:	460b      	mov	r3, r1
 8004e54:	4313      	orrs	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004e58:	4b36      	ldr	r3, [pc, #216]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e5e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e68:	4a32      	ldr	r2, [pc, #200]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004e70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e80:	2300      	movs	r3, #0
 8004e82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	d00c      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004e90:	4b28      	ldr	r3, [pc, #160]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea2:	4a24      	ldr	r2, [pc, #144]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004eb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eb8:	2300      	movs	r3, #0
 8004eba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ebc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	d04f      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	2b80      	cmp	r3, #128	; 0x80
 8004ed0:	d02d      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004ed2:	2b80      	cmp	r3, #128	; 0x80
 8004ed4:	d827      	bhi.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ed6:	2b60      	cmp	r3, #96	; 0x60
 8004ed8:	d02e      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004eda:	2b60      	cmp	r3, #96	; 0x60
 8004edc:	d823      	bhi.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	d006      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004ee2:	2b40      	cmp	r3, #64	; 0x40
 8004ee4:	d81f      	bhi.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d011      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004eee:	e01a      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ef0:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	4a0f      	ldr	r2, [pc, #60]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efa:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004efc:	e01d      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f02:	3308      	adds	r3, #8
 8004f04:	4618      	mov	r0, r3
 8004f06:	f002 f981 	bl	800720c <RCCEx_PLL2_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f10:	e013      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f16:	332c      	adds	r3, #44	; 0x2c
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f002 fa0f 	bl	800733c <RCCEx_PLL3_Config>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f24:	e009      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004f2c:	e005      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004f2e:	bf00      	nop
 8004f30:	e003      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004f32:	bf00      	nop
 8004f34:	46020c00 	.word	0x46020c00
        break;
 8004f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10d      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004f42:	4bb6      	ldr	r3, [pc, #728]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004f44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f48:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f54:	4ab1      	ldr	r2, [pc, #708]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004f56:	430b      	orrs	r3, r1
 8004f58:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004f5c:	e003      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f62:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004f72:	673b      	str	r3, [r7, #112]	; 0x70
 8004f74:	2300      	movs	r3, #0
 8004f76:	677b      	str	r3, [r7, #116]	; 0x74
 8004f78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	d053      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004f82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8e:	d033      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f94:	d82c      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f9a:	d02f      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fa0:	d826      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa6:	d008      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fac:	d820      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8004fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb6:	d011      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004fb8:	e01a      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fba:	4b98      	ldr	r3, [pc, #608]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	4a97      	ldr	r2, [pc, #604]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fc6:	e01a      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fcc:	3308      	adds	r3, #8
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f002 f91c 	bl	800720c <RCCEx_PLL2_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fda:	e010      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fe0:	332c      	adds	r3, #44	; 0x2c
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f002 f9aa 	bl	800733c <RCCEx_PLL3_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fee:	e006      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004ff6:	e002      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004ff8:	bf00      	nop
 8004ffa:	e000      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ffe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10d      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005006:	4b85      	ldr	r3, [pc, #532]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005008:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800500c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005010:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005018:	4a80      	ldr	r2, [pc, #512]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800501a:	430b      	orrs	r3, r1
 800501c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005020:	e003      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005022:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005026:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800502a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005036:	66bb      	str	r3, [r7, #104]	; 0x68
 8005038:	2300      	movs	r3, #0
 800503a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800503c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005040:	460b      	mov	r3, r1
 8005042:	4313      	orrs	r3, r2
 8005044:	d046      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800504a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800504e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005052:	d028      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005054:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005058:	d821      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800505a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800505e:	d022      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005064:	d81b      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005066:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800506a:	d01c      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800506c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005070:	d815      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005076:	d008      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507c:	d80f      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d011      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005086:	d00e      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005088:	e009      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800508a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800508e:	3308      	adds	r3, #8
 8005090:	4618      	mov	r0, r3
 8005092:	f002 f8bb 	bl	800720c <RCCEx_PLL2_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800509c:	e004      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80050a4:	e000      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80050a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10d      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80050b0:	4b5a      	ldr	r3, [pc, #360]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80050b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050b6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80050ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050c2:	4a56      	ldr	r2, [pc, #344]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80050c4:	430b      	orrs	r3, r1
 80050c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050ca:	e003      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80050d0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80050d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80050e0:	663b      	str	r3, [r7, #96]	; 0x60
 80050e2:	2300      	movs	r3, #0
 80050e4:	667b      	str	r3, [r7, #100]	; 0x64
 80050e6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80050ea:	460b      	mov	r3, r1
 80050ec:	4313      	orrs	r3, r2
 80050ee:	d03f      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80050f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d81e      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x562>
 80050fc:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	08005143 	.word	0x08005143
 8005108:	08005119 	.word	0x08005119
 800510c:	08005127 	.word	0x08005127
 8005110:	08005143 	.word	0x08005143
 8005114:	08005143 	.word	0x08005143
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005118:	4b40      	ldr	r3, [pc, #256]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800511a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511c:	4a3f      	ldr	r2, [pc, #252]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800511e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005122:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005124:	e00e      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800512a:	332c      	adds	r3, #44	; 0x2c
 800512c:	4618      	mov	r0, r3
 800512e:	f002 f905 	bl	800733c <RCCEx_PLL3_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005138:	e004      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005140:	e000      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8005142:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005144:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10d      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800514c:	4b33      	ldr	r3, [pc, #204]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800514e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005152:	f023 0107 	bic.w	r1, r3, #7
 8005156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515e:	4a2f      	ldr	r2, [pc, #188]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005160:	430b      	orrs	r3, r1
 8005162:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005166:	e003      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005168:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800516c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800517c:	65bb      	str	r3, [r7, #88]	; 0x58
 800517e:	2300      	movs	r3, #0
 8005180:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005182:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005186:	460b      	mov	r3, r1
 8005188:	4313      	orrs	r3, r2
 800518a:	d04d      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800518c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005194:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005198:	d028      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x614>
 800519a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800519e:	d821      	bhi.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80051a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051a4:	d024      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80051a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051aa:	d81b      	bhi.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80051ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051b0:	d00e      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80051b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051b6:	d815      	bhi.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01b      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80051bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c0:	d110      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051c2:	4b16      	ldr	r3, [pc, #88]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	4a15      	ldr	r2, [pc, #84]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80051c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051cc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80051ce:	e012      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051d4:	332c      	adds	r3, #44	; 0x2c
 80051d6:	4618      	mov	r0, r3
 80051d8:	f002 f8b0 	bl	800733c <RCCEx_PLL3_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80051e2:	e008      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80051ea:	e004      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80051ec:	bf00      	nop
 80051ee:	e002      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80051f0:	bf00      	nop
 80051f2:	e000      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80051f4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80051f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d110      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80051fe:	4b07      	ldr	r3, [pc, #28]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005204:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800520c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005210:	4a02      	ldr	r2, [pc, #8]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005212:	430b      	orrs	r3, r1
 8005214:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005218:	e006      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800521a:	bf00      	nop
 800521c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005220:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005224:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005228:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005234:	653b      	str	r3, [r7, #80]	; 0x50
 8005236:	2300      	movs	r3, #0
 8005238:	657b      	str	r3, [r7, #84]	; 0x54
 800523a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800523e:	460b      	mov	r3, r1
 8005240:	4313      	orrs	r3, r2
 8005242:	f000 80b5 	beq.w	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005246:	2300      	movs	r3, #0
 8005248:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800524c:	4b9d      	ldr	r3, [pc, #628]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800524e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d113      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800525a:	4b9a      	ldr	r3, [pc, #616]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800525c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005260:	4a98      	ldr	r2, [pc, #608]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005262:	f043 0304 	orr.w	r3, r3, #4
 8005266:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800526a:	4b96      	ldr	r3, [pc, #600]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800526c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005282:	4b91      	ldr	r3, [pc, #580]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	4a90      	ldr	r2, [pc, #576]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800528e:	f7fc f97d 	bl	800158c <HAL_GetTick>
 8005292:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005296:	e00b      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005298:	f7fc f978 	bl	800158c <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d903      	bls.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80052ae:	e005      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052b0:	4b85      	ldr	r3, [pc, #532]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0ed      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80052bc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d165      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052c4:	4b7f      	ldr	r3, [pc, #508]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80052d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d023      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80052da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80052e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01b      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052ea:	4b76      	ldr	r3, [pc, #472]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052f8:	4b72      	ldr	r3, [pc, #456]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052fe:	4a71      	ldr	r2, [pc, #452]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005304:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005308:	4b6e      	ldr	r3, [pc, #440]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800530a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800530e:	4a6d      	ldr	r2, [pc, #436]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005314:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005318:	4a6a      	ldr	r2, [pc, #424]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800531a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d019      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532e:	f7fc f92d 	bl	800158c <HAL_GetTick>
 8005332:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005336:	e00d      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005338:	f7fc f928 	bl	800158c <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005342:	1ad2      	subs	r2, r2, r3
 8005344:	f241 3388 	movw	r3, #5000	; 0x1388
 8005348:	429a      	cmp	r2, r3
 800534a:	d903      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8005352:	e006      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005354:	4b5b      	ldr	r3, [pc, #364]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0ea      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005362:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10d      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800536a:	4b56      	ldr	r3, [pc, #344]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800536c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005370:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005374:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005378:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800537c:	4a51      	ldr	r2, [pc, #324]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800537e:	430b      	orrs	r3, r1
 8005380:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005384:	e008      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005386:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800538a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800538e:	e003      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005390:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005394:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005398:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800539c:	2b01      	cmp	r3, #1
 800539e:	d107      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a0:	4b48      	ldr	r3, [pc, #288]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80053a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053a6:	4a47      	ldr	r2, [pc, #284]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80053a8:	f023 0304 	bic.w	r3, r3, #4
 80053ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80053b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80053bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80053be:	2300      	movs	r3, #0
 80053c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80053c6:	460b      	mov	r3, r1
 80053c8:	4313      	orrs	r3, r2
 80053ca:	d042      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80053cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053d8:	d022      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80053da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053de:	d81b      	bhi.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80053e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053e4:	d011      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x832>
 80053e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ea:	d815      	bhi.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d019      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80053f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053f4:	d110      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053fa:	3308      	adds	r3, #8
 80053fc:	4618      	mov	r0, r3
 80053fe:	f001 ff05 	bl	800720c <RCCEx_PLL2_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005408:	e00d      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800540a:	4b2e      	ldr	r3, [pc, #184]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	4a2d      	ldr	r2, [pc, #180]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005414:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005416:	e006      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800541e:	e002      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005420:	bf00      	nop
 8005422:	e000      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005424:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005426:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10d      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800542e:	4b25      	ldr	r3, [pc, #148]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005434:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005438:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800543c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005440:	4a20      	ldr	r2, [pc, #128]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005442:	430b      	orrs	r3, r1
 8005444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005448:	e003      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800544e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800545e:	643b      	str	r3, [r7, #64]	; 0x40
 8005460:	2300      	movs	r3, #0
 8005462:	647b      	str	r3, [r7, #68]	; 0x44
 8005464:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005468:	460b      	mov	r3, r1
 800546a:	4313      	orrs	r3, r2
 800546c:	d032      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800546e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547a:	d00b      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800547c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005480:	d804      	bhi.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d008      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548a:	d007      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005492:	e004      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005494:	bf00      	nop
 8005496:	e002      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005498:	bf00      	nop
 800549a:	e000      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800549c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800549e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d112      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80054a6:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054b8:	4a02      	ldr	r2, [pc, #8]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054ba:	430b      	orrs	r3, r1
 80054bc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80054c0:	e008      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80054c2:	bf00      	nop
 80054c4:	46020c00 	.word	0x46020c00
 80054c8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80054d0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80054d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054dc:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80054e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e2:	2300      	movs	r3, #0
 80054e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80054ea:	460b      	mov	r3, r1
 80054ec:	4313      	orrs	r3, r2
 80054ee:	d00c      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80054f0:	4b98      	ldr	r3, [pc, #608]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80054f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054f6:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80054fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005502:	4a94      	ldr	r2, [pc, #592]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005504:	430b      	orrs	r3, r1
 8005506:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800550a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005516:	633b      	str	r3, [r7, #48]	; 0x30
 8005518:	2300      	movs	r3, #0
 800551a:	637b      	str	r3, [r7, #52]	; 0x34
 800551c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005520:	460b      	mov	r3, r1
 8005522:	4313      	orrs	r3, r2
 8005524:	d019      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800552a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800552e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005532:	d105      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005534:	4b87      	ldr	r3, [pc, #540]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	4a86      	ldr	r2, [pc, #536]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800553a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800553e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005540:	4b84      	ldr	r3, [pc, #528]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005542:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005546:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800554a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800554e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005552:	4a80      	ldr	r2, [pc, #512]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005554:	430b      	orrs	r3, r1
 8005556:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800555a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005562:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
 8005568:	2300      	movs	r3, #0
 800556a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800556c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005570:	460b      	mov	r3, r1
 8005572:	4313      	orrs	r3, r2
 8005574:	d00c      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005576:	4b77      	ldr	r3, [pc, #476]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800557c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005580:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005584:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005588:	4972      	ldr	r1, [pc, #456]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800558a:	4313      	orrs	r3, r2
 800558c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005590:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800559c:	623b      	str	r3, [r7, #32]
 800559e:	2300      	movs	r3, #0
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
 80055a2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80055a6:	460b      	mov	r3, r1
 80055a8:	4313      	orrs	r3, r2
 80055aa:	d00c      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80055ac:	4b69      	ldr	r3, [pc, #420]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80055be:	4965      	ldr	r1, [pc, #404]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80055c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	2300      	movs	r3, #0
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80055dc:	460b      	mov	r3, r1
 80055de:	4313      	orrs	r3, r2
 80055e0:	d00c      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80055e2:	4b5c      	ldr	r3, [pc, #368]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055e8:	f023 0218 	bic.w	r2, r3, #24
 80055ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80055f4:	4957      	ldr	r1, [pc, #348]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80055fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005612:	460b      	mov	r3, r1
 8005614:	4313      	orrs	r3, r2
 8005616:	d032      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005618:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800561c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005620:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005624:	d105      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005626:	4b4b      	ldr	r3, [pc, #300]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	4a4a      	ldr	r2, [pc, #296]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800562c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005630:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005636:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800563a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800563e:	d108      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005644:	3308      	adds	r3, #8
 8005646:	4618      	mov	r0, r3
 8005648:	f001 fde0 	bl	800720c <RCCEx_PLL2_Config>
 800564c:	4603      	mov	r3, r0
 800564e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8005652:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10d      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800565a:	4b3e      	ldr	r3, [pc, #248]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800565c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005660:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005668:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800566c:	4939      	ldr	r1, [pc, #228]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005674:	e003      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005676:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800567a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800567e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800568a:	60bb      	str	r3, [r7, #8]
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005694:	460b      	mov	r3, r1
 8005696:	4313      	orrs	r3, r2
 8005698:	d03a      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800569a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800569e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056a6:	d00e      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80056a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056ac:	d815      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d017      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80056b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056b6:	d110      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b8:	4b26      	ldr	r3, [pc, #152]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	4a25      	ldr	r2, [pc, #148]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80056be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80056c4:	e00e      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ca:	3308      	adds	r3, #8
 80056cc:	4618      	mov	r0, r3
 80056ce:	f001 fd9d 	bl	800720c <RCCEx_PLL2_Config>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80056d8:	e004      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80056e0:	e000      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80056e2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80056e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10d      	bne.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80056ec:	4b19      	ldr	r3, [pc, #100]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80056ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fe:	4915      	ldr	r1, [pc, #84]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005706:	e003      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005708:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800570c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005710:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005718:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	2300      	movs	r3, #0
 8005720:	607b      	str	r3, [r7, #4]
 8005722:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005726:	460b      	mov	r3, r1
 8005728:	4313      	orrs	r3, r2
 800572a:	d00c      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800572c:	4b09      	ldr	r3, [pc, #36]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800572e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005732:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800573a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800573e:	4905      	ldr	r1, [pc, #20]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005746:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800574a:	4618      	mov	r0, r3
 800574c:	37e8      	adds	r7, #232	; 0xe8
 800574e:	46bd      	mov	sp, r7
 8005750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005754:	46020c00 	.word	0x46020c00

08005758 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005758:	b480      	push	{r7}
 800575a:	b089      	sub	sp, #36	; 0x24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005760:	4bac      	ldr	r3, [pc, #688]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005768:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800576a:	4baa      	ldr	r3, [pc, #680]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005774:	4ba7      	ldr	r3, [pc, #668]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	0a1b      	lsrs	r3, r3, #8
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	3301      	adds	r3, #1
 8005780:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005782:	4ba4      	ldr	r3, [pc, #656]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800578c:	4ba1      	ldr	r3, [pc, #644]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	08db      	lsrs	r3, r3, #3
 8005792:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	fb02 f303 	mul.w	r3, r2, r3
 800579c:	ee07 3a90 	vmov	s15, r3
 80057a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 8123 	beq.w	80059f6 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d062      	beq.n	800587c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	f200 8081 	bhi.w	80058c0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d024      	beq.n	800580e <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d17a      	bne.n	80058c0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	ee07 3a90 	vmov	s15, r3
 80057d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d4:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80057d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057dc:	4b8d      	ldr	r3, [pc, #564]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80057de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e4:	ee07 3a90 	vmov	s15, r3
 80057e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80057ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80057f0:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005a1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80057f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80057fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005800:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005808:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800580c:	e08f      	b.n	800592e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800580e:	4b81      	ldr	r3, [pc, #516]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800581a:	4b7e      	ldr	r3, [pc, #504]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	0f1b      	lsrs	r3, r3, #28
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	e006      	b.n	8005834 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8005826:	4b7b      	ldr	r3, [pc, #492]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800582c:	041b      	lsls	r3, r3, #16
 800582e:	0f1b      	lsrs	r3, r3, #28
 8005830:	f003 030f 	and.w	r3, r3, #15
 8005834:	4a7a      	ldr	r2, [pc, #488]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	ee07 3a90 	vmov	s15, r3
 8005848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585a:	ed97 6a02 	vldr	s12, [r7, #8]
 800585e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005a1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800587a:	e058      	b.n	800592e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800588a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588e:	4b61      	ldr	r3, [pc, #388]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800589e:	ed97 6a02 	vldr	s12, [r7, #8]
 80058a2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005a1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80058a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80058ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058be:	e036      	b.n	800592e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80058c0:	4b54      	ldr	r3, [pc, #336]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 80058cc:	4b51      	ldr	r3, [pc, #324]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	0f1b      	lsrs	r3, r3, #28
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	e006      	b.n	80058e6 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 80058d8:	4b4e      	ldr	r3, [pc, #312]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80058da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058de:	041b      	lsls	r3, r3, #16
 80058e0:	0f1b      	lsrs	r3, r3, #28
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	4a4e      	ldr	r2, [pc, #312]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80058e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ec:	ee07 3a90 	vmov	s15, r3
 80058f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	ee07 3a90 	vmov	s15, r3
 8005908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005910:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005a1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005920:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005928:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800592c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800592e:	4b39      	ldr	r3, [pc, #228]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d017      	beq.n	800596a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800593a:	4b36      	ldr	r3, [pc, #216]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800593c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593e:	0a5b      	lsrs	r3, r3, #9
 8005940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005944:	ee07 3a90 	vmov	s15, r3
 8005948:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800594c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005950:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005954:	edd7 6a07 	vldr	s13, [r7, #28]
 8005958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800595c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005960:	ee17 2a90 	vmov	r2, s15
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	e002      	b.n	8005970 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005970:	4b28      	ldr	r3, [pc, #160]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d017      	beq.n	80059ac <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800597c:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800597e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005980:	0c1b      	lsrs	r3, r3, #16
 8005982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800598e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005992:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005996:	edd7 6a07 	vldr	s13, [r7, #28]
 800599a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800599e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059a2:	ee17 2a90 	vmov	r2, s15
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	605a      	str	r2, [r3, #4]
 80059aa:	e002      	b.n	80059b2 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80059b2:	4b18      	ldr	r3, [pc, #96]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d017      	beq.n	80059ee <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059be:	4b15      	ldr	r3, [pc, #84]	; (8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80059c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c2:	0e1b      	lsrs	r3, r3, #24
 80059c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c8:	ee07 3a90 	vmov	s15, r3
 80059cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80059d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059d4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80059dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059e4:	ee17 2a90 	vmov	r2, s15
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80059ec:	e00c      	b.n	8005a08 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	609a      	str	r2, [r3, #8]
}
 80059f4:	e008      	b.n	8005a08 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	609a      	str	r2, [r3, #8]
}
 8005a08:	bf00      	nop
 8005a0a:	3724      	adds	r7, #36	; 0x24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	46020c00 	.word	0x46020c00
 8005a18:	4b742400 	.word	0x4b742400
 8005a1c:	46000000 	.word	0x46000000
 8005a20:	080090ec 	.word	0x080090ec

08005a24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b089      	sub	sp, #36	; 0x24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005a2c:	4bac      	ldr	r3, [pc, #688]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a34:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005a36:	4baa      	ldr	r3, [pc, #680]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005a40:	4ba7      	ldr	r3, [pc, #668]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	0a1b      	lsrs	r3, r3, #8
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005a4e:	4ba4      	ldr	r3, [pc, #656]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005a58:	4ba1      	ldr	r3, [pc, #644]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	08db      	lsrs	r3, r3, #3
 8005a5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	fb02 f303 	mul.w	r3, r2, r3
 8005a68:	ee07 3a90 	vmov	s15, r3
 8005a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a70:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 8123 	beq.w	8005cc2 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d062      	beq.n	8005b48 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	f200 8081 	bhi.w	8005b8c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d024      	beq.n	8005ada <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d17a      	bne.n	8005b8c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	ee07 3a90 	vmov	s15, r3
 8005a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa0:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8005aa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aa8:	4b8d      	ldr	r3, [pc, #564]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab0:	ee07 3a90 	vmov	s15, r3
 8005ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ab8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005abc:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005ac0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ac4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ac8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005acc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ad8:	e08f      	b.n	8005bfa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005ada:	4b81      	ldr	r3, [pc, #516]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8005ae6:	4b7e      	ldr	r3, [pc, #504]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	0f1b      	lsrs	r3, r3, #28
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	e006      	b.n	8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8005af2:	4b7b      	ldr	r3, [pc, #492]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005af8:	041b      	lsls	r3, r3, #16
 8005afa:	0f1b      	lsrs	r3, r3, #28
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	4a7a      	ldr	r2, [pc, #488]	; (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	ee07 3a90 	vmov	s15, r3
 8005b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b2a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b46:	e058      	b.n	8005bfa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b52:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8005b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5a:	4b61      	ldr	r3, [pc, #388]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b6e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b8a:	e036      	b.n	8005bfa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005b8c:	4b54      	ldr	r3, [pc, #336]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8005b98:	4b51      	ldr	r3, [pc, #324]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	0f1b      	lsrs	r3, r3, #28
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	e006      	b.n	8005bb2 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8005ba4:	4b4e      	ldr	r3, [pc, #312]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005ba6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005baa:	041b      	lsls	r3, r3, #16
 8005bac:	0f1b      	lsrs	r3, r3, #28
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	4a4e      	ldr	r2, [pc, #312]	; (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb8:	ee07 3a90 	vmov	s15, r3
 8005bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	ee07 3a90 	vmov	s15, r3
 8005bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	ee07 3a90 	vmov	s15, r3
 8005bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bdc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005be0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005be4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bec:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bf8:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005bfa:	4b39      	ldr	r3, [pc, #228]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d017      	beq.n	8005c36 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c06:	4b36      	ldr	r3, [pc, #216]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0a:	0a5b      	lsrs	r3, r3, #9
 8005c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c10:	ee07 3a90 	vmov	s15, r3
 8005c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c2c:	ee17 2a90 	vmov	r2, s15
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	e002      	b.n	8005c3c <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005c3c:	4b28      	ldr	r3, [pc, #160]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d017      	beq.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c48:	4b25      	ldr	r3, [pc, #148]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4c:	0c1b      	lsrs	r3, r3, #16
 8005c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c6e:	ee17 2a90 	vmov	r2, s15
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	605a      	str	r2, [r3, #4]
 8005c76:	e002      	b.n	8005c7e <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005c7e:	4b18      	ldr	r3, [pc, #96]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d017      	beq.n	8005cba <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c8a:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c8e:	0e1b      	lsrs	r3, r3, #24
 8005c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c94:	ee07 3a90 	vmov	s15, r3
 8005c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005c9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ca0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ca4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cb0:	ee17 2a90 	vmov	r2, s15
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005cb8:	e00c      	b.n	8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	609a      	str	r2, [r3, #8]
}
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	609a      	str	r2, [r3, #8]
}
 8005cd4:	bf00      	nop
 8005cd6:	3724      	adds	r7, #36	; 0x24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	46020c00 	.word	0x46020c00
 8005ce4:	4b742400 	.word	0x4b742400
 8005ce8:	46000000 	.word	0x46000000
 8005cec:	080090ec 	.word	0x080090ec

08005cf0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b089      	sub	sp, #36	; 0x24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005cf8:	4bac      	ldr	r3, [pc, #688]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d00:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005d02:	4baa      	ldr	r3, [pc, #680]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005d0c:	4ba7      	ldr	r3, [pc, #668]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d10:	0a1b      	lsrs	r3, r3, #8
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	3301      	adds	r3, #1
 8005d18:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005d1a:	4ba4      	ldr	r3, [pc, #656]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005d24:	4ba1      	ldr	r3, [pc, #644]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d28:	08db      	lsrs	r3, r3, #3
 8005d2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	fb02 f303 	mul.w	r3, r2, r3
 8005d34:	ee07 3a90 	vmov	s15, r3
 8005d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 8123 	beq.w	8005f8e <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d062      	beq.n	8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	f200 8081 	bhi.w	8005e58 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d024      	beq.n	8005da6 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d17a      	bne.n	8005e58 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	ee07 3a90 	vmov	s15, r3
 8005d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8005d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d74:	4b8d      	ldr	r3, [pc, #564]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7c:	ee07 3a90 	vmov	s15, r3
 8005d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d84:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d88:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da0:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8005da4:	e08f      	b.n	8005ec6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005da6:	4b81      	ldr	r3, [pc, #516]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d005      	beq.n	8005dbe <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8005db2:	4b7e      	ldr	r3, [pc, #504]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	0f1b      	lsrs	r3, r3, #28
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	e006      	b.n	8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8005dbe:	4b7b      	ldr	r3, [pc, #492]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dc4:	041b      	lsls	r3, r3, #16
 8005dc6:	0f1b      	lsrs	r3, r3, #28
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	4a7a      	ldr	r2, [pc, #488]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005df6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e12:	e058      	b.n	8005ec6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8005e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e26:	4b61      	ldr	r3, [pc, #388]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e3a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e56:	e036      	b.n	8005ec6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e58:	4b54      	ldr	r3, [pc, #336]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8005e64:	4b51      	ldr	r3, [pc, #324]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	0f1b      	lsrs	r3, r3, #28
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	e006      	b.n	8005e7e <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8005e70:	4b4e      	ldr	r3, [pc, #312]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005e72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e76:	041b      	lsls	r3, r3, #16
 8005e78:	0f1b      	lsrs	r3, r3, #28
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	4a4e      	ldr	r2, [pc, #312]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e84:	ee07 3a90 	vmov	s15, r3
 8005e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	ee07 3a90 	vmov	s15, r3
 8005ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ea8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005eac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ec4:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005ec6:	4b39      	ldr	r3, [pc, #228]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d017      	beq.n	8005f02 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ed2:	4b36      	ldr	r3, [pc, #216]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed6:	0a5b      	lsrs	r3, r3, #9
 8005ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005ee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ee8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005eec:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ef8:	ee17 2a90 	vmov	r2, s15
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	e002      	b.n	8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005f08:	4b28      	ldr	r3, [pc, #160]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d017      	beq.n	8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f14:	4b25      	ldr	r3, [pc, #148]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f18:	0c1b      	lsrs	r3, r3, #16
 8005f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005f26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f3a:	ee17 2a90 	vmov	r2, s15
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	605a      	str	r2, [r3, #4]
 8005f42:	e002      	b.n	8005f4a <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005f4a:	4b18      	ldr	r3, [pc, #96]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d017      	beq.n	8005f86 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f56:	4b15      	ldr	r3, [pc, #84]	; (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5a:	0e1b      	lsrs	r3, r3, #24
 8005f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f60:	ee07 3a90 	vmov	s15, r3
 8005f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f6c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f7c:	ee17 2a90 	vmov	r2, s15
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005f84:	e00c      	b.n	8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	609a      	str	r2, [r3, #8]
}
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	609a      	str	r2, [r3, #8]
}
 8005fa0:	bf00      	nop
 8005fa2:	3724      	adds	r7, #36	; 0x24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	46020c00 	.word	0x46020c00
 8005fb0:	4b742400 	.word	0x4b742400
 8005fb4:	46000000 	.word	0x46000000
 8005fb8:	080090ec 	.word	0x080090ec

08005fbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08e      	sub	sp, #56	; 0x38
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fca:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8005fce:	430b      	orrs	r3, r1
 8005fd0:	d145      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005fd2:	4ba7      	ldr	r3, [pc, #668]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fdc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005fde:	4ba4      	ldr	r3, [pc, #656]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d108      	bne.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff2:	d104      	bne.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005ff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8005ffa:	f001 b8fc 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005ffe:	4b9c      	ldr	r3, [pc, #624]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800600c:	d114      	bne.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006014:	d110      	bne.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006016:	4b96      	ldr	r3, [pc, #600]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800601c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006024:	d103      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006026:	23fa      	movs	r3, #250	; 0xfa
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800602a:	f001 b8e4 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800602e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006032:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006034:	f001 b8df 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006038:	4b8d      	ldr	r3, [pc, #564]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006044:	d107      	bne.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800604c:	d103      	bne.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800604e:	4b89      	ldr	r3, [pc, #548]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
 8006052:	f001 b8d0 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
 800605a:	f001 b8cc 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800605e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006062:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006066:	430b      	orrs	r3, r1
 8006068:	d151      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800606a:	4b81      	ldr	r3, [pc, #516]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800606c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006070:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006074:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	2b80      	cmp	r3, #128	; 0x80
 800607a:	d035      	beq.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	2b80      	cmp	r3, #128	; 0x80
 8006080:	d841      	bhi.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	2b60      	cmp	r3, #96	; 0x60
 8006086:	d02a      	beq.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	2b60      	cmp	r3, #96	; 0x60
 800608c:	d83b      	bhi.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	2b40      	cmp	r3, #64	; 0x40
 8006092:	d009      	beq.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	2b40      	cmp	r3, #64	; 0x40
 8006098:	d835      	bhi.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00c      	beq.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80060a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a2:	2b20      	cmp	r3, #32
 80060a4:	d012      	beq.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80060a6:	e02e      	b.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fb53 	bl	8005758 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060b6:	f001 b89e 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ba:	f107 0318 	add.w	r3, r7, #24
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff fcb0 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060c8:	f001 b895 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060cc:	f107 030c 	add.w	r3, r7, #12
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff fe0d 	bl	8005cf0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060da:	f001 b88c 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80060de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80060e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060e4:	f001 b887 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060e8:	4b61      	ldr	r3, [pc, #388]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f4:	d103      	bne.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80060f6:	4b60      	ldr	r3, [pc, #384]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060fa:	f001 b87c 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006102:	f001 b878 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800610a:	f001 b874 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800610e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006112:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006116:	430b      	orrs	r3, r1
 8006118:	d158      	bne.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800611a:	4b55      	ldr	r3, [pc, #340]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800611c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006120:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006124:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800612c:	d03b      	beq.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006134:	d846      	bhi.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800613c:	d02e      	beq.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006144:	d83e      	bhi.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800614c:	d00b      	beq.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006154:	d836      	bhi.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00d      	beq.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006162:	d012      	beq.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006164:	e02e      	b.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff faf4 	bl	8005758 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006174:	f001 b83f 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006178:	f107 0318 	add.w	r3, r7, #24
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff fc51 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006186:	f001 b836 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800618a:	f107 030c 	add.w	r3, r7, #12
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff fdae 	bl	8005cf0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006198:	f001 b82d 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800619c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80061a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061a2:	f001 b828 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061a6:	4b32      	ldr	r3, [pc, #200]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b2:	d103      	bne.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80061b4:	4b30      	ldr	r3, [pc, #192]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80061b6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80061b8:	f001 b81d 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061c0:	f001 b819 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061c8:	f001 b815 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80061cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d0:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80061d4:	430b      	orrs	r3, r1
 80061d6:	d126      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80061d8:	4b25      	ldr	r3, [pc, #148]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80061da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80061de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061e2:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80061e4:	4b22      	ldr	r3, [pc, #136]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f0:	d106      	bne.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d103      	bne.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80061f8:	4b1f      	ldr	r3, [pc, #124]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80061fa:	637b      	str	r3, [r7, #52]	; 0x34
 80061fc:	f000 bffb 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006200:	4b1b      	ldr	r3, [pc, #108]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620c:	d107      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006214:	d103      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006216:	4b19      	ldr	r3, [pc, #100]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
 800621a:	f000 bfec 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	637b      	str	r3, [r7, #52]	; 0x34
 8006222:	f000 bfe8 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006226:	e9d7 2300 	ldrd	r2, r3, [r7]
 800622a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800622e:	430b      	orrs	r3, r1
 8006230:	d164      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006232:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006238:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800623c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006244:	d03d      	beq.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800624c:	d852      	bhi.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006254:	d014      	beq.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800625c:	d84a      	bhi.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01f      	beq.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800626a:	d012      	beq.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800626c:	e042      	b.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800626e:	bf00      	nop
 8006270:	46020c00 	.word	0x46020c00
 8006274:	0007a120 	.word	0x0007a120
 8006278:	00f42400 	.word	0x00f42400
 800627c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fa67 	bl	8005758 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800628e:	f000 bfb2 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006292:	f107 0318 	add.w	r3, r7, #24
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff fbc4 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062a0:	f000 bfa9 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80062a4:	4bab      	ldr	r3, [pc, #684]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b0:	d103      	bne.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80062b2:	4ba9      	ldr	r3, [pc, #676]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80062b4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80062b6:	f000 bf9e 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062be:	f000 bf9a 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062c2:	4ba4      	ldr	r3, [pc, #656]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80062ce:	4ba1      	ldr	r3, [pc, #644]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	0e1b      	lsrs	r3, r3, #24
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	e006      	b.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80062da:	4b9e      	ldr	r3, [pc, #632]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80062dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062e0:	041b      	lsls	r3, r3, #16
 80062e2:	0e1b      	lsrs	r3, r3, #24
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	4a9c      	ldr	r2, [pc, #624]	; (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80062ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062f0:	f000 bf81 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062f8:	f000 bf7d 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80062fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006300:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006304:	430b      	orrs	r3, r1
 8006306:	d175      	bne.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006308:	4b92      	ldr	r3, [pc, #584]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800630a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800630e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006312:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	2b00      	cmp	r3, #0
 8006318:	d15b      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800631a:	4b8e      	ldr	r3, [pc, #568]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800631c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006320:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006324:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800632c:	d034      	beq.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006334:	d849      	bhi.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800633c:	d00b      	beq.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006344:	d841      	bhi.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	2b00      	cmp	r3, #0
 800634a:	d016      	beq.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006352:	d009      	beq.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006354:	e039      	b.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff f9fc 	bl	8005758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006364:	f000 bf47 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006368:	f107 0318 	add.w	r3, r7, #24
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff fb59 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006376:	f000 bf3e 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800637a:	4b76      	ldr	r3, [pc, #472]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006386:	d103      	bne.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8006388:	4b73      	ldr	r3, [pc, #460]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800638a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800638c:	f000 bf33 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006394:	f000 bf2f 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006398:	4b6e      	ldr	r3, [pc, #440]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80063a4:	4b6b      	ldr	r3, [pc, #428]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	0e1b      	lsrs	r3, r3, #24
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	e006      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80063b0:	4b68      	ldr	r3, [pc, #416]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80063b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063b6:	041b      	lsls	r3, r3, #16
 80063b8:	0e1b      	lsrs	r3, r3, #24
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	4a67      	ldr	r2, [pc, #412]	; (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80063c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80063c6:	f000 bf16 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80063ce:	f000 bf12 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063d8:	d108      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff f9ba 	bl	8005758 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	637b      	str	r3, [r7, #52]	; 0x34
 80063e8:	f000 bf05 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	637b      	str	r3, [r7, #52]	; 0x34
 80063f0:	f000 bf01 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80063f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f8:	1e51      	subs	r1, r2, #1
 80063fa:	430b      	orrs	r3, r1
 80063fc:	d136      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80063fe:	4b55      	ldr	r3, [pc, #340]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006404:	f003 0303 	and.w	r3, r3, #3
 8006408:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	2b00      	cmp	r3, #0
 800640e:	d104      	bne.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006410:	f7fe fb34 	bl	8004a7c <HAL_RCC_GetPCLK2Freq>
 8006414:	6378      	str	r0, [r7, #52]	; 0x34
 8006416:	f000 beee 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	2b01      	cmp	r3, #1
 800641e:	d104      	bne.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006420:	f7fe f9f6 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8006424:	6378      	str	r0, [r7, #52]	; 0x34
 8006426:	f000 bee6 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800642a:	4b4a      	ldr	r3, [pc, #296]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006436:	d106      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	2b02      	cmp	r3, #2
 800643c:	d103      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800643e:	4b48      	ldr	r3, [pc, #288]	; (8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
 8006442:	f000 bed8 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006446:	4b43      	ldr	r3, [pc, #268]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b02      	cmp	r3, #2
 8006452:	d107      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	2b03      	cmp	r3, #3
 8006458:	d104      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800645a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645e:	637b      	str	r3, [r7, #52]	; 0x34
 8006460:	f000 bec9 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	637b      	str	r3, [r7, #52]	; 0x34
 8006468:	f000 bec5 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800646c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006470:	1e91      	subs	r1, r2, #2
 8006472:	430b      	orrs	r3, r1
 8006474:	d136      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006476:	4b37      	ldr	r3, [pc, #220]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800647c:	f003 030c 	and.w	r3, r3, #12
 8006480:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006488:	f7fe fae4 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 800648c:	6378      	str	r0, [r7, #52]	; 0x34
 800648e:	f000 beb2 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	2b04      	cmp	r3, #4
 8006496:	d104      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006498:	f7fe f9ba 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 800649c:	6378      	str	r0, [r7, #52]	; 0x34
 800649e:	f000 beaa 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80064a2:	4b2c      	ldr	r3, [pc, #176]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ae:	d106      	bne.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	2b08      	cmp	r3, #8
 80064b4:	d103      	bne.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 80064b6:	4b2a      	ldr	r3, [pc, #168]	; (8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
 80064ba:	f000 be9c 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80064be:	4b25      	ldr	r3, [pc, #148]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80064c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d107      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80064cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ce:	2b0c      	cmp	r3, #12
 80064d0:	d104      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 80064d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d6:	637b      	str	r3, [r7, #52]	; 0x34
 80064d8:	f000 be8d 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	637b      	str	r3, [r7, #52]	; 0x34
 80064e0:	f000 be89 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80064e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e8:	1f11      	subs	r1, r2, #4
 80064ea:	430b      	orrs	r3, r1
 80064ec:	d13e      	bne.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80064ee:	4b19      	ldr	r3, [pc, #100]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80064f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064f8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d104      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006500:	f7fe faa8 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 8006504:	6378      	str	r0, [r7, #52]	; 0x34
 8006506:	f000 be76 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	2b10      	cmp	r3, #16
 800650e:	d104      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006510:	f7fe f97e 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8006514:	6378      	str	r0, [r7, #52]	; 0x34
 8006516:	f000 be6e 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800651a:	4b0e      	ldr	r3, [pc, #56]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006526:	d106      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	2b20      	cmp	r3, #32
 800652c:	d103      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800652e:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006530:	637b      	str	r3, [r7, #52]	; 0x34
 8006532:	f000 be60 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006536:	4b07      	ldr	r3, [pc, #28]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b02      	cmp	r3, #2
 8006542:	d10f      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	2b30      	cmp	r3, #48	; 0x30
 8006548:	d10c      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800654a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800654e:	637b      	str	r3, [r7, #52]	; 0x34
 8006550:	f000 be51 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006554:	46020c00 	.word	0x46020c00
 8006558:	02dc6c00 	.word	0x02dc6c00
 800655c:	080090ec 	.word	0x080090ec
 8006560:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	637b      	str	r3, [r7, #52]	; 0x34
 8006568:	f000 be45 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800656c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006570:	f1a2 0108 	sub.w	r1, r2, #8
 8006574:	430b      	orrs	r3, r1
 8006576:	d136      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006578:	4b9f      	ldr	r3, [pc, #636]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800657a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800657e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006582:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800658a:	f7fe fa63 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 800658e:	6378      	str	r0, [r7, #52]	; 0x34
 8006590:	f000 be31 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	2b40      	cmp	r3, #64	; 0x40
 8006598:	d104      	bne.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800659a:	f7fe f939 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 800659e:	6378      	str	r0, [r7, #52]	; 0x34
 80065a0:	f000 be29 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80065a4:	4b94      	ldr	r3, [pc, #592]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b0:	d106      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	2b80      	cmp	r3, #128	; 0x80
 80065b6:	d103      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 80065b8:	4b90      	ldr	r3, [pc, #576]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80065ba:	637b      	str	r3, [r7, #52]	; 0x34
 80065bc:	f000 be1b 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80065c0:	4b8d      	ldr	r3, [pc, #564]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d107      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	2bc0      	cmp	r3, #192	; 0xc0
 80065d2:	d104      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 80065d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d8:	637b      	str	r3, [r7, #52]	; 0x34
 80065da:	f000 be0c 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
 80065e2:	f000 be08 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80065e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ea:	f1a2 0110 	sub.w	r1, r2, #16
 80065ee:	430b      	orrs	r3, r1
 80065f0:	d139      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80065f2:	4b81      	ldr	r3, [pc, #516]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065fc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	2b00      	cmp	r3, #0
 8006602:	d104      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006604:	f7fe fa26 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 8006608:	6378      	str	r0, [r7, #52]	; 0x34
 800660a:	f000 bdf4 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006614:	d104      	bne.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006616:	f7fe f8fb 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 800661a:	6378      	str	r0, [r7, #52]	; 0x34
 800661c:	f000 bdeb 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006620:	4b75      	ldr	r3, [pc, #468]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800662c:	d107      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006634:	d103      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8006636:	4b71      	ldr	r3, [pc, #452]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
 800663a:	f000 bddc 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800663e:	4b6e      	ldr	r3, [pc, #440]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b02      	cmp	r3, #2
 800664a:	d108      	bne.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006652:	d104      	bne.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8006654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006658:	637b      	str	r3, [r7, #52]	; 0x34
 800665a:	f000 bdcc 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	637b      	str	r3, [r7, #52]	; 0x34
 8006662:	f000 bdc8 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800666a:	f1a2 0120 	sub.w	r1, r2, #32
 800666e:	430b      	orrs	r3, r1
 8006670:	d158      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006672:	4b61      	ldr	r3, [pc, #388]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006684:	f7fe fa0e 	bl	8004aa4 <HAL_RCC_GetPCLK3Freq>
 8006688:	6378      	str	r0, [r7, #52]	; 0x34
 800668a:	f000 bdb4 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	2b01      	cmp	r3, #1
 8006692:	d104      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006694:	f7fe f8bc 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8006698:	6378      	str	r0, [r7, #52]	; 0x34
 800669a:	f000 bdac 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800669e:	4b56      	ldr	r3, [pc, #344]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066aa:	d106      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d103      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 80066b2:	4b52      	ldr	r3, [pc, #328]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80066b4:	637b      	str	r3, [r7, #52]	; 0x34
 80066b6:	f000 bd9e 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80066ba:	4b4f      	ldr	r3, [pc, #316]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80066bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d107      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d104      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 80066ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066d2:	637b      	str	r3, [r7, #52]	; 0x34
 80066d4:	f000 bd8f 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80066d8:	4b47      	ldr	r3, [pc, #284]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	d11b      	bne.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d118      	bne.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066ea:	4b43      	ldr	r3, [pc, #268]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80066f6:	4b40      	ldr	r3, [pc, #256]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	0e1b      	lsrs	r3, r3, #24
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	e006      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8006702:	4b3d      	ldr	r3, [pc, #244]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006708:	041b      	lsls	r3, r3, #16
 800670a:	0e1b      	lsrs	r3, r3, #24
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	4a3b      	ldr	r2, [pc, #236]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
 8006718:	f000 bd6d 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	637b      	str	r3, [r7, #52]	; 0x34
 8006720:	f000 bd69 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006728:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800672c:	430b      	orrs	r3, r1
 800672e:	d169      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006730:	4b31      	ldr	r3, [pc, #196]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006736:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800673a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006742:	d104      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006744:	f7fe f864 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8006748:	6378      	str	r0, [r7, #52]	; 0x34
 800674a:	f000 bd54 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006754:	d108      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006756:	f107 0318 	add.w	r3, r7, #24
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff f962 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
 8006764:	f000 bd47 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	2b00      	cmp	r3, #0
 800676c:	d104      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800676e:	f7fe f957 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8006772:	6378      	str	r0, [r7, #52]	; 0x34
 8006774:	f000 bd3f 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800677e:	d118      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006780:	4b1d      	ldr	r3, [pc, #116]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800678c:	4b1a      	ldr	r3, [pc, #104]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	0f1b      	lsrs	r3, r3, #28
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	e006      	b.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006798:	4b17      	ldr	r3, [pc, #92]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800679a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800679e:	041b      	lsls	r3, r3, #16
 80067a0:	0f1b      	lsrs	r3, r3, #28
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	4a16      	ldr	r2, [pc, #88]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80067a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ac:	637b      	str	r3, [r7, #52]	; 0x34
 80067ae:	f000 bd22 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80067b2:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067be:	d107      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067c6:	d103      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 80067c8:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80067ca:	637b      	str	r3, [r7, #52]	; 0x34
 80067cc:	f000 bd13 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80067d0:	4b09      	ldr	r3, [pc, #36]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067dc:	d107      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067e4:	d103      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 80067e6:	4b05      	ldr	r3, [pc, #20]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ea:	f000 bd04 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	637b      	str	r3, [r7, #52]	; 0x34
 80067f2:	f000 bd00 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80067f6:	bf00      	nop
 80067f8:	46020c00 	.word	0x46020c00
 80067fc:	00f42400 	.word	0x00f42400
 8006800:	080090ec 	.word	0x080090ec
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006808:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800680c:	430b      	orrs	r3, r1
 800680e:	d14e      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006810:	4ba8      	ldr	r3, [pc, #672]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006812:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	2b04      	cmp	r3, #4
 8006820:	d841      	bhi.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006822:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	08006861 	.word	0x08006861
 800682c:	0800683d 	.word	0x0800683d
 8006830:	0800684f 	.word	0x0800684f
 8006834:	0800686b 	.word	0x0800686b
 8006838:	08006875 	.word	0x08006875
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800683c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006840:	4618      	mov	r0, r3
 8006842:	f7fe ff89 	bl	8005758 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800684a:	f000 bcd4 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800684e:	f107 030c 	add.w	r3, r7, #12
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff fa4c 	bl	8005cf0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800685c:	f000 bccb 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006860:	f7fe f8de 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8006864:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006866:	f000 bcc6 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800686a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800686e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006870:	f000 bcc1 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006874:	4b8f      	ldr	r3, [pc, #572]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d005      	beq.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8006880:	4b8c      	ldr	r3, [pc, #560]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	0e1b      	lsrs	r3, r3, #24
 8006886:	f003 030f 	and.w	r3, r3, #15
 800688a:	e006      	b.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800688c:	4b89      	ldr	r3, [pc, #548]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800688e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006892:	041b      	lsls	r3, r3, #16
 8006894:	0e1b      	lsrs	r3, r3, #24
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	4a87      	ldr	r2, [pc, #540]	; (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800689c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068a2:	f000 bca8 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068aa:	f000 bca4 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80068ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068b2:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80068b6:	430b      	orrs	r3, r1
 80068b8:	d15d      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80068ba:	4b7e      	ldr	r3, [pc, #504]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80068bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068c0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80068c4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068cc:	d036      	beq.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068d4:	d84b      	bhi.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068dc:	d029      	beq.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068e4:	d843      	bhi.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068ec:	d013      	beq.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068f4:	d83b      	bhi.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d015      	beq.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006902:	d134      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe ff25 	bl	8005758 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006912:	f000 bc70 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006916:	f107 030c 	add.w	r3, r7, #12
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff f9e8 	bl	8005cf0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006924:	f000 bc67 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006928:	f7fe f87a 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 800692c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800692e:	f000 bc62 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006932:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006936:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006938:	f000 bc5d 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800693c:	4b5d      	ldr	r3, [pc, #372]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d005      	beq.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006948:	4b5a      	ldr	r3, [pc, #360]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	0e1b      	lsrs	r3, r3, #24
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	e006      	b.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8006954:	4b57      	ldr	r3, [pc, #348]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006956:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800695a:	041b      	lsls	r3, r3, #16
 800695c:	0e1b      	lsrs	r3, r3, #24
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	4a55      	ldr	r2, [pc, #340]	; (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006968:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800696a:	f000 bc44 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006972:	f000 bc40 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800697a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800697e:	430b      	orrs	r3, r1
 8006980:	d14a      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006982:	4b4c      	ldr	r3, [pc, #304]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006988:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800698c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	2b00      	cmp	r3, #0
 8006992:	d104      	bne.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006994:	f7fe f85e 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 8006998:	6378      	str	r0, [r7, #52]	; 0x34
 800699a:	f000 bc2c 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069a4:	d104      	bne.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069a6:	f7fd ff33 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80069aa:	6378      	str	r0, [r7, #52]	; 0x34
 80069ac:	f000 bc23 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80069b0:	4b40      	ldr	r3, [pc, #256]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069bc:	d107      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c4:	d103      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 80069c6:	4b3d      	ldr	r3, [pc, #244]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80069c8:	637b      	str	r3, [r7, #52]	; 0x34
 80069ca:	f000 bc14 	b.w	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80069ce:	4b39      	ldr	r3, [pc, #228]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b20      	cmp	r3, #32
 80069d8:	d11b      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069e0:	d117      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069e2:	4b34      	ldr	r3, [pc, #208]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 80069ee:	4b31      	ldr	r3, [pc, #196]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	0e1b      	lsrs	r3, r3, #24
 80069f4:	f003 030f 	and.w	r3, r3, #15
 80069f8:	e006      	b.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80069fa:	4b2e      	ldr	r3, [pc, #184]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80069fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a00:	041b      	lsls	r3, r3, #16
 8006a02:	0e1b      	lsrs	r3, r3, #24
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	4a2b      	ldr	r2, [pc, #172]	; (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a10:	e3f1      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
 8006a16:	e3ee      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a1c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8006a20:	430b      	orrs	r3, r1
 8006a22:	d14d      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006a24:	4b23      	ldr	r3, [pc, #140]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a2e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d103      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a36:	f7fe f80d 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 8006a3a:	6378      	str	r0, [r7, #52]	; 0x34
 8006a3c:	e3db      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a44:	d103      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a46:	f7fd fee3 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8006a4a:	6378      	str	r0, [r7, #52]	; 0x34
 8006a4c:	e3d3      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006a4e:	4b19      	ldr	r3, [pc, #100]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5a:	d106      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a62:	d102      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8006a64:	4b15      	ldr	r3, [pc, #84]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a66:	637b      	str	r3, [r7, #52]	; 0x34
 8006a68:	e3c5      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006a6a:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0320 	and.w	r3, r3, #32
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	d11b      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a7c:	d117      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d005      	beq.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	0e1b      	lsrs	r3, r3, #24
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	e006      	b.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006a96:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a9c:	041b      	lsls	r3, r3, #16
 8006a9e:	0e1b      	lsrs	r3, r3, #24
 8006aa0:	f003 030f 	and.w	r3, r3, #15
 8006aa4:	4a04      	ldr	r2, [pc, #16]	; (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8006aac:	e3a3      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab2:	e3a0      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006ab4:	46020c00 	.word	0x46020c00
 8006ab8:	080090ec 	.word	0x080090ec
 8006abc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac4:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	d148      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006acc:	4b9d      	ldr	r3, [pc, #628]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006ace:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ad2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ad6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ada:	2bc0      	cmp	r3, #192	; 0xc0
 8006adc:	d024      	beq.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	2bc0      	cmp	r3, #192	; 0xc0
 8006ae2:	d839      	bhi.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	2b80      	cmp	r3, #128	; 0x80
 8006ae8:	d00d      	beq.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	2b80      	cmp	r3, #128	; 0x80
 8006aee:	d833      	bhi.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	2b40      	cmp	r3, #64	; 0x40
 8006afa:	d011      	beq.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006afc:	e02c      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006afe:	f7fd ffd1 	bl	8004aa4 <HAL_RCC_GetPCLK3Freq>
 8006b02:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006b04:	e377      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b06:	4b8f      	ldr	r3, [pc, #572]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b12:	d102      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8006b14:	4b8c      	ldr	r3, [pc, #560]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b18:	e36d      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b1e:	e36a      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006b20:	f7fd fe76 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8006b24:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006b26:	e366      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006b28:	4b86      	ldr	r3, [pc, #536]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8006b34:	4b83      	ldr	r3, [pc, #524]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	0f1b      	lsrs	r3, r3, #28
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	e006      	b.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8006b40:	4b80      	ldr	r3, [pc, #512]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b46:	041b      	lsls	r3, r3, #16
 8006b48:	0f1b      	lsrs	r3, r3, #28
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	4a7f      	ldr	r2, [pc, #508]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b56:	e34e      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b5c:	e34b      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b62:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8006b66:	430b      	orrs	r3, r1
 8006b68:	d147      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006b6a:	4b76      	ldr	r3, [pc, #472]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b74:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d103      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b7c:	f7fd ff6a 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 8006b80:	6378      	str	r0, [r7, #52]	; 0x34
 8006b82:	e338      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b8a:	d103      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b8c:	f7fd fe40 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8006b90:	6378      	str	r0, [r7, #52]	; 0x34
 8006b92:	e330      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006b94:	4b6b      	ldr	r3, [pc, #428]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba0:	d106      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ba8:	d102      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8006baa:	4b67      	ldr	r3, [pc, #412]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006bac:	637b      	str	r3, [r7, #52]	; 0x34
 8006bae:	e322      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006bb0:	4b64      	ldr	r3, [pc, #400]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d11b      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006bc2:	d117      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bc4:	4b5f      	ldr	r3, [pc, #380]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006bd0:	4b5c      	ldr	r3, [pc, #368]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	0e1b      	lsrs	r3, r3, #24
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	e006      	b.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8006bdc:	4b59      	ldr	r3, [pc, #356]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006be2:	041b      	lsls	r3, r3, #16
 8006be4:	0e1b      	lsrs	r3, r3, #24
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	4a58      	ldr	r2, [pc, #352]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf2:	e300      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf8:	e2fd      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bfe:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006c02:	430b      	orrs	r3, r1
 8006c04:	d15b      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006c06:	4b4f      	ldr	r3, [pc, #316]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c10:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d117      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c18:	4b4a      	ldr	r3, [pc, #296]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8006c24:	4b47      	ldr	r3, [pc, #284]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	0e1b      	lsrs	r3, r3, #24
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	e006      	b.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8006c30:	4b44      	ldr	r3, [pc, #272]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c36:	041b      	lsls	r3, r3, #16
 8006c38:	0e1b      	lsrs	r3, r3, #24
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	4a43      	ldr	r2, [pc, #268]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c44:	637b      	str	r3, [r7, #52]	; 0x34
 8006c46:	e2d6      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006c48:	4b3e      	ldr	r3, [pc, #248]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c56:	d112      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5e:	d10e      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c60:	4b38      	ldr	r3, [pc, #224]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c6e:	d102      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8006c70:	23fa      	movs	r3, #250	; 0xfa
 8006c72:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c74:	e2bf      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c76:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006c7a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c7c:	e2bb      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006c7e:	4b31      	ldr	r3, [pc, #196]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c8a:	d106      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c92:	d102      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8006c94:	4b2c      	ldr	r3, [pc, #176]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006c96:	637b      	str	r3, [r7, #52]	; 0x34
 8006c98:	e2ad      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006c9a:	4b2a      	ldr	r3, [pc, #168]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d107      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cae:	d103      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8006cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb6:	e29e      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	637b      	str	r3, [r7, #52]	; 0x34
 8006cbc:	e29b      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cc2:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006cc6:	430b      	orrs	r3, r1
 8006cc8:	d162      	bne.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006cca:	4b1e      	ldr	r3, [pc, #120]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cd4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d117      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cdc:	4b19      	ldr	r3, [pc, #100]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8006ce8:	4b16      	ldr	r3, [pc, #88]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	0e1b      	lsrs	r3, r3, #24
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	e006      	b.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006cf4:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006cf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cfa:	041b      	lsls	r3, r3, #16
 8006cfc:	0e1b      	lsrs	r3, r3, #24
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	4a12      	ldr	r2, [pc, #72]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d08:	637b      	str	r3, [r7, #52]	; 0x34
 8006d0a:	e274      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006d0c:	4b0d      	ldr	r3, [pc, #52]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d1a:	d119      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d22:	d115      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d24:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d32:	d102      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8006d34:	23fa      	movs	r3, #250	; 0xfa
 8006d36:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d38:	e25d      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006d3a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006d3e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d40:	e259      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006d42:	bf00      	nop
 8006d44:	46020c00 	.word	0x46020c00
 8006d48:	00f42400 	.word	0x00f42400
 8006d4c:	080090ec 	.word	0x080090ec
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006d50:	4b9d      	ldr	r3, [pc, #628]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d5c:	d106      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d64:	d102      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8006d66:	4b99      	ldr	r3, [pc, #612]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006d68:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6a:	e244      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006d6c:	4b96      	ldr	r3, [pc, #600]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d107      	bne.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d80:	d103      	bne.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8006d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d86:	637b      	str	r3, [r7, #52]	; 0x34
 8006d88:	e235      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d8e:	e232      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d94:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006d98:	430b      	orrs	r3, r1
 8006d9a:	d147      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006d9c:	4b8a      	ldr	r3, [pc, #552]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006da2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006da6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d103      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006dae:	f7fd fe51 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 8006db2:	6378      	str	r0, [r7, #52]	; 0x34
 8006db4:	e21f      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006db6:	4b84      	ldr	r3, [pc, #528]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dc4:	d112      	bne.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dcc:	d10e      	bne.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dce:	4b7e      	ldr	r3, [pc, #504]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ddc:	d102      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8006dde:	23fa      	movs	r3, #250	; 0xfa
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006de2:	e208      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006de4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006de8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dea:	e204      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006dec:	4b76      	ldr	r3, [pc, #472]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df8:	d106      	bne.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e00:	d102      	bne.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8006e02:	4b72      	ldr	r3, [pc, #456]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006e04:	637b      	str	r3, [r7, #52]	; 0x34
 8006e06:	e1f6      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006e08:	4b6f      	ldr	r3, [pc, #444]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d107      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e1c:	d103      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8006e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e22:	637b      	str	r3, [r7, #52]	; 0x34
 8006e24:	e1e7      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2a:	e1e4      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e30:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8006e34:	430b      	orrs	r3, r1
 8006e36:	d12d      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006e38:	4b63      	ldr	r3, [pc, #396]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e3e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006e42:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006e44:	4b60      	ldr	r3, [pc, #384]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e50:	d105      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d102      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8006e58:	4b5c      	ldr	r3, [pc, #368]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e5c:	e1cb      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e64:	d107      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe fc74 	bl	8005758 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	637b      	str	r3, [r7, #52]	; 0x34
 8006e74:	e1bf      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e7c:	d107      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e7e:	f107 0318 	add.w	r3, r7, #24
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe fdce 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e8c:	e1b3      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34
 8006e92:	e1b0      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e98:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	d14d      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006ea0:	4b49      	ldr	r3, [pc, #292]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ea6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006eaa:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eb2:	d028      	beq.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eba:	d83c      	bhi.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ec2:	d013      	beq.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eca:	d834      	bhi.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ed8:	d004      	beq.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006eda:	e02c      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006edc:	f7fd fdce 	bl	8004a7c <HAL_RCC_GetPCLK2Freq>
 8006ee0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006ee2:	e188      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006ee4:	f7fd fc94 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8006ee8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006eea:	e184      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006eec:	4b36      	ldr	r3, [pc, #216]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef8:	d102      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8006efa:	4b34      	ldr	r3, [pc, #208]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006efe:	e17a      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f04:	e177      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f06:	4b30      	ldr	r3, [pc, #192]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8006f12:	4b2d      	ldr	r3, [pc, #180]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	0e1b      	lsrs	r3, r3, #24
 8006f18:	f003 030f 	and.w	r3, r3, #15
 8006f1c:	e006      	b.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006f1e:	4b2a      	ldr	r3, [pc, #168]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006f20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f24:	041b      	lsls	r3, r3, #16
 8006f26:	0e1b      	lsrs	r3, r3, #24
 8006f28:	f003 030f 	and.w	r3, r3, #15
 8006f2c:	4a28      	ldr	r2, [pc, #160]	; (8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8006f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f34:	e15f      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f3a:	e15c      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f40:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8006f44:	430b      	orrs	r3, r1
 8006f46:	d154      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006f48:	4b1f      	ldr	r3, [pc, #124]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f52:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f5a:	d028      	beq.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f62:	d843      	bhi.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8006f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f6a:	d013      	beq.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f72:	d83b      	bhi.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d004      	beq.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f80:	d004      	beq.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8006f82:	e033      	b.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006f84:	f7fd fd66 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 8006f88:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f8a:	e134      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006f8c:	f7fd fc40 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8006f90:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f92:	e130      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f94:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa0:	d102      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8006fa2:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fa6:	e126      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fac:	e123      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00c      	beq.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8006fba:	4b03      	ldr	r3, [pc, #12]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	0e1b      	lsrs	r3, r3, #24
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	e00d      	b.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8006fc6:	bf00      	nop
 8006fc8:	46020c00 	.word	0x46020c00
 8006fcc:	00f42400 	.word	0x00f42400
 8006fd0:	080090ec 	.word	0x080090ec
 8006fd4:	4b8a      	ldr	r3, [pc, #552]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006fd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fda:	041b      	lsls	r3, r3, #16
 8006fdc:	0e1b      	lsrs	r3, r3, #24
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	4a88      	ldr	r2, [pc, #544]	; (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fea:	e104      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ff0:	e101      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ff6:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	d16e      	bne.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006ffe:	4b80      	ldr	r3, [pc, #512]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007004:	f003 0318 	and.w	r3, r3, #24
 8007008:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	2b18      	cmp	r3, #24
 800700e:	d862      	bhi.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8007010:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	0800707d 	.word	0x0800707d
 800701c:	080070d7 	.word	0x080070d7
 8007020:	080070d7 	.word	0x080070d7
 8007024:	080070d7 	.word	0x080070d7
 8007028:	080070d7 	.word	0x080070d7
 800702c:	080070d7 	.word	0x080070d7
 8007030:	080070d7 	.word	0x080070d7
 8007034:	080070d7 	.word	0x080070d7
 8007038:	08007085 	.word	0x08007085
 800703c:	080070d7 	.word	0x080070d7
 8007040:	080070d7 	.word	0x080070d7
 8007044:	080070d7 	.word	0x080070d7
 8007048:	080070d7 	.word	0x080070d7
 800704c:	080070d7 	.word	0x080070d7
 8007050:	080070d7 	.word	0x080070d7
 8007054:	080070d7 	.word	0x080070d7
 8007058:	0800708d 	.word	0x0800708d
 800705c:	080070d7 	.word	0x080070d7
 8007060:	080070d7 	.word	0x080070d7
 8007064:	080070d7 	.word	0x080070d7
 8007068:	080070d7 	.word	0x080070d7
 800706c:	080070d7 	.word	0x080070d7
 8007070:	080070d7 	.word	0x080070d7
 8007074:	080070d7 	.word	0x080070d7
 8007078:	080070a7 	.word	0x080070a7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800707c:	f7fd fd12 	bl	8004aa4 <HAL_RCC_GetPCLK3Freq>
 8007080:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007082:	e0b8      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007084:	f7fd fbc4 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8007088:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800708a:	e0b4      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800708c:	4b5c      	ldr	r3, [pc, #368]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007098:	d102      	bne.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800709a:	4b5b      	ldr	r3, [pc, #364]	; (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 800709c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800709e:	e0aa      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070a4:	e0a7      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070a6:	4b56      	ldr	r3, [pc, #344]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d005      	beq.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80070b2:	4b53      	ldr	r3, [pc, #332]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	0e1b      	lsrs	r3, r3, #24
 80070b8:	f003 030f 	and.w	r3, r3, #15
 80070bc:	e006      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80070be:	4b50      	ldr	r3, [pc, #320]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80070c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070c4:	041b      	lsls	r3, r3, #16
 80070c6:	0e1b      	lsrs	r3, r3, #24
 80070c8:	f003 030f 	and.w	r3, r3, #15
 80070cc:	4a4d      	ldr	r2, [pc, #308]	; (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80070ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070d4:	e08f      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070da:	e08c      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80070dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070e0:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80070e4:	430b      	orrs	r3, r1
 80070e6:	d14c      	bne.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80070e8:	4b45      	ldr	r3, [pc, #276]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80070ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80070ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80070f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070fa:	d013      	beq.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007102:	d83b      	bhi.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800710a:	d013      	beq.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800710c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007112:	d833      	bhi.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	2b00      	cmp	r3, #0
 8007118:	d014      	beq.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007120:	d014      	beq.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8007122:	e02b      	b.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007124:	f107 0318 	add.w	r3, r7, #24
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe fc7b 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007132:	e060      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe fb0d 	bl	8005758 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007142:	e058      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007144:	f7fd fb64 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8007148:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800714a:	e054      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800714c:	4b2c      	ldr	r3, [pc, #176]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8007158:	4b29      	ldr	r3, [pc, #164]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	0e1b      	lsrs	r3, r3, #24
 800715e:	f003 030f 	and.w	r3, r3, #15
 8007162:	e006      	b.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8007164:	4b26      	ldr	r3, [pc, #152]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007166:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800716a:	041b      	lsls	r3, r3, #16
 800716c:	0e1b      	lsrs	r3, r3, #24
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	4a24      	ldr	r2, [pc, #144]	; (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8007174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007178:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800717a:	e03c      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007180:	e039      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007182:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007186:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800718a:	430b      	orrs	r3, r1
 800718c:	d131      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800718e:	4b1c      	ldr	r3, [pc, #112]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007198:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800719a:	4b19      	ldr	r3, [pc, #100]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800719c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d106      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d103      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 80071ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071b2:	637b      	str	r3, [r7, #52]	; 0x34
 80071b4:	e01f      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80071b6:	4b12      	ldr	r3, [pc, #72]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80071b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071c4:	d112      	bne.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071cc:	d10e      	bne.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071ce:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80071d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071dc:	d102      	bne.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 80071de:	23fa      	movs	r3, #250	; 0xfa
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071e2:	e008      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80071e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80071e8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071ea:	e004      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	637b      	str	r3, [r7, #52]	; 0x34
 80071f0:	e001      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80071f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3738      	adds	r7, #56	; 0x38
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	46020c00 	.word	0x46020c00
 8007204:	080090ec 	.word	0x080090ec
 8007208:	00f42400 	.word	0x00f42400

0800720c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007214:	4b47      	ldr	r3, [pc, #284]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a46      	ldr	r2, [pc, #280]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 800721a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800721e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007220:	f7fa f9b4 	bl	800158c <HAL_GetTick>
 8007224:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007226:	e008      	b.n	800723a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007228:	f7fa f9b0 	bl	800158c <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e077      	b.n	800732a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800723a:	4b3e      	ldr	r3, [pc, #248]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f0      	bne.n	8007228 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007246:	4b3b      	ldr	r3, [pc, #236]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800724e:	f023 0303 	bic.w	r3, r3, #3
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6811      	ldr	r1, [r2, #0]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	6852      	ldr	r2, [r2, #4]
 800725a:	3a01      	subs	r2, #1
 800725c:	0212      	lsls	r2, r2, #8
 800725e:	430a      	orrs	r2, r1
 8007260:	4934      	ldr	r1, [pc, #208]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 8007262:	4313      	orrs	r3, r2
 8007264:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007266:	4b33      	ldr	r3, [pc, #204]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 8007268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800726a:	4b33      	ldr	r3, [pc, #204]	; (8007338 <RCCEx_PLL2_Config+0x12c>)
 800726c:	4013      	ands	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	6892      	ldr	r2, [r2, #8]
 8007272:	3a01      	subs	r2, #1
 8007274:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	68d2      	ldr	r2, [r2, #12]
 800727c:	3a01      	subs	r2, #1
 800727e:	0252      	lsls	r2, r2, #9
 8007280:	b292      	uxth	r2, r2
 8007282:	4311      	orrs	r1, r2
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6912      	ldr	r2, [r2, #16]
 8007288:	3a01      	subs	r2, #1
 800728a:	0412      	lsls	r2, r2, #16
 800728c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007290:	4311      	orrs	r1, r2
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	6952      	ldr	r2, [r2, #20]
 8007296:	3a01      	subs	r2, #1
 8007298:	0612      	lsls	r2, r2, #24
 800729a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800729e:	430a      	orrs	r2, r1
 80072a0:	4924      	ldr	r1, [pc, #144]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80072a6:	4b23      	ldr	r3, [pc, #140]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 80072a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072aa:	f023 020c 	bic.w	r2, r3, #12
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	4920      	ldr	r1, [pc, #128]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80072b8:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 80072ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	491c      	ldr	r1, [pc, #112]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80072c6:	4b1b      	ldr	r3, [pc, #108]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	4a1a      	ldr	r2, [pc, #104]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 80072cc:	f023 0310 	bic.w	r3, r3, #16
 80072d0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072d2:	4b18      	ldr	r3, [pc, #96]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	69d2      	ldr	r2, [r2, #28]
 80072e2:	00d2      	lsls	r2, r2, #3
 80072e4:	4913      	ldr	r1, [pc, #76]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	4a11      	ldr	r2, [pc, #68]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 80072f0:	f043 0310 	orr.w	r3, r3, #16
 80072f4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80072f6:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a0e      	ldr	r2, [pc, #56]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 80072fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007300:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007302:	f7fa f943 	bl	800158c <HAL_GetTick>
 8007306:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007308:	e008      	b.n	800731c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800730a:	f7fa f93f 	bl	800158c <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	2b02      	cmp	r3, #2
 8007316:	d901      	bls.n	800731c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e006      	b.n	800732a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <RCCEx_PLL2_Config+0x128>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d0f0      	beq.n	800730a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007328:	2300      	movs	r3, #0

}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	46020c00 	.word	0x46020c00
 8007338:	80800000 	.word	0x80800000

0800733c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007344:	4b47      	ldr	r3, [pc, #284]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a46      	ldr	r2, [pc, #280]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 800734a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800734e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007350:	f7fa f91c 	bl	800158c <HAL_GetTick>
 8007354:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007356:	e008      	b.n	800736a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007358:	f7fa f918 	bl	800158c <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d901      	bls.n	800736a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e077      	b.n	800745a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800736a:	4b3e      	ldr	r3, [pc, #248]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1f0      	bne.n	8007358 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007376:	4b3b      	ldr	r3, [pc, #236]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800737e:	f023 0303 	bic.w	r3, r3, #3
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6811      	ldr	r1, [r2, #0]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	6852      	ldr	r2, [r2, #4]
 800738a:	3a01      	subs	r2, #1
 800738c:	0212      	lsls	r2, r2, #8
 800738e:	430a      	orrs	r2, r1
 8007390:	4934      	ldr	r1, [pc, #208]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 8007392:	4313      	orrs	r3, r2
 8007394:	630b      	str	r3, [r1, #48]	; 0x30
 8007396:	4b33      	ldr	r3, [pc, #204]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 8007398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800739a:	4b33      	ldr	r3, [pc, #204]	; (8007468 <RCCEx_PLL3_Config+0x12c>)
 800739c:	4013      	ands	r3, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6892      	ldr	r2, [r2, #8]
 80073a2:	3a01      	subs	r2, #1
 80073a4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	68d2      	ldr	r2, [r2, #12]
 80073ac:	3a01      	subs	r2, #1
 80073ae:	0252      	lsls	r2, r2, #9
 80073b0:	b292      	uxth	r2, r2
 80073b2:	4311      	orrs	r1, r2
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6912      	ldr	r2, [r2, #16]
 80073b8:	3a01      	subs	r2, #1
 80073ba:	0412      	lsls	r2, r2, #16
 80073bc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80073c0:	4311      	orrs	r1, r2
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6952      	ldr	r2, [r2, #20]
 80073c6:	3a01      	subs	r2, #1
 80073c8:	0612      	lsls	r2, r2, #24
 80073ca:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80073ce:	430a      	orrs	r2, r1
 80073d0:	4924      	ldr	r1, [pc, #144]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80073d6:	4b23      	ldr	r3, [pc, #140]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 80073d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073da:	f023 020c 	bic.w	r2, r3, #12
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	4920      	ldr	r1, [pc, #128]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80073e8:	4b1e      	ldr	r3, [pc, #120]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 80073ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	491c      	ldr	r1, [pc, #112]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80073f6:	4b1b      	ldr	r3, [pc, #108]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 80073f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fa:	4a1a      	ldr	r2, [pc, #104]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 80073fc:	f023 0310 	bic.w	r3, r3, #16
 8007400:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007402:	4b18      	ldr	r3, [pc, #96]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 8007404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800740a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	69d2      	ldr	r2, [r2, #28]
 8007412:	00d2      	lsls	r2, r2, #3
 8007414:	4913      	ldr	r1, [pc, #76]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 8007416:	4313      	orrs	r3, r2
 8007418:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800741a:	4b12      	ldr	r3, [pc, #72]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	4a11      	ldr	r2, [pc, #68]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 8007420:	f043 0310 	orr.w	r3, r3, #16
 8007424:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007426:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a0e      	ldr	r2, [pc, #56]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 800742c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007430:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007432:	f7fa f8ab 	bl	800158c <HAL_GetTick>
 8007436:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007438:	e008      	b.n	800744c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800743a:	f7fa f8a7 	bl	800158c <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d901      	bls.n	800744c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e006      	b.n	800745a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <RCCEx_PLL3_Config+0x128>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0f0      	beq.n	800743a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	46020c00 	.word	0x46020c00
 8007468:	80800000 	.word	0x80800000

0800746c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e03e      	b.n	8007500 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d106      	bne.n	800749c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f7f9 ff60 	bl	800135c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	3308      	adds	r3, #8
 80074a4:	4619      	mov	r1, r3
 80074a6:	4610      	mov	r0, r2
 80074a8:	f000 fcda 	bl	8007e60 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6818      	ldr	r0, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	461a      	mov	r2, r3
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	f000 fda2 	bl	8008000 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6858      	ldr	r0, [r3, #4]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	f000 fdeb 	bl	80080a4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	6892      	ldr	r2, [r2, #8]
 80074d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	6892      	ldr	r2, [r2, #8]
 80074e2:	f041 0101 	orr.w	r1, r1, #1
 80074e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80074ea:	4b07      	ldr	r3, [pc, #28]	; (8007508 <HAL_SRAM_Init+0x9c>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a06      	ldr	r2, [pc, #24]	; (8007508 <HAL_SRAM_Init+0x9c>)
 80074f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074f4:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	420d0400 	.word	0x420d0400

0800750c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e042      	b.n	80075a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007524:	2b00      	cmp	r3, #0
 8007526:	d106      	bne.n	8007536 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7f9 fdc9 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2224      	movs	r2, #36	; 0x24
 800753a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0201 	bic.w	r2, r2, #1
 800754c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f82c 	bl	80075ac <UART_SetConfig>
 8007554:	4603      	mov	r3, r0
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e022      	b.n	80075a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f9c2 	bl	80078f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800757a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689a      	ldr	r2, [r3, #8]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800758a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0201 	orr.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fa49 	bl	8007a34 <UART_CheckIdleState>
 80075a2:	4603      	mov	r3, r0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075b0:	b094      	sub	sp, #80	; 0x50
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80075bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4b7e      	ldr	r3, [pc, #504]	; (80077bc <UART_SetConfig+0x210>)
 80075c2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	431a      	orrs	r2, r3
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	4313      	orrs	r3, r2
 80075da:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4977      	ldr	r1, [pc, #476]	; (80077c0 <UART_SetConfig+0x214>)
 80075e4:	4019      	ands	r1, r3
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ec:	430b      	orrs	r3, r1
 80075ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80075fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fc:	68d9      	ldr	r1, [r3, #12]
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	ea40 0301 	orr.w	r3, r0, r1
 8007606:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4b6a      	ldr	r3, [pc, #424]	; (80077bc <UART_SetConfig+0x210>)
 8007614:	429a      	cmp	r2, r3
 8007616:	d009      	beq.n	800762c <UART_SetConfig+0x80>
 8007618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	4b69      	ldr	r3, [pc, #420]	; (80077c4 <UART_SetConfig+0x218>)
 800761e:	429a      	cmp	r2, r3
 8007620:	d004      	beq.n	800762c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007624:	6a1a      	ldr	r2, [r3, #32]
 8007626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007628:	4313      	orrs	r3, r2
 800762a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007636:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800763a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007640:	430b      	orrs	r3, r1
 8007642:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	f023 000f 	bic.w	r0, r3, #15
 800764e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007650:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	ea40 0301 	orr.w	r3, r0, r1
 800765a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	4b59      	ldr	r3, [pc, #356]	; (80077c8 <UART_SetConfig+0x21c>)
 8007662:	429a      	cmp	r2, r3
 8007664:	d102      	bne.n	800766c <UART_SetConfig+0xc0>
 8007666:	2301      	movs	r3, #1
 8007668:	64bb      	str	r3, [r7, #72]	; 0x48
 800766a:	e029      	b.n	80076c0 <UART_SetConfig+0x114>
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	4b56      	ldr	r3, [pc, #344]	; (80077cc <UART_SetConfig+0x220>)
 8007672:	429a      	cmp	r2, r3
 8007674:	d102      	bne.n	800767c <UART_SetConfig+0xd0>
 8007676:	2302      	movs	r3, #2
 8007678:	64bb      	str	r3, [r7, #72]	; 0x48
 800767a:	e021      	b.n	80076c0 <UART_SetConfig+0x114>
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	4b53      	ldr	r3, [pc, #332]	; (80077d0 <UART_SetConfig+0x224>)
 8007682:	429a      	cmp	r2, r3
 8007684:	d102      	bne.n	800768c <UART_SetConfig+0xe0>
 8007686:	2304      	movs	r3, #4
 8007688:	64bb      	str	r3, [r7, #72]	; 0x48
 800768a:	e019      	b.n	80076c0 <UART_SetConfig+0x114>
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	4b50      	ldr	r3, [pc, #320]	; (80077d4 <UART_SetConfig+0x228>)
 8007692:	429a      	cmp	r2, r3
 8007694:	d102      	bne.n	800769c <UART_SetConfig+0xf0>
 8007696:	2308      	movs	r3, #8
 8007698:	64bb      	str	r3, [r7, #72]	; 0x48
 800769a:	e011      	b.n	80076c0 <UART_SetConfig+0x114>
 800769c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	4b4d      	ldr	r3, [pc, #308]	; (80077d8 <UART_SetConfig+0x22c>)
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d102      	bne.n	80076ac <UART_SetConfig+0x100>
 80076a6:	2310      	movs	r3, #16
 80076a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80076aa:	e009      	b.n	80076c0 <UART_SetConfig+0x114>
 80076ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	4b42      	ldr	r3, [pc, #264]	; (80077bc <UART_SetConfig+0x210>)
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d102      	bne.n	80076bc <UART_SetConfig+0x110>
 80076b6:	2320      	movs	r3, #32
 80076b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ba:	e001      	b.n	80076c0 <UART_SetConfig+0x114>
 80076bc:	2300      	movs	r3, #0
 80076be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	4b3d      	ldr	r3, [pc, #244]	; (80077bc <UART_SetConfig+0x210>)
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d005      	beq.n	80076d6 <UART_SetConfig+0x12a>
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	4b3d      	ldr	r3, [pc, #244]	; (80077c4 <UART_SetConfig+0x218>)
 80076d0:	429a      	cmp	r2, r3
 80076d2:	f040 8085 	bne.w	80077e0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80076d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d8:	2200      	movs	r2, #0
 80076da:	623b      	str	r3, [r7, #32]
 80076dc:	627a      	str	r2, [r7, #36]	; 0x24
 80076de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80076e2:	f7fe fc6b 	bl	8005fbc <HAL_RCCEx_GetPeriphCLKFreq>
 80076e6:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80076e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 80e8 	beq.w	80078c0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	4a39      	ldr	r2, [pc, #228]	; (80077dc <UART_SetConfig+0x230>)
 80076f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076fa:	461a      	mov	r2, r3
 80076fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007702:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	4613      	mov	r3, r2
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	4413      	add	r3, r2
 800770e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007710:	429a      	cmp	r2, r3
 8007712:	d305      	bcc.n	8007720 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800771a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800771c:	429a      	cmp	r2, r3
 800771e:	d903      	bls.n	8007728 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007726:	e048      	b.n	80077ba <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800772a:	2200      	movs	r2, #0
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	61fa      	str	r2, [r7, #28]
 8007730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	4a29      	ldr	r2, [pc, #164]	; (80077dc <UART_SetConfig+0x230>)
 8007736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800773a:	b29b      	uxth	r3, r3
 800773c:	2200      	movs	r2, #0
 800773e:	613b      	str	r3, [r7, #16]
 8007740:	617a      	str	r2, [r7, #20]
 8007742:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007746:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800774a:	f7f8 fd93 	bl	8000274 <__aeabi_uldivmod>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4610      	mov	r0, r2
 8007754:	4619      	mov	r1, r3
 8007756:	f04f 0200 	mov.w	r2, #0
 800775a:	f04f 0300 	mov.w	r3, #0
 800775e:	020b      	lsls	r3, r1, #8
 8007760:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007764:	0202      	lsls	r2, r0, #8
 8007766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007768:	6849      	ldr	r1, [r1, #4]
 800776a:	0849      	lsrs	r1, r1, #1
 800776c:	2000      	movs	r0, #0
 800776e:	460c      	mov	r4, r1
 8007770:	4605      	mov	r5, r0
 8007772:	eb12 0804 	adds.w	r8, r2, r4
 8007776:	eb43 0905 	adc.w	r9, r3, r5
 800777a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	60bb      	str	r3, [r7, #8]
 8007782:	60fa      	str	r2, [r7, #12]
 8007784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007788:	4640      	mov	r0, r8
 800778a:	4649      	mov	r1, r9
 800778c:	f7f8 fd72 	bl	8000274 <__aeabi_uldivmod>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	4613      	mov	r3, r2
 8007796:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800779e:	d308      	bcc.n	80077b2 <UART_SetConfig+0x206>
 80077a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077a6:	d204      	bcs.n	80077b2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077ae:	60da      	str	r2, [r3, #12]
 80077b0:	e003      	b.n	80077ba <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80077b8:	e082      	b.n	80078c0 <UART_SetConfig+0x314>
 80077ba:	e081      	b.n	80078c0 <UART_SetConfig+0x314>
 80077bc:	46002400 	.word	0x46002400
 80077c0:	cfff69f3 	.word	0xcfff69f3
 80077c4:	56002400 	.word	0x56002400
 80077c8:	40013800 	.word	0x40013800
 80077cc:	40004400 	.word	0x40004400
 80077d0:	40004800 	.word	0x40004800
 80077d4:	40004c00 	.word	0x40004c00
 80077d8:	40005000 	.word	0x40005000
 80077dc:	080091ac 	.word	0x080091ac
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077e8:	d13c      	bne.n	8007864 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80077ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ec:	2200      	movs	r2, #0
 80077ee:	603b      	str	r3, [r7, #0]
 80077f0:	607a      	str	r2, [r7, #4]
 80077f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077f6:	f7fe fbe1 	bl	8005fbc <HAL_RCCEx_GetPeriphCLKFreq>
 80077fa:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d05e      	beq.n	80078c0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	4a39      	ldr	r2, [pc, #228]	; (80078ec <UART_SetConfig+0x340>)
 8007808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800780c:	461a      	mov	r2, r3
 800780e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007810:	fbb3 f3f2 	udiv	r3, r3, r2
 8007814:	005a      	lsls	r2, r3, #1
 8007816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	085b      	lsrs	r3, r3, #1
 800781c:	441a      	add	r2, r3
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	fbb2 f3f3 	udiv	r3, r2, r3
 8007826:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800782a:	2b0f      	cmp	r3, #15
 800782c:	d916      	bls.n	800785c <UART_SetConfig+0x2b0>
 800782e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007834:	d212      	bcs.n	800785c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007838:	b29b      	uxth	r3, r3
 800783a:	f023 030f 	bic.w	r3, r3, #15
 800783e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007842:	085b      	lsrs	r3, r3, #1
 8007844:	b29b      	uxth	r3, r3
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	b29a      	uxth	r2, r3
 800784c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800784e:	4313      	orrs	r3, r2
 8007850:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007858:	60da      	str	r2, [r3, #12]
 800785a:	e031      	b.n	80078c0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007862:	e02d      	b.n	80078c0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007866:	2200      	movs	r2, #0
 8007868:	469a      	mov	sl, r3
 800786a:	4693      	mov	fp, r2
 800786c:	4650      	mov	r0, sl
 800786e:	4659      	mov	r1, fp
 8007870:	f7fe fba4 	bl	8005fbc <HAL_RCCEx_GetPeriphCLKFreq>
 8007874:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007878:	2b00      	cmp	r3, #0
 800787a:	d021      	beq.n	80078c0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	4a1a      	ldr	r2, [pc, #104]	; (80078ec <UART_SetConfig+0x340>)
 8007882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007886:	461a      	mov	r2, r3
 8007888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800788a:	fbb3 f2f2 	udiv	r2, r3, r2
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	085b      	lsrs	r3, r3, #1
 8007894:	441a      	add	r2, r3
 8007896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	fbb2 f3f3 	udiv	r3, r2, r3
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a2:	2b0f      	cmp	r3, #15
 80078a4:	d909      	bls.n	80078ba <UART_SetConfig+0x30e>
 80078a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ac:	d205      	bcs.n	80078ba <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	60da      	str	r2, [r3, #12]
 80078b8:	e002      	b.n	80078c0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c2:	2201      	movs	r2, #1
 80078c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	2201      	movs	r2, #1
 80078cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d2:	2200      	movs	r2, #0
 80078d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80078d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d8:	2200      	movs	r2, #0
 80078da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80078dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3750      	adds	r7, #80	; 0x50
 80078e4:	46bd      	mov	sp, r7
 80078e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078ea:	bf00      	nop
 80078ec:	080091ac 	.word	0x080091ac

080078f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00a      	beq.n	800795e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007962:	f003 0308 	and.w	r3, r3, #8
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	f003 0310 	and.w	r3, r3, #16
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00a      	beq.n	80079a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00a      	beq.n	80079c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	430a      	orrs	r2, r1
 80079c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d01a      	beq.n	8007a06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ee:	d10a      	bne.n	8007a06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00a      	beq.n	8007a28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	605a      	str	r2, [r3, #4]
  }
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af02      	add	r7, sp, #8
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a44:	f7f9 fda2 	bl	800158c <HAL_GetTick>
 8007a48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0308 	and.w	r3, r3, #8
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d10e      	bne.n	8007a76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f82f 	bl	8007aca <UART_WaitOnFlagUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e025      	b.n	8007ac2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d10e      	bne.n	8007aa2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f819 	bl	8007aca <UART_WaitOnFlagUntilTimeout>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e00f      	b.n	8007ac2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b09c      	sub	sp, #112	; 0x70
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	603b      	str	r3, [r7, #0]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ada:	e0a9      	b.n	8007c30 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae2:	f000 80a5 	beq.w	8007c30 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ae6:	f7f9 fd51 	bl	800158c <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d302      	bcc.n	8007afc <UART_WaitOnFlagUntilTimeout+0x32>
 8007af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d140      	bne.n	8007b7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b10:	667b      	str	r3, [r7, #100]	; 0x64
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e6      	bne.n	8007afc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	f023 0301 	bic.w	r3, r3, #1
 8007b44:	663b      	str	r3, [r7, #96]	; 0x60
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e5      	bne.n	8007b2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e069      	b.n	8007c52 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d051      	beq.n	8007c30 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b9a:	d149      	bne.n	8007c30 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ba4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e6      	bne.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3308      	adds	r3, #8
 8007bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	613b      	str	r3, [r7, #16]
   return(result);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f023 0301 	bic.w	r3, r3, #1
 8007bee:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bf8:	623a      	str	r2, [r7, #32]
 8007bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	69f9      	ldr	r1, [r7, #28]
 8007bfe:	6a3a      	ldr	r2, [r7, #32]
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e5      	bne.n	8007bd8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e010      	b.n	8007c52 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69da      	ldr	r2, [r3, #28]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	4013      	ands	r3, r2
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	bf0c      	ite	eq
 8007c40:	2301      	moveq	r3, #1
 8007c42:	2300      	movne	r3, #0
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	461a      	mov	r2, r3
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	f43f af46 	beq.w	8007adc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3770      	adds	r7, #112	; 0x70
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e027      	b.n	8007cc0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2224      	movs	r2, #36	; 0x24
 8007c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0201 	bic.w	r2, r2, #1
 8007c96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e02d      	b.n	8007d40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2224      	movs	r2, #36	; 0x24
 8007cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 0201 	bic.w	r2, r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f84f 	bl	8007dc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d101      	bne.n	8007d60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e02d      	b.n	8007dbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2224      	movs	r2, #36	; 0x24
 8007d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0201 	bic.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f811 	bl	8007dc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d108      	bne.n	8007de6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007de4:	e031      	b.n	8007e4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007de6:	2308      	movs	r3, #8
 8007de8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007dea:	2308      	movs	r3, #8
 8007dec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	0e5b      	lsrs	r3, r3, #25
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f003 0307 	and.w	r3, r3, #7
 8007dfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	0f5b      	lsrs	r3, r3, #29
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	7b3a      	ldrb	r2, [r7, #12]
 8007e12:	4911      	ldr	r1, [pc, #68]	; (8007e58 <UARTEx_SetNbDataToProcess+0x94>)
 8007e14:	5c8a      	ldrb	r2, [r1, r2]
 8007e16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e1a:	7b3a      	ldrb	r2, [r7, #12]
 8007e1c:	490f      	ldr	r1, [pc, #60]	; (8007e5c <UARTEx_SetNbDataToProcess+0x98>)
 8007e1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e20:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	7b7a      	ldrb	r2, [r7, #13]
 8007e30:	4909      	ldr	r1, [pc, #36]	; (8007e58 <UARTEx_SetNbDataToProcess+0x94>)
 8007e32:	5c8a      	ldrb	r2, [r1, r2]
 8007e34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e38:	7b7a      	ldrb	r2, [r7, #13]
 8007e3a:	4908      	ldr	r1, [pc, #32]	; (8007e5c <UARTEx_SetNbDataToProcess+0x98>)
 8007e3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e4a:	bf00      	nop
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	080091c4 	.word	0x080091c4
 8007e5c:	080091cc 	.word	0x080091cc

08007e60 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	6812      	ldr	r2, [r2, #0]
 8007e78:	f023 0101 	bic.w	r1, r3, #1
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	d102      	bne.n	8007e90 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007e8a:	2340      	movs	r3, #64	; 0x40
 8007e8c:	617b      	str	r3, [r7, #20]
 8007e8e:	e001      	b.n	8007e94 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007e90:	2300      	movs	r3, #0
 8007e92:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007ea0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007ea6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007eac:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007eb2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007eb8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8007ebe:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8007ec4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8007eca:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8007ed0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8007f02:	4b3e      	ldr	r3, [pc, #248]	; (8007ffc <FMC_NORSRAM_Init+0x19c>)
 8007f04:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f0c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f14:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8007f1c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007f24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	43db      	mvns	r3, r3
 8007f34:	ea02 0103 	and.w	r1, r2, r3
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	4319      	orrs	r1, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f4e:	d10c      	bne.n	8007f6a <FMC_NORSRAM_Init+0x10a>
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d008      	beq.n	8007f6a <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f64:	431a      	orrs	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d006      	beq.n	8007f80 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d12f      	bne.n	8007fea <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	0c1b      	lsrs	r3, r3, #16
 8007f90:	041b      	lsls	r3, r3, #16
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	d014      	beq.n	8007fce <FMC_NORSRAM_Init+0x16e>
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	d819      	bhi.n	8007fdc <FMC_NORSRAM_Init+0x17c>
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <FMC_NORSRAM_Init+0x152>
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d007      	beq.n	8007fc0 <FMC_NORSRAM_Init+0x160>
 8007fb0:	e014      	b.n	8007fdc <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	621a      	str	r2, [r3, #32]
        break;
 8007fbe:	e015      	b.n	8007fec <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	621a      	str	r2, [r3, #32]
        break;
 8007fcc:	e00e      	b.n	8007fec <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	621a      	str	r2, [r3, #32]
        break;
 8007fda:	e007      	b.n	8007fec <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	621a      	str	r2, [r3, #32]
        break;
 8007fe8:	e000      	b.n	8007fec <FMC_NORSRAM_Init+0x18c>
    }
  }
 8007fea:	bf00      	nop

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	371c      	adds	r7, #28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	0008fb7f 	.word	0x0008fb7f

08008000 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	011b      	lsls	r3, r3, #4
 8008020:	431a      	orrs	r2, r3
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	021b      	lsls	r3, r3, #8
 8008028:	431a      	orrs	r2, r3
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	079b      	lsls	r3, r3, #30
 8008030:	431a      	orrs	r2, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	041b      	lsls	r3, r3, #16
 8008038:	431a      	orrs	r2, r3
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	3b01      	subs	r3, #1
 8008040:	051b      	lsls	r3, r3, #20
 8008042:	431a      	orrs	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	3b02      	subs	r3, #2
 800804a:	061b      	lsls	r3, r3, #24
 800804c:	ea42 0103 	orr.w	r1, r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	3201      	adds	r2, #1
 8008058:	4319      	orrs	r1, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800806c:	d113      	bne.n	8008096 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008076:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	3b01      	subs	r3, #1
 800807e:	051b      	lsls	r3, r3, #20
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	4313      	orrs	r3, r2
 8008084:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	431a      	orrs	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
 80080b0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080b8:	d121      	bne.n	80080fe <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c2:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	6819      	ldr	r1, [r3, #0]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	4319      	orrs	r1, r3
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	4319      	orrs	r1, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	079b      	lsls	r3, r3, #30
 80080e0:	4319      	orrs	r1, r3
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	4319      	orrs	r1, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	041b      	lsls	r3, r3, #16
 80080ee:	430b      	orrs	r3, r1
 80080f0:	ea42 0103 	orr.w	r1, r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80080fc:	e005      	b.n	800810a <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008118:	b480      	push	{r7}
 800811a:	b08b      	sub	sp, #44	; 0x2c
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	fa93 f3a3 	rbit	r3, r3
 8008132:	613b      	str	r3, [r7, #16]
  return result;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800813e:	2320      	movs	r3, #32
 8008140:	e003      	b.n	800814a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	fab3 f383 	clz	r3, r3
 8008148:	b2db      	uxtb	r3, r3
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	2103      	movs	r1, #3
 800814e:	fa01 f303 	lsl.w	r3, r1, r3
 8008152:	43db      	mvns	r3, r3
 8008154:	401a      	ands	r2, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	fa93 f3a3 	rbit	r3, r3
 8008160:	61fb      	str	r3, [r7, #28]
  return result;
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800816c:	2320      	movs	r3, #32
 800816e:	e003      	b.n	8008178 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	fab3 f383 	clz	r3, r3
 8008176:	b2db      	uxtb	r3, r3
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	fa01 f303 	lsl.w	r3, r1, r3
 8008180:	431a      	orrs	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	601a      	str	r2, [r3, #0]
}
 8008186:	bf00      	nop
 8008188:	372c      	adds	r7, #44	; 0x2c
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008192:	b480      	push	{r7}
 8008194:	b085      	sub	sp, #20
 8008196:	af00      	add	r7, sp, #0
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	60b9      	str	r1, [r7, #8]
 800819c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	43db      	mvns	r3, r3
 80081a6:	401a      	ands	r2, r3
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	fb01 f303 	mul.w	r3, r1, r3
 80081b0:	431a      	orrs	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	605a      	str	r2, [r3, #4]
}
 80081b6:	bf00      	nop
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b08b      	sub	sp, #44	; 0x2c
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	60f8      	str	r0, [r7, #12]
 80081ca:	60b9      	str	r1, [r7, #8]
 80081cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	689a      	ldr	r2, [r3, #8]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	fa93 f3a3 	rbit	r3, r3
 80081dc:	613b      	str	r3, [r7, #16]
  return result;
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80081e8:	2320      	movs	r3, #32
 80081ea:	e003      	b.n	80081f4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	fab3 f383 	clz	r3, r3
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	2103      	movs	r1, #3
 80081f8:	fa01 f303 	lsl.w	r3, r1, r3
 80081fc:	43db      	mvns	r3, r3
 80081fe:	401a      	ands	r2, r3
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008204:	6a3b      	ldr	r3, [r7, #32]
 8008206:	fa93 f3a3 	rbit	r3, r3
 800820a:	61fb      	str	r3, [r7, #28]
  return result;
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008216:	2320      	movs	r3, #32
 8008218:	e003      	b.n	8008222 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	fab3 f383 	clz	r3, r3
 8008220:	b2db      	uxtb	r3, r3
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	fa01 f303 	lsl.w	r3, r1, r3
 800822a:	431a      	orrs	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008230:	bf00      	nop
 8008232:	372c      	adds	r7, #44	; 0x2c
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800823c:	b480      	push	{r7}
 800823e:	b08b      	sub	sp, #44	; 0x2c
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	68da      	ldr	r2, [r3, #12]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	fa93 f3a3 	rbit	r3, r3
 8008256:	613b      	str	r3, [r7, #16]
  return result;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008262:	2320      	movs	r3, #32
 8008264:	e003      	b.n	800826e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	fab3 f383 	clz	r3, r3
 800826c:	b2db      	uxtb	r3, r3
 800826e:	005b      	lsls	r3, r3, #1
 8008270:	2103      	movs	r1, #3
 8008272:	fa01 f303 	lsl.w	r3, r1, r3
 8008276:	43db      	mvns	r3, r3
 8008278:	401a      	ands	r2, r3
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	fa93 f3a3 	rbit	r3, r3
 8008284:	61fb      	str	r3, [r7, #28]
  return result;
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008290:	2320      	movs	r3, #32
 8008292:	e003      	b.n	800829c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	fab3 f383 	clz	r3, r3
 800829a:	b2db      	uxtb	r3, r3
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	fa01 f303 	lsl.w	r3, r1, r3
 80082a4:	431a      	orrs	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	60da      	str	r2, [r3, #12]
}
 80082aa:	bf00      	nop
 80082ac:	372c      	adds	r7, #44	; 0x2c
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b08b      	sub	sp, #44	; 0x2c
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6a1a      	ldr	r2, [r3, #32]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	fa93 f3a3 	rbit	r3, r3
 80082d0:	613b      	str	r3, [r7, #16]
  return result;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80082dc:	2320      	movs	r3, #32
 80082de:	e003      	b.n	80082e8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	fab3 f383 	clz	r3, r3
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	210f      	movs	r1, #15
 80082ec:	fa01 f303 	lsl.w	r3, r1, r3
 80082f0:	43db      	mvns	r3, r3
 80082f2:	401a      	ands	r2, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	fa93 f3a3 	rbit	r3, r3
 80082fe:	61fb      	str	r3, [r7, #28]
  return result;
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800830a:	2320      	movs	r3, #32
 800830c:	e003      	b.n	8008316 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	fab3 f383 	clz	r3, r3
 8008314:	b2db      	uxtb	r3, r3
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	6879      	ldr	r1, [r7, #4]
 800831a:	fa01 f303 	lsl.w	r3, r1, r3
 800831e:	431a      	orrs	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008324:	bf00      	nop
 8008326:	372c      	adds	r7, #44	; 0x2c
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008330:	b480      	push	{r7}
 8008332:	b08b      	sub	sp, #44	; 0x2c
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	0a1b      	lsrs	r3, r3, #8
 8008344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	fa93 f3a3 	rbit	r3, r3
 800834c:	613b      	str	r3, [r7, #16]
  return result;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008358:	2320      	movs	r3, #32
 800835a:	e003      	b.n	8008364 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	fab3 f383 	clz	r3, r3
 8008362:	b2db      	uxtb	r3, r3
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	210f      	movs	r1, #15
 8008368:	fa01 f303 	lsl.w	r3, r1, r3
 800836c:	43db      	mvns	r3, r3
 800836e:	401a      	ands	r2, r3
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	0a1b      	lsrs	r3, r3, #8
 8008374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	fa93 f3a3 	rbit	r3, r3
 800837c:	61fb      	str	r3, [r7, #28]
  return result;
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008388:	2320      	movs	r3, #32
 800838a:	e003      	b.n	8008394 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	fab3 f383 	clz	r3, r3
 8008392:	b2db      	uxtb	r3, r3
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	fa01 f303 	lsl.w	r3, r1, r3
 800839c:	431a      	orrs	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80083a2:	bf00      	nop
 80083a4:	372c      	adds	r7, #44	; 0x2c
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b08a      	sub	sp, #40	; 0x28
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	fa93 f3a3 	rbit	r3, r3
 80083c4:	617b      	str	r3, [r7, #20]
  return result;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <LL_GPIO_Init+0x26>
    return 32U;
 80083d0:	2320      	movs	r3, #32
 80083d2:	e003      	b.n	80083dc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	fab3 f383 	clz	r3, r3
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80083de:	e050      	b.n	8008482 <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	2101      	movs	r1, #1
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	fa01 f303 	lsl.w	r3, r1, r3
 80083ec:	4013      	ands	r3, r2
 80083ee:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d042      	beq.n	800847c <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	461a      	mov	r2, r3
 80083fc:	6a39      	ldr	r1, [r7, #32]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff fe8a 	bl	8008118 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d003      	beq.n	8008414 <LL_GPIO_Init+0x66>
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	2b02      	cmp	r3, #2
 8008412:	d106      	bne.n	8008422 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	461a      	mov	r2, r3
 800841a:	6a39      	ldr	r1, [r7, #32]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f7ff fed0 	bl	80081c2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	461a      	mov	r2, r3
 8008428:	6a39      	ldr	r1, [r7, #32]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff ff06 	bl	800823c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2b02      	cmp	r3, #2
 8008436:	d121      	bne.n	800847c <LL_GPIO_Init+0xce>
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	fa93 f3a3 	rbit	r3, r3
 8008442:	60bb      	str	r3, [r7, #8]
  return result;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <LL_GPIO_Init+0xa4>
    return 32U;
 800844e:	2320      	movs	r3, #32
 8008450:	e003      	b.n	800845a <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	fab3 f383 	clz	r3, r3
 8008458:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800845a:	2b07      	cmp	r3, #7
 800845c:	d807      	bhi.n	800846e <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	461a      	mov	r2, r3
 8008464:	6a39      	ldr	r1, [r7, #32]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7ff ff25 	bl	80082b6 <LL_GPIO_SetAFPin_0_7>
 800846c:	e006      	b.n	800847c <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	461a      	mov	r2, r3
 8008474:	6a39      	ldr	r1, [r7, #32]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff ff5a 	bl	8008330 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	3301      	adds	r3, #1
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	fa22 f303 	lsr.w	r3, r2, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1a7      	bne.n	80083e0 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d003      	beq.n	80084a0 <LL_GPIO_Init+0xf2>
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	2b02      	cmp	r3, #2
 800849e:	d107      	bne.n	80084b0 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	6819      	ldr	r1, [r3, #0]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	461a      	mov	r2, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff fe71 	bl	8008192 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3728      	adds	r7, #40	; 0x28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084ba:	b084      	sub	sp, #16
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	f107 001c 	add.w	r0, r7, #28
 80084c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fd8f 	bl	8008ffc <USB_CoreReset>
 80084de:	4603      	mov	r3, r0
 80084e0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80084e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d106      	bne.n	80084f6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	639a      	str	r2, [r3, #56]	; 0x38
 80084f4:	e005      	b.n	8008502 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 8008502:	7bfb      	ldrb	r3, [r7, #15]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800850e:	b004      	add	sp, #16
 8008510:	4770      	bx	lr
	...

08008514 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	4613      	mov	r3, r2
 8008520:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	2b02      	cmp	r3, #2
 8008526:	d165      	bne.n	80085f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4a41      	ldr	r2, [pc, #260]	; (8008630 <USB_SetTurnaroundTime+0x11c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d906      	bls.n	800853e <USB_SetTurnaroundTime+0x2a>
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	4a40      	ldr	r2, [pc, #256]	; (8008634 <USB_SetTurnaroundTime+0x120>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d202      	bcs.n	800853e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008538:	230f      	movs	r3, #15
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	e062      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4a3c      	ldr	r2, [pc, #240]	; (8008634 <USB_SetTurnaroundTime+0x120>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d306      	bcc.n	8008554 <USB_SetTurnaroundTime+0x40>
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	4a3b      	ldr	r2, [pc, #236]	; (8008638 <USB_SetTurnaroundTime+0x124>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d202      	bcs.n	8008554 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800854e:	230e      	movs	r3, #14
 8008550:	617b      	str	r3, [r7, #20]
 8008552:	e057      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	4a38      	ldr	r2, [pc, #224]	; (8008638 <USB_SetTurnaroundTime+0x124>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d306      	bcc.n	800856a <USB_SetTurnaroundTime+0x56>
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	4a37      	ldr	r2, [pc, #220]	; (800863c <USB_SetTurnaroundTime+0x128>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d202      	bcs.n	800856a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008564:	230d      	movs	r3, #13
 8008566:	617b      	str	r3, [r7, #20]
 8008568:	e04c      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4a33      	ldr	r2, [pc, #204]	; (800863c <USB_SetTurnaroundTime+0x128>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d306      	bcc.n	8008580 <USB_SetTurnaroundTime+0x6c>
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	4a32      	ldr	r2, [pc, #200]	; (8008640 <USB_SetTurnaroundTime+0x12c>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d802      	bhi.n	8008580 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800857a:	230c      	movs	r3, #12
 800857c:	617b      	str	r3, [r7, #20]
 800857e:	e041      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4a2f      	ldr	r2, [pc, #188]	; (8008640 <USB_SetTurnaroundTime+0x12c>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d906      	bls.n	8008596 <USB_SetTurnaroundTime+0x82>
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4a2e      	ldr	r2, [pc, #184]	; (8008644 <USB_SetTurnaroundTime+0x130>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d802      	bhi.n	8008596 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008590:	230b      	movs	r3, #11
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	e036      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	4a2a      	ldr	r2, [pc, #168]	; (8008644 <USB_SetTurnaroundTime+0x130>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d906      	bls.n	80085ac <USB_SetTurnaroundTime+0x98>
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	4a29      	ldr	r2, [pc, #164]	; (8008648 <USB_SetTurnaroundTime+0x134>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d802      	bhi.n	80085ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80085a6:	230a      	movs	r3, #10
 80085a8:	617b      	str	r3, [r7, #20]
 80085aa:	e02b      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4a26      	ldr	r2, [pc, #152]	; (8008648 <USB_SetTurnaroundTime+0x134>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d906      	bls.n	80085c2 <USB_SetTurnaroundTime+0xae>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	4a25      	ldr	r2, [pc, #148]	; (800864c <USB_SetTurnaroundTime+0x138>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d202      	bcs.n	80085c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80085bc:	2309      	movs	r3, #9
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	e020      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4a21      	ldr	r2, [pc, #132]	; (800864c <USB_SetTurnaroundTime+0x138>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d306      	bcc.n	80085d8 <USB_SetTurnaroundTime+0xc4>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	4a20      	ldr	r2, [pc, #128]	; (8008650 <USB_SetTurnaroundTime+0x13c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d802      	bhi.n	80085d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80085d2:	2308      	movs	r3, #8
 80085d4:	617b      	str	r3, [r7, #20]
 80085d6:	e015      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4a1d      	ldr	r2, [pc, #116]	; (8008650 <USB_SetTurnaroundTime+0x13c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d906      	bls.n	80085ee <USB_SetTurnaroundTime+0xda>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	4a1c      	ldr	r2, [pc, #112]	; (8008654 <USB_SetTurnaroundTime+0x140>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d202      	bcs.n	80085ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80085e8:	2307      	movs	r3, #7
 80085ea:	617b      	str	r3, [r7, #20]
 80085ec:	e00a      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80085ee:	2306      	movs	r3, #6
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	e007      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80085f4:	79fb      	ldrb	r3, [r7, #7]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d102      	bne.n	8008600 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80085fa:	2309      	movs	r3, #9
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	e001      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008600:	2309      	movs	r3, #9
 8008602:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	68da      	ldr	r2, [r3, #12]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	029b      	lsls	r3, r3, #10
 8008618:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800861c:	431a      	orrs	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	371c      	adds	r7, #28
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	00d8acbf 	.word	0x00d8acbf
 8008634:	00e4e1c0 	.word	0x00e4e1c0
 8008638:	00f42400 	.word	0x00f42400
 800863c:	01067380 	.word	0x01067380
 8008640:	011a499f 	.word	0x011a499f
 8008644:	01312cff 	.word	0x01312cff
 8008648:	014ca43f 	.word	0x014ca43f
 800864c:	016e3600 	.word	0x016e3600
 8008650:	01a6ab1f 	.word	0x01a6ab1f
 8008654:	01e84800 	.word	0x01e84800

08008658 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f023 0201 	bic.w	r2, r3, #1
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008696:	78fb      	ldrb	r3, [r7, #3]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d115      	bne.n	80086c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80086a8:	2001      	movs	r0, #1
 80086aa:	f7f8 ff7b 	bl	80015a4 <HAL_Delay>
      ms++;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3301      	adds	r3, #1
 80086b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fc11 	bl	8008edc <USB_GetMode>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d01e      	beq.n	80086fe <USB_SetCurrentMode+0x84>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b31      	cmp	r3, #49	; 0x31
 80086c4:	d9f0      	bls.n	80086a8 <USB_SetCurrentMode+0x2e>
 80086c6:	e01a      	b.n	80086fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80086c8:	78fb      	ldrb	r3, [r7, #3]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d115      	bne.n	80086fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80086da:	2001      	movs	r0, #1
 80086dc:	f7f8 ff62 	bl	80015a4 <HAL_Delay>
      ms++;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3301      	adds	r3, #1
 80086e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fbf8 	bl	8008edc <USB_GetMode>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d005      	beq.n	80086fe <USB_SetCurrentMode+0x84>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b31      	cmp	r3, #49	; 0x31
 80086f6:	d9f0      	bls.n	80086da <USB_SetCurrentMode+0x60>
 80086f8:	e001      	b.n	80086fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e005      	b.n	800870a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b32      	cmp	r3, #50	; 0x32
 8008702:	d101      	bne.n	8008708 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e000      	b.n	800870a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008714:	b084      	sub	sp, #16
 8008716:	b580      	push	{r7, lr}
 8008718:	b086      	sub	sp, #24
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800872e:	2300      	movs	r3, #0
 8008730:	613b      	str	r3, [r7, #16]
 8008732:	e009      	b.n	8008748 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	3340      	adds	r3, #64	; 0x40
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	2200      	movs	r2, #0
 8008740:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	3301      	adds	r3, #1
 8008746:	613b      	str	r3, [r7, #16]
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	2b0e      	cmp	r3, #14
 800874c:	d9f2      	bls.n	8008734 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800874e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008750:	2b00      	cmp	r3, #0
 8008752:	d11c      	bne.n	800878e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008762:	f043 0302 	orr.w	r3, r3, #2
 8008766:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	e005      	b.n	800879a <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008792:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087a0:	461a      	mov	r2, r3
 80087a2:	2300      	movs	r3, #0
 80087a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ac:	4619      	mov	r1, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b4:	461a      	mov	r2, r3
 80087b6:	680b      	ldr	r3, [r1, #0]
 80087b8:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087ba:	2103      	movs	r1, #3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f95b 	bl	8008a78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087c2:	2110      	movs	r1, #16
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f8f3 	bl	80089b0 <USB_FlushTxFifo>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f91f 	bl	8008a18 <USB_FlushRxFifo>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ea:	461a      	mov	r2, r3
 80087ec:	2300      	movs	r3, #0
 80087ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f6:	461a      	mov	r2, r3
 80087f8:	2300      	movs	r3, #0
 80087fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008802:	461a      	mov	r2, r3
 8008804:	2300      	movs	r3, #0
 8008806:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008808:	2300      	movs	r3, #0
 800880a:	613b      	str	r3, [r7, #16]
 800880c:	e043      	b.n	8008896 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	4413      	add	r3, r2
 8008816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008824:	d118      	bne.n	8008858 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10a      	bne.n	8008842 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4413      	add	r3, r2
 8008834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008838:	461a      	mov	r2, r3
 800883a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	e013      	b.n	800886a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4413      	add	r3, r2
 800884a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884e:	461a      	mov	r2, r3
 8008850:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	e008      	b.n	800886a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008864:	461a      	mov	r2, r3
 8008866:	2300      	movs	r3, #0
 8008868:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4413      	add	r3, r2
 8008872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008876:	461a      	mov	r2, r3
 8008878:	2300      	movs	r3, #0
 800887a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008888:	461a      	mov	r2, r3
 800888a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800888e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	3301      	adds	r3, #1
 8008894:	613b      	str	r3, [r7, #16]
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	429a      	cmp	r2, r3
 800889c:	d3b7      	bcc.n	800880e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800889e:	2300      	movs	r3, #0
 80088a0:	613b      	str	r3, [r7, #16]
 80088a2:	e043      	b.n	800892c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088ba:	d118      	bne.n	80088ee <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	015a      	lsls	r2, r3, #5
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	4413      	add	r3, r2
 80088ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ce:	461a      	mov	r2, r3
 80088d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	e013      	b.n	8008900 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e4:	461a      	mov	r2, r3
 80088e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	e008      	b.n	8008900 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fa:	461a      	mov	r2, r3
 80088fc:	2300      	movs	r3, #0
 80088fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4413      	add	r3, r2
 8008908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890c:	461a      	mov	r2, r3
 800890e:	2300      	movs	r3, #0
 8008910:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	4413      	add	r3, r2
 800891a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891e:	461a      	mov	r2, r3
 8008920:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008924:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	3301      	adds	r3, #1
 800892a:	613b      	str	r3, [r7, #16]
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	429a      	cmp	r2, r3
 8008932:	d3b7      	bcc.n	80088a4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008942:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008946:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008954:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	2b00      	cmp	r3, #0
 800895a:	d105      	bne.n	8008968 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	f043 0210 	orr.w	r2, r3, #16
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	699a      	ldr	r2, [r3, #24]
 800896c:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <USB_DevInit+0x298>)
 800896e:	4313      	orrs	r3, r2
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008976:	2b00      	cmp	r3, #0
 8008978:	d005      	beq.n	8008986 <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	f043 0208 	orr.w	r2, r3, #8
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008988:	2b01      	cmp	r3, #1
 800898a:	d107      	bne.n	800899c <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008994:	f043 0304 	orr.w	r3, r3, #4
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800899c:	7dfb      	ldrb	r3, [r7, #23]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089a8:	b004      	add	sp, #16
 80089aa:	4770      	bx	lr
 80089ac:	803c3800 	.word	0x803c3800

080089b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3301      	adds	r3, #1
 80089c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4a13      	ldr	r2, [pc, #76]	; (8008a14 <USB_FlushTxFifo+0x64>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d901      	bls.n	80089d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e01b      	b.n	8008a08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	daf2      	bge.n	80089be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	019b      	lsls	r3, r3, #6
 80089e0:	f043 0220 	orr.w	r2, r3, #32
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3301      	adds	r3, #1
 80089ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	4a08      	ldr	r2, [pc, #32]	; (8008a14 <USB_FlushTxFifo+0x64>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d901      	bls.n	80089fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e006      	b.n	8008a08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	f003 0320 	and.w	r3, r3, #32
 8008a02:	2b20      	cmp	r3, #32
 8008a04:	d0f0      	beq.n	80089e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	00030d40 	.word	0x00030d40

08008a18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	4a11      	ldr	r2, [pc, #68]	; (8008a74 <USB_FlushRxFifo+0x5c>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d901      	bls.n	8008a36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e018      	b.n	8008a68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	daf2      	bge.n	8008a24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2210      	movs	r2, #16
 8008a46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	4a08      	ldr	r2, [pc, #32]	; (8008a74 <USB_FlushRxFifo+0x5c>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d901      	bls.n	8008a5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e006      	b.n	8008a68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	f003 0310 	and.w	r3, r3, #16
 8008a62:	2b10      	cmp	r3, #16
 8008a64:	d0f0      	beq.n	8008a48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr
 8008a74:	00030d40 	.word	0x00030d40

08008a78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	68f9      	ldr	r1, [r7, #12]
 8008a94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b087      	sub	sp, #28
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f003 0306 	and.w	r3, r3, #6
 8008ac2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d102      	bne.n	8008ad0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008aca:	2300      	movs	r3, #0
 8008acc:	75fb      	strb	r3, [r7, #23]
 8008ace:	e00a      	b.n	8008ae6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d002      	beq.n	8008adc <USB_GetDevSpeed+0x32>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b06      	cmp	r3, #6
 8008ada:	d102      	bne.n	8008ae2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008adc:	2302      	movs	r3, #2
 8008ade:	75fb      	strb	r3, [r7, #23]
 8008ae0:	e001      	b.n	8008ae6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ae2:	230f      	movs	r3, #15
 8008ae4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	371c      	adds	r7, #28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	785b      	ldrb	r3, [r3, #1]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d14a      	bne.n	8008ba8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b2a:	f040 8086 	bne.w	8008c3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	7812      	ldrb	r2, [r2, #0]
 8008b42:	0151      	lsls	r1, r2, #5
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	440a      	add	r2, r1
 8008b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	7812      	ldrb	r2, [r2, #0]
 8008b66:	0151      	lsls	r1, r2, #5
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	440a      	add	r2, r1
 8008b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d902      	bls.n	8008b8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	75fb      	strb	r3, [r7, #23]
          break;
 8008b8a:	e056      	b.n	8008c3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ba4:	d0e7      	beq.n	8008b76 <USB_EPStopXfer+0x82>
 8008ba6:	e048      	b.n	8008c3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bc0:	d13b      	bne.n	8008c3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	7812      	ldrb	r2, [r2, #0]
 8008bd6:	0151      	lsls	r1, r2, #5
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	440a      	add	r2, r1
 8008bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008be0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008be4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	7812      	ldrb	r2, [r2, #0]
 8008bfa:	0151      	lsls	r1, r2, #5
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	440a      	add	r2, r1
 8008c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d902      	bls.n	8008c20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c1e:	e00c      	b.n	8008c3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c38:	d0e7      	beq.n	8008c0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	371c      	adds	r7, #28
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b089      	sub	sp, #36	; 0x24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	4611      	mov	r1, r2
 8008c54:	461a      	mov	r2, r3
 8008c56:	460b      	mov	r3, r1
 8008c58:	71fb      	strb	r3, [r7, #7]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008c66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d123      	bne.n	8008cb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c6e:	88bb      	ldrh	r3, [r7, #4]
 8008c70:	3303      	adds	r3, #3
 8008c72:	089b      	lsrs	r3, r3, #2
 8008c74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c76:	2300      	movs	r3, #0
 8008c78:	61bb      	str	r3, [r7, #24]
 8008c7a:	e018      	b.n	8008cae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c7c:	79fb      	ldrb	r3, [r7, #7]
 8008c7e:	031a      	lsls	r2, r3, #12
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c88:	461a      	mov	r2, r3
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	3301      	adds	r3, #1
 8008c94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	3301      	adds	r3, #1
 8008cac:	61bb      	str	r3, [r7, #24]
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d3e2      	bcc.n	8008c7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3724      	adds	r7, #36	; 0x24
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b08b      	sub	sp, #44	; 0x2c
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008cda:	88fb      	ldrh	r3, [r7, #6]
 8008cdc:	089b      	lsrs	r3, r3, #2
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008ce2:	88fb      	ldrh	r3, [r7, #6]
 8008ce4:	f003 0303 	and.w	r3, r3, #3
 8008ce8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008cea:	2300      	movs	r3, #0
 8008cec:	623b      	str	r3, [r7, #32]
 8008cee:	e014      	b.n	8008d1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	601a      	str	r2, [r3, #0]
    pDest++;
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	3301      	adds	r3, #1
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	3301      	adds	r3, #1
 8008d06:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	3301      	adds	r3, #1
 8008d12:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	3301      	adds	r3, #1
 8008d18:	623b      	str	r3, [r7, #32]
 8008d1a:	6a3a      	ldr	r2, [r7, #32]
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d3e6      	bcc.n	8008cf0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d22:	8bfb      	ldrh	r3, [r7, #30]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01e      	beq.n	8008d66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d32:	461a      	mov	r2, r3
 8008d34:	f107 0310 	add.w	r3, r7, #16
 8008d38:	6812      	ldr	r2, [r2, #0]
 8008d3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	00db      	lsls	r3, r3, #3
 8008d44:	fa22 f303 	lsr.w	r3, r2, r3
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	701a      	strb	r2, [r3, #0]
      i++;
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	3301      	adds	r3, #1
 8008d52:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	3301      	adds	r3, #1
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008d5a:	8bfb      	ldrh	r3, [r7, #30]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d60:	8bfb      	ldrh	r3, [r7, #30]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1ea      	bne.n	8008d3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	372c      	adds	r7, #44	; 0x2c
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d8e:	f023 0303 	bic.w	r3, r3, #3
 8008d92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008da2:	f043 0302 	orr.w	r3, r3, #2
 8008da6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b085      	sub	sp, #20
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008dce:	68fb      	ldr	r3, [r7, #12]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	0c1b      	lsrs	r3, r3, #16
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	4013      	ands	r3, r2
 8008e32:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	b29b      	uxth	r3, r3
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	4013      	ands	r3, r2
 8008e70:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e72:	68bb      	ldr	r3, [r7, #8]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b087      	sub	sp, #28
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008ea4:	78fb      	ldrb	r3, [r7, #3]
 8008ea6:	f003 030f 	and.w	r3, r3, #15
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb0:	01db      	lsls	r3, r3, #7
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	4013      	ands	r3, r2
 8008ecc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ece:	68bb      	ldr	r3, [r7, #8]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	371c      	adds	r7, #28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	f003 0301 	and.w	r3, r3, #1
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f16:	f023 0307 	bic.w	r3, r3, #7
 8008f1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
	...

08008f40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b087      	sub	sp, #28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	333c      	adds	r3, #60	; 0x3c
 8008f56:	3304      	adds	r3, #4
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	4a26      	ldr	r2, [pc, #152]	; (8008ff8 <USB_EP0_OutStart+0xb8>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d90a      	bls.n	8008f7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f74:	d101      	bne.n	8008f7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	e037      	b.n	8008fea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f80:	461a      	mov	r2, r3
 8008f82:	2300      	movs	r3, #0
 8008f84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa8:	f043 0318 	orr.w	r3, r3, #24
 8008fac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fbc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008fc0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008fc2:	7afb      	ldrb	r3, [r7, #11]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d10f      	bne.n	8008fe8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fce:	461a      	mov	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fe2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008fe6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	371c      	adds	r7, #28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	4f54300a 	.word	0x4f54300a

08008ffc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009004:	2300      	movs	r3, #0
 8009006:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	3301      	adds	r3, #1
 800900c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	4a13      	ldr	r2, [pc, #76]	; (8009060 <USB_CoreReset+0x64>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d901      	bls.n	800901a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e01b      	b.n	8009052 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	daf2      	bge.n	8009008 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	f043 0201 	orr.w	r2, r3, #1
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	3301      	adds	r3, #1
 8009036:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4a09      	ldr	r2, [pc, #36]	; (8009060 <USB_CoreReset+0x64>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d901      	bls.n	8009044 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e006      	b.n	8009052 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	2b01      	cmp	r3, #1
 800904e:	d0f0      	beq.n	8009032 <USB_CoreReset+0x36>

  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3714      	adds	r7, #20
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	00030d40 	.word	0x00030d40

08009064 <__libc_init_array>:
 8009064:	b570      	push	{r4, r5, r6, lr}
 8009066:	4d0d      	ldr	r5, [pc, #52]	; (800909c <__libc_init_array+0x38>)
 8009068:	2600      	movs	r6, #0
 800906a:	4c0d      	ldr	r4, [pc, #52]	; (80090a0 <__libc_init_array+0x3c>)
 800906c:	1b64      	subs	r4, r4, r5
 800906e:	10a4      	asrs	r4, r4, #2
 8009070:	42a6      	cmp	r6, r4
 8009072:	d109      	bne.n	8009088 <__libc_init_array+0x24>
 8009074:	4d0b      	ldr	r5, [pc, #44]	; (80090a4 <__libc_init_array+0x40>)
 8009076:	2600      	movs	r6, #0
 8009078:	4c0b      	ldr	r4, [pc, #44]	; (80090a8 <__libc_init_array+0x44>)
 800907a:	f000 f81f 	bl	80090bc <_init>
 800907e:	1b64      	subs	r4, r4, r5
 8009080:	10a4      	asrs	r4, r4, #2
 8009082:	42a6      	cmp	r6, r4
 8009084:	d105      	bne.n	8009092 <__libc_init_array+0x2e>
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	f855 3b04 	ldr.w	r3, [r5], #4
 800908c:	3601      	adds	r6, #1
 800908e:	4798      	blx	r3
 8009090:	e7ee      	b.n	8009070 <__libc_init_array+0xc>
 8009092:	f855 3b04 	ldr.w	r3, [r5], #4
 8009096:	3601      	adds	r6, #1
 8009098:	4798      	blx	r3
 800909a:	e7f2      	b.n	8009082 <__libc_init_array+0x1e>
 800909c:	080091dc 	.word	0x080091dc
 80090a0:	080091dc 	.word	0x080091dc
 80090a4:	080091dc 	.word	0x080091dc
 80090a8:	080091e0 	.word	0x080091e0

080090ac <memset>:
 80090ac:	4402      	add	r2, r0
 80090ae:	4603      	mov	r3, r0
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d100      	bne.n	80090b6 <memset+0xa>
 80090b4:	4770      	bx	lr
 80090b6:	f803 1b01 	strb.w	r1, [r3], #1
 80090ba:	e7f9      	b.n	80090b0 <memset+0x4>

080090bc <_init>:
 80090bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090be:	bf00      	nop
 80090c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c2:	bc08      	pop	{r3}
 80090c4:	469e      	mov	lr, r3
 80090c6:	4770      	bx	lr

080090c8 <_fini>:
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ca:	bf00      	nop
 80090cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ce:	bc08      	pop	{r3}
 80090d0:	469e      	mov	lr, r3
 80090d2:	4770      	bx	lr
