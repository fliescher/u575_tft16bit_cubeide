
Nucleo_U575_TFT16bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009284  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080094b8  080094b8  000194b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080095b8  080095b8  000195b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080095c0  080095c0  000195c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  080095c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006a4  2000000c  080095d1  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006b0  080095d1  000206b0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a0a2  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f5a  00000000  00000000  0003a0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001290  00000000  00000000  0003d040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001178  00000000  00000000  0003e2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037475  00000000  00000000  0003f448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017cfe  00000000  00000000  000768bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e4a8  00000000  00000000  0008e5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001eca63  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ee0  00000000  00000000  001ecab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000000c 	.word	0x2000000c
 8000250:	00000000 	.word	0x00000000
 8000254:	080094a0 	.word	0x080094a0

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000010 	.word	0x20000010
 8000270:	080094a0 	.word	0x080094a0

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <FMCSRAMInit>:

	// set to the maximum of the two
	timing->AddressSetupTime = (addset1 > addset2) ? addset1 : addset2;
}

void FMCSRAMInit(ExternalSRAMSpecStruct * sramSpec, uint8_t bank) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b0a0      	sub	sp, #128	; 0x80
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
	/* FMC configuration */
	SRAM_HandleTypeDef sram;
	FMC_NORSRAM_TimingTypeDef timing = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2220      	movs	r2, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f008 ff71 	bl	8009490 <memset>

	sram.Instance = FMC_NORSRAM_DEVICE;
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <FMCSRAMInit+0xc4>)
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
	sram.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80005b2:	4b2a      	ldr	r3, [pc, #168]	; (800065c <FMCSRAMInit+0xc8>)
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (bank==1) {
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d102      	bne.n	80005c2 <FMCSRAMInit+0x2e>
		sram.Init.NSBank = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
 80005c0:	e005      	b.n	80005ce <FMCSRAMInit+0x3a>
	} else {
		sram.Init.NSBank = 1 << (bank-1);
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	2201      	movs	r2, #1
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if (sramSpec -> dataSize == 8) {
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b08      	cmp	r3, #8
 80005d4:	d102      	bne.n	80005dc <FMCSRAMInit+0x48>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80005d6:	2300      	movs	r3, #0
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005da:	e008      	b.n	80005ee <FMCSRAMInit+0x5a>
	} else if (sramSpec -> dataSize == 16) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b10      	cmp	r3, #16
 80005e2:	d102      	bne.n	80005ea <FMCSRAMInit+0x56>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005e4:	2310      	movs	r3, #16
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005e8:	e001      	b.n	80005ee <FMCSRAMInit+0x5a>
	} else {
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 80005ea:	2320      	movs	r3, #32
 80005ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	sram.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	637b      	str	r3, [r7, #52]	; 0x34
	sram.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80005f2:	2300      	movs	r3, #0
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
	sram.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	643b      	str	r3, [r7, #64]	; 0x40
	sram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
	sram.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80005fe:	2300      	movs	r3, #0
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
	sram.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
	sram.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	653b      	str	r3, [r7, #80]	; 0x50
	sram.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	657b      	str	r3, [r7, #84]	; 0x54
	sram.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	65bb      	str	r3, [r7, #88]	; 0x58
	sram.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	65fb      	str	r3, [r7, #92]	; 0x5c
	sram.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000618:	2300      	movs	r3, #0
 800061a:	663b      	str	r3, [r7, #96]	; 0x60
	sram.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 800061c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000620:	667b      	str	r3, [r7, #100]	; 0x64
	sram.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000622:	2300      	movs	r3, #0
 8000624:	66bb      	str	r3, [r7, #104]	; 0x68

	/* Timing */
	timing.BusTurnAroundDuration = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
	timing.AccessMode = FMC_ACCESS_MODE_A;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	; 0x24

	timing.AddressSetupTime = 6; //MAX_ADDSET_TIME;
 800062e:	2306      	movs	r3, #6
 8000630:	60bb      	str	r3, [r7, #8]
	timing.DataSetupTime = 6;//MAX_DATAST_TIME;
 8000632:	2306      	movs	r3, #6
 8000634:	613b      	str	r3, [r7, #16]

	//FMCComputeAddsetDatast(sramSpec, &timing);

	if (HAL_SRAM_Init(&sram, &timing, NULL) != HAL_OK)
 8000636:	f107 0108 	add.w	r1, r7, #8
 800063a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800063e:	2200      	movs	r2, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f007 f905 	bl	8007850 <HAL_SRAM_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <FMCSRAMInit+0xbc>
	{
		FMC_Error_Handler( );
 800064c:	f000 f808 	bl	8000660 <FMC_Error_Handler>
	}

#if MEM_SWAPPING
	HAL_EnableFMCMemorySwapping();
#endif
}
 8000650:	bf00      	nop
 8000652:	3780      	adds	r7, #128	; 0x80
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	420d0400 	.word	0x420d0400
 800065c:	420d0504 	.word	0x420d0504

08000660 <FMC_Error_Handler>:

void FMC_Error_Handler() {
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
	...

08000670 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800067a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800067e:	4909      	ldr	r1, [pc, #36]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4313      	orrs	r3, r2
 8000684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800068a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4013      	ands	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000694:	68fb      	ldr	r3, [r7, #12]
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	46020c00 	.word	0x46020c00

080006a8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80006b6:	4909      	ldr	r1, [pc, #36]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <LL_APB1_GRP2_EnableClock+0x34>)
 80006c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4013      	ands	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006cc:	68fb      	ldr	r3, [r7, #12]
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	46020c00 	.word	0x46020c00

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f001 f8cb 	bl	8001880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 fba1 	bl	8000e30 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80006ee:	f000 fc03 	bl	8000ef8 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f000 fd6b 	bl	80011cc <MX_GPIO_Init>
  MX_ADC1_Init();
 80006f6:	f000 fc0d 	bl	8000f14 <MX_ADC1_Init>
  MX_UCPD1_Init();
 80006fa:	f000 fc4f 	bl	8000f9c <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 80006fe:	f000 fc83 	bl	8001008 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000702:	f000 fccd 	bl	80010a0 <MX_USB_OTG_FS_PCD_Init>
  MX_FMC_Init();
 8000706:	f000 fcf7 	bl	80010f8 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800070a:	2201      	movs	r2, #1
 800070c:	2104      	movs	r1, #4
 800070e:	48d5      	ldr	r0, [pc, #852]	; (8000a64 <main+0x384>)
 8000710:	f002 f81c 	bl	800274c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000714:	20c8      	movs	r0, #200	; 0xc8
 8000716:	f001 f937 	bl	8001988 <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2104      	movs	r1, #4
 800071e:	48d1      	ldr	r0, [pc, #836]	; (8000a64 <main+0x384>)
 8000720:	f002 f814 	bl	800274c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000724:	20c8      	movs	r0, #200	; 0xc8
 8000726:	f001 f92f 	bl	8001988 <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800072a:	2201      	movs	r2, #1
 800072c:	2104      	movs	r1, #4
 800072e:	48cd      	ldr	r0, [pc, #820]	; (8000a64 <main+0x384>)
 8000730:	f002 f80c 	bl	800274c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000734:	20c8      	movs	r0, #200	; 0xc8
 8000736:	f001 f927 	bl	8001988 <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2104      	movs	r1, #4
 800073e:	48c9      	ldr	r0, [pc, #804]	; (8000a64 <main+0x384>)
 8000740:	f002 f804 	bl	800274c <HAL_GPIO_WritePin>

/////////////////////////////////////////////////////////////////////////////////////////
  ///Initialization start///
/////////////////////////////////////////////////////////////////////////////////////////
   ExternalSRAMSpecStruct ST7789VSpec = {
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	f8c3 2003 	str.w	r2, [r3, #3]
 800074e:	2310      	movs	r3, #16
 8000750:	703b      	strb	r3, [r7, #0]
 8000752:	2332      	movs	r3, #50	; 0x32
 8000754:	713b      	strb	r3, [r7, #4]
 8000756:	2301      	movs	r3, #1
 8000758:	71bb      	strb	r3, [r7, #6]
		   //.tCycWrite = 66,
		   .writeOnly = 1

   };

   FMCSRAMInit(&ST7789VSpec, ST7789V_SRAM_BANK);
 800075a:	463b      	mov	r3, r7
 800075c:	2101      	movs	r1, #1
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff18 	bl	8000594 <FMCSRAMInit>

   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2104      	movs	r1, #4
 8000768:	48bf      	ldr	r0, [pc, #764]	; (8000a68 <main+0x388>)
 800076a:	f001 ffef 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(1);
 800076e:	2001      	movs	r0, #1
 8000770:	f001 f90a 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2104      	movs	r1, #4
 8000778:	48bb      	ldr	r0, [pc, #748]	; (8000a68 <main+0x388>)
 800077a:	f001 ffe7 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(10);
 800077e:	200a      	movs	r0, #10
 8000780:	f001 f902 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2104      	movs	r1, #4
 8000788:	48b7      	ldr	r0, [pc, #732]	; (8000a68 <main+0x388>)
 800078a:	f001 ffdf 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(120);
 800078e:	2078      	movs	r0, #120	; 0x78
 8000790:	f001 f8fa 	bl	8001988 <HAL_Delay>


   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000794:	2201      	movs	r2, #1
 8000796:	2104      	movs	r1, #4
 8000798:	48b2      	ldr	r0, [pc, #712]	; (8000a64 <main+0x384>)
 800079a:	f001 ffd7 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800079e:	20c8      	movs	r0, #200	; 0xc8
 80007a0:	f001 f8f2 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2104      	movs	r1, #4
 80007a8:	48ae      	ldr	r0, [pc, #696]	; (8000a64 <main+0x384>)
 80007aa:	f001 ffcf 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80007ae:	20c8      	movs	r0, #200	; 0xc8
 80007b0:	f001 f8ea 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2104      	movs	r1, #4
 80007b8:	48aa      	ldr	r0, [pc, #680]	; (8000a64 <main+0x384>)
 80007ba:	f001 ffc7 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80007be:	20c8      	movs	r0, #200	; 0xc8
 80007c0:	f001 f8e2 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2104      	movs	r1, #4
 80007c8:	48a6      	ldr	r0, [pc, #664]	; (8000a64 <main+0x384>)
 80007ca:	f001 ffbf 	bl	800274c <HAL_GPIO_WritePin>


   ST7789V_SEND_COMMAND(ST7789V_SLPOUT);
 80007ce:	4ba7      	ldr	r3, [pc, #668]	; (8000a6c <main+0x38c>)
 80007d0:	2211      	movs	r2, #17
 80007d2:	701a      	strb	r2, [r3, #0]
   HAL_Delay(120);
 80007d4:	2078      	movs	r0, #120	; 0x78
 80007d6:	f001 f8d7 	bl	8001988 <HAL_Delay>

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	2104      	movs	r1, #4
 80007de:	48a1      	ldr	r0, [pc, #644]	; (8000a64 <main+0x384>)
 80007e0:	f001 ffb4 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80007e4:	20c8      	movs	r0, #200	; 0xc8
 80007e6:	f001 f8cf 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2104      	movs	r1, #4
 80007ee:	489d      	ldr	r0, [pc, #628]	; (8000a64 <main+0x384>)
 80007f0:	f001 ffac 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80007f4:	20c8      	movs	r0, #200	; 0xc8
 80007f6:	f001 f8c7 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2104      	movs	r1, #4
 80007fe:	4899      	ldr	r0, [pc, #612]	; (8000a64 <main+0x384>)
 8000800:	f001 ffa4 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000804:	20c8      	movs	r0, #200	; 0xc8
 8000806:	f001 f8bf 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2104      	movs	r1, #4
 800080e:	4895      	ldr	r0, [pc, #596]	; (8000a64 <main+0x384>)
 8000810:	f001 ff9c 	bl	800274c <HAL_GPIO_WritePin>



   ST7789V_SEND_COMMAND(ST7789V_MADCTL); //Memory data acccess control
 8000814:	4b95      	ldr	r3, [pc, #596]	; (8000a6c <main+0x38c>)
 8000816:	2236      	movs	r2, #54	; 0x36
 8000818:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 800081a:	4b95      	ldr	r3, [pc, #596]	; (8000a70 <main+0x390>)
 800081c:	2200      	movs	r2, #0
 800081e:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000820:	2201      	movs	r2, #1
 8000822:	2104      	movs	r1, #4
 8000824:	488f      	ldr	r0, [pc, #572]	; (8000a64 <main+0x384>)
 8000826:	f001 ff91 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800082a:	20c8      	movs	r0, #200	; 0xc8
 800082c:	f001 f8ac 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2104      	movs	r1, #4
 8000834:	488b      	ldr	r0, [pc, #556]	; (8000a64 <main+0x384>)
 8000836:	f001 ff89 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800083a:	20c8      	movs	r0, #200	; 0xc8
 800083c:	f001 f8a4 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000840:	2201      	movs	r2, #1
 8000842:	2104      	movs	r1, #4
 8000844:	4887      	ldr	r0, [pc, #540]	; (8000a64 <main+0x384>)
 8000846:	f001 ff81 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800084a:	20c8      	movs	r0, #200	; 0xc8
 800084c:	f001 f89c 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2104      	movs	r1, #4
 8000854:	4883      	ldr	r0, [pc, #524]	; (8000a64 <main+0x384>)
 8000856:	f001 ff79 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_PORCTRL); //Porch Setting
 800085a:	4b84      	ldr	r3, [pc, #528]	; (8000a6c <main+0x38c>)
 800085c:	22b2      	movs	r2, #178	; 0xb2
 800085e:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0C);
 8000860:	4b83      	ldr	r3, [pc, #524]	; (8000a70 <main+0x390>)
 8000862:	220c      	movs	r2, #12
 8000864:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0C);
 8000866:	4b82      	ldr	r3, [pc, #520]	; (8000a70 <main+0x390>)
 8000868:	220c      	movs	r2, #12
 800086a:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 800086c:	4b80      	ldr	r3, [pc, #512]	; (8000a70 <main+0x390>)
 800086e:	2200      	movs	r2, #0
 8000870:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x33);
 8000872:	4b7f      	ldr	r3, [pc, #508]	; (8000a70 <main+0x390>)
 8000874:	2233      	movs	r2, #51	; 0x33
 8000876:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x33);
 8000878:	4b7d      	ldr	r3, [pc, #500]	; (8000a70 <main+0x390>)
 800087a:	2233      	movs	r2, #51	; 0x33
 800087c:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800087e:	2201      	movs	r2, #1
 8000880:	2104      	movs	r1, #4
 8000882:	4878      	ldr	r0, [pc, #480]	; (8000a64 <main+0x384>)
 8000884:	f001 ff62 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000888:	20c8      	movs	r0, #200	; 0xc8
 800088a:	f001 f87d 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2104      	movs	r1, #4
 8000892:	4874      	ldr	r0, [pc, #464]	; (8000a64 <main+0x384>)
 8000894:	f001 ff5a 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000898:	20c8      	movs	r0, #200	; 0xc8
 800089a:	f001 f875 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800089e:	2201      	movs	r2, #1
 80008a0:	2104      	movs	r1, #4
 80008a2:	4870      	ldr	r0, [pc, #448]	; (8000a64 <main+0x384>)
 80008a4:	f001 ff52 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80008a8:	20c8      	movs	r0, #200	; 0xc8
 80008aa:	f001 f86d 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2104      	movs	r1, #4
 80008b2:	486c      	ldr	r0, [pc, #432]	; (8000a64 <main+0x384>)
 80008b4:	f001 ff4a 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_GCTRL); //Gate Control
 80008b8:	4b6c      	ldr	r3, [pc, #432]	; (8000a6c <main+0x38c>)
 80008ba:	22b7      	movs	r2, #183	; 0xb7
 80008bc:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_DATA(0x70); //VGH, VGL
 80008be:	4b6c      	ldr	r3, [pc, #432]	; (8000a70 <main+0x390>)
 80008c0:	2270      	movs	r2, #112	; 0x70
 80008c2:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2104      	movs	r1, #4
 80008c8:	4866      	ldr	r0, [pc, #408]	; (8000a64 <main+0x384>)
 80008ca:	f001 ff3f 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80008ce:	20c8      	movs	r0, #200	; 0xc8
 80008d0:	f001 f85a 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2104      	movs	r1, #4
 80008d8:	4862      	ldr	r0, [pc, #392]	; (8000a64 <main+0x384>)
 80008da:	f001 ff37 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80008de:	20c8      	movs	r0, #200	; 0xc8
 80008e0:	f001 f852 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2104      	movs	r1, #4
 80008e8:	485e      	ldr	r0, [pc, #376]	; (8000a64 <main+0x384>)
 80008ea:	f001 ff2f 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80008ee:	20c8      	movs	r0, #200	; 0xc8
 80008f0:	f001 f84a 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2104      	movs	r1, #4
 80008f8:	485a      	ldr	r0, [pc, #360]	; (8000a64 <main+0x384>)
 80008fa:	f001 ff27 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_VCOMS);
 80008fe:	4b5b      	ldr	r3, [pc, #364]	; (8000a6c <main+0x38c>)
 8000900:	22bb      	movs	r2, #187	; 0xbb
 8000902:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_DATA(0x3A);
 8000904:	4b5a      	ldr	r3, [pc, #360]	; (8000a70 <main+0x390>)
 8000906:	223a      	movs	r2, #58	; 0x3a
 8000908:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800090a:	2201      	movs	r2, #1
 800090c:	2104      	movs	r1, #4
 800090e:	4855      	ldr	r0, [pc, #340]	; (8000a64 <main+0x384>)
 8000910:	f001 ff1c 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000914:	20c8      	movs	r0, #200	; 0xc8
 8000916:	f001 f837 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2104      	movs	r1, #4
 800091e:	4851      	ldr	r0, [pc, #324]	; (8000a64 <main+0x384>)
 8000920:	f001 ff14 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000924:	20c8      	movs	r0, #200	; 0xc8
 8000926:	f001 f82f 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800092a:	2201      	movs	r2, #1
 800092c:	2104      	movs	r1, #4
 800092e:	484d      	ldr	r0, [pc, #308]	; (8000a64 <main+0x384>)
 8000930:	f001 ff0c 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000934:	20c8      	movs	r0, #200	; 0xc8
 8000936:	f001 f827 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2104      	movs	r1, #4
 800093e:	4849      	ldr	r0, [pc, #292]	; (8000a64 <main+0x384>)
 8000940:	f001 ff04 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_LCMCTRL);
 8000944:	4b49      	ldr	r3, [pc, #292]	; (8000a6c <main+0x38c>)
 8000946:	22c0      	movs	r2, #192	; 0xc0
 8000948:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_DATA(0x2C);
 800094a:	4b49      	ldr	r3, [pc, #292]	; (8000a70 <main+0x390>)
 800094c:	222c      	movs	r2, #44	; 0x2c
 800094e:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000950:	2201      	movs	r2, #1
 8000952:	2104      	movs	r1, #4
 8000954:	4843      	ldr	r0, [pc, #268]	; (8000a64 <main+0x384>)
 8000956:	f001 fef9 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800095a:	20c8      	movs	r0, #200	; 0xc8
 800095c:	f001 f814 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2104      	movs	r1, #4
 8000964:	483f      	ldr	r0, [pc, #252]	; (8000a64 <main+0x384>)
 8000966:	f001 fef1 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800096a:	20c8      	movs	r0, #200	; 0xc8
 800096c:	f001 f80c 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000970:	2201      	movs	r2, #1
 8000972:	2104      	movs	r1, #4
 8000974:	483b      	ldr	r0, [pc, #236]	; (8000a64 <main+0x384>)
 8000976:	f001 fee9 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 800097a:	20c8      	movs	r0, #200	; 0xc8
 800097c:	f001 f804 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2104      	movs	r1, #4
 8000984:	4837      	ldr	r0, [pc, #220]	; (8000a64 <main+0x384>)
 8000986:	f001 fee1 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_VDVVRHEN);
 800098a:	4b38      	ldr	r3, [pc, #224]	; (8000a6c <main+0x38c>)
 800098c:	22c2      	movs	r2, #194	; 0xc2
 800098e:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_DATA(0x01);
 8000990:	4b37      	ldr	r3, [pc, #220]	; (8000a70 <main+0x390>)
 8000992:	2201      	movs	r2, #1
 8000994:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000996:	2201      	movs	r2, #1
 8000998:	2104      	movs	r1, #4
 800099a:	4832      	ldr	r0, [pc, #200]	; (8000a64 <main+0x384>)
 800099c:	f001 fed6 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80009a0:	20c8      	movs	r0, #200	; 0xc8
 80009a2:	f000 fff1 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2104      	movs	r1, #4
 80009aa:	482e      	ldr	r0, [pc, #184]	; (8000a64 <main+0x384>)
 80009ac:	f001 fece 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80009b0:	20c8      	movs	r0, #200	; 0xc8
 80009b2:	f000 ffe9 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2104      	movs	r1, #4
 80009ba:	482a      	ldr	r0, [pc, #168]	; (8000a64 <main+0x384>)
 80009bc:	f001 fec6 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80009c0:	20c8      	movs	r0, #200	; 0xc8
 80009c2:	f000 ffe1 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2104      	movs	r1, #4
 80009ca:	4826      	ldr	r0, [pc, #152]	; (8000a64 <main+0x384>)
 80009cc:	f001 febe 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_VRHS);
 80009d0:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <main+0x38c>)
 80009d2:	22c3      	movs	r2, #195	; 0xc3
 80009d4:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_DATA(0x14);
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <main+0x390>)
 80009d8:	2214      	movs	r2, #20
 80009da:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	2104      	movs	r1, #4
 80009e0:	4820      	ldr	r0, [pc, #128]	; (8000a64 <main+0x384>)
 80009e2:	f001 feb3 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80009e6:	20c8      	movs	r0, #200	; 0xc8
 80009e8:	f000 ffce 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2104      	movs	r1, #4
 80009f0:	481c      	ldr	r0, [pc, #112]	; (8000a64 <main+0x384>)
 80009f2:	f001 feab 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 80009f6:	20c8      	movs	r0, #200	; 0xc8
 80009f8:	f000 ffc6 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2104      	movs	r1, #4
 8000a00:	4818      	ldr	r0, [pc, #96]	; (8000a64 <main+0x384>)
 8000a02:	f001 fea3 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000a06:	20c8      	movs	r0, #200	; 0xc8
 8000a08:	f000 ffbe 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2104      	movs	r1, #4
 8000a10:	4814      	ldr	r0, [pc, #80]	; (8000a64 <main+0x384>)
 8000a12:	f001 fe9b 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_VDVS);
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <main+0x38c>)
 8000a18:	22c4      	movs	r2, #196	; 0xc4
 8000a1a:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_DATA(0x20);
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <main+0x390>)
 8000a1e:	2220      	movs	r2, #32
 8000a20:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2104      	movs	r1, #4
 8000a26:	480f      	ldr	r0, [pc, #60]	; (8000a64 <main+0x384>)
 8000a28:	f001 fe90 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000a2c:	20c8      	movs	r0, #200	; 0xc8
 8000a2e:	f000 ffab 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2104      	movs	r1, #4
 8000a36:	480b      	ldr	r0, [pc, #44]	; (8000a64 <main+0x384>)
 8000a38:	f001 fe88 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000a3c:	20c8      	movs	r0, #200	; 0xc8
 8000a3e:	f000 ffa3 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2104      	movs	r1, #4
 8000a46:	4807      	ldr	r0, [pc, #28]	; (8000a64 <main+0x384>)
 8000a48:	f001 fe80 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000a4c:	20c8      	movs	r0, #200	; 0xc8
 8000a4e:	f000 ff9b 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2104      	movs	r1, #4
 8000a56:	4803      	ldr	r0, [pc, #12]	; (8000a64 <main+0x384>)
 8000a58:	f001 fe78 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_FRCTRL2);
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <main+0x38c>)
 8000a5e:	22c6      	movs	r2, #198	; 0xc6
 8000a60:	701a      	strb	r2, [r3, #0]
 8000a62:	e007      	b.n	8000a74 <main+0x394>
 8000a64:	42021800 	.word	0x42021800
 8000a68:	42021000 	.word	0x42021000
 8000a6c:	60080000 	.word	0x60080000
 8000a70:	60100000 	.word	0x60100000
   ST7789V_SEND_DATA(0x0F); //60Hz 0A
 8000a74:	4bc1      	ldr	r3, [pc, #772]	; (8000d7c <main+0x69c>)
 8000a76:	220f      	movs	r2, #15
 8000a78:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	48c0      	ldr	r0, [pc, #768]	; (8000d80 <main+0x6a0>)
 8000a80:	f001 fe64 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000a84:	20c8      	movs	r0, #200	; 0xc8
 8000a86:	f000 ff7f 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2104      	movs	r1, #4
 8000a8e:	48bc      	ldr	r0, [pc, #752]	; (8000d80 <main+0x6a0>)
 8000a90:	f001 fe5c 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000a94:	20c8      	movs	r0, #200	; 0xc8
 8000a96:	f000 ff77 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	48b8      	ldr	r0, [pc, #736]	; (8000d80 <main+0x6a0>)
 8000aa0:	f001 fe54 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000aa4:	20c8      	movs	r0, #200	; 0xc8
 8000aa6:	f000 ff6f 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2104      	movs	r1, #4
 8000aae:	48b4      	ldr	r0, [pc, #720]	; (8000d80 <main+0x6a0>)
 8000ab0:	f001 fe4c 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_PWCTRL1);
 8000ab4:	4bb3      	ldr	r3, [pc, #716]	; (8000d84 <main+0x6a4>)
 8000ab6:	22d0      	movs	r2, #208	; 0xd0
 8000ab8:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_DATA(0xA4);
 8000aba:	4bb0      	ldr	r3, [pc, #704]	; (8000d7c <main+0x69c>)
 8000abc:	22a4      	movs	r2, #164	; 0xa4
 8000abe:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0xA1); //AVDD VCL
 8000ac0:	4bae      	ldr	r3, [pc, #696]	; (8000d7c <main+0x69c>)
 8000ac2:	22a1      	movs	r2, #161	; 0xa1
 8000ac4:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2104      	movs	r1, #4
 8000aca:	48ad      	ldr	r0, [pc, #692]	; (8000d80 <main+0x6a0>)
 8000acc:	f001 fe3e 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000ad0:	20c8      	movs	r0, #200	; 0xc8
 8000ad2:	f000 ff59 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2104      	movs	r1, #4
 8000ada:	48a9      	ldr	r0, [pc, #676]	; (8000d80 <main+0x6a0>)
 8000adc:	f001 fe36 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000ae0:	20c8      	movs	r0, #200	; 0xc8
 8000ae2:	f000 ff51 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2104      	movs	r1, #4
 8000aea:	48a5      	ldr	r0, [pc, #660]	; (8000d80 <main+0x6a0>)
 8000aec:	f001 fe2e 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000af0:	20c8      	movs	r0, #200	; 0xc8
 8000af2:	f000 ff49 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2104      	movs	r1, #4
 8000afa:	48a1      	ldr	r0, [pc, #644]	; (8000d80 <main+0x6a0>)
 8000afc:	f001 fe26 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_PVGAMCTRL);
 8000b00:	4ba0      	ldr	r3, [pc, #640]	; (8000d84 <main+0x6a4>)
 8000b02:	22e0      	movs	r2, #224	; 0xe0
 8000b04:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_DATA(0xD0);
 8000b06:	4b9d      	ldr	r3, [pc, #628]	; (8000d7c <main+0x69c>)
 8000b08:	22d0      	movs	r2, #208	; 0xd0
 8000b0a:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x07);
 8000b0c:	4b9b      	ldr	r3, [pc, #620]	; (8000d7c <main+0x69c>)
 8000b0e:	2207      	movs	r2, #7
 8000b10:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0D);
 8000b12:	4b9a      	ldr	r3, [pc, #616]	; (8000d7c <main+0x69c>)
 8000b14:	220d      	movs	r2, #13
 8000b16:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x09);
 8000b18:	4b98      	ldr	r3, [pc, #608]	; (8000d7c <main+0x69c>)
 8000b1a:	2209      	movs	r2, #9
 8000b1c:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x08);
 8000b1e:	4b97      	ldr	r3, [pc, #604]	; (8000d7c <main+0x69c>)
 8000b20:	2208      	movs	r2, #8
 8000b22:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x25);
 8000b24:	4b95      	ldr	r3, [pc, #596]	; (8000d7c <main+0x69c>)
 8000b26:	2225      	movs	r2, #37	; 0x25
 8000b28:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x28);
 8000b2a:	4b94      	ldr	r3, [pc, #592]	; (8000d7c <main+0x69c>)
 8000b2c:	2228      	movs	r2, #40	; 0x28
 8000b2e:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x53);
 8000b30:	4b92      	ldr	r3, [pc, #584]	; (8000d7c <main+0x69c>)
 8000b32:	2253      	movs	r2, #83	; 0x53
 8000b34:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x39);
 8000b36:	4b91      	ldr	r3, [pc, #580]	; (8000d7c <main+0x69c>)
 8000b38:	2239      	movs	r2, #57	; 0x39
 8000b3a:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x12);
 8000b3c:	4b8f      	ldr	r3, [pc, #572]	; (8000d7c <main+0x69c>)
 8000b3e:	2212      	movs	r2, #18
 8000b40:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0B);
 8000b42:	4b8e      	ldr	r3, [pc, #568]	; (8000d7c <main+0x69c>)
 8000b44:	220b      	movs	r2, #11
 8000b46:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0A);
 8000b48:	4b8c      	ldr	r3, [pc, #560]	; (8000d7c <main+0x69c>)
 8000b4a:	220a      	movs	r2, #10
 8000b4c:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x17);
 8000b4e:	4b8b      	ldr	r3, [pc, #556]	; (8000d7c <main+0x69c>)
 8000b50:	2217      	movs	r2, #23
 8000b52:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x34);
 8000b54:	4b89      	ldr	r3, [pc, #548]	; (8000d7c <main+0x69c>)
 8000b56:	2234      	movs	r2, #52	; 0x34
 8000b58:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	4888      	ldr	r0, [pc, #544]	; (8000d80 <main+0x6a0>)
 8000b60:	f001 fdf4 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000b64:	20c8      	movs	r0, #200	; 0xc8
 8000b66:	f000 ff0f 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4884      	ldr	r0, [pc, #528]	; (8000d80 <main+0x6a0>)
 8000b70:	f001 fdec 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000b74:	20c8      	movs	r0, #200	; 0xc8
 8000b76:	f000 ff07 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	4880      	ldr	r0, [pc, #512]	; (8000d80 <main+0x6a0>)
 8000b80:	f001 fde4 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000b84:	20c8      	movs	r0, #200	; 0xc8
 8000b86:	f000 feff 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	487c      	ldr	r0, [pc, #496]	; (8000d80 <main+0x6a0>)
 8000b90:	f001 fddc 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_NVGAMCTRL);
 8000b94:	4b7b      	ldr	r3, [pc, #492]	; (8000d84 <main+0x6a4>)
 8000b96:	22e1      	movs	r2, #225	; 0xe1
 8000b98:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_DATA(0xD0);
 8000b9a:	4b78      	ldr	r3, [pc, #480]	; (8000d7c <main+0x69c>)
 8000b9c:	22d0      	movs	r2, #208	; 0xd0
 8000b9e:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x07);
 8000ba0:	4b76      	ldr	r3, [pc, #472]	; (8000d7c <main+0x69c>)
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0D);
 8000ba6:	4b75      	ldr	r3, [pc, #468]	; (8000d7c <main+0x69c>)
 8000ba8:	220d      	movs	r2, #13
 8000baa:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x09);
 8000bac:	4b73      	ldr	r3, [pc, #460]	; (8000d7c <main+0x69c>)
 8000bae:	2209      	movs	r2, #9
 8000bb0:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x09);
 8000bb2:	4b72      	ldr	r3, [pc, #456]	; (8000d7c <main+0x69c>)
 8000bb4:	2209      	movs	r2, #9
 8000bb6:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x25);
 8000bb8:	4b70      	ldr	r3, [pc, #448]	; (8000d7c <main+0x69c>)
 8000bba:	2225      	movs	r2, #37	; 0x25
 8000bbc:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x29);
 8000bbe:	4b6f      	ldr	r3, [pc, #444]	; (8000d7c <main+0x69c>)
 8000bc0:	2229      	movs	r2, #41	; 0x29
 8000bc2:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x35);
 8000bc4:	4b6d      	ldr	r3, [pc, #436]	; (8000d7c <main+0x69c>)
 8000bc6:	2235      	movs	r2, #53	; 0x35
 8000bc8:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x39);
 8000bca:	4b6c      	ldr	r3, [pc, #432]	; (8000d7c <main+0x69c>)
 8000bcc:	2239      	movs	r2, #57	; 0x39
 8000bce:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x13);
 8000bd0:	4b6a      	ldr	r3, [pc, #424]	; (8000d7c <main+0x69c>)
 8000bd2:	2213      	movs	r2, #19
 8000bd4:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0A);
 8000bd6:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <main+0x69c>)
 8000bd8:	220a      	movs	r2, #10
 8000bda:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x0A);
 8000bdc:	4b67      	ldr	r3, [pc, #412]	; (8000d7c <main+0x69c>)
 8000bde:	220a      	movs	r2, #10
 8000be0:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x16);
 8000be2:	4b66      	ldr	r3, [pc, #408]	; (8000d7c <main+0x69c>)
 8000be4:	2216      	movs	r2, #22
 8000be6:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x34);
 8000be8:	4b64      	ldr	r3, [pc, #400]	; (8000d7c <main+0x69c>)
 8000bea:	2234      	movs	r2, #52	; 0x34
 8000bec:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	4863      	ldr	r0, [pc, #396]	; (8000d80 <main+0x6a0>)
 8000bf4:	f001 fdaa 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000bf8:	20c8      	movs	r0, #200	; 0xc8
 8000bfa:	f000 fec5 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2104      	movs	r1, #4
 8000c02:	485f      	ldr	r0, [pc, #380]	; (8000d80 <main+0x6a0>)
 8000c04:	f001 fda2 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c08:	20c8      	movs	r0, #200	; 0xc8
 8000c0a:	f000 febd 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2104      	movs	r1, #4
 8000c12:	485b      	ldr	r0, [pc, #364]	; (8000d80 <main+0x6a0>)
 8000c14:	f001 fd9a 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c18:	20c8      	movs	r0, #200	; 0xc8
 8000c1a:	f000 feb5 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2104      	movs	r1, #4
 8000c22:	4857      	ldr	r0, [pc, #348]	; (8000d80 <main+0x6a0>)
 8000c24:	f001 fd92 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_INVON);
 8000c28:	4b56      	ldr	r3, [pc, #344]	; (8000d84 <main+0x6a4>)
 8000c2a:	2221      	movs	r2, #33	; 0x21
 8000c2c:	701a      	strb	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2104      	movs	r1, #4
 8000c32:	4853      	ldr	r0, [pc, #332]	; (8000d80 <main+0x6a0>)
 8000c34:	f001 fd8a 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c38:	20c8      	movs	r0, #200	; 0xc8
 8000c3a:	f000 fea5 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2104      	movs	r1, #4
 8000c42:	484f      	ldr	r0, [pc, #316]	; (8000d80 <main+0x6a0>)
 8000c44:	f001 fd82 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c48:	20c8      	movs	r0, #200	; 0xc8
 8000c4a:	f000 fe9d 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2104      	movs	r1, #4
 8000c52:	484b      	ldr	r0, [pc, #300]	; (8000d80 <main+0x6a0>)
 8000c54:	f001 fd7a 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c58:	20c8      	movs	r0, #200	; 0xc8
 8000c5a:	f000 fe95 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2104      	movs	r1, #4
 8000c62:	4847      	ldr	r0, [pc, #284]	; (8000d80 <main+0x6a0>)
 8000c64:	f001 fd72 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_COLMOD);
 8000c68:	4b46      	ldr	r3, [pc, #280]	; (8000d84 <main+0x6a4>)
 8000c6a:	223a      	movs	r2, #58	; 0x3a
 8000c6c:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_DATA(0x55); //65K colors, 16 bit/px
 8000c6e:	4b43      	ldr	r3, [pc, #268]	; (8000d7c <main+0x69c>)
 8000c70:	2255      	movs	r2, #85	; 0x55
 8000c72:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2104      	movs	r1, #4
 8000c78:	4841      	ldr	r0, [pc, #260]	; (8000d80 <main+0x6a0>)
 8000c7a:	f001 fd67 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c7e:	20c8      	movs	r0, #200	; 0xc8
 8000c80:	f000 fe82 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2104      	movs	r1, #4
 8000c88:	483d      	ldr	r0, [pc, #244]	; (8000d80 <main+0x6a0>)
 8000c8a:	f001 fd5f 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c8e:	20c8      	movs	r0, #200	; 0xc8
 8000c90:	f000 fe7a 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2104      	movs	r1, #4
 8000c98:	4839      	ldr	r0, [pc, #228]	; (8000d80 <main+0x6a0>)
 8000c9a:	f001 fd57 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000c9e:	20c8      	movs	r0, #200	; 0xc8
 8000ca0:	f000 fe72 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	4835      	ldr	r0, [pc, #212]	; (8000d80 <main+0x6a0>)
 8000caa:	f001 fd4f 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_CASET);
 8000cae:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <main+0x6a4>)
 8000cb0:	222a      	movs	r2, #42	; 0x2a
 8000cb2:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000cb4:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <main+0x69c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000cba:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <main+0x69c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000cc0:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <main+0x69c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0xEF);
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <main+0x69c>)
 8000cc8:	22ef      	movs	r2, #239	; 0xef
 8000cca:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2104      	movs	r1, #4
 8000cd0:	482b      	ldr	r0, [pc, #172]	; (8000d80 <main+0x6a0>)
 8000cd2:	f001 fd3b 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000cd6:	20c8      	movs	r0, #200	; 0xc8
 8000cd8:	f000 fe56 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2104      	movs	r1, #4
 8000ce0:	4827      	ldr	r0, [pc, #156]	; (8000d80 <main+0x6a0>)
 8000ce2:	f001 fd33 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000ce6:	20c8      	movs	r0, #200	; 0xc8
 8000ce8:	f000 fe4e 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2104      	movs	r1, #4
 8000cf0:	4823      	ldr	r0, [pc, #140]	; (8000d80 <main+0x6a0>)
 8000cf2:	f001 fd2b 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000cf6:	20c8      	movs	r0, #200	; 0xc8
 8000cf8:	f000 fe46 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2104      	movs	r1, #4
 8000d00:	481f      	ldr	r0, [pc, #124]	; (8000d80 <main+0x6a0>)
 8000d02:	f001 fd23 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_RASET);
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <main+0x6a4>)
 8000d08:	222b      	movs	r2, #43	; 0x2b
 8000d0a:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <main+0x69c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x00);
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <main+0x69c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x01);
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <main+0x69c>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	801a      	strh	r2, [r3, #0]
   ST7789V_SEND_DATA(0x3F);
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <main+0x69c>)
 8000d20:	223f      	movs	r2, #63	; 0x3f
 8000d22:	801a      	strh	r2, [r3, #0]

   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2104      	movs	r1, #4
 8000d28:	4815      	ldr	r0, [pc, #84]	; (8000d80 <main+0x6a0>)
 8000d2a:	f001 fd0f 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000d2e:	20c8      	movs	r0, #200	; 0xc8
 8000d30:	f000 fe2a 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2104      	movs	r1, #4
 8000d38:	4811      	ldr	r0, [pc, #68]	; (8000d80 <main+0x6a0>)
 8000d3a:	f001 fd07 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000d3e:	20c8      	movs	r0, #200	; 0xc8
 8000d40:	f000 fe22 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2104      	movs	r1, #4
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <main+0x6a0>)
 8000d4a:	f001 fcff 	bl	800274c <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8000d4e:	20c8      	movs	r0, #200	; 0xc8
 8000d50:	f000 fe1a 	bl	8001988 <HAL_Delay>
   HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2104      	movs	r1, #4
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <main+0x6a0>)
 8000d5a:	f001 fcf7 	bl	800274c <HAL_GPIO_WritePin>

   ST7789V_SEND_COMMAND(ST7789V_DISPON);
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <main+0x6a4>)
 8000d60:	2229      	movs	r2, #41	; 0x29
 8000d62:	701a      	strb	r2, [r3, #0]
   ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <main+0x6a4>)
 8000d66:	222c      	movs	r2, #44	; 0x2c
 8000d68:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2104      	movs	r1, #4
 8000d6e:	4804      	ldr	r0, [pc, #16]	; (8000d80 <main+0x6a0>)
 8000d70:	f001 fcec 	bl	800274c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d78:	e006      	b.n	8000d88 <main+0x6a8>
 8000d7a:	bf00      	nop
 8000d7c:	60100000 	.word	0x60100000
 8000d80:	42021800 	.word	0x42021800
 8000d84:	60080000 	.word	0x60080000
 8000d88:	f000 fdfe 	bl	8001988 <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2104      	movs	r1, #4
 8000d90:	4824      	ldr	r0, [pc, #144]	; (8000e24 <main+0x744>)
 8000d92:	f001 fcdb 	bl	800274c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000d96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9a:	f000 fdf5 	bl	8001988 <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2104      	movs	r1, #4
 8000da2:	4820      	ldr	r0, [pc, #128]	; (8000e24 <main+0x744>)
 8000da4:	f001 fcd2 	bl	800274c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dac:	f000 fdec 	bl	8001988 <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2104      	movs	r1, #4
 8000db4:	481b      	ldr	r0, [pc, #108]	; (8000e24 <main+0x744>)
 8000db6:	f001 fcc9 	bl	800274c <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	481a      	ldr	r0, [pc, #104]	; (8000e28 <main+0x748>)
 8000dc0:	f001 fcc4 	bl	800274c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000dc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc8:	f000 fdde 	bl	8001988 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2180      	movs	r1, #128	; 0x80
 8000dd0:	4815      	ldr	r0, [pc, #84]	; (8000e28 <main+0x748>)
 8000dd2:	f001 fcbb 	bl	800274c <HAL_GPIO_WritePin>

	  ST7789V_SEND_DATA(0xF800);
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <main+0x74c>)
 8000dd8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000ddc:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(1000);
 8000dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de2:	f000 fdd1 	bl	8001988 <HAL_Delay>
	  ST7789V_SEND_DATA(0x07E0);
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <main+0x74c>)
 8000de8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000dec:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(1000);
 8000dee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df2:	f000 fdc9 	bl	8001988 <HAL_Delay>
	  ST7789V_SEND_DATA(0x1F);
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <main+0x74c>)
 8000df8:	221f      	movs	r2, #31
 8000dfa:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(1000);
 8000dfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e00:	f000 fdc2 	bl	8001988 <HAL_Delay>
	  ST7789V_fillCircle(80, 100, 15, COLOR_BLACK);
	  //HAL_Delay(3000);
	  ST7789V_fill(COLOR_WHITE);
	  //HAL_Delay(10000);
*/
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2104      	movs	r1, #4
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <main+0x744>)
 8000e0a:	f001 fc9f 	bl	800274c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000e0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e12:	f000 fdb9 	bl	8001988 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2104      	movs	r1, #4
 8000e1a:	4802      	ldr	r0, [pc, #8]	; (8000e24 <main+0x744>)
 8000e1c:	f001 fc96 	bl	800274c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 8000e20:	e7cb      	b.n	8000dba <main+0x6da>
 8000e22:	bf00      	nop
 8000e24:	42021800 	.word	0x42021800
 8000e28:	42020400 	.word	0x42020400
 8000e2c:	60100000 	.word	0x60100000

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09e      	sub	sp, #120	; 0x78
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	2260      	movs	r2, #96	; 0x60
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f008 fb26 	bl	8009490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
 8000e52:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e54:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000e58:	f002 fd12 	bl	8003880 <HAL_PWREx_ControlVoltageScaling>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000e62:	f000 fa9d 	bl	80013a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000e66:	2332      	movs	r3, #50	; 0x32
 8000e68:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e76:	2310      	movs	r3, #16
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000e7e:	2310      	movs	r3, #16
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000e98:	2350      	movs	r3, #80	; 0x50
 8000e9a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb0:	f107 0318 	add.w	r3, r7, #24
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 fdd5 	bl	8003a64 <HAL_RCC_OscConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ec0:	f000 fa6e 	bl	80013a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec4:	231f      	movs	r3, #31
 8000ec6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000edc:	463b      	mov	r3, r7
 8000ede:	2104      	movs	r1, #4
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 fc95 	bl	8004810 <HAL_RCC_ClockConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000eec:	f000 fa58 	bl	80013a0 <Error_Handler>
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	3778      	adds	r7, #120	; 0x78
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000efc:	f002 fda2 	bl	8003a44 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000f00:	2002      	movs	r0, #2
 8000f02:	f002 fd3f 	bl	8003984 <HAL_PWREx_ConfigSupply>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000f0c:	f000 fa48 	bl	80013a0 <Error_Handler>
  }
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	; (8000f98 <MX_ADC1_Init+0x84>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f38:	2204      	movs	r2, #4
 8000f3a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_ADC1_Init+0x80>)
 8000f82:	f000 fe01 	bl	8001b88 <HAL_ADC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000f8c:	f000 fa08 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000028 	.word	0x20000028
 8000f98:	42028000 	.word	0x42028000

08000f9c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000fb2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000fb6:	f7ff fb77 	bl	80006a8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000fba:	2002      	movs	r0, #2
 8000fbc:	f7ff fb58 	bl	8000670 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f7ff fb55 	bl	8000670 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4809      	ldr	r0, [pc, #36]	; (8001000 <MX_UCPD1_Init+0x64>)
 8000fda:	f007 fbda 	bl	8008792 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fe2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_UCPD1_Init+0x68>)
 8000ff2:	f007 fbce 	bl	8008792 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	42020400 	.word	0x42020400
 8001004:	42020000 	.word	0x42020000

08001008 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800100c:	4b22      	ldr	r3, [pc, #136]	; (8001098 <MX_USART1_UART_Init+0x90>)
 800100e:	4a23      	ldr	r2, [pc, #140]	; (800109c <MX_USART1_UART_Init+0x94>)
 8001010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MX_USART1_UART_Init+0x90>)
 8001014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MX_USART1_UART_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <MX_USART1_UART_Init+0x90>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_USART1_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <MX_USART1_UART_Init+0x90>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_USART1_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <MX_USART1_UART_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <MX_USART1_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_USART1_UART_Init+0x90>)
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <MX_USART1_UART_Init+0x90>)
 800104c:	2200      	movs	r2, #0
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001050:	4811      	ldr	r0, [pc, #68]	; (8001098 <MX_USART1_UART_Init+0x90>)
 8001052:	f006 fc4d 	bl	80078f0 <HAL_UART_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800105c:	f000 f9a0 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001060:	2100      	movs	r1, #0
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <MX_USART1_UART_Init+0x90>)
 8001064:	f007 f824 	bl	80080b0 <HAL_UARTEx_SetTxFifoThreshold>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800106e:	f000 f997 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001072:	2100      	movs	r1, #0
 8001074:	4808      	ldr	r0, [pc, #32]	; (8001098 <MX_USART1_UART_Init+0x90>)
 8001076:	f007 f859 	bl	800812c <HAL_UARTEx_SetRxFifoThreshold>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001080:	f000 f98e 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001084:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_USART1_UART_Init+0x90>)
 8001086:	f006 ffda 	bl	800803e <HAL_UARTEx_DisableFifoMode>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001090:	f000 f986 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200000b4 	.word	0x200000b4
 800109c:	40013800 	.word	0x40013800

080010a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010a6:	4a13      	ldr	r2, [pc, #76]	; (80010f4 <MX_USB_OTG_FS_PCD_Init+0x54>)
 80010a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010ac:	2206      	movs	r2, #6
 80010ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010b2:	2202      	movs	r2, #2
 80010b4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010dc:	f001 fb4e 	bl	800277c <HAL_PCD_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 80010e6:	f000 f95b 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000144 	.word	0x20000144
 80010f4:	42040000 	.word	0x42040000

080010f8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2220      	movs	r2, #32
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f008 f9c3 	bl	8009490 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <MX_FMC_Init+0xc8>)
 800110c:	4a2d      	ldr	r2, [pc, #180]	; (80011c4 <MX_FMC_Init+0xcc>)
 800110e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <MX_FMC_Init+0xc8>)
 8001112:	4a2d      	ldr	r2, [pc, #180]	; (80011c8 <MX_FMC_Init+0xd0>)
 8001114:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <MX_FMC_Init+0xc8>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <MX_FMC_Init+0xc8>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <MX_FMC_Init+0xc8>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <MX_FMC_Init+0xc8>)
 800112a:	2210      	movs	r2, #16
 800112c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <MX_FMC_Init+0xc8>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <MX_FMC_Init+0xc8>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <MX_FMC_Init+0xc8>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <MX_FMC_Init+0xc8>)
 8001142:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001146:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <MX_FMC_Init+0xc8>)
 800114a:	2200      	movs	r2, #0
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MX_FMC_Init+0xc8>)
 8001150:	2200      	movs	r2, #0
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MX_FMC_Init+0xc8>)
 8001156:	2200      	movs	r2, #0
 8001158:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_FMC_Init+0xc8>)
 800115c:	2200      	movs	r2, #0
 800115e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <MX_FMC_Init+0xc8>)
 8001162:	2200      	movs	r2, #0
 8001164:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <MX_FMC_Init+0xc8>)
 8001168:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800116c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_FMC_Init+0xc8>)
 8001170:	2200      	movs	r2, #0
 8001172:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_FMC_Init+0xc8>)
 8001176:	2200      	movs	r2, #0
 8001178:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_FMC_Init+0xc8>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001182:	230f      	movs	r3, #15
 8001184:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001186:	230f      	movs	r3, #15
 8001188:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800118a:	23ff      	movs	r3, #255	; 0xff
 800118c:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001192:	230f      	movs	r3, #15
 8001194:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001196:	2310      	movs	r3, #16
 8001198:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800119a:	2311      	movs	r3, #17
 800119c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_FMC_Init+0xc8>)
 80011aa:	f006 fb51 	bl	8007850 <HAL_SRAM_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_FMC_Init+0xc0>
  {
    Error_Handler( );
 80011b4:	f000 f8f4 	bl	80013a0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000650 	.word	0x20000650
 80011c4:	420d0400 	.word	0x420d0400
 80011c8:	420d0504 	.word	0x420d0504

080011cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	; 0x30
 80011d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e2:	4b69      	ldr	r3, [pc, #420]	; (8001388 <MX_GPIO_Init+0x1bc>)
 80011e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011e8:	4a67      	ldr	r2, [pc, #412]	; (8001388 <MX_GPIO_Init+0x1bc>)
 80011ea:	f043 0310 	orr.w	r3, r3, #16
 80011ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011f2:	4b65      	ldr	r3, [pc, #404]	; (8001388 <MX_GPIO_Init+0x1bc>)
 80011f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001200:	4b61      	ldr	r3, [pc, #388]	; (8001388 <MX_GPIO_Init+0x1bc>)
 8001202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001206:	4a60      	ldr	r2, [pc, #384]	; (8001388 <MX_GPIO_Init+0x1bc>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001210:	4b5d      	ldr	r3, [pc, #372]	; (8001388 <MX_GPIO_Init+0x1bc>)
 8001212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b5a      	ldr	r3, [pc, #360]	; (8001388 <MX_GPIO_Init+0x1bc>)
 8001220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001224:	4a58      	ldr	r2, [pc, #352]	; (8001388 <MX_GPIO_Init+0x1bc>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800122e:	4b56      	ldr	r3, [pc, #344]	; (8001388 <MX_GPIO_Init+0x1bc>)
 8001230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123c:	4b52      	ldr	r3, [pc, #328]	; (8001388 <MX_GPIO_Init+0x1bc>)
 800123e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001242:	4a51      	ldr	r2, [pc, #324]	; (8001388 <MX_GPIO_Init+0x1bc>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800124c:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <MX_GPIO_Init+0x1bc>)
 800124e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800125a:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <MX_GPIO_Init+0x1bc>)
 800125c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001260:	4a49      	ldr	r2, [pc, #292]	; (8001388 <MX_GPIO_Init+0x1bc>)
 8001262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001266:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800126a:	4b47      	ldr	r3, [pc, #284]	; (8001388 <MX_GPIO_Init+0x1bc>)
 800126c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b43      	ldr	r3, [pc, #268]	; (8001388 <MX_GPIO_Init+0x1bc>)
 800127a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800127e:	4a42      	ldr	r2, [pc, #264]	; (8001388 <MX_GPIO_Init+0x1bc>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001288:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <MX_GPIO_Init+0x1bc>)
 800128a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	2104      	movs	r1, #4
 800129a:	483c      	ldr	r0, [pc, #240]	; (800138c <MX_GPIO_Init+0x1c0>)
 800129c:	f001 fa56 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2104      	movs	r1, #4
 80012a4:	483a      	ldr	r0, [pc, #232]	; (8001390 <MX_GPIO_Init+0x1c4>)
 80012a6:	f001 fa51 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	4839      	ldr	r0, [pc, #228]	; (8001394 <MX_GPIO_Init+0x1c8>)
 80012b0:	f001 fa4c 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	21a0      	movs	r1, #160	; 0xa0
 80012b8:	4837      	ldr	r0, [pc, #220]	; (8001398 <MX_GPIO_Init+0x1cc>)
 80012ba:	f001 fa47 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FMC_RESET_Pin */
  GPIO_InitStruct.Pin = FMC_RESET_Pin;
 80012be:	2304      	movs	r3, #4
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FMC_RESET_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	482d      	ldr	r0, [pc, #180]	; (800138c <MX_GPIO_Init+0x1c0>)
 80012d6:	f001 f861 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80012da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e0:	4b2e      	ldr	r3, [pc, #184]	; (800139c <MX_GPIO_Init+0x1d0>)
 80012e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	4829      	ldr	r0, [pc, #164]	; (8001394 <MX_GPIO_Init+0x1c8>)
 80012f0:	f001 f854 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80012f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4823      	ldr	r0, [pc, #140]	; (8001398 <MX_GPIO_Init+0x1cc>)
 800130a:	f001 f847 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800130e:	2304      	movs	r3, #4
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001316:	2301      	movs	r3, #1
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131a:	2302      	movs	r3, #2
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	481a      	ldr	r0, [pc, #104]	; (8001390 <MX_GPIO_Init+0x1c4>)
 8001326:	f001 f839 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001332:	2301      	movs	r3, #1
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001336:	2302      	movs	r3, #2
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	4814      	ldr	r0, [pc, #80]	; (8001394 <MX_GPIO_Init+0x1c8>)
 8001342:	f001 f82b 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8001346:	2320      	movs	r3, #32
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	480e      	ldr	r0, [pc, #56]	; (8001398 <MX_GPIO_Init+0x1cc>)
 800135e:	f001 f81d 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136a:	2301      	movs	r3, #1
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136e:	2302      	movs	r3, #2
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4807      	ldr	r0, [pc, #28]	; (8001398 <MX_GPIO_Init+0x1cc>)
 800137a:	f001 f80f 	bl	800239c <HAL_GPIO_Init>

}
 800137e:	bf00      	nop
 8001380:	3730      	adds	r7, #48	; 0x30
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	46020c00 	.word	0x46020c00
 800138c:	42021000 	.word	0x42021000
 8001390:	42021800 	.word	0x42021800
 8001394:	42020800 	.word	0x42020800
 8001398:	42020400 	.word	0x42020400
 800139c:	10210000 	.word	0x10210000

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <Error_Handler+0x8>
	...

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_MspInit+0x34>)
 80013b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b8:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <HAL_MspInit+0x34>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <HAL_MspInit+0x34>)
 80013c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80013d0:	2004      	movs	r0, #4
 80013d2:	f000 ffa3 	bl	800231c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	46020c00 	.word	0x46020c00

080013e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0bc      	sub	sp, #240	; 0xf0
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	22c8      	movs	r2, #200	; 0xc8
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f008 f843 	bl	8009490 <memset>
  if(hadc->Instance==ADC1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a24      	ldr	r2, [pc, #144]	; (80014a0 <HAL_ADC_MspInit+0xbc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d140      	bne.n	8001496 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001414:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001420:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fdc5 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001438:	f7ff ffb2 	bl	80013a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_ADC_MspInit+0xc0>)
 800143e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001442:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <HAL_ADC_MspInit+0xc0>)
 8001444:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001448:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_ADC_MspInit+0xc0>)
 800144e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_ADC_MspInit+0xc0>)
 800145c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001460:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_ADC_MspInit+0xc0>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_ADC_MspInit+0xc0>)
 800146c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001478:	2304      	movs	r3, #4
 800147a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147e:	2303      	movs	r3, #3
 8001480:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_ADC_MspInit+0xc4>)
 8001492:	f000 ff83 	bl	800239c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	37f0      	adds	r7, #240	; 0xf0
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	42028000 	.word	0x42028000
 80014a4:	46020c00 	.word	0x46020c00
 80014a8:	42020800 	.word	0x42020800

080014ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0bc      	sub	sp, #240	; 0xf0
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	22c8      	movs	r2, #200	; 0xc8
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f007 ffdf 	bl	8009490 <memset>
  if(huart->Instance==USART1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a26      	ldr	r2, [pc, #152]	; (8001570 <HAL_UART_MspInit+0xc4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d145      	bne.n	8001568 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014dc:	f04f 0201 	mov.w	r2, #1
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014e8:	2300      	movs	r3, #0
 80014ea:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	4618      	mov	r0, r3
 80014f2:	f003 fd63 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80014fc:	f7ff ff50 	bl	80013a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <HAL_UART_MspInit+0xc8>)
 8001502:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001506:	4a1b      	ldr	r2, [pc, #108]	; (8001574 <HAL_UART_MspInit+0xc8>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_UART_MspInit+0xc8>)
 8001512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_UART_MspInit+0xc8>)
 8001520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001524:	4a13      	ldr	r2, [pc, #76]	; (8001574 <HAL_UART_MspInit+0xc8>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_UART_MspInit+0xc8>)
 8001530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 800153c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001540:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800154a:	2302      	movs	r3, #2
 800154c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001556:	2307      	movs	r3, #7
 8001558:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001560:	4619      	mov	r1, r3
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <HAL_UART_MspInit+0xcc>)
 8001564:	f000 ff1a 	bl	800239c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001568:	bf00      	nop
 800156a:	37f0      	adds	r7, #240	; 0xf0
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40013800 	.word	0x40013800
 8001574:	46020c00 	.word	0x46020c00
 8001578:	42020000 	.word	0x42020000

0800157c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0be      	sub	sp, #248	; 0xf8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001594:	f107 0318 	add.w	r3, r7, #24
 8001598:	22c8      	movs	r2, #200	; 0xc8
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f007 ff77 	bl	8009490 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a3c      	ldr	r2, [pc, #240]	; (8001698 <HAL_PCD_MspInit+0x11c>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d171      	bne.n	8001690 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80015ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fcfa 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 80015ce:	f7ff fee7 	bl	80013a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	4b32      	ldr	r3, [pc, #200]	; (800169c <HAL_PCD_MspInit+0x120>)
 80015d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015d8:	4a30      	ldr	r2, [pc, #192]	; (800169c <HAL_PCD_MspInit+0x120>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015e2:	4b2e      	ldr	r3, [pc, #184]	; (800169c <HAL_PCD_MspInit+0x120>)
 80015e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80015f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800160a:	230a      	movs	r3, #10
 800160c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001614:	4619      	mov	r1, r3
 8001616:	4822      	ldr	r0, [pc, #136]	; (80016a0 <HAL_PCD_MspInit+0x124>)
 8001618:	f000 fec0 	bl	800239c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_PCD_MspInit+0x120>)
 800161e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001622:	4a1e      	ldr	r2, [pc, #120]	; (800169c <HAL_PCD_MspInit+0x120>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_PCD_MspInit+0x120>)
 800162e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_PCD_MspInit+0x120>)
 800163c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d119      	bne.n	800167c <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_PCD_MspInit+0x120>)
 800164a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800164e:	4a13      	ldr	r2, [pc, #76]	; (800169c <HAL_PCD_MspInit+0x120>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_PCD_MspInit+0x120>)
 800165a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001666:	f002 f9dd 	bl	8003a24 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_PCD_MspInit+0x120>)
 800166c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001670:	4a0a      	ldr	r2, [pc, #40]	; (800169c <HAL_PCD_MspInit+0x120>)
 8001672:	f023 0304 	bic.w	r3, r3, #4
 8001676:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800167a:	e001      	b.n	8001680 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800167c:	f002 f9d2 	bl	8003a24 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	2049      	movs	r0, #73	; 0x49
 8001686:	f000 fe54 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800168a:	2049      	movs	r0, #73	; 0x49
 800168c:	f000 fe6b 	bl	8002366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001690:	bf00      	nop
 8001692:	37f8      	adds	r7, #248	; 0xf8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	42040000 	.word	0x42040000
 800169c:	46020c00 	.word	0x46020c00
 80016a0:	42020000 	.word	0x42020000

080016a4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <HAL_FMC_MspInit+0x8c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d132      	bne.n	8001726 <HAL_FMC_MspInit+0x82>
    return;
  }
  FMC_Initialized = 1;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_FMC_MspInit+0x8c>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_FMC_MspInit+0x90>)
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <HAL_FMC_MspInit+0x90>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_FMC_MspInit+0x90>)
 80016d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	603b      	str	r3, [r7, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80016e4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80016e8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016f6:	230c      	movs	r3, #12
 80016f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	480e      	ldr	r0, [pc, #56]	; (8001738 <HAL_FMC_MspInit+0x94>)
 8001700:	f000 fe4c 	bl	800239c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001704:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8001708:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001716:	230c      	movs	r3, #12
 8001718:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	4619      	mov	r1, r3
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <HAL_FMC_MspInit+0x98>)
 8001720:	f000 fe3c 	bl	800239c <HAL_GPIO_Init>
 8001724:	e000      	b.n	8001728 <HAL_FMC_MspInit+0x84>
    return;
 8001726:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200006a8 	.word	0x200006a8
 8001734:	46020c00 	.word	0x46020c00
 8001738:	42021000 	.word	0x42021000
 800173c:	42020c00 	.word	0x42020c00

08001740 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001748:	f7ff ffac 	bl	80016a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <NMI_Handler+0x4>

0800175a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <MemManage_Handler+0x4>

08001766 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <UsageFault_Handler+0x4>

08001772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a0:	f000 f8d2 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <OTG_FS_IRQHandler+0x10>)
 80017ae:	f001 f909 	bl	80029c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000144 	.word	0x20000144

080017bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <SystemInit+0x68>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a17      	ldr	r2, [pc, #92]	; (8001824 <SystemInit+0x68>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <SystemInit+0x6c>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <SystemInit+0x6c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <SystemInit+0x6c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <SystemInit+0x6c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <SystemInit+0x6c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <SystemInit+0x6c>)
 80017ee:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80017f2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80017f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <SystemInit+0x6c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <SystemInit+0x6c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <SystemInit+0x6c>)
 8001804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001808:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <SystemInit+0x6c>)
 800180c:	2200      	movs	r2, #0
 800180e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SystemInit+0x68>)
 8001812:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001816:	609a      	str	r2, [r3, #8]
  #endif
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00
 8001828:	46020c00 	.word	0x46020c00

0800182c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800182c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001864 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001830:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001832:	e003      	b.n	800183c <LoopCopyDataInit>

08001834 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001836:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001838:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800183a:	3104      	adds	r1, #4

0800183c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800183c:	480b      	ldr	r0, [pc, #44]	; (800186c <LoopForever+0xa>)
	ldr	r3, =_edata
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001840:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001842:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001844:	d3f6      	bcc.n	8001834 <CopyDataInit>
	ldr	r2, =_sbss
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001848:	e002      	b.n	8001850 <LoopFillZerobss>

0800184a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800184a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800184c:	f842 3b04 	str.w	r3, [r2], #4

08001850 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <LoopForever+0x16>)
	cmp	r2, r3
 8001852:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001854:	d3f9      	bcc.n	800184a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001856:	f7ff ffb1 	bl	80017bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800185a:	f007 fdf5 	bl	8009448 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800185e:	f7fe ff3f 	bl	80006e0 <main>

08001862 <LoopForever>:

LoopForever:
    b LoopForever
 8001862:	e7fe      	b.n	8001862 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001864:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001868:	080095c8 	.word	0x080095c8
	ldr	r0, =_sdata
 800186c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001870:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8001874:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001878:	200006b0 	.word	0x200006b0

0800187c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC1_IRQHandler>
	...

08001880 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_Init+0x4c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a10      	ldr	r2, [pc, #64]	; (80018cc <HAL_Init+0x4c>)
 800188a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f000 fd43 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001896:	f003 f9ad 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 800189a:	4602      	mov	r2, r0
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_Init+0x50>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	490b      	ldr	r1, [pc, #44]	; (80018d4 <HAL_Init+0x54>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_Init+0x58>)
 80018ae:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b0:	2000      	movs	r0, #0
 80018b2:	f000 f813 	bl	80018dc <HAL_InitTick>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e002      	b.n	80018c6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018c0:	f7ff fd74 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40022000 	.word	0x40022000
 80018d0:	46020c00 	.word	0x46020c00
 80018d4:	080094b8 	.word	0x080094b8
 80018d8:	20000000 	.word	0x20000000

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_InitTick+0x60>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e021      	b.n	8001934 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_InitTick+0x64>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_InitTick+0x60>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fd3b 	bl	8002382 <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 fd05 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_InitTick+0x68>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000008 	.word	0x20000008
 8001940:	20000000 	.word	0x20000000
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000008 	.word	0x20000008
 800196c:	200006ac 	.word	0x200006ac

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200006ac 	.word	0x200006ac

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ffee 	bl	8001970 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_Delay+0x44>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffde 	bl	8001970 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000008 	.word	0x20000008

080019d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	601a      	str	r2, [r3, #0]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	2a00      	cmp	r2, #0
 8001a20:	d002      	beq.n	8001a28 <LL_ADC_SetGainCompensation+0x32>
 8001a22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a26:	e000      	b.n	8001a2a <LL_ADC_SetGainCompensation+0x34>
 8001a28:	2200      	movs	r2, #0
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2107      	movs	r1, #7
 8001a54:	fa01 f303 	lsl.w	r3, r1, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6093      	str	r3, [r2, #8]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ab2:	d101      	bne.n	8001ab8 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ad6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ada:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b02:	d101      	bne.n	8001b08 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <LL_ADC_IsEnabled+0x18>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <LL_ADC_IsEnabled+0x1a>
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d101      	bne.n	8001b54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d101      	bne.n	8001b7a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e2e3      	b.n	8002170 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a92      	ldr	r2, [pc, #584]	; (8001e00 <HAL_ADC_Init+0x278>)
 8001bb6:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fc0f 	bl	80013e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff60 	bl	8001a9e <LL_ADC_IsDeepPowerDownEnabled>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d004      	beq.n	8001bee <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff46 	bl	8001a7a <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff7b 	bl	8001aee <LL_ADC_IsInternalRegulatorEnabled>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d115      	bne.n	8001c2a <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff5f 	bl	8001ac6 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c08:	4b7e      	ldr	r3, [pc, #504]	; (8001e04 <HAL_ADC_Init+0x27c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	099b      	lsrs	r3, r3, #6
 8001c0e:	4a7e      	ldr	r2, [pc, #504]	; (8001e08 <HAL_ADC_Init+0x280>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	099b      	lsrs	r3, r3, #6
 8001c16:	3301      	adds	r3, #1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c1c:	e002      	b.n	8001c24 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f9      	bne.n	8001c1e <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff5d 	bl	8001aee <LL_ADC_IsInternalRegulatorEnabled>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10e      	bne.n	8001c58 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c3e:	f043 0210 	orr.w	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff6d 	bl	8001b3c <LL_ADC_REG_IsConversionOngoing>
 8001c62:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f040 8274 	bne.w	800215a <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f040 8270 	bne.w	800215a <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c7e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c82:	f043 0202 	orr.w	r2, r3, #2
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff41 	bl	8001b16 <LL_ADC_IsEnabled>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d14e      	bne.n	8001d38 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a58      	ldr	r2, [pc, #352]	; (8001e00 <HAL_ADC_Init+0x278>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d028      	beq.n	8001cf6 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a58      	ldr	r2, [pc, #352]	; (8001e0c <HAL_ADC_Init+0x284>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d109      	bne.n	8001cc2 <HAL_ADC_Init+0x13a>
 8001cae:	4857      	ldr	r0, [pc, #348]	; (8001e0c <HAL_ADC_Init+0x284>)
 8001cb0:	f7ff ff31 	bl	8001b16 <LL_ADC_IsEnabled>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bf0c      	ite	eq
 8001cba:	2301      	moveq	r3, #1
 8001cbc:	2300      	movne	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	e008      	b.n	8001cd4 <HAL_ADC_Init+0x14c>
 8001cc2:	484f      	ldr	r0, [pc, #316]	; (8001e00 <HAL_ADC_Init+0x278>)
 8001cc4:	f7ff ff27 	bl	8001b16 <LL_ADC_IsEnabled>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf0c      	ite	eq
 8001cce:	2301      	moveq	r3, #1
 8001cd0:	2300      	movne	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d02f      	beq.n	8001d38 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a4b      	ldr	r2, [pc, #300]	; (8001e0c <HAL_ADC_Init+0x284>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Init+0x15e>
 8001ce2:	4a4b      	ldr	r2, [pc, #300]	; (8001e10 <HAL_ADC_Init+0x288>)
 8001ce4:	e000      	b.n	8001ce8 <HAL_ADC_Init+0x160>
 8001ce6:	4a4b      	ldr	r2, [pc, #300]	; (8001e14 <HAL_ADC_Init+0x28c>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4619      	mov	r1, r3
 8001cee:	4610      	mov	r0, r2
 8001cf0:	f7ff fe6e 	bl	80019d0 <LL_ADC_SetCommonClock>
 8001cf4:	e020      	b.n	8001d38 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f023 010c 	bic.w	r1, r3, #12
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d005      	beq.n	8001d18 <HAL_ADC_Init+0x190>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	e000      	b.n	8001d1a <HAL_ADC_Init+0x192>
 8001d18:	230c      	movs	r3, #12
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	430b      	orrs	r3, r1
 8001d20:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001d22:	4b3c      	ldr	r3, [pc, #240]	; (8001e14 <HAL_ADC_Init+0x28c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d32:	4938      	ldr	r1, [pc, #224]	; (8001e14 <HAL_ADC_Init+0x28c>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a30      	ldr	r2, [pc, #192]	; (8001e00 <HAL_ADC_Init+0x278>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d010      	beq.n	8001d64 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d48:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001d4e:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001d54:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d5c:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	623b      	str	r3, [r7, #32]
 8001d62:	e030      	b.n	8001dc6 <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7f1b      	ldrb	r3, [r3, #28]
 8001d68:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d70:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d72:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d78:	2a00      	cmp	r2, #0
 8001d7a:	d002      	beq.n	8001d82 <HAL_ADC_Init+0x1fa>
 8001d7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d80:	e000      	b.n	8001d84 <HAL_ADC_Init+0x1fc>
 8001d82:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d84:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001d8a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	da04      	bge.n	8001d9e <HAL_ADC_Init+0x216>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d9c:	e001      	b.n	8001da2 <HAL_ADC_Init+0x21a>
 8001d9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8001da2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4918      	ldr	r1, [pc, #96]	; (8001e0c <HAL_ADC_Init+0x284>)
 8001daa:	428b      	cmp	r3, r1
 8001dac:	d103      	bne.n	8001db6 <HAL_ADC_Init+0x22e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001db4:	e003      	b.n	8001dbe <HAL_ADC_Init+0x236>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dbc:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001dbe:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dc0:	6a3a      	ldr	r2, [r7, #32]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d12f      	bne.n	8001e30 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_ADC_Init+0x278>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	3b01      	subs	r3, #1
 8001de0:	045b      	lsls	r3, r3, #17
 8001de2:	6a3a      	ldr	r2, [r7, #32]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	623b      	str	r3, [r7, #32]
 8001de8:	e022      	b.n	8001e30 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d111      	bne.n	8001e18 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfa:	623b      	str	r3, [r7, #32]
 8001dfc:	e018      	b.n	8001e30 <HAL_ADC_Init+0x2a8>
 8001dfe:	bf00      	nop
 8001e00:	46021000 	.word	0x46021000
 8001e04:	20000000 	.word	0x20000000
 8001e08:	053e2d63 	.word	0x053e2d63
 8001e0c:	42028000 	.word	0x42028000
 8001e10:	42028308 	.word	0x42028308
 8001e14:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a93      	ldr	r2, [pc, #588]	; (8002084 <HAL_ADC_Init+0x4fc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d018      	beq.n	8001e6c <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e46:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	6a3a      	ldr	r2, [r7, #32]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	4b8a      	ldr	r3, [pc, #552]	; (8002088 <HAL_ADC_Init+0x500>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	6a39      	ldr	r1, [r7, #32]
 8001e66:	430b      	orrs	r3, r1
 8001e68:	60d3      	str	r3, [r2, #12]
 8001e6a:	e033      	b.n	8001ed4 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d009      	beq.n	8001e88 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e78:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e80:	4313      	orrs	r3, r2
 8001e82:	6a3a      	ldr	r2, [r7, #32]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8001e92:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	6a39      	ldr	r1, [r7, #32]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1a      	ldr	r2, [r3, #32]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6a      	ldr	r2, [pc, #424]	; (8002084 <HAL_ADC_Init+0x4fc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	f000 8093 	beq.w	8002006 <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fe29 	bl	8001b3c <LL_ADC_REG_IsConversionOngoing>
 8001eea:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fe36 	bl	8001b62 <LL_ADC_INJ_IsConversionOngoing>
 8001ef6:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d161      	bne.n	8001fc2 <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d15e      	bne.n	8001fc2 <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7f1b      	ldrb	r3, [r3, #28]
 8001f08:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	495f      	ldr	r1, [pc, #380]	; (800208c <HAL_ADC_Init+0x504>)
 8001f10:	428b      	cmp	r3, r1
 8001f12:	d102      	bne.n	8001f1a <HAL_ADC_Init+0x392>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	e002      	b.n	8001f20 <HAL_ADC_Init+0x398>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1e:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f20:	4313      	orrs	r3, r2
 8001f22:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f2e:	f023 0303 	bic.w	r3, r3, #3
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	6a39      	ldr	r1, [r7, #32]
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f7ff fd51 	bl	80019f6 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d11e      	bne.n	8001f9c <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f62:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	4b49      	ldr	r3, [pc, #292]	; (8002090 <HAL_ADC_Init+0x508>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001f72:	0411      	lsls	r1, r2, #16
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f78:	4311      	orrs	r1, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001f7e:	4311      	orrs	r1, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001f84:	4311      	orrs	r1, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f8a:	0892      	lsrs	r2, r2, #2
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	611a      	str	r2, [r3, #16]
 8001f9a:	e007      	b.n	8001fac <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	f023 010f 	bic.w	r1, r3, #15
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	1e5a      	subs	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe2:	e007      	b.n	8001ff4 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 020f 	bic.w	r2, r2, #15
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ff8:	f023 0303 	bic.w	r3, r3, #3
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002004:	e0b2      	b.n	800216c <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800200e:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8002014:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 800201a:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	4313      	orrs	r3, r2
 8002020:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002028:	2b01      	cmp	r3, #1
 800202a:	d103      	bne.n	8002034 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_ADC_Init+0x50c>)
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	69f9      	ldr	r1, [r7, #28]
 8002044:	430b      	orrs	r3, r1
 8002046:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002050:	461a      	mov	r2, r3
 8002052:	2100      	movs	r1, #0
 8002054:	f7ff fcf2 	bl	8001a3c <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	461a      	mov	r2, r3
 8002062:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8002066:	f7ff fce9 	bl	8001a3c <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d112      	bne.n	8002098 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f062 020f 	orn	r2, r2, #15
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
 8002082:	e044      	b.n	800210e <HAL_ADC_Init+0x586>
 8002084:	46021000 	.word	0x46021000
 8002088:	fff0c013 	.word	0xfff0c013
 800208c:	42028000 	.word	0x42028000
 8002090:	fc00f81e 	.word	0xfc00f81e
 8002094:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020a0:	d135      	bne.n	800210e <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	e00d      	b.n	80020c4 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	fa22 f303 	lsr.w	r3, r2, r3
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	2b0f      	cmp	r3, #15
 80020bc:	d006      	beq.n	80020cc <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	3301      	adds	r3, #1
 80020c2:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2b07      	cmp	r3, #7
 80020c8:	d9ee      	bls.n	80020a8 <HAL_ADC_Init+0x520>
 80020ca:	e000      	b.n	80020ce <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 80020cc:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d108      	bne.n	80020e6 <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f062 020f 	orn	r2, r2, #15
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
 80020e4:	e013      	b.n	800210e <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	3b01      	subs	r3, #1
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	f003 031c 	and.w	r3, r3, #28
 80020f8:	f06f 020f 	mvn.w	r2, #15
 80020fc:	fa02 f103 	lsl.w	r1, r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_ADC_Init+0x5f0>)
 8002116:	4013      	ands	r3, r2
 8002118:	6a3a      	ldr	r2, [r7, #32]
 800211a:	429a      	cmp	r2, r3
 800211c:	d10b      	bne.n	8002136 <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002128:	f023 0303 	bic.w	r3, r3, #3
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002134:	e01a      	b.n	800216c <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800213a:	f023 0312 	bic.w	r3, r3, #18
 800213e:	f043 0210 	orr.w	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800214a:	f043 0201 	orr.w	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002158:	e008      	b.n	800216c <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800215e:	f043 0210 	orr.w	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 800216c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002170:	4618      	mov	r0, r3
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	833ffff3 	.word	0x833ffff3

0800217c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	60d3      	str	r3, [r2, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db0b      	blt.n	800220a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4907      	ldr	r1, [pc, #28]	; (8002218 <__NVIC_EnableIRQ+0x38>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	; (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	; (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
         );
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	; 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff8e 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff29 	bl	800217c <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002340:	f7ff ff40 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 8002344:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	6978      	ldr	r0, [r7, #20]
 800234c:	f7ff ff90 	bl	8002270 <NVIC_EncodePriority>
 8002350:	4602      	mov	r2, r0
 8002352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff5f 	bl	800221c <__NVIC_SetPriority>
}
 800235e:	bf00      	nop
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff33 	bl	80021e0 <__NVIC_EnableIRQ>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ffa4 	bl	80022d8 <SysTick_Config>
 8002390:	4603      	mov	r3, r0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80023ae:	e1ba      	b.n	8002726 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	4013      	ands	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 81aa 	beq.w	8002720 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a55      	ldr	r2, [pc, #340]	; (8002524 <HAL_GPIO_Init+0x188>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d15d      	bne.n	8002490 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80023da:	2201      	movs	r2, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0201 	and.w	r2, r3, #1
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002404:	4a48      	ldr	r2, [pc, #288]	; (8002528 <HAL_GPIO_Init+0x18c>)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800240c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800240e:	4a46      	ldr	r2, [pc, #280]	; (8002528 <HAL_GPIO_Init+0x18c>)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	3208      	adds	r2, #8
 8002422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002426:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	220f      	movs	r2, #15
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	4013      	ands	r3, r2
 800243c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220b      	movs	r2, #11
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	4313      	orrs	r3, r2
 8002450:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	08da      	lsrs	r2, r3, #3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	3208      	adds	r2, #8
 800245a:	69f9      	ldr	r1, [r7, #28]
 800245c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	4013      	ands	r3, r2
 8002476:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2202      	movs	r2, #2
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	4313      	orrs	r3, r2
 8002486:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	e067      	b.n	8002560 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x104>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b12      	cmp	r3, #18
 800249e:	d145      	bne.n	800252c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f003 020f 	and.w	r2, r3, #15
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	08da      	lsrs	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3208      	adds	r2, #8
 80024e6:	69f9      	ldr	r1, [r7, #28]
 80024e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	4013      	ands	r3, r2
 8002502:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0203 	and.w	r2, r3, #3
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	4313      	orrs	r3, r2
 8002518:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e01e      	b.n	8002560 <HAL_GPIO_Init+0x1c4>
 8002522:	bf00      	nop
 8002524:	46020000 	.word	0x46020000
 8002528:	08009510 	.word	0x08009510
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	4013      	ands	r3, r2
 8002542:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	4313      	orrs	r3, r2
 8002558:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d00b      	beq.n	8002580 <HAL_GPIO_Init+0x1e4>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d007      	beq.n	8002580 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002574:	2b11      	cmp	r3, #17
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b12      	cmp	r3, #18
 800257e:	d130      	bne.n	80025e2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	4013      	ands	r3, r2
 8002596:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80025b6:	2201      	movs	r2, #1
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f003 0201 	and.w	r2, r3, #1
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d017      	beq.n	800261a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	2203      	movs	r2, #3
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	4013      	ands	r3, r2
 8002600:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	4313      	orrs	r3, r2
 8002612:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d07c      	beq.n	8002720 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002626:	4a47      	ldr	r2, [pc, #284]	; (8002744 <HAL_GPIO_Init+0x3a8>)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3318      	adds	r3, #24
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	4013      	ands	r3, r2
 8002648:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	0a9a      	lsrs	r2, r3, #10
 800264e:	4b3e      	ldr	r3, [pc, #248]	; (8002748 <HAL_GPIO_Init+0x3ac>)
 8002650:	4013      	ands	r3, r2
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	f002 0203 	and.w	r2, r2, #3
 8002658:	00d2      	lsls	r2, r2, #3
 800265a:	4093      	lsls	r3, r2
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	4313      	orrs	r3, r2
 8002660:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002662:	4938      	ldr	r1, [pc, #224]	; (8002744 <HAL_GPIO_Init+0x3a8>)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3318      	adds	r3, #24
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002670:	4b34      	ldr	r3, [pc, #208]	; (8002744 <HAL_GPIO_Init+0x3a8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	43db      	mvns	r3, r3
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	4013      	ands	r3, r2
 800267e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002694:	4a2b      	ldr	r2, [pc, #172]	; (8002744 <HAL_GPIO_Init+0x3a8>)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800269a:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <HAL_GPIO_Init+0x3a8>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80026be:	4a21      	ldr	r2, [pc, #132]	; (8002744 <HAL_GPIO_Init+0x3a8>)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <HAL_GPIO_Init+0x3a8>)
 80026c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80026ea:	4a16      	ldr	r2, [pc, #88]	; (8002744 <HAL_GPIO_Init+0x3a8>)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80026f2:	4b14      	ldr	r3, [pc, #80]	; (8002744 <HAL_GPIO_Init+0x3a8>)
 80026f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	4013      	ands	r3, r2
 8002702:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <HAL_GPIO_Init+0x3a8>)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3301      	adds	r3, #1
 8002724:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	f47f ae3d 	bne.w	80023b0 <HAL_GPIO_Init+0x14>
  }
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	3724      	adds	r7, #36	; 0x24
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	46022000 	.word	0x46022000
 8002748:	002f7f7f 	.word	0x002f7f7f

0800274c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
 8002758:	4613      	mov	r3, r2
 800275a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002768:	e002      	b.n	8002770 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800277c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277e:	b08f      	sub	sp, #60	; 0x3c
 8002780:	af0a      	add	r7, sp, #40	; 0x28
 8002782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e116      	b.n	80029bc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d106      	bne.n	80027ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7fe fee7 	bl	800157c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2203      	movs	r2, #3
 80027b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f006 f935 	bl	8008a3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	687e      	ldr	r6, [r7, #4]
 80027da:	466d      	mov	r5, sp
 80027dc:	f106 0410 	add.w	r4, r6, #16
 80027e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80027f0:	1d33      	adds	r3, r6, #4
 80027f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f4:	6838      	ldr	r0, [r7, #0]
 80027f6:	f006 f852 	bl	800889e <USB_CoreInit>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0d7      	b.n	80029bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f006 f923 	bl	8008a5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]
 800281c:	e04a      	b.n	80028b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	333d      	adds	r3, #61	; 0x3d
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002832:	7bfa      	ldrb	r2, [r7, #15]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	333c      	adds	r3, #60	; 0x3c
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002846:	7bfa      	ldrb	r2, [r7, #15]
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	b298      	uxth	r0, r3
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3344      	adds	r3, #68	; 0x44
 800285a:	4602      	mov	r2, r0
 800285c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800285e:	7bfa      	ldrb	r2, [r7, #15]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	3340      	adds	r3, #64	; 0x40
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002872:	7bfa      	ldrb	r2, [r7, #15]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	3348      	adds	r3, #72	; 0x48
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002886:	7bfa      	ldrb	r2, [r7, #15]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	334c      	adds	r3, #76	; 0x4c
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3354      	adds	r3, #84	; 0x54
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	3301      	adds	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d3af      	bcc.n	800281e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
 80028c2:	e044      	b.n	800294e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	3301      	adds	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	d3b5      	bcc.n	80028c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	687e      	ldr	r6, [r7, #4]
 8002960:	466d      	mov	r5, sp
 8002962:	f106 0410 	add.w	r4, r6, #16
 8002966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800296a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800296c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800296e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002972:	e885 0003 	stmia.w	r5, {r0, r1}
 8002976:	1d33      	adds	r3, r6, #4
 8002978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800297a:	6838      	ldr	r0, [r7, #0]
 800297c:	f006 f8bc 	bl	8008af8 <USB_DevInit>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2202      	movs	r2, #2
 800298a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e014      	b.n	80029bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d102      	bne.n	80029b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 ff38 	bl	8003820 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f006 fbcf 	bl	8009158 <USB_DevDisconnect>

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b08d      	sub	sp, #52	; 0x34
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f006 fc70 	bl	80092c0 <USB_GetMode>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f040 84b7 	bne.w	8003356 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f006 fbd4 	bl	800919a <USB_ReadInterrupts>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 84ad 	beq.w	8003354 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f006 fbc1 	bl	800919a <USB_ReadInterrupts>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d107      	bne.n	8002a32 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f002 0202 	and.w	r2, r2, #2
 8002a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f006 fbaf 	bl	800919a <USB_ReadInterrupts>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b10      	cmp	r3, #16
 8002a44:	d161      	bne.n	8002b0a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0210 	bic.w	r2, r2, #16
 8002a54:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f003 020f 	and.w	r2, r3, #15
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	3304      	adds	r3, #4
 8002a74:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	0c5b      	lsrs	r3, r3, #17
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d124      	bne.n	8002acc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d035      	beq.n	8002afa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	6a38      	ldr	r0, [r7, #32]
 8002aa2:	f006 fb01 	bl	80090a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ab2:	441a      	add	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ac4:	441a      	add	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	621a      	str	r2, [r3, #32]
 8002aca:	e016      	b.n	8002afa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	0c5b      	lsrs	r3, r3, #17
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	2b06      	cmp	r3, #6
 8002ad6:	d110      	bne.n	8002afa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ade:	2208      	movs	r2, #8
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	6a38      	ldr	r0, [r7, #32]
 8002ae4:	f006 fae0 	bl	80090a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	6a1a      	ldr	r2, [r3, #32]
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	091b      	lsrs	r3, r3, #4
 8002af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af4:	441a      	add	r2, r3
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699a      	ldr	r2, [r3, #24]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0210 	orr.w	r2, r2, #16
 8002b08:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f006 fb43 	bl	800919a <USB_ReadInterrupts>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b1e:	f040 80a7 	bne.w	8002c70 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f006 fb48 	bl	80091c0 <USB_ReadDevAllOutEpInterrupt>
 8002b30:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b32:	e099      	b.n	8002c68 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 808e 	beq.w	8002c5c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f006 fb6c 	bl	8009228 <USB_ReadDevOutEPInterrupt>
 8002b50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00c      	beq.n	8002b76 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fd27 	bl	80035c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00c      	beq.n	8002b9a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2308      	movs	r3, #8
 8002b90:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fdfd 	bl	8003794 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2310      	movs	r3, #16
 8002bb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d030      	beq.n	8002c22 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc8:	2b80      	cmp	r3, #128	; 0x80
 8002bca:	d109      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bde:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	78db      	ldrb	r3, [r3, #3]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d108      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2200      	movs	r2, #0
 8002c02:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	4619      	mov	r1, r3
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fbf0 	bl	80033f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2302      	movs	r3, #2
 8002c20:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2320      	movs	r3, #32
 8002c3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d009      	beq.n	8002c5c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c54:	461a      	mov	r2, r3
 8002c56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c5a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	3301      	adds	r3, #1
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c64:	085b      	lsrs	r3, r3, #1
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f47f af62 	bne.w	8002b34 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f006 fa90 	bl	800919a <USB_ReadInterrupts>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c84:	f040 80db 	bne.w	8002e3e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f006 fab1 	bl	80091f4 <USB_ReadDevAllInEpInterrupt>
 8002c92:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c98:	e0cd      	b.n	8002e36 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80c2 	beq.w	8002e2a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f006 fad7 	bl	8009264 <USB_ReadDevInEPInterrupt>
 8002cb6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d057      	beq.n	8002d72 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	2201      	movs	r2, #1
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69f9      	ldr	r1, [r7, #28]
 8002cde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d132      	bne.n	8002d66 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	334c      	adds	r3, #76	; 0x4c
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4403      	add	r3, r0
 8002d20:	3348      	adds	r3, #72	; 0x48
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4419      	add	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4403      	add	r3, r0
 8002d34:	334c      	adds	r3, #76	; 0x4c
 8002d36:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d113      	bne.n	8002d66 <HAL_PCD_IRQHandler+0x3a2>
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3354      	adds	r3, #84	; 0x54
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d108      	bne.n	8002d66 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2101      	movs	r1, #1
 8002d62:	f006 fadf 	bl	8009324 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fb01 	bl	8003374 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2308      	movs	r3, #8
 8002d8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da4:	461a      	mov	r2, r3
 8002da6:	2310      	movs	r3, #16
 8002da8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2340      	movs	r3, #64	; 0x40
 8002dc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d023      	beq.n	8002e18 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dd2:	6a38      	ldr	r0, [r7, #32]
 8002dd4:	f005 ffde 	bl	8008d94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	3338      	adds	r3, #56	; 0x38
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	4413      	add	r3, r2
 8002de8:	3304      	adds	r3, #4
 8002dea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	78db      	ldrb	r3, [r3, #3]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d108      	bne.n	8002e06 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2200      	movs	r2, #0
 8002df8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	4619      	mov	r1, r3
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fb01 	bl	8003408 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e12:	461a      	mov	r2, r3
 8002e14:	2302      	movs	r3, #2
 8002e16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fb40 	bl	80034aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f47f af2e 	bne.w	8002c9a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f006 f9a9 	bl	800919a <USB_ReadInterrupts>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e52:	d122      	bne.n	8002e9a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d108      	bne.n	8002e84 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fcf3 	bl	8003868 <HAL_PCDEx_LPM_Callback>
 8002e82:	e002      	b.n	8002e8a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 faa9 	bl	80033dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f006 f97b 	bl	800919a <USB_ReadInterrupts>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eae:	d112      	bne.n	8002ed6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d102      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fa81 	bl	80033c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f006 f95d 	bl	800919a <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ee6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eea:	d121      	bne.n	8002f30 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002efa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d111      	bne.n	8002f2a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	089b      	lsrs	r3, r3, #2
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002f20:	2101      	movs	r1, #1
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fca0 	bl	8003868 <HAL_PCDEx_LPM_Callback>
 8002f28:	e002      	b.n	8002f30 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fa4c 	bl	80033c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f006 f930 	bl	800919a <USB_ReadInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f44:	f040 80b7 	bne.w	80030b6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2110      	movs	r1, #16
 8002f62:	4618      	mov	r0, r3
 8002f64:	f005 ff16 	bl	8008d94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f6c:	e046      	b.n	8002ffc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f92:	0151      	lsls	r1, r2, #5
 8002f94:	69fa      	ldr	r2, [r7, #28]
 8002f96:	440a      	add	r2, r1
 8002f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fa0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fb4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fc6:	0151      	lsls	r1, r2, #5
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	440a      	add	r2, r1
 8002fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fd4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe6:	0151      	lsls	r1, r2, #5
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	440a      	add	r2, r1
 8002fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ff0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ff4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003002:	429a      	cmp	r2, r3
 8003004:	d3b3      	bcc.n	8002f6e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003014:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003018:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	2b00      	cmp	r3, #0
 8003020:	d016      	beq.n	8003050 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003032:	f043 030b 	orr.w	r3, r3, #11
 8003036:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003048:	f043 030b 	orr.w	r3, r3, #11
 800304c:	6453      	str	r3, [r2, #68]	; 0x44
 800304e:	e015      	b.n	800307c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800305e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003062:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003066:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	69fa      	ldr	r2, [r7, #28]
 8003072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003076:	f043 030b 	orr.w	r3, r3, #11
 800307a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800308a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800308e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030a0:	461a      	mov	r2, r3
 80030a2:	f006 f93f 	bl	8009324 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f006 f86d 	bl	800919a <USB_ReadInterrupts>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ca:	d124      	bne.n	8003116 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f006 f903 	bl	80092dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f005 fed7 	bl	8008e8e <USB_GetDevSpeed>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681c      	ldr	r4, [r3, #0]
 80030ec:	f001 fe8a 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 80030f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	4620      	mov	r0, r4
 80030fc:	f005 fbfc 	bl	80088f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f957 	bl	80033b4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003114:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f006 f83d 	bl	800919a <USB_ReadInterrupts>
 8003120:	4603      	mov	r3, r0
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b08      	cmp	r3, #8
 8003128:	d10a      	bne.n	8003140 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f938 	bl	80033a0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f002 0208 	and.w	r2, r2, #8
 800313e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f006 f828 	bl	800919a <USB_ReadInterrupts>
 800314a:	4603      	mov	r3, r0
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	2b80      	cmp	r3, #128	; 0x80
 8003152:	d122      	bne.n	800319a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003160:	2301      	movs	r3, #1
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
 8003164:	e014      	b.n	8003190 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d105      	bne.n	800318a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	b2db      	uxtb	r3, r3
 8003182:	4619      	mov	r1, r3
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f95f 	bl	8003448 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	3301      	adds	r3, #1
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003196:	429a      	cmp	r2, r3
 8003198:	d3e5      	bcc.n	8003166 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f005 fffb 	bl	800919a <USB_ReadInterrupts>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ae:	d13b      	bne.n	8003228 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031b0:	2301      	movs	r3, #1
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
 80031b4:	e02b      	b.n	800320e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	3340      	adds	r3, #64	; 0x40
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d115      	bne.n	8003208 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80031dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031de:	2b00      	cmp	r3, #0
 80031e0:	da12      	bge.n	8003208 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	333f      	adds	r3, #63	; 0x3f
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f920 	bl	8003448 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	3301      	adds	r3, #1
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003214:	429a      	cmp	r2, r3
 8003216:	d3ce      	bcc.n	80031b6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003226:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f005 ffb4 	bl	800919a <USB_ReadInterrupts>
 8003232:	4603      	mov	r3, r0
 8003234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003238:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800323c:	d155      	bne.n	80032ea <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800323e:	2301      	movs	r3, #1
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
 8003242:	e045      	b.n	80032d0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d12e      	bne.n	80032ca <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800326c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800326e:	2b00      	cmp	r3, #0
 8003270:	da2b      	bge.n	80032ca <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800327e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003282:	429a      	cmp	r2, r3
 8003284:	d121      	bne.n	80032ca <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10a      	bne.n	80032ca <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032c6:	6053      	str	r3, [r2, #4]
            break;
 80032c8:	e007      	b.n	80032da <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	3301      	adds	r3, #1
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d3b4      	bcc.n	8003244 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80032e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f005 ff53 	bl	800919a <USB_ReadInterrupts>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fe:	d10a      	bne.n	8003316 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f88d 	bl	8003420 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003314:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f005 ff3d 	bl	800919a <USB_ReadInterrupts>
 8003320:	4603      	mov	r3, r0
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b04      	cmp	r3, #4
 8003328:	d115      	bne.n	8003356 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f879 	bl	8003434 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	e000      	b.n	8003356 <HAL_PCD_IRQHandler+0x992>
      return;
 8003354:	bf00      	nop
    }
  }
}
 8003356:	3734      	adds	r7, #52	; 0x34
 8003358:	46bd      	mov	sp, r7
 800335a:	bd90      	pop	{r4, r7, pc}

0800335c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003458:	2b00      	cmp	r3, #0
 800345a:	da0c      	bge.n	8003476 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	f003 020f 	and.w	r2, r3, #15
 8003462:	4613      	mov	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	3338      	adds	r3, #56	; 0x38
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4413      	add	r3, r2
 8003470:	3304      	adds	r3, #4
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e00c      	b.n	8003490 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	f003 020f 	and.w	r2, r3, #15
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	4413      	add	r3, r2
 800348c:	3304      	adds	r3, #4
 800348e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68f9      	ldr	r1, [r7, #12]
 8003496:	4618      	mov	r0, r3
 8003498:	f005 fd1e 	bl	8008ed8 <USB_EPStopXfer>
 800349c:	4603      	mov	r3, r0
 800349e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034a0:	7afb      	ldrb	r3, [r7, #11]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b08a      	sub	sp, #40	; 0x28
 80034ae:	af02      	add	r7, sp, #8
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	3338      	adds	r3, #56	; 0x38
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	3304      	adds	r3, #4
 80034d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a1a      	ldr	r2, [r3, #32]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d901      	bls.n	80034e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e06c      	b.n	80035bc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d902      	bls.n	80034fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3303      	adds	r3, #3
 8003502:	089b      	lsrs	r3, r3, #2
 8003504:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003506:	e02b      	b.n	8003560 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	429a      	cmp	r2, r3
 800351c:	d902      	bls.n	8003524 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	3303      	adds	r3, #3
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6919      	ldr	r1, [r3, #16]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	b2da      	uxtb	r2, r3
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800353c:	b2db      	uxtb	r3, r3
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	4603      	mov	r3, r0
 8003542:	6978      	ldr	r0, [r7, #20]
 8003544:	f005 fd72 	bl	800902c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	441a      	add	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1a      	ldr	r2, [r3, #32]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	441a      	add	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	b29b      	uxth	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	429a      	cmp	r2, r3
 8003574:	d809      	bhi.n	800358a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a1a      	ldr	r2, [r3, #32]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800357e:	429a      	cmp	r2, r3
 8003580:	d203      	bcs.n	800358a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1be      	bne.n	8003508 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	429a      	cmp	r2, r3
 8003594:	d811      	bhi.n	80035ba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	2201      	movs	r2, #1
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	6939      	ldr	r1, [r7, #16]
 80035b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035b6:	4013      	ands	r3, r2
 80035b8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	333c      	adds	r3, #60	; 0x3c
 80035dc:	3304      	adds	r3, #4
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d17b      	bne.n	80036f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d015      	beq.n	8003630 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	4a61      	ldr	r2, [pc, #388]	; (800378c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	f240 80b9 	bls.w	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80b3 	beq.w	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	461a      	mov	r2, r3
 8003628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800362c:	6093      	str	r3, [r2, #8]
 800362e:	e0a7      	b.n	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003646:	461a      	mov	r2, r3
 8003648:	2320      	movs	r3, #32
 800364a:	6093      	str	r3, [r2, #8]
 800364c:	e098      	b.n	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	f040 8093 	bne.w	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	4a4b      	ldr	r2, [pc, #300]	; (800378c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d90f      	bls.n	8003682 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003678:	461a      	mov	r2, r3
 800367a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800367e:	6093      	str	r3, [r2, #8]
 8003680:	e07e      	b.n	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	4413      	add	r3, r2
 8003694:	3304      	adds	r3, #4
 8003696:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	0159      	lsls	r1, r3, #5
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	440b      	add	r3, r1
 80036a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ae:	1ad2      	subs	r2, r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d114      	bne.n	80036e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036cc:	461a      	mov	r2, r3
 80036ce:	2101      	movs	r1, #1
 80036d0:	f005 fe28 	bl	8009324 <USB_EP0_OutStart>
 80036d4:	e006      	b.n	80036e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	441a      	add	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fe36 	bl	800335c <HAL_PCD_DataOutStageCallback>
 80036f0:	e046      	b.n	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	4a26      	ldr	r2, [pc, #152]	; (8003790 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d124      	bne.n	8003744 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003710:	461a      	mov	r2, r3
 8003712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003716:	6093      	str	r3, [r2, #8]
 8003718:	e032      	b.n	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003730:	461a      	mov	r2, r3
 8003732:	2320      	movs	r3, #32
 8003734:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	4619      	mov	r1, r3
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff fe0d 	bl	800335c <HAL_PCD_DataOutStageCallback>
 8003742:	e01d      	b.n	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d114      	bne.n	8003774 <PCD_EP_OutXfrComplete_int+0x1b0>
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800376c:	461a      	mov	r2, r3
 800376e:	2100      	movs	r1, #0
 8003770:	f005 fdd8 	bl	8009324 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	4619      	mov	r1, r3
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff fdee 	bl	800335c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	4f54300a 	.word	0x4f54300a
 8003790:	4f54310a 	.word	0x4f54310a

08003794 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	333c      	adds	r3, #60	; 0x3c
 80037ac:	3304      	adds	r3, #4
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a15      	ldr	r2, [pc, #84]	; (800381c <PCD_EP_OutSetupPacket_int+0x88>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d90e      	bls.n	80037e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e0:	461a      	mov	r2, r3
 80037e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff fdcf 	bl	800338c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4a0a      	ldr	r2, [pc, #40]	; (800381c <PCD_EP_OutSetupPacket_int+0x88>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d90c      	bls.n	8003810 <PCD_EP_OutSetupPacket_int+0x7c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d108      	bne.n	8003810 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003808:	461a      	mov	r2, r3
 800380a:	2101      	movs	r1, #1
 800380c:	f005 fd8a 	bl	8009324 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	4f54300a 	.word	0x4f54300a

08003820 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003852:	f043 0303 	orr.w	r3, r3, #3
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003888:	4b34      	ldr	r3, [pc, #208]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003890:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	429a      	cmp	r2, r3
 8003898:	d101      	bne.n	800389e <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	e057      	b.n	800394e <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a4:	d90a      	bls.n	80038bc <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80038a6:	4b2d      	ldr	r3, [pc, #180]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	4a2a      	ldr	r2, [pc, #168]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80038b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b8:	60d3      	str	r3, [r2, #12]
 80038ba:	e007      	b.n	80038cc <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80038bc:	4b27      	ldr	r3, [pc, #156]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038c4:	4925      	ldr	r1, [pc, #148]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80038cc:	4b24      	ldr	r3, [pc, #144]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a24      	ldr	r2, [pc, #144]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	099b      	lsrs	r3, r3, #6
 80038d8:	2232      	movs	r2, #50	; 0x32
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	4a21      	ldr	r2, [pc, #132]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	099b      	lsrs	r3, r3, #6
 80038e6:	3301      	adds	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80038ea:	e002      	b.n	80038f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80038f2:	4b1a      	ldr	r3, [pc, #104]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <HAL_PWREx_ControlVoltageScaling+0x84>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f3      	bne.n	80038ec <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d01b      	beq.n	8003942 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800390a:	4b15      	ldr	r3, [pc, #84]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a15      	ldr	r2, [pc, #84]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003910:	fba2 2303 	umull	r2, r3, r2, r3
 8003914:	099b      	lsrs	r3, r3, #6
 8003916:	2232      	movs	r2, #50	; 0x32
 8003918:	fb02 f303 	mul.w	r3, r2, r3
 800391c:	4a11      	ldr	r2, [pc, #68]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	099b      	lsrs	r3, r3, #6
 8003924:	3301      	adds	r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003928:	e002      	b.n	8003930 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3b01      	subs	r3, #1
 800392e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <HAL_PWREx_ControlVoltageScaling+0xc2>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f3      	bne.n	800392a <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e000      	b.n	800394e <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	46020800 	.word	0x46020800
 8003960:	20000000 	.word	0x20000000
 8003964:	10624dd3 	.word	0x10624dd3

08003968 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800396c:	4b04      	ldr	r3, [pc, #16]	; (8003980 <HAL_PWREx_GetVoltageRange+0x18>)
 800396e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	46020800 	.word	0x46020800

08003984 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800398c:	4b22      	ldr	r3, [pc, #136]	; (8003a18 <HAL_PWREx_ConfigSupply+0x94>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a22      	ldr	r2, [pc, #136]	; (8003a1c <HAL_PWREx_ConfigSupply+0x98>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	099b      	lsrs	r3, r3, #6
 8003998:	2232      	movs	r2, #50	; 0x32
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	4a1f      	ldr	r2, [pc, #124]	; (8003a1c <HAL_PWREx_ConfigSupply+0x98>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	099b      	lsrs	r3, r3, #6
 80039a6:	3301      	adds	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d113      	bne.n	80039d8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_PWREx_ConfigSupply+0x9c>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <HAL_PWREx_ConfigSupply+0x9c>)
 80039b6:	f023 0302 	bic.w	r3, r3, #2
 80039ba:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80039bc:	e002      	b.n	80039c4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80039c4:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <HAL_PWREx_ConfigSupply+0x9c>)
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d116      	bne.n	80039fe <HAL_PWREx_ConfigSupply+0x7a>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f3      	bne.n	80039be <HAL_PWREx_ConfigSupply+0x3a>
 80039d6:	e012      	b.n	80039fe <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <HAL_PWREx_ConfigSupply+0x9c>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <HAL_PWREx_ConfigSupply+0x9c>)
 80039de:	f043 0302 	orr.w	r3, r3, #2
 80039e2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80039e4:	e002      	b.n	80039ec <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <HAL_PWREx_ConfigSupply+0x9c>)
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d102      	bne.n	80039fe <HAL_PWREx_ConfigSupply+0x7a>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f3      	bne.n	80039e6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e000      	b.n	8003a0a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000000 	.word	0x20000000
 8003a1c:	10624dd3 	.word	0x10624dd3
 8003a20:	46020800 	.word	0x46020800

08003a24 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a32:	6113      	str	r3, [r2, #16]
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	46020800 	.word	0x46020800

08003a44 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003a4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a52:	6113      	str	r3, [r2, #16]
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	46020800 	.word	0x46020800

08003a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08e      	sub	sp, #56	; 0x38
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f000 bec3 	b.w	8004804 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a7e:	4b9c      	ldr	r3, [pc, #624]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a88:	4b99      	ldr	r3, [pc, #612]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8172 	beq.w	8003d84 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x52>
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	2b0c      	cmp	r3, #12
 8003aaa:	f040 80e4 	bne.w	8003c76 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	f040 80e0 	bne.w	8003c76 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ab6:	4b8e      	ldr	r3, [pc, #568]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x6c>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d102      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f000 be9a 	b.w	8004804 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ad4:	4b86      	ldr	r3, [pc, #536]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d004      	beq.n	8003aea <HAL_RCC_OscConfig+0x86>
 8003ae0:	4b83      	ldr	r3, [pc, #524]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003ae8:	e005      	b.n	8003af6 <HAL_RCC_OscConfig+0x92>
 8003aea:	4b81      	ldr	r3, [pc, #516]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003aec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d255      	bcs.n	8003ba6 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 f9d3 	bl	8004eb0 <RCC_SetFlashLatencyFromMSIRange>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f000 be77 	b.w	8004804 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003b16:	4b76      	ldr	r3, [pc, #472]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	4a75      	ldr	r2, [pc, #468]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003b1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b20:	6093      	str	r3, [r2, #8]
 8003b22:	4b73      	ldr	r3, [pc, #460]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	4970      	ldr	r1, [pc, #448]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003b3c:	d309      	bcc.n	8003b52 <HAL_RCC_OscConfig+0xee>
 8003b3e:	4b6c      	ldr	r3, [pc, #432]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f023 021f 	bic.w	r2, r3, #31
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4969      	ldr	r1, [pc, #420]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60cb      	str	r3, [r1, #12]
 8003b50:	e07e      	b.n	8003c50 <HAL_RCC_OscConfig+0x1ec>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	da0a      	bge.n	8003b70 <HAL_RCC_OscConfig+0x10c>
 8003b5a:	4b65      	ldr	r3, [pc, #404]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	015b      	lsls	r3, r3, #5
 8003b68:	4961      	ldr	r1, [pc, #388]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60cb      	str	r3, [r1, #12]
 8003b6e:	e06f      	b.n	8003c50 <HAL_RCC_OscConfig+0x1ec>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b78:	d30a      	bcc.n	8003b90 <HAL_RCC_OscConfig+0x12c>
 8003b7a:	4b5d      	ldr	r3, [pc, #372]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	029b      	lsls	r3, r3, #10
 8003b88:	4959      	ldr	r1, [pc, #356]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60cb      	str	r3, [r1, #12]
 8003b8e:	e05f      	b.n	8003c50 <HAL_RCC_OscConfig+0x1ec>
 8003b90:	4b57      	ldr	r3, [pc, #348]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	03db      	lsls	r3, r3, #15
 8003b9e:	4954      	ldr	r1, [pc, #336]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60cb      	str	r3, [r1, #12]
 8003ba4:	e054      	b.n	8003c50 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003ba6:	4b52      	ldr	r3, [pc, #328]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	4a51      	ldr	r2, [pc, #324]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003bac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bb0:	6093      	str	r3, [r2, #8]
 8003bb2:	4b4f      	ldr	r3, [pc, #316]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	494c      	ldr	r1, [pc, #304]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003bcc:	d309      	bcc.n	8003be2 <HAL_RCC_OscConfig+0x17e>
 8003bce:	4b48      	ldr	r3, [pc, #288]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f023 021f 	bic.w	r2, r3, #31
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4945      	ldr	r1, [pc, #276]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60cb      	str	r3, [r1, #12]
 8003be0:	e028      	b.n	8003c34 <HAL_RCC_OscConfig+0x1d0>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	da0a      	bge.n	8003c00 <HAL_RCC_OscConfig+0x19c>
 8003bea:	4b41      	ldr	r3, [pc, #260]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	015b      	lsls	r3, r3, #5
 8003bf8:	493d      	ldr	r1, [pc, #244]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60cb      	str	r3, [r1, #12]
 8003bfe:	e019      	b.n	8003c34 <HAL_RCC_OscConfig+0x1d0>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c08:	d30a      	bcc.n	8003c20 <HAL_RCC_OscConfig+0x1bc>
 8003c0a:	4b39      	ldr	r3, [pc, #228]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	029b      	lsls	r3, r3, #10
 8003c18:	4935      	ldr	r1, [pc, #212]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60cb      	str	r3, [r1, #12]
 8003c1e:	e009      	b.n	8003c34 <HAL_RCC_OscConfig+0x1d0>
 8003c20:	4b33      	ldr	r3, [pc, #204]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	03db      	lsls	r3, r3, #15
 8003c2e:	4930      	ldr	r1, [pc, #192]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f001 f936 	bl	8004eb0 <RCC_SetFlashLatencyFromMSIRange>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f000 bdda 	b.w	8004804 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003c50:	f001 f8d8 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <HAL_RCC_OscConfig+0x290>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fd fe3f 	bl	80018dc <HAL_InitTick>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 808a 	beq.w	8003d82 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8003c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c72:	f000 bdc7 	b.w	8004804 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d066      	beq.n	8003d4c <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003c7e:	4b1c      	ldr	r3, [pc, #112]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1b      	ldr	r2, [pc, #108]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c8a:	f7fd fe71 	bl	8001970 <HAL_GetTick>
 8003c8e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003c90:	e009      	b.n	8003ca6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c92:	f7fd fe6d 	bl	8001970 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d902      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	f000 bdaf 	b.w	8004804 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0ef      	beq.n	8003c92 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003cb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cbc:	6093      	str	r3, [r2, #8]
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	4909      	ldr	r1, [pc, #36]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003cd8:	d30e      	bcc.n	8003cf8 <HAL_RCC_OscConfig+0x294>
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f023 021f 	bic.w	r2, r3, #31
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4902      	ldr	r1, [pc, #8]	; (8003cf0 <HAL_RCC_OscConfig+0x28c>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60cb      	str	r3, [r1, #12]
 8003cec:	e04a      	b.n	8003d84 <HAL_RCC_OscConfig+0x320>
 8003cee:	bf00      	nop
 8003cf0:	46020c00 	.word	0x46020c00
 8003cf4:	20000004 	.word	0x20000004
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	da0a      	bge.n	8003d16 <HAL_RCC_OscConfig+0x2b2>
 8003d00:	4b9b      	ldr	r3, [pc, #620]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	015b      	lsls	r3, r3, #5
 8003d0e:	4998      	ldr	r1, [pc, #608]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60cb      	str	r3, [r1, #12]
 8003d14:	e036      	b.n	8003d84 <HAL_RCC_OscConfig+0x320>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1e:	d30a      	bcc.n	8003d36 <HAL_RCC_OscConfig+0x2d2>
 8003d20:	4b93      	ldr	r3, [pc, #588]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	029b      	lsls	r3, r3, #10
 8003d2e:	4990      	ldr	r1, [pc, #576]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60cb      	str	r3, [r1, #12]
 8003d34:	e026      	b.n	8003d84 <HAL_RCC_OscConfig+0x320>
 8003d36:	4b8e      	ldr	r3, [pc, #568]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	03db      	lsls	r3, r3, #15
 8003d44:	498a      	ldr	r1, [pc, #552]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60cb      	str	r3, [r1, #12]
 8003d4a:	e01b      	b.n	8003d84 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003d4c:	4b88      	ldr	r3, [pc, #544]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a87      	ldr	r2, [pc, #540]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003d58:	f7fd fe0a 	bl	8001970 <HAL_GetTick>
 8003d5c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003d5e:	e009      	b.n	8003d74 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d60:	f7fd fe06 	bl	8001970 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d902      	bls.n	8003d74 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	f000 bd48 	b.w	8004804 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003d74:	4b7e      	ldr	r3, [pc, #504]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ef      	bne.n	8003d60 <HAL_RCC_OscConfig+0x2fc>
 8003d80:	e000      	b.n	8003d84 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 8094 	beq.w	8003eba <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_OscConfig+0x340>
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	2b0c      	cmp	r3, #12
 8003d9c:	d110      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d10d      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da4:	4b72      	ldr	r3, [pc, #456]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8083 	beq.w	8003eb8 <HAL_RCC_OscConfig+0x454>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d17e      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f000 bd22 	b.w	8004804 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc8:	d106      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x374>
 8003dca:	4b69      	ldr	r3, [pc, #420]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a68      	ldr	r2, [pc, #416]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e041      	b.n	8003e5c <HAL_RCC_OscConfig+0x3f8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de0:	d112      	bne.n	8003e08 <HAL_RCC_OscConfig+0x3a4>
 8003de2:	4b63      	ldr	r3, [pc, #396]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a62      	ldr	r2, [pc, #392]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b60      	ldr	r3, [pc, #384]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a5f      	ldr	r2, [pc, #380]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003df4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b5d      	ldr	r3, [pc, #372]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a5c      	ldr	r2, [pc, #368]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e029      	b.n	8003e5c <HAL_RCC_OscConfig+0x3f8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003e10:	d112      	bne.n	8003e38 <HAL_RCC_OscConfig+0x3d4>
 8003e12:	4b57      	ldr	r3, [pc, #348]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a56      	ldr	r2, [pc, #344]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b54      	ldr	r3, [pc, #336]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a53      	ldr	r2, [pc, #332]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b51      	ldr	r3, [pc, #324]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a50      	ldr	r2, [pc, #320]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e011      	b.n	8003e5c <HAL_RCC_OscConfig+0x3f8>
 8003e38:	4b4d      	ldr	r3, [pc, #308]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a4c      	ldr	r2, [pc, #304]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	4b4a      	ldr	r3, [pc, #296]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a49      	ldr	r2, [pc, #292]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a46      	ldr	r2, [pc, #280]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003e56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d014      	beq.n	8003e8e <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8003e64:	f7fd fd84 	bl	8001970 <HAL_GetTick>
 8003e68:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e6a:	e009      	b.n	8003e80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e6c:	f7fd fd80 	bl	8001970 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b64      	cmp	r3, #100	; 0x64
 8003e78:	d902      	bls.n	8003e80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	f000 bcc2 	b.w	8004804 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e80:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ef      	beq.n	8003e6c <HAL_RCC_OscConfig+0x408>
 8003e8c:	e015      	b.n	8003eba <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003e8e:	f7fd fd6f 	bl	8001970 <HAL_GetTick>
 8003e92:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e94:	e009      	b.n	8003eaa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e96:	f7fd fd6b 	bl	8001970 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b64      	cmp	r3, #100	; 0x64
 8003ea2:	d902      	bls.n	8003eaa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	f000 bcad 	b.w	8004804 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1ef      	bne.n	8003e96 <HAL_RCC_OscConfig+0x432>
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d066      	beq.n	8003f94 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d005      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x474>
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	2b0c      	cmp	r3, #12
 8003ed0:	d11a      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d117      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ed8:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d006      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x48e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f000 bc89 	b.w	8004804 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003ef2:	4b1f      	ldr	r3, [pc, #124]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	041b      	lsls	r3, r3, #16
 8003f00:	491b      	ldr	r1, [pc, #108]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f06:	e045      	b.n	8003f94 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d024      	beq.n	8003f5a <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003f10:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f1c:	f7fd fd28 	bl	8001970 <HAL_GetTick>
 8003f20:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f22:	e009      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f24:	f7fd fd24 	bl	8001970 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d902      	bls.n	8003f38 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	f000 bc66 	b.w	8004804 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f38:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0ef      	beq.n	8003f24 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	4907      	ldr	r1, [pc, #28]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	610b      	str	r3, [r1, #16]
 8003f58:	e01c      	b.n	8003f94 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003f5a:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a04      	ldr	r2, [pc, #16]	; (8003f70 <HAL_RCC_OscConfig+0x50c>)
 8003f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f64:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f66:	f7fd fd03 	bl	8001970 <HAL_GetTick>
 8003f6a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f6c:	e00c      	b.n	8003f88 <HAL_RCC_OscConfig+0x524>
 8003f6e:	bf00      	nop
 8003f70:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f74:	f7fd fcfc 	bl	8001970 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d902      	bls.n	8003f88 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	f000 bc3e 	b.w	8004804 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f88:	4baf      	ldr	r3, [pc, #700]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ef      	bne.n	8003f74 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 80c7 	beq.w	8004130 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa8:	4ba7      	ldr	r3, [pc, #668]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8003faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d111      	bne.n	8003fda <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb6:	4ba4      	ldr	r3, [pc, #656]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8003fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fbc:	4aa2      	ldr	r2, [pc, #648]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8003fbe:	f043 0304 	orr.w	r3, r3, #4
 8003fc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003fc6:	4ba0      	ldr	r3, [pc, #640]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8003fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003fda:	4b9c      	ldr	r3, [pc, #624]	; (800424c <HAL_RCC_OscConfig+0x7e8>)
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d118      	bne.n	8004018 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003fe6:	4b99      	ldr	r3, [pc, #612]	; (800424c <HAL_RCC_OscConfig+0x7e8>)
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	4a98      	ldr	r2, [pc, #608]	; (800424c <HAL_RCC_OscConfig+0x7e8>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff2:	f7fd fcbd 	bl	8001970 <HAL_GetTick>
 8003ff6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffa:	f7fd fcb9 	bl	8001970 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e3fb      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800400c:	4b8f      	ldr	r3, [pc, #572]	; (800424c <HAL_RCC_OscConfig+0x7e8>)
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d05f      	beq.n	80040e0 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004020:	4b89      	ldr	r3, [pc, #548]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8004022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004026:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699a      	ldr	r2, [r3, #24]
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004032:	429a      	cmp	r2, r3
 8004034:	d037      	beq.n	80040a6 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d006      	beq.n	800404e <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e3da      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01b      	beq.n	8004090 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8004058:	4b7b      	ldr	r3, [pc, #492]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 800405a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800405e:	4a7a      	ldr	r2, [pc, #488]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8004060:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004064:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8004068:	f7fd fc82 	bl	8001970 <HAL_GetTick>
 800406c:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004070:	f7fd fc7e 	bl	8001970 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e3c0      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004082:	4b71      	ldr	r3, [pc, #452]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8004084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ef      	bne.n	8004070 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004090:	4b6d      	ldr	r3, [pc, #436]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8004092:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004096:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	496a      	ldr	r1, [pc, #424]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80040a6:	4b68      	ldr	r3, [pc, #416]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 80040a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040ac:	4a66      	ldr	r2, [pc, #408]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 80040ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80040b6:	f7fd fc5b 	bl	8001970 <HAL_GetTick>
 80040ba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040be:	f7fd fc57 	bl	8001970 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e399      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80040d0:	4b5d      	ldr	r3, [pc, #372]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 80040d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0ef      	beq.n	80040be <HAL_RCC_OscConfig+0x65a>
 80040de:	e01b      	b.n	8004118 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80040e0:	4b59      	ldr	r3, [pc, #356]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 80040e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040e6:	4a58      	ldr	r2, [pc, #352]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 80040e8:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80040ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80040f0:	f7fd fc3e 	bl	8001970 <HAL_GetTick>
 80040f4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f8:	f7fd fc3a 	bl	8001970 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e37c      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800410a:	4b4f      	ldr	r3, [pc, #316]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 800410c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1ef      	bne.n	80040f8 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004118:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800411c:	2b01      	cmp	r3, #1
 800411e:	d107      	bne.n	8004130 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004120:	4b49      	ldr	r3, [pc, #292]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8004122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004126:	4a48      	ldr	r2, [pc, #288]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8004128:	f023 0304 	bic.w	r3, r3, #4
 800412c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 8112 	beq.w	8004362 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800413e:	2300      	movs	r3, #0
 8004140:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004144:	4b40      	ldr	r3, [pc, #256]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8004146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d111      	bne.n	8004176 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004152:	4b3d      	ldr	r3, [pc, #244]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8004154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004158:	4a3b      	ldr	r2, [pc, #236]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 800415a:	f043 0304 	orr.w	r3, r3, #4
 800415e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004162:	4b39      	ldr	r3, [pc, #228]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8004164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004170:	2301      	movs	r3, #1
 8004172:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004176:	4b35      	ldr	r3, [pc, #212]	; (800424c <HAL_RCC_OscConfig+0x7e8>)
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d118      	bne.n	80041b4 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004182:	4b32      	ldr	r3, [pc, #200]	; (800424c <HAL_RCC_OscConfig+0x7e8>)
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	4a31      	ldr	r2, [pc, #196]	; (800424c <HAL_RCC_OscConfig+0x7e8>)
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418e:	f7fd fbef 	bl	8001970 <HAL_GetTick>
 8004192:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004196:	f7fd fbeb 	bl	8001970 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e32d      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80041a8:	4b28      	ldr	r3, [pc, #160]	; (800424c <HAL_RCC_OscConfig+0x7e8>)
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01f      	beq.n	8004200 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d010      	beq.n	80041ee <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80041cc:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 80041ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041d2:	4a1d      	ldr	r2, [pc, #116]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 80041d4:	f043 0304 	orr.w	r3, r3, #4
 80041d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80041dc:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 80041de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041e2:	4a19      	ldr	r2, [pc, #100]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041ec:	e018      	b.n	8004220 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80041ee:	4b16      	ldr	r3, [pc, #88]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 80041f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041f4:	4a14      	ldr	r2, [pc, #80]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041fe:	e00f      	b.n	8004220 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004200:	4b11      	ldr	r3, [pc, #68]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8004202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004206:	4a10      	ldr	r2, [pc, #64]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004210:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8004212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004216:	4a0c      	ldr	r2, [pc, #48]	; (8004248 <HAL_RCC_OscConfig+0x7e4>)
 8004218:	f023 0304 	bic.w	r3, r3, #4
 800421c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d058      	beq.n	80042da <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8004228:	f7fd fba2 	bl	8001970 <HAL_GetTick>
 800422c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800422e:	e00f      	b.n	8004250 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004230:	f7fd fb9e 	bl	8001970 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	; 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d906      	bls.n	8004250 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e2de      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
 8004246:	bf00      	nop
 8004248:	46020c00 	.word	0x46020c00
 800424c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004250:	4b9c      	ldr	r3, [pc, #624]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 8004252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0e8      	beq.n	8004230 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01b      	beq.n	80042a2 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800426a:	4b96      	ldr	r3, [pc, #600]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 800426c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004270:	4a94      	ldr	r2, [pc, #592]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 8004272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004276:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800427a:	e00a      	b.n	8004292 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427c:	f7fd fb78 	bl	8001970 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	; 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e2b8      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004292:	4b8c      	ldr	r3, [pc, #560]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 8004294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0ed      	beq.n	800427c <HAL_RCC_OscConfig+0x818>
 80042a0:	e053      	b.n	800434a <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80042a2:	4b88      	ldr	r3, [pc, #544]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 80042a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042a8:	4a86      	ldr	r2, [pc, #536]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 80042aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b4:	f7fd fb5c 	bl	8001970 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e29c      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80042ca:	4b7e      	ldr	r3, [pc, #504]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 80042cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ed      	bne.n	80042b4 <HAL_RCC_OscConfig+0x850>
 80042d8:	e037      	b.n	800434a <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80042da:	f7fd fb49 	bl	8001970 <HAL_GetTick>
 80042de:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042e0:	e00a      	b.n	80042f8 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e2:	f7fd fb45 	bl	8001970 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e285      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042f8:	4b72      	ldr	r3, [pc, #456]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 80042fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1ed      	bne.n	80042e2 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004306:	4b6f      	ldr	r3, [pc, #444]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 8004308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800430c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01a      	beq.n	800434a <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004314:	4b6b      	ldr	r3, [pc, #428]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 8004316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800431a:	4a6a      	ldr	r2, [pc, #424]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 800431c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004320:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004324:	e00a      	b.n	800433c <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004326:	f7fd fb23 	bl	8001970 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	f241 3288 	movw	r2, #5000	; 0x1388
 8004334:	4293      	cmp	r3, r2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e263      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800433c:	4b61      	ldr	r3, [pc, #388]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 800433e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1ed      	bne.n	8004326 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800434a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800434e:	2b01      	cmp	r3, #1
 8004350:	d107      	bne.n	8004362 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004352:	4b5c      	ldr	r3, [pc, #368]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 8004354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004358:	4a5a      	ldr	r2, [pc, #360]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 800435a:	f023 0304 	bic.w	r3, r3, #4
 800435e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d036      	beq.n	80043dc <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d019      	beq.n	80043aa <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004376:	4b53      	ldr	r3, [pc, #332]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a52      	ldr	r2, [pc, #328]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 800437c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004380:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004382:	f7fd faf5 	bl	8001970 <HAL_GetTick>
 8004386:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800438a:	f7fd faf1 	bl	8001970 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e233      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800439c:	4b49      	ldr	r3, [pc, #292]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x926>
 80043a8:	e018      	b.n	80043dc <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80043aa:	4b46      	ldr	r3, [pc, #280]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a45      	ldr	r2, [pc, #276]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 80043b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80043b6:	f7fd fadb 	bl	8001970 <HAL_GetTick>
 80043ba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043be:	f7fd fad7 	bl	8001970 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e219      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80043d0:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f0      	bne.n	80043be <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d036      	beq.n	8004456 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d019      	beq.n	8004424 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80043f0:	4b34      	ldr	r3, [pc, #208]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a33      	ldr	r2, [pc, #204]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 80043f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80043fc:	f7fd fab8 	bl	8001970 <HAL_GetTick>
 8004400:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004404:	f7fd fab4 	bl	8001970 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e1f6      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004416:	4b2b      	ldr	r3, [pc, #172]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x9a0>
 8004422:	e018      	b.n	8004456 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004424:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a26      	ldr	r2, [pc, #152]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 800442a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800442e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004430:	f7fd fa9e 	bl	8001970 <HAL_GetTick>
 8004434:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004438:	f7fd fa9a 	bl	8001970 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e1dc      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800444a:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d07f      	beq.n	8004562 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004466:	2b00      	cmp	r3, #0
 8004468:	d062      	beq.n	8004530 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 8004470:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004474:	6093      	str	r3, [r2, #8]
 8004476:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	4910      	ldr	r1, [pc, #64]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 8004484:	4313      	orrs	r3, r2
 8004486:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004490:	d309      	bcc.n	80044a6 <HAL_RCC_OscConfig+0xa42>
 8004492:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f023 021f 	bic.w	r2, r3, #31
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	4909      	ldr	r1, [pc, #36]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60cb      	str	r3, [r1, #12]
 80044a4:	e02a      	b.n	80044fc <HAL_RCC_OscConfig+0xa98>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	da0c      	bge.n	80044c8 <HAL_RCC_OscConfig+0xa64>
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	015b      	lsls	r3, r3, #5
 80044bc:	4901      	ldr	r1, [pc, #4]	; (80044c4 <HAL_RCC_OscConfig+0xa60>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	60cb      	str	r3, [r1, #12]
 80044c2:	e01b      	b.n	80044fc <HAL_RCC_OscConfig+0xa98>
 80044c4:	46020c00 	.word	0x46020c00
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d0:	d30a      	bcc.n	80044e8 <HAL_RCC_OscConfig+0xa84>
 80044d2:	4ba5      	ldr	r3, [pc, #660]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	029b      	lsls	r3, r3, #10
 80044e0:	49a1      	ldr	r1, [pc, #644]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60cb      	str	r3, [r1, #12]
 80044e6:	e009      	b.n	80044fc <HAL_RCC_OscConfig+0xa98>
 80044e8:	4b9f      	ldr	r3, [pc, #636]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	03db      	lsls	r3, r3, #15
 80044f6:	499c      	ldr	r1, [pc, #624]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80044fc:	4b9a      	ldr	r3, [pc, #616]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a99      	ldr	r2, [pc, #612]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004502:	f043 0310 	orr.w	r3, r3, #16
 8004506:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004508:	f7fd fa32 	bl	8001970 <HAL_GetTick>
 800450c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004510:	f7fd fa2e 	bl	8001970 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e170      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004522:	4b91      	ldr	r3, [pc, #580]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0xaac>
 800452e:	e018      	b.n	8004562 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004530:	4b8d      	ldr	r3, [pc, #564]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a8c      	ldr	r2, [pc, #560]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004536:	f023 0310 	bic.w	r3, r3, #16
 800453a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800453c:	f7fd fa18 	bl	8001970 <HAL_GetTick>
 8004540:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004544:	f7fd fa14 	bl	8001970 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e156      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004556:	4b84      	ldr	r3, [pc, #528]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 814b 	beq.w	8004802 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800456c:	2300      	movs	r3, #0
 800456e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004572:	4b7d      	ldr	r3, [pc, #500]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b0c      	cmp	r3, #12
 800457c:	f000 80fa 	beq.w	8004774 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	2b02      	cmp	r3, #2
 8004586:	f040 80cc 	bne.w	8004722 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800458a:	4b77      	ldr	r3, [pc, #476]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a76      	ldr	r2, [pc, #472]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004590:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004594:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004596:	f7fd f9eb 	bl	8001970 <HAL_GetTick>
 800459a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459e:	f7fd f9e7 	bl	8001970 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e129      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80045b0:	4b6d      	ldr	r3, [pc, #436]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045bc:	4b6a      	ldr	r3, [pc, #424]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80045be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d111      	bne.n	80045ee <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80045ca:	4b67      	ldr	r3, [pc, #412]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80045cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d0:	4a65      	ldr	r2, [pc, #404]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80045d2:	f043 0304 	orr.w	r3, r3, #4
 80045d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80045da:	4b63      	ldr	r3, [pc, #396]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80045dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80045ee:	4b5f      	ldr	r3, [pc, #380]	; (800476c <HAL_RCC_OscConfig+0xd08>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045fa:	d102      	bne.n	8004602 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80045fc:	2301      	movs	r3, #1
 80045fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004602:	4b5a      	ldr	r3, [pc, #360]	; (800476c <HAL_RCC_OscConfig+0xd08>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	4a59      	ldr	r2, [pc, #356]	; (800476c <HAL_RCC_OscConfig+0xd08>)
 8004608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800460e:	4b56      	ldr	r3, [pc, #344]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004616:	f023 0303 	bic.w	r3, r3, #3
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004622:	3a01      	subs	r2, #1
 8004624:	0212      	lsls	r2, r2, #8
 8004626:	4311      	orrs	r1, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800462c:	430a      	orrs	r2, r1
 800462e:	494e      	ldr	r1, [pc, #312]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004630:	4313      	orrs	r3, r2
 8004632:	628b      	str	r3, [r1, #40]	; 0x28
 8004634:	4b4c      	ldr	r3, [pc, #304]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004638:	4b4d      	ldr	r3, [pc, #308]	; (8004770 <HAL_RCC_OscConfig+0xd0c>)
 800463a:	4013      	ands	r3, r2
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004640:	3a01      	subs	r2, #1
 8004642:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800464a:	3a01      	subs	r2, #1
 800464c:	0252      	lsls	r2, r2, #9
 800464e:	b292      	uxth	r2, r2
 8004650:	4311      	orrs	r1, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004656:	3a01      	subs	r2, #1
 8004658:	0412      	lsls	r2, r2, #16
 800465a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800465e:	4311      	orrs	r1, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004664:	3a01      	subs	r2, #1
 8004666:	0612      	lsls	r2, r2, #24
 8004668:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800466c:	430a      	orrs	r2, r1
 800466e:	493e      	ldr	r1, [pc, #248]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004670:	4313      	orrs	r3, r2
 8004672:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004674:	4b3c      	ldr	r3, [pc, #240]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	4a3b      	ldr	r2, [pc, #236]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 800467a:	f023 0310 	bic.w	r3, r3, #16
 800467e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004680:	4b39      	ldr	r3, [pc, #228]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004688:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004690:	00d2      	lsls	r2, r2, #3
 8004692:	4935      	ldr	r1, [pc, #212]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004694:	4313      	orrs	r3, r2
 8004696:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004698:	4b33      	ldr	r3, [pc, #204]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	4a32      	ldr	r2, [pc, #200]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 800469e:	f043 0310 	orr.w	r3, r3, #16
 80046a2:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80046a4:	4b30      	ldr	r3, [pc, #192]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	f023 020c 	bic.w	r2, r3, #12
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	492d      	ldr	r1, [pc, #180]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80046b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d105      	bne.n	80046ca <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80046be:	4b2b      	ldr	r3, [pc, #172]	; (800476c <HAL_RCC_OscConfig+0xd08>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4a2a      	ldr	r2, [pc, #168]	; (800476c <HAL_RCC_OscConfig+0xd08>)
 80046c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c8:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80046ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d107      	bne.n	80046e2 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80046d2:	4b25      	ldr	r3, [pc, #148]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80046d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d8:	4a23      	ldr	r2, [pc, #140]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80046da:	f023 0304 	bic.w	r3, r3, #4
 80046de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80046e2:	4b21      	ldr	r3, [pc, #132]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	4a20      	ldr	r2, [pc, #128]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80046e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ec:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80046ee:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 80046f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80046fa:	f7fd f939 	bl	8001970 <HAL_GetTick>
 80046fe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004702:	f7fd f935 	bl	8001970 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e077      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0xc9e>
 8004720:	e06f      	b.n	8004802 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004722:	4b11      	ldr	r3, [pc, #68]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a10      	ldr	r2, [pc, #64]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004728:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800472c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800472e:	f7fd f91f 	bl	8001970 <HAL_GetTick>
 8004732:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004736:	f7fd f91b 	bl	8001970 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e05d      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004748:	4b07      	ldr	r3, [pc, #28]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f0      	bne.n	8004736 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004754:	4b04      	ldr	r3, [pc, #16]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	4a03      	ldr	r2, [pc, #12]	; (8004768 <HAL_RCC_OscConfig+0xd04>)
 800475a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800475e:	f023 0303 	bic.w	r3, r3, #3
 8004762:	6293      	str	r3, [r2, #40]	; 0x28
 8004764:	e04d      	b.n	8004802 <HAL_RCC_OscConfig+0xd9e>
 8004766:	bf00      	nop
 8004768:	46020c00 	.word	0x46020c00
 800476c:	46020800 	.word	0x46020800
 8004770:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004774:	4b25      	ldr	r3, [pc, #148]	; (800480c <HAL_RCC_OscConfig+0xda8>)
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <HAL_RCC_OscConfig+0xda8>)
 800477c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	2b01      	cmp	r3, #1
 8004786:	d03a      	beq.n	80047fe <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f003 0203 	and.w	r2, r3, #3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d133      	bne.n	80047fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d12a      	bne.n	80047fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	0b1b      	lsrs	r3, r3, #12
 80047ac:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d122      	bne.n	80047fe <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d11a      	bne.n	80047fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	0a5b      	lsrs	r3, r3, #9
 80047cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d111      	bne.n	80047fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d108      	bne.n	80047fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	0e1b      	lsrs	r3, r3, #24
 80047f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d001      	beq.n	8004802 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3738      	adds	r7, #56	; 0x38
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	46020c00 	.word	0x46020c00

08004810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e1d9      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004824:	4b9b      	ldr	r3, [pc, #620]	; (8004a94 <HAL_RCC_ClockConfig+0x284>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d910      	bls.n	8004854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	4b98      	ldr	r3, [pc, #608]	; (8004a94 <HAL_RCC_ClockConfig+0x284>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 020f 	bic.w	r2, r3, #15
 800483a:	4996      	ldr	r1, [pc, #600]	; (8004a94 <HAL_RCC_ClockConfig+0x284>)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	4b94      	ldr	r3, [pc, #592]	; (8004a94 <HAL_RCC_ClockConfig+0x284>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e1c1      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	d010      	beq.n	8004882 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	695a      	ldr	r2, [r3, #20]
 8004864:	4b8c      	ldr	r3, [pc, #560]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800486c:	429a      	cmp	r2, r3
 800486e:	d908      	bls.n	8004882 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004870:	4b89      	ldr	r3, [pc, #548]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	4986      	ldr	r1, [pc, #536]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 800487e:	4313      	orrs	r3, r2
 8004880:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d012      	beq.n	80048b4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	4b81      	ldr	r3, [pc, #516]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	091b      	lsrs	r3, r3, #4
 8004898:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800489c:	429a      	cmp	r2, r3
 800489e:	d909      	bls.n	80048b4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80048a0:	4b7d      	ldr	r3, [pc, #500]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	497a      	ldr	r1, [pc, #488]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d010      	beq.n	80048e2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	4b74      	ldr	r3, [pc, #464]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d908      	bls.n	80048e2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80048d0:	4b71      	ldr	r3, [pc, #452]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	496e      	ldr	r1, [pc, #440]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d010      	beq.n	8004910 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	4b69      	ldr	r3, [pc, #420]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d908      	bls.n	8004910 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80048fe:	4b66      	ldr	r3, [pc, #408]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f023 020f 	bic.w	r2, r3, #15
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	4963      	ldr	r1, [pc, #396]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 800490c:	4313      	orrs	r3, r2
 800490e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80d2 	beq.w	8004ac2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800491e:	2300      	movs	r3, #0
 8004920:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b03      	cmp	r3, #3
 8004928:	d143      	bne.n	80049b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492a:	4b5b      	ldr	r3, [pc, #364]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 800492c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d110      	bne.n	800495a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004938:	4b57      	ldr	r3, [pc, #348]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 800493a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493e:	4a56      	ldr	r2, [pc, #344]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 8004940:	f043 0304 	orr.w	r3, r3, #4
 8004944:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004948:	4b53      	ldr	r3, [pc, #332]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 800494a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800495a:	f7fd f809 	bl	8001970 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004960:	4b4e      	ldr	r3, [pc, #312]	; (8004a9c <HAL_RCC_ClockConfig+0x28c>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00f      	beq.n	800498c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800496c:	e008      	b.n	8004980 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800496e:	f7fc ffff 	bl	8001970 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e12b      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004980:	4b46      	ldr	r3, [pc, #280]	; (8004a9c <HAL_RCC_ClockConfig+0x28c>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800498c:	7dfb      	ldrb	r3, [r7, #23]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d107      	bne.n	80049a2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004992:	4b41      	ldr	r3, [pc, #260]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 8004994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004998:	4a3f      	ldr	r2, [pc, #252]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 800499a:	f023 0304 	bic.w	r3, r3, #4
 800499e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80049a2:	4b3d      	ldr	r3, [pc, #244]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d121      	bne.n	80049f2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e112      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ba:	4b37      	ldr	r3, [pc, #220]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d115      	bne.n	80049f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e106      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80049d2:	4b31      	ldr	r3, [pc, #196]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d109      	bne.n	80049f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e0fa      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049e2:	4b2d      	ldr	r3, [pc, #180]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0f2      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80049f2:	4b29      	ldr	r3, [pc, #164]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f023 0203 	bic.w	r2, r3, #3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	4926      	ldr	r1, [pc, #152]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004a04:	f7fc ffb4 	bl	8001970 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d112      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a14:	f7fc ffac 	bl	8001970 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e0d6      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a2a:	4b1b      	ldr	r3, [pc, #108]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d1ee      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x204>
 8004a36:	e044      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d112      	bne.n	8004a66 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a42:	f7fc ff95 	bl	8001970 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e0bf      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a58:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	f003 030c 	and.w	r3, r3, #12
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d1ee      	bne.n	8004a42 <HAL_RCC_ClockConfig+0x232>
 8004a64:	e02d      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d123      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a6e:	e00a      	b.n	8004a86 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a70:	f7fc ff7e 	bl	8001970 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e0a8      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a86:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <HAL_RCC_ClockConfig+0x288>)
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1ee      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x260>
 8004a92:	e016      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x2b2>
 8004a94:	40022000 	.word	0x40022000
 8004a98:	46020c00 	.word	0x46020c00
 8004a9c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa0:	f7fc ff66 	bl	8001970 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e090      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ab6:	4b4a      	ldr	r3, [pc, #296]	; (8004be0 <HAL_RCC_ClockConfig+0x3d0>)
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d1ee      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d010      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	4b43      	ldr	r3, [pc, #268]	; (8004be0 <HAL_RCC_ClockConfig+0x3d0>)
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d208      	bcs.n	8004af0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004ade:	4b40      	ldr	r3, [pc, #256]	; (8004be0 <HAL_RCC_ClockConfig+0x3d0>)
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f023 020f 	bic.w	r2, r3, #15
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	493d      	ldr	r1, [pc, #244]	; (8004be0 <HAL_RCC_ClockConfig+0x3d0>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004af0:	4b3c      	ldr	r3, [pc, #240]	; (8004be4 <HAL_RCC_ClockConfig+0x3d4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d210      	bcs.n	8004b20 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afe:	4b39      	ldr	r3, [pc, #228]	; (8004be4 <HAL_RCC_ClockConfig+0x3d4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 020f 	bic.w	r2, r3, #15
 8004b06:	4937      	ldr	r1, [pc, #220]	; (8004be4 <HAL_RCC_ClockConfig+0x3d4>)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0e:	4b35      	ldr	r3, [pc, #212]	; (8004be4 <HAL_RCC_ClockConfig+0x3d4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e05b      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d010      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	4b2b      	ldr	r3, [pc, #172]	; (8004be0 <HAL_RCC_ClockConfig+0x3d0>)
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d208      	bcs.n	8004b4e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004b3c:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <HAL_RCC_ClockConfig+0x3d0>)
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4925      	ldr	r1, [pc, #148]	; (8004be0 <HAL_RCC_ClockConfig+0x3d0>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d012      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <HAL_RCC_ClockConfig+0x3d0>)
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	091b      	lsrs	r3, r3, #4
 8004b64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d209      	bcs.n	8004b80 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004b6c:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <HAL_RCC_ClockConfig+0x3d0>)
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	4919      	ldr	r1, [pc, #100]	; (8004be0 <HAL_RCC_ClockConfig+0x3d0>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d010      	beq.n	8004bae <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695a      	ldr	r2, [r3, #20]
 8004b90:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <HAL_RCC_ClockConfig+0x3d0>)
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d208      	bcs.n	8004bae <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004b9c:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <HAL_RCC_ClockConfig+0x3d0>)
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	490d      	ldr	r1, [pc, #52]	; (8004be0 <HAL_RCC_ClockConfig+0x3d0>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004bae:	f000 f821 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <HAL_RCC_ClockConfig+0x3d0>)
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	490a      	ldr	r1, [pc, #40]	; (8004be8 <HAL_RCC_ClockConfig+0x3d8>)
 8004bbe:	5ccb      	ldrb	r3, [r1, r3]
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc4:	4a09      	ldr	r2, [pc, #36]	; (8004bec <HAL_RCC_ClockConfig+0x3dc>)
 8004bc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_RCC_ClockConfig+0x3e0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fc fe85 	bl	80018dc <HAL_InitTick>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	73fb      	strb	r3, [r7, #15]

  return status;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	46020c00 	.word	0x46020c00
 8004be4:	40022000 	.word	0x40022000
 8004be8:	080094b8 	.word	0x080094b8
 8004bec:	20000000 	.word	0x20000000
 8004bf0:	20000004 	.word	0x20000004

08004bf4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b08b      	sub	sp, #44	; 0x2c
 8004bf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c02:	4b7b      	ldr	r3, [pc, #492]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c0c:	4b78      	ldr	r3, [pc, #480]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0x34>
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b0c      	cmp	r3, #12
 8004c20:	d121      	bne.n	8004c66 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d11e      	bne.n	8004c66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004c28:	4b71      	ldr	r3, [pc, #452]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d107      	bne.n	8004c44 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004c34:	4b6e      	ldr	r3, [pc, #440]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c3a:	0b1b      	lsrs	r3, r3, #12
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
 8004c42:	e005      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004c44:	4b6a      	ldr	r3, [pc, #424]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	0f1b      	lsrs	r3, r3, #28
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c50:	4a68      	ldr	r2, [pc, #416]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d110      	bne.n	8004c82 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c64:	e00d      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c66:	4b62      	ldr	r3, [pc, #392]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d102      	bne.n	8004c78 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c72:	4b61      	ldr	r3, [pc, #388]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	e004      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c7e:	4b5e      	ldr	r3, [pc, #376]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c80:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b0c      	cmp	r3, #12
 8004c86:	f040 80ac 	bne.w	8004de2 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004c8a:	4b59      	ldr	r3, [pc, #356]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004c94:	4b56      	ldr	r3, [pc, #344]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	0a1b      	lsrs	r3, r3, #8
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004ca2:	4b53      	ldr	r3, [pc, #332]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004cae:	4b50      	ldr	r3, [pc, #320]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	08db      	lsrs	r3, r3, #3
 8004cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8086 	beq.w	8004dde <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d003      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0xec>
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d022      	beq.n	8004d24 <HAL_RCC_GetSysClockFreq+0x130>
 8004cde:	e043      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cea:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004dfc <HAL_RCC_GetSysClockFreq+0x208>
 8004cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cf2:	4b3f      	ldr	r3, [pc, #252]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004d02:	ed97 6a01 	vldr	s12, [r7, #4]
 8004d06:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004e00 <HAL_RCC_GetSysClockFreq+0x20c>
 8004d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004d22:	e046      	b.n	8004db2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	eddf 6a33 	vldr	s13, [pc, #204]	; 8004dfc <HAL_RCC_GetSysClockFreq+0x208>
 8004d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d36:	4b2e      	ldr	r3, [pc, #184]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004d46:	ed97 6a01 	vldr	s12, [r7, #4]
 8004d4a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004e00 <HAL_RCC_GetSysClockFreq+0x20c>
 8004d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d62:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004d66:	e024      	b.n	8004db2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	ee07 3a90 	vmov	s15, r3
 8004d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d80:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d88:	ee07 3a90 	vmov	s15, r3
 8004d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004d90:	ed97 6a01 	vldr	s12, [r7, #4]
 8004d94:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8004e00 <HAL_RCC_GetSysClockFreq+0x20c>
 8004d98:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004da0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004da4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dac:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004db0:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004db2:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db6:	0e1b      	lsrs	r3, r3, #24
 8004db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd6:	ee17 3a90 	vmov	r3, s15
 8004dda:	623b      	str	r3, [r7, #32]
 8004ddc:	e001      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8004de2:	6a3b      	ldr	r3, [r7, #32]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	372c      	adds	r7, #44	; 0x2c
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	46020c00 	.word	0x46020c00
 8004df4:	080094d0 	.word	0x080094d0
 8004df8:	00f42400 	.word	0x00f42400
 8004dfc:	4b742400 	.word	0x4b742400
 8004e00:	46000000 	.word	0x46000000

08004e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004e08:	f7ff fef4 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <HAL_RCC_GetHCLKFreq+0x28>)
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	4906      	ldr	r1, [pc, #24]	; (8004e30 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004e18:	5ccb      	ldrb	r3, [r1, r3]
 8004e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1e:	4a05      	ldr	r2, [pc, #20]	; (8004e34 <HAL_RCC_GetHCLKFreq+0x30>)
 8004e20:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004e22:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <HAL_RCC_GetHCLKFreq+0x30>)
 8004e24:	681b      	ldr	r3, [r3, #0]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	46020c00 	.word	0x46020c00
 8004e30:	080094b8 	.word	0x080094b8
 8004e34:	20000000 	.word	0x20000000

08004e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004e3c:	f7ff ffe2 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8004e40:	4602      	mov	r2, r0
 8004e42:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	4903      	ldr	r1, [pc, #12]	; (8004e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e4e:	5ccb      	ldrb	r3, [r1, r3]
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	46020c00 	.word	0x46020c00
 8004e5c:	080094c8 	.word	0x080094c8

08004e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004e64:	f7ff ffce 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	0a1b      	lsrs	r3, r3, #8
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4903      	ldr	r1, [pc, #12]	; (8004e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e76:	5ccb      	ldrb	r3, [r1, r3]
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	46020c00 	.word	0x46020c00
 8004e84:	080094c8 	.word	0x080094c8

08004e88 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004e8c:	f7ff ffba 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	091b      	lsrs	r3, r3, #4
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	4903      	ldr	r1, [pc, #12]	; (8004eac <HAL_RCC_GetPCLK3Freq+0x24>)
 8004e9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	46020c00 	.word	0x46020c00
 8004eac:	080094c8 	.word	0x080094c8

08004eb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004eb8:	4b3e      	ldr	r3, [pc, #248]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ec6:	f7fe fd4f 	bl	8003968 <HAL_PWREx_GetVoltageRange>
 8004eca:	6178      	str	r0, [r7, #20]
 8004ecc:	e019      	b.n	8004f02 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ece:	4b39      	ldr	r3, [pc, #228]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed4:	4a37      	ldr	r2, [pc, #220]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004ed6:	f043 0304 	orr.w	r3, r3, #4
 8004eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004ede:	4b35      	ldr	r3, [pc, #212]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004eec:	f7fe fd3c 	bl	8003968 <HAL_PWREx_GetVoltageRange>
 8004ef0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ef2:	4b30      	ldr	r3, [pc, #192]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef8:	4a2e      	ldr	r2, [pc, #184]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004efa:	f023 0304 	bic.w	r3, r3, #4
 8004efe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f08:	d003      	beq.n	8004f12 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f10:	d109      	bne.n	8004f26 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f18:	d202      	bcs.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004f1e:	e033      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004f20:	2300      	movs	r3, #0
 8004f22:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004f24:	e030      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f2c:	d208      	bcs.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f34:	d102      	bne.n	8004f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004f36:	2303      	movs	r3, #3
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	e025      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e035      	b.n	8004fac <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f46:	d90f      	bls.n	8004f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d109      	bne.n	8004f62 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f54:	d902      	bls.n	8004f5c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004f56:	2300      	movs	r3, #0
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	e015      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	e012      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	e00f      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f6e:	d109      	bne.n	8004f84 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f76:	d102      	bne.n	8004f7e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004f78:	2301      	movs	r3, #1
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	e004      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004f7e:	2302      	movs	r3, #2
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	e001      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004f84:	2301      	movs	r3, #1
 8004f86:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f88:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f023 020f 	bic.w	r2, r3, #15
 8004f90:	4909      	ldr	r1, [pc, #36]	; (8004fb8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004f98:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d001      	beq.n	8004faa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	46020c00 	.word	0x46020c00
 8004fb8:	40022000 	.word	0x40022000

08004fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc0:	b0ba      	sub	sp, #232	; 0xe8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	f002 0401 	and.w	r4, r2, #1
 8004fe0:	2500      	movs	r5, #0
 8004fe2:	ea54 0305 	orrs.w	r3, r4, r5
 8004fe6:	d00b      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004fe8:	4bcb      	ldr	r3, [pc, #812]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fee:	f023 0103 	bic.w	r1, r3, #3
 8004ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff8:	4ac7      	ldr	r2, [pc, #796]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ffa:	430b      	orrs	r3, r1
 8004ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f002 0802 	and.w	r8, r2, #2
 800500c:	f04f 0900 	mov.w	r9, #0
 8005010:	ea58 0309 	orrs.w	r3, r8, r9
 8005014:	d00b      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005016:	4bc0      	ldr	r3, [pc, #768]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800501c:	f023 010c 	bic.w	r1, r3, #12
 8005020:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005026:	4abc      	ldr	r2, [pc, #752]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005028:	430b      	orrs	r3, r1
 800502a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800502e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	f002 0a04 	and.w	sl, r2, #4
 800503a:	f04f 0b00 	mov.w	fp, #0
 800503e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005042:	d00b      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005044:	4bb4      	ldr	r3, [pc, #720]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800504a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800504e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005054:	4ab0      	ldr	r2, [pc, #704]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005056:	430b      	orrs	r3, r1
 8005058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800505c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f002 0308 	and.w	r3, r2, #8
 8005068:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800506c:	2300      	movs	r3, #0
 800506e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005072:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005076:	460b      	mov	r3, r1
 8005078:	4313      	orrs	r3, r2
 800507a:	d00b      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800507c:	4ba6      	ldr	r3, [pc, #664]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800507e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005082:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800508a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508c:	4aa2      	ldr	r2, [pc, #648]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800508e:	430b      	orrs	r3, r1
 8005090:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005094:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f002 0310 	and.w	r3, r2, #16
 80050a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050a4:	2300      	movs	r3, #0
 80050a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4313      	orrs	r3, r2
 80050b2:	d00b      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80050b4:	4b98      	ldr	r3, [pc, #608]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c4:	4a94      	ldr	r2, [pc, #592]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050c6:	430b      	orrs	r3, r1
 80050c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	f002 0320 	and.w	r3, r2, #32
 80050d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050dc:	2300      	movs	r3, #0
 80050de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80050e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80050e6:	460b      	mov	r3, r1
 80050e8:	4313      	orrs	r3, r2
 80050ea:	d00b      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80050ec:	4b8a      	ldr	r3, [pc, #552]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050f2:	f023 0107 	bic.w	r1, r3, #7
 80050f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050fc:	4a86      	ldr	r2, [pc, #536]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050fe:	430b      	orrs	r3, r1
 8005100:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005104:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005110:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005114:	2300      	movs	r3, #0
 8005116:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800511a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800511e:	460b      	mov	r3, r1
 8005120:	4313      	orrs	r3, r2
 8005122:	d00b      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005124:	4b7c      	ldr	r3, [pc, #496]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800512a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800512e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005134:	4a78      	ldr	r2, [pc, #480]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005136:	430b      	orrs	r3, r1
 8005138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800513c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005144:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800514c:	2300      	movs	r3, #0
 800514e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005152:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005156:	460b      	mov	r3, r1
 8005158:	4313      	orrs	r3, r2
 800515a:	d00b      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800515c:	4b6e      	ldr	r3, [pc, #440]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800515e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800516a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516c:	4a6a      	ldr	r2, [pc, #424]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800516e:	430b      	orrs	r3, r1
 8005170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005174:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005180:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005184:	2300      	movs	r3, #0
 8005186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800518a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800518e:	460b      	mov	r3, r1
 8005190:	4313      	orrs	r3, r2
 8005192:	d00b      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005194:	4b60      	ldr	r3, [pc, #384]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005196:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800519a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800519e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a4:	4a5c      	ldr	r2, [pc, #368]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051a6:	430b      	orrs	r3, r1
 80051a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80051b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051bc:	2300      	movs	r3, #0
 80051be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80051c6:	460b      	mov	r3, r1
 80051c8:	4313      	orrs	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80051cc:	4b52      	ldr	r3, [pc, #328]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051d2:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80051d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051dc:	4a4e      	ldr	r2, [pc, #312]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051de:	430b      	orrs	r3, r1
 80051e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80051f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051f4:	2300      	movs	r3, #0
 80051f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80051fe:	460b      	mov	r3, r1
 8005200:	4313      	orrs	r3, r2
 8005202:	d00b      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005204:	4b44      	ldr	r3, [pc, #272]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005206:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800520a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800520e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005214:	4a40      	ldr	r2, [pc, #256]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005216:	430b      	orrs	r3, r1
 8005218:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800521c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800522c:	2300      	movs	r3, #0
 800522e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005232:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005236:	460b      	mov	r3, r1
 8005238:	4313      	orrs	r3, r2
 800523a:	d00b      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800523c:	4b36      	ldr	r3, [pc, #216]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800523e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005242:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8005246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800524a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800524c:	4a32      	ldr	r2, [pc, #200]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800524e:	430b      	orrs	r3, r1
 8005250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005254:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005264:	2300      	movs	r3, #0
 8005266:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800526a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800526e:	460b      	mov	r3, r1
 8005270:	4313      	orrs	r3, r2
 8005272:	d00c      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005274:	4b28      	ldr	r3, [pc, #160]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005276:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800527a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800527e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005286:	4a24      	ldr	r2, [pc, #144]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005288:	430b      	orrs	r3, r1
 800528a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800528e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800529a:	67bb      	str	r3, [r7, #120]	; 0x78
 800529c:	2300      	movs	r3, #0
 800529e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80052a4:	460b      	mov	r3, r1
 80052a6:	4313      	orrs	r3, r2
 80052a8:	d04f      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80052aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b2:	2b80      	cmp	r3, #128	; 0x80
 80052b4:	d02d      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80052b6:	2b80      	cmp	r3, #128	; 0x80
 80052b8:	d827      	bhi.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80052ba:	2b60      	cmp	r3, #96	; 0x60
 80052bc:	d02e      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80052be:	2b60      	cmp	r3, #96	; 0x60
 80052c0:	d823      	bhi.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d006      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80052c6:	2b40      	cmp	r3, #64	; 0x40
 80052c8:	d81f      	bhi.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d009      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d011      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80052d2:	e01a      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052d4:	4b10      	ldr	r3, [pc, #64]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	4a0f      	ldr	r2, [pc, #60]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052de:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052e0:	e01d      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052e6:	3308      	adds	r3, #8
 80052e8:	4618      	mov	r0, r3
 80052ea:	f002 f981 	bl	80075f0 <RCCEx_PLL2_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052f4:	e013      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052fa:	332c      	adds	r3, #44	; 0x2c
 80052fc:	4618      	mov	r0, r3
 80052fe:	f002 fa0f 	bl	8007720 <RCCEx_PLL3_Config>
 8005302:	4603      	mov	r3, r0
 8005304:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005308:	e009      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005310:	e005      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8005312:	bf00      	nop
 8005314:	e003      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005316:	bf00      	nop
 8005318:	46020c00 	.word	0x46020c00
        break;
 800531c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10d      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005326:	4bb6      	ldr	r3, [pc, #728]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005328:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800532c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8005330:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005338:	4ab1      	ldr	r2, [pc, #708]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800533a:	430b      	orrs	r3, r1
 800533c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005340:	e003      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005342:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005346:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800534a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800534e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005352:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005356:	673b      	str	r3, [r7, #112]	; 0x70
 8005358:	2300      	movs	r3, #0
 800535a:	677b      	str	r3, [r7, #116]	; 0x74
 800535c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005360:	460b      	mov	r3, r1
 8005362:	4313      	orrs	r3, r2
 8005364:	d053      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800536a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800536e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005372:	d033      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005378:	d82c      	bhi.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800537a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800537e:	d02f      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005380:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005384:	d826      	bhi.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538a:	d008      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800538c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005390:	d820      	bhi.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8005396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539a:	d011      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800539c:	e01a      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800539e:	4b98      	ldr	r3, [pc, #608]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80053a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a2:	4a97      	ldr	r2, [pc, #604]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80053a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80053aa:	e01a      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053b0:	3308      	adds	r3, #8
 80053b2:	4618      	mov	r0, r3
 80053b4:	f002 f91c 	bl	80075f0 <RCCEx_PLL2_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80053be:	e010      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053c4:	332c      	adds	r3, #44	; 0x2c
 80053c6:	4618      	mov	r0, r3
 80053c8:	f002 f9aa 	bl	8007720 <RCCEx_PLL3_Config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80053d2:	e006      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80053da:	e002      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80053dc:	bf00      	nop
 80053de:	e000      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80053e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10d      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80053ea:	4b85      	ldr	r3, [pc, #532]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80053ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80053f0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80053f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053fc:	4a80      	ldr	r2, [pc, #512]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80053fe:	430b      	orrs	r3, r1
 8005400:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005404:	e003      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005406:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800540a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800540e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005416:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800541a:	66bb      	str	r3, [r7, #104]	; 0x68
 800541c:	2300      	movs	r3, #0
 800541e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005420:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005424:	460b      	mov	r3, r1
 8005426:	4313      	orrs	r3, r2
 8005428:	d046      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800542a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800542e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005432:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005436:	d028      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005438:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800543c:	d821      	bhi.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800543e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005442:	d022      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005448:	d81b      	bhi.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800544a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800544e:	d01c      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005450:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005454:	d815      	bhi.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800545a:	d008      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800545c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005460:	d80f      	bhi.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005462:	2b00      	cmp	r3, #0
 8005464:	d011      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546a:	d00e      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800546c:	e009      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800546e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005472:	3308      	adds	r3, #8
 8005474:	4618      	mov	r0, r3
 8005476:	f002 f8bb 	bl	80075f0 <RCCEx_PLL2_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005480:	e004      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005488:	e000      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800548a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10d      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005494:	4b5a      	ldr	r3, [pc, #360]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005496:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800549a:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800549e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054a6:	4a56      	ldr	r2, [pc, #344]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80054a8:	430b      	orrs	r3, r1
 80054aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80054ae:	e003      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80054b4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80054b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80054c4:	663b      	str	r3, [r7, #96]	; 0x60
 80054c6:	2300      	movs	r3, #0
 80054c8:	667b      	str	r3, [r7, #100]	; 0x64
 80054ca:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80054ce:	460b      	mov	r3, r1
 80054d0:	4313      	orrs	r3, r2
 80054d2:	d03f      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80054d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d81e      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x562>
 80054e0:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80054e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e6:	bf00      	nop
 80054e8:	08005527 	.word	0x08005527
 80054ec:	080054fd 	.word	0x080054fd
 80054f0:	0800550b 	.word	0x0800550b
 80054f4:	08005527 	.word	0x08005527
 80054f8:	08005527 	.word	0x08005527
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054fc:	4b40      	ldr	r3, [pc, #256]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	4a3f      	ldr	r2, [pc, #252]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005506:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005508:	e00e      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800550a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800550e:	332c      	adds	r3, #44	; 0x2c
 8005510:	4618      	mov	r0, r3
 8005512:	f002 f905 	bl	8007720 <RCCEx_PLL3_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800551c:	e004      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005524:	e000      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8005526:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005528:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10d      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005530:	4b33      	ldr	r3, [pc, #204]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005532:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005536:	f023 0107 	bic.w	r1, r3, #7
 800553a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005542:	4a2f      	ldr	r2, [pc, #188]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005544:	430b      	orrs	r3, r1
 8005546:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800554a:	e003      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005550:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005554:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005560:	65bb      	str	r3, [r7, #88]	; 0x58
 8005562:	2300      	movs	r3, #0
 8005564:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005566:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800556a:	460b      	mov	r3, r1
 800556c:	4313      	orrs	r3, r2
 800556e:	d04d      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005570:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005578:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800557c:	d028      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800557e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005582:	d821      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005584:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005588:	d024      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800558a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800558e:	d81b      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005594:	d00e      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8005596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800559a:	d815      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01b      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80055a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a4:	d110      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055a6:	4b16      	ldr	r3, [pc, #88]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	4a15      	ldr	r2, [pc, #84]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80055ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80055b2:	e012      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055b8:	332c      	adds	r3, #44	; 0x2c
 80055ba:	4618      	mov	r0, r3
 80055bc:	f002 f8b0 	bl	8007720 <RCCEx_PLL3_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80055c6:	e008      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80055ce:	e004      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80055d0:	bf00      	nop
 80055d2:	e002      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80055d4:	bf00      	nop
 80055d6:	e000      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80055d8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80055da:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d110      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80055e2:	4b07      	ldr	r3, [pc, #28]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80055e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055e8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80055ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f4:	4a02      	ldr	r2, [pc, #8]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80055f6:	430b      	orrs	r3, r1
 80055f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80055fc:	e006      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x650>
 80055fe:	bf00      	nop
 8005600:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005604:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005608:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800560c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005618:	653b      	str	r3, [r7, #80]	; 0x50
 800561a:	2300      	movs	r3, #0
 800561c:	657b      	str	r3, [r7, #84]	; 0x54
 800561e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005622:	460b      	mov	r3, r1
 8005624:	4313      	orrs	r3, r2
 8005626:	f000 80b5 	beq.w	8005794 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800562a:	2300      	movs	r3, #0
 800562c:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005630:	4b9d      	ldr	r3, [pc, #628]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	d113      	bne.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800563e:	4b9a      	ldr	r3, [pc, #616]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005644:	4a98      	ldr	r2, [pc, #608]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005646:	f043 0304 	orr.w	r3, r3, #4
 800564a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800564e:	4b96      	ldr	r3, [pc, #600]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800565c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8005660:	2301      	movs	r3, #1
 8005662:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005666:	4b91      	ldr	r3, [pc, #580]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	4a90      	ldr	r2, [pc, #576]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800566c:	f043 0301 	orr.w	r3, r3, #1
 8005670:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005672:	f7fc f97d 	bl	8001970 <HAL_GetTick>
 8005676:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800567a:	e00b      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800567c:	f7fc f978 	bl	8001970 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d903      	bls.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005692:	e005      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005694:	4b85      	ldr	r3, [pc, #532]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0ed      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80056a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d165      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056a8:	4b7f      	ldr	r3, [pc, #508]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80056b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d023      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80056be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80056c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01b      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056ce:	4b76      	ldr	r3, [pc, #472]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056dc:	4b72      	ldr	r3, [pc, #456]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056e2:	4a71      	ldr	r2, [pc, #452]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056ec:	4b6e      	ldr	r3, [pc, #440]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056f2:	4a6d      	ldr	r2, [pc, #436]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056fc:	4a6a      	ldr	r2, [pc, #424]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005702:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d019      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005712:	f7fc f92d 	bl	8001970 <HAL_GetTick>
 8005716:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800571a:	e00d      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571c:	f7fc f928 	bl	8001970 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005726:	1ad2      	subs	r2, r2, r3
 8005728:	f241 3388 	movw	r3, #5000	; 0x1388
 800572c:	429a      	cmp	r2, r3
 800572e:	d903      	bls.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8005736:	e006      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005738:	4b5b      	ldr	r3, [pc, #364]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800573a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0ea      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005746:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10d      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800574e:	4b56      	ldr	r3, [pc, #344]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005754:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005758:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800575c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005760:	4a51      	ldr	r2, [pc, #324]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005762:	430b      	orrs	r3, r1
 8005764:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005768:	e008      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800576a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800576e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8005772:	e003      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005774:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005778:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800577c:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8005780:	2b01      	cmp	r3, #1
 8005782:	d107      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005784:	4b48      	ldr	r3, [pc, #288]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800578a:	4a47      	ldr	r2, [pc, #284]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800578c:	f023 0304 	bic.w	r3, r3, #4
 8005790:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005794:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80057a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80057a2:	2300      	movs	r3, #0
 80057a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80057aa:	460b      	mov	r3, r1
 80057ac:	4313      	orrs	r3, r2
 80057ae:	d042      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80057b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057b8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80057bc:	d022      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80057be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80057c2:	d81b      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x840>
 80057c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057c8:	d011      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x832>
 80057ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ce:	d815      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x840>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d019      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80057d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057d8:	d110      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057de:	3308      	adds	r3, #8
 80057e0:	4618      	mov	r0, r3
 80057e2:	f001 ff05 	bl	80075f0 <RCCEx_PLL2_Config>
 80057e6:	4603      	mov	r3, r0
 80057e8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80057ec:	e00d      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ee:	4b2e      	ldr	r3, [pc, #184]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80057f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f2:	4a2d      	ldr	r2, [pc, #180]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80057f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80057fa:	e006      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005802:	e002      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005804:	bf00      	nop
 8005806:	e000      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005808:	bf00      	nop
    }
    if (ret == HAL_OK)
 800580a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10d      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005812:	4b25      	ldr	r3, [pc, #148]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005818:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800581c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005820:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005824:	4a20      	ldr	r2, [pc, #128]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005826:	430b      	orrs	r3, r1
 8005828:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800582c:	e003      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005832:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005836:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005842:	643b      	str	r3, [r7, #64]	; 0x40
 8005844:	2300      	movs	r3, #0
 8005846:	647b      	str	r3, [r7, #68]	; 0x44
 8005848:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800584c:	460b      	mov	r3, r1
 800584e:	4313      	orrs	r3, r2
 8005850:	d032      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005856:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800585a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800585e:	d00b      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005864:	d804      	bhi.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800586a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586e:	d007      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005876:	e004      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005878:	bf00      	nop
 800587a:	e002      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800587c:	bf00      	nop
 800587e:	e000      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005880:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005882:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d112      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800588a:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800588c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005890:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005894:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800589c:	4a02      	ldr	r2, [pc, #8]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800589e:	430b      	orrs	r3, r1
 80058a0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80058a4:	e008      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80058a6:	bf00      	nop
 80058a8:	46020c00 	.word	0x46020c00
 80058ac:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80058b4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80058b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80058c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80058c6:	2300      	movs	r3, #0
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80058ce:	460b      	mov	r3, r1
 80058d0:	4313      	orrs	r3, r2
 80058d2:	d00c      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80058d4:	4b98      	ldr	r3, [pc, #608]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80058d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80058da:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80058de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058e6:	4a94      	ldr	r2, [pc, #592]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80058e8:	430b      	orrs	r3, r1
 80058ea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80058ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80058fa:	633b      	str	r3, [r7, #48]	; 0x30
 80058fc:	2300      	movs	r3, #0
 80058fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005900:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005904:	460b      	mov	r3, r1
 8005906:	4313      	orrs	r3, r2
 8005908:	d019      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800590a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800590e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005916:	d105      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005918:	4b87      	ldr	r3, [pc, #540]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	4a86      	ldr	r2, [pc, #536]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800591e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005922:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005924:	4b84      	ldr	r3, [pc, #528]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005926:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800592a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800592e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005932:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005936:	4a80      	ldr	r2, [pc, #512]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005938:	430b      	orrs	r3, r1
 800593a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800593e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
 800594c:	2300      	movs	r3, #0
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005950:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005954:	460b      	mov	r3, r1
 8005956:	4313      	orrs	r3, r2
 8005958:	d00c      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800595a:	4b77      	ldr	r3, [pc, #476]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800595c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005968:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800596c:	4972      	ldr	r1, [pc, #456]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005974:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005980:	623b      	str	r3, [r7, #32]
 8005982:	2300      	movs	r3, #0
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
 8005986:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800598a:	460b      	mov	r3, r1
 800598c:	4313      	orrs	r3, r2
 800598e:	d00c      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005990:	4b69      	ldr	r3, [pc, #420]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005996:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800599a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800599e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80059a2:	4965      	ldr	r1, [pc, #404]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80059aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	2300      	movs	r3, #0
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80059c0:	460b      	mov	r3, r1
 80059c2:	4313      	orrs	r3, r2
 80059c4:	d00c      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80059c6:	4b5c      	ldr	r3, [pc, #368]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059cc:	f023 0218 	bic.w	r2, r3, #24
 80059d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80059d8:	4957      	ldr	r1, [pc, #348]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80059e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	2300      	movs	r3, #0
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80059f6:	460b      	mov	r3, r1
 80059f8:	4313      	orrs	r3, r2
 80059fa:	d032      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80059fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a08:	d105      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a0a:	4b4b      	ldr	r3, [pc, #300]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	4a4a      	ldr	r2, [pc, #296]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a14:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a22:	d108      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a28:	3308      	adds	r3, #8
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f001 fde0 	bl	80075f0 <RCCEx_PLL2_Config>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8005a36:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10d      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005a3e:	4b3e      	ldr	r3, [pc, #248]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a50:	4939      	ldr	r1, [pc, #228]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005a58:	e003      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a5e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005a6e:	60bb      	str	r3, [r7, #8]
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	d03a      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a8a:	d00e      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a90:	d815      	bhi.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d017      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005a96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a9a:	d110      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a9c:	4b26      	ldr	r3, [pc, #152]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	4a25      	ldr	r2, [pc, #148]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa6:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005aa8:	e00e      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aae:	3308      	adds	r3, #8
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 fd9d 	bl	80075f0 <RCCEx_PLL2_Config>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005abc:	e004      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005ac4:	e000      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8005ac6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005ac8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10d      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005ad0:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ad6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae2:	4915      	ldr	r1, [pc, #84]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005aea:	e003      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aec:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005af0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005af4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005b00:	603b      	str	r3, [r7, #0]
 8005b02:	2300      	movs	r3, #0
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	d00c      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b22:	4905      	ldr	r1, [pc, #20]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005b2a:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	37e8      	adds	r7, #232	; 0xe8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b38:	46020c00 	.word	0x46020c00

08005b3c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b089      	sub	sp, #36	; 0x24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005b44:	4bac      	ldr	r3, [pc, #688]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005b4e:	4baa      	ldr	r3, [pc, #680]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005b58:	4ba7      	ldr	r3, [pc, #668]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	0a1b      	lsrs	r3, r3, #8
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	3301      	adds	r3, #1
 8005b64:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005b66:	4ba4      	ldr	r3, [pc, #656]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	f003 0310 	and.w	r3, r3, #16
 8005b6e:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b70:	4ba1      	ldr	r3, [pc, #644]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	08db      	lsrs	r3, r3, #3
 8005b76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	fb02 f303 	mul.w	r3, r2, r3
 8005b80:	ee07 3a90 	vmov	s15, r3
 8005b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b88:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 8123 	beq.w	8005dda <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d062      	beq.n	8005c60 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	f200 8081 	bhi.w	8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d024      	beq.n	8005bf2 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d17a      	bne.n	8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	ee07 3a90 	vmov	s15, r3
 8005bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb8:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005dfc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc0:	4b8d      	ldr	r3, [pc, #564]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc8:	ee07 3a90 	vmov	s15, r3
 8005bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bd0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bd4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005be0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bf0:	e08f      	b.n	8005d12 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005bf2:	4b81      	ldr	r3, [pc, #516]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8005bfe:	4b7e      	ldr	r3, [pc, #504]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	0f1b      	lsrs	r3, r3, #28
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	e006      	b.n	8005c18 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8005c0a:	4b7b      	ldr	r3, [pc, #492]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c10:	041b      	lsls	r3, r3, #16
 8005c12:	0f1b      	lsrs	r3, r3, #28
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	4a7a      	ldr	r2, [pc, #488]	; (8005e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	ee07 3a90 	vmov	s15, r3
 8005c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c42:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c5e:	e058      	b.n	8005d12 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6a:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005dfc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c72:	4b61      	ldr	r3, [pc, #388]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c86:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ca2:	e036      	b.n	8005d12 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005ca4:	4b54      	ldr	r3, [pc, #336]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8005cb0:	4b51      	ldr	r3, [pc, #324]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	0f1b      	lsrs	r3, r3, #28
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	e006      	b.n	8005cca <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8005cbc:	4b4e      	ldr	r3, [pc, #312]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cc2:	041b      	lsls	r3, r3, #16
 8005cc4:	0f1b      	lsrs	r3, r3, #28
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	4a4e      	ldr	r2, [pc, #312]	; (8005e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	ee07 3a90 	vmov	s15, r3
 8005cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cf4:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005e00 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d10:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005d12:	4b39      	ldr	r3, [pc, #228]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d017      	beq.n	8005d4e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d1e:	4b36      	ldr	r3, [pc, #216]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d22:	0a5b      	lsrs	r3, r3, #9
 8005d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d28:	ee07 3a90 	vmov	s15, r3
 8005d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d34:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d44:	ee17 2a90 	vmov	r2, s15
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	e002      	b.n	8005d54 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005d54:	4b28      	ldr	r3, [pc, #160]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d017      	beq.n	8005d90 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d60:	4b25      	ldr	r3, [pc, #148]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d64:	0c1b      	lsrs	r3, r3, #16
 8005d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d6a:	ee07 3a90 	vmov	s15, r3
 8005d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005d72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d76:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d86:	ee17 2a90 	vmov	r2, s15
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	605a      	str	r2, [r3, #4]
 8005d8e:	e002      	b.n	8005d96 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005d96:	4b18      	ldr	r3, [pc, #96]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d017      	beq.n	8005dd2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005da2:	4b15      	ldr	r3, [pc, #84]	; (8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da6:	0e1b      	lsrs	r3, r3, #24
 8005da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dac:	ee07 3a90 	vmov	s15, r3
 8005db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005db4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005db8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005dbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dc8:	ee17 2a90 	vmov	r2, s15
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005dd0:	e00c      	b.n	8005dec <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	609a      	str	r2, [r3, #8]
}
 8005dd8:	e008      	b.n	8005dec <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	609a      	str	r2, [r3, #8]
}
 8005dec:	bf00      	nop
 8005dee:	3724      	adds	r7, #36	; 0x24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	46020c00 	.word	0x46020c00
 8005dfc:	4b742400 	.word	0x4b742400
 8005e00:	46000000 	.word	0x46000000
 8005e04:	080094d0 	.word	0x080094d0

08005e08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b089      	sub	sp, #36	; 0x24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005e10:	4bac      	ldr	r3, [pc, #688]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e18:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005e1a:	4baa      	ldr	r3, [pc, #680]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005e24:	4ba7      	ldr	r3, [pc, #668]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	0a1b      	lsrs	r3, r3, #8
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	3301      	adds	r3, #1
 8005e30:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005e32:	4ba4      	ldr	r3, [pc, #656]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	f003 0310 	and.w	r3, r3, #16
 8005e3a:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005e3c:	4ba1      	ldr	r3, [pc, #644]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	08db      	lsrs	r3, r3, #3
 8005e42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	fb02 f303 	mul.w	r3, r2, r3
 8005e4c:	ee07 3a90 	vmov	s15, r3
 8005e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e54:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8123 	beq.w	80060a6 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d062      	beq.n	8005f2c <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	f200 8081 	bhi.w	8005f70 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d024      	beq.n	8005ebe <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d17a      	bne.n	8005f70 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	ee07 3a90 	vmov	s15, r3
 8005e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e84:	eddf 6a90 	vldr	s13, [pc, #576]	; 80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8005e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8c:	4b8d      	ldr	r3, [pc, #564]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ea0:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005eac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ebc:	e08f      	b.n	8005fde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005ebe:	4b81      	ldr	r3, [pc, #516]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8005eca:	4b7e      	ldr	r3, [pc, #504]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	0f1b      	lsrs	r3, r3, #28
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	e006      	b.n	8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8005ed6:	4b7b      	ldr	r3, [pc, #492]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005edc:	041b      	lsls	r3, r3, #16
 8005ede:	0f1b      	lsrs	r3, r3, #28
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	4a7a      	ldr	r2, [pc, #488]	; (80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f0e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f2a:	e058      	b.n	8005fde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f36:	eddf 6a64 	vldr	s13, [pc, #400]	; 80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8005f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f3e:	4b61      	ldr	r3, [pc, #388]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f52:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f6e:	e036      	b.n	8005fde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005f70:	4b54      	ldr	r3, [pc, #336]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8005f7c:	4b51      	ldr	r3, [pc, #324]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	0f1b      	lsrs	r3, r3, #28
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	e006      	b.n	8005f96 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8005f88:	4b4e      	ldr	r3, [pc, #312]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f8e:	041b      	lsls	r3, r3, #16
 8005f90:	0f1b      	lsrs	r3, r3, #28
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	4a4e      	ldr	r2, [pc, #312]	; (80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fbc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fc0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fdc:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005fde:	4b39      	ldr	r3, [pc, #228]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d017      	beq.n	800601a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005fea:	4b36      	ldr	r3, [pc, #216]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	0a5b      	lsrs	r3, r3, #9
 8005ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff4:	ee07 3a90 	vmov	s15, r3
 8005ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005ffc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006000:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006004:	edd7 6a07 	vldr	s13, [r7, #28]
 8006008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800600c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006010:	ee17 2a90 	vmov	r2, s15
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e002      	b.n	8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006020:	4b28      	ldr	r3, [pc, #160]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d017      	beq.n	800605c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800602c:	4b25      	ldr	r3, [pc, #148]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800602e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006030:	0c1b      	lsrs	r3, r3, #16
 8006032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800603e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006042:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006046:	edd7 6a07 	vldr	s13, [r7, #28]
 800604a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800604e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006052:	ee17 2a90 	vmov	r2, s15
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	605a      	str	r2, [r3, #4]
 800605a:	e002      	b.n	8006062 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006062:	4b18      	ldr	r3, [pc, #96]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d017      	beq.n	800609e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800606e:	4b15      	ldr	r3, [pc, #84]	; (80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006072:	0e1b      	lsrs	r3, r3, #24
 8006074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006078:	ee07 3a90 	vmov	s15, r3
 800607c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006084:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006088:	edd7 6a07 	vldr	s13, [r7, #28]
 800608c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006094:	ee17 2a90 	vmov	r2, s15
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800609c:	e00c      	b.n	80060b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	e008      	b.n	80060b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	609a      	str	r2, [r3, #8]
}
 80060b8:	bf00      	nop
 80060ba:	3724      	adds	r7, #36	; 0x24
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	46020c00 	.word	0x46020c00
 80060c8:	4b742400 	.word	0x4b742400
 80060cc:	46000000 	.word	0x46000000
 80060d0:	080094d0 	.word	0x080094d0

080060d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b089      	sub	sp, #36	; 0x24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80060dc:	4bac      	ldr	r3, [pc, #688]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80060de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80060e6:	4baa      	ldr	r3, [pc, #680]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80060e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80060f0:	4ba7      	ldr	r3, [pc, #668]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	0a1b      	lsrs	r3, r3, #8
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	3301      	adds	r3, #1
 80060fc:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80060fe:	4ba4      	ldr	r3, [pc, #656]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006102:	f003 0310 	and.w	r3, r3, #16
 8006106:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006108:	4ba1      	ldr	r3, [pc, #644]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800610a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800610c:	08db      	lsrs	r3, r3, #3
 800610e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	fb02 f303 	mul.w	r3, r2, r3
 8006118:	ee07 3a90 	vmov	s15, r3
 800611c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006120:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8123 	beq.w	8006372 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2b03      	cmp	r3, #3
 8006130:	d062      	beq.n	80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2b03      	cmp	r3, #3
 8006136:	f200 8081 	bhi.w	800623c <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d024      	beq.n	800618a <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2b02      	cmp	r3, #2
 8006144:	d17a      	bne.n	800623c <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	ee07 3a90 	vmov	s15, r3
 800614c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006150:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006158:	4b8d      	ldr	r3, [pc, #564]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800615a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006160:	ee07 3a90 	vmov	s15, r3
 8006164:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006168:	ed97 6a02 	vldr	s12, [r7, #8]
 800616c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006170:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006174:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800617c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006184:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8006188:	e08f      	b.n	80062aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800618a:	4b81      	ldr	r3, [pc, #516]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8006196:	4b7e      	ldr	r3, [pc, #504]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	0f1b      	lsrs	r3, r3, #28
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	e006      	b.n	80061b0 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 80061a2:	4b7b      	ldr	r3, [pc, #492]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80061a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061a8:	041b      	lsls	r3, r3, #16
 80061aa:	0f1b      	lsrs	r3, r3, #28
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	4a7a      	ldr	r2, [pc, #488]	; (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80061b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	ee07 3a90 	vmov	s15, r3
 80061c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80061da:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80061de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80061ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061f6:	e058      	b.n	80062aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006202:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800620a:	4b61      	ldr	r3, [pc, #388]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800620c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006212:	ee07 3a90 	vmov	s15, r3
 8006216:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800621a:	ed97 6a02 	vldr	s12, [r7, #8]
 800621e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006222:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006226:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800622a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800622e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800623a:	e036      	b.n	80062aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800623c:	4b54      	ldr	r3, [pc, #336]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8006248:	4b51      	ldr	r3, [pc, #324]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	0f1b      	lsrs	r3, r3, #28
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	e006      	b.n	8006262 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8006254:	4b4e      	ldr	r3, [pc, #312]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800625a:	041b      	lsls	r3, r3, #16
 800625c:	0f1b      	lsrs	r3, r3, #28
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	4a4e      	ldr	r2, [pc, #312]	; (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006268:	ee07 3a90 	vmov	s15, r3
 800626c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	ee07 3a90 	vmov	s15, r3
 8006284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006288:	ed97 6a02 	vldr	s12, [r7, #8]
 800628c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006290:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800629c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80062a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062a8:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80062aa:	4b39      	ldr	r3, [pc, #228]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d017      	beq.n	80062e6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80062b6:	4b36      	ldr	r3, [pc, #216]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80062b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ba:	0a5b      	lsrs	r3, r3, #9
 80062bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80062c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062cc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80062d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80062d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062dc:	ee17 2a90 	vmov	r2, s15
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	e002      	b.n	80062ec <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80062ec:	4b28      	ldr	r3, [pc, #160]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80062ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d017      	beq.n	8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80062f8:	4b25      	ldr	r3, [pc, #148]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80062fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fc:	0c1b      	lsrs	r3, r3, #16
 80062fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006302:	ee07 3a90 	vmov	s15, r3
 8006306:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800630a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800630e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006312:	edd7 6a07 	vldr	s13, [r7, #28]
 8006316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800631a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800631e:	ee17 2a90 	vmov	r2, s15
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	605a      	str	r2, [r3, #4]
 8006326:	e002      	b.n	800632e <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800632e:	4b18      	ldr	r3, [pc, #96]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d017      	beq.n	800636a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800633a:	4b15      	ldr	r3, [pc, #84]	; (8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800633c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633e:	0e1b      	lsrs	r3, r3, #24
 8006340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006344:	ee07 3a90 	vmov	s15, r3
 8006348:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800634c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006350:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006354:	edd7 6a07 	vldr	s13, [r7, #28]
 8006358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800635c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006360:	ee17 2a90 	vmov	r2, s15
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006368:	e00c      	b.n	8006384 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	609a      	str	r2, [r3, #8]
}
 8006370:	e008      	b.n	8006384 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	609a      	str	r2, [r3, #8]
}
 8006384:	bf00      	nop
 8006386:	3724      	adds	r7, #36	; 0x24
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	46020c00 	.word	0x46020c00
 8006394:	4b742400 	.word	0x4b742400
 8006398:	46000000 	.word	0x46000000
 800639c:	080094d0 	.word	0x080094d0

080063a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08e      	sub	sp, #56	; 0x38
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80063aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ae:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80063b2:	430b      	orrs	r3, r1
 80063b4:	d145      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80063b6:	4ba7      	ldr	r3, [pc, #668]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80063c2:	4ba4      	ldr	r3, [pc, #656]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d108      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d6:	d104      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80063d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
 80063de:	f001 b8fc 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80063e2:	4b9c      	ldr	r3, [pc, #624]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063f0:	d114      	bne.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f8:	d110      	bne.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80063fa:	4b96      	ldr	r3, [pc, #600]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006408:	d103      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800640a:	23fa      	movs	r3, #250	; 0xfa
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800640e:	f001 b8e4 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006412:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006416:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006418:	f001 b8df 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800641c:	4b8d      	ldr	r3, [pc, #564]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006428:	d107      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006430:	d103      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006432:	4b89      	ldr	r3, [pc, #548]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
 8006436:	f001 b8d0 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	637b      	str	r3, [r7, #52]	; 0x34
 800643e:	f001 b8cc 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006442:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006446:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800644a:	430b      	orrs	r3, r1
 800644c:	d151      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800644e:	4b81      	ldr	r3, [pc, #516]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006450:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006454:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006458:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	2b80      	cmp	r3, #128	; 0x80
 800645e:	d035      	beq.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	2b80      	cmp	r3, #128	; 0x80
 8006464:	d841      	bhi.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	2b60      	cmp	r3, #96	; 0x60
 800646a:	d02a      	beq.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	2b60      	cmp	r3, #96	; 0x60
 8006470:	d83b      	bhi.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	d009      	beq.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	2b40      	cmp	r3, #64	; 0x40
 800647c:	d835      	bhi.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00c      	beq.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	2b20      	cmp	r3, #32
 8006488:	d012      	beq.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800648a:	e02e      	b.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800648c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff fb53 	bl	8005b3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800649a:	f001 b89e 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800649e:	f107 0318 	add.w	r3, r7, #24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff fcb0 	bl	8005e08 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064ac:	f001 b895 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064b0:	f107 030c 	add.w	r3, r7, #12
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fe0d 	bl	80060d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064be:	f001 b88c 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80064c2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80064c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064c8:	f001 b887 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064cc:	4b61      	ldr	r3, [pc, #388]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d8:	d103      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80064da:	4b60      	ldr	r3, [pc, #384]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80064dc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80064de:	f001 b87c 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064e6:	f001 b878 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064ee:	f001 b874 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80064f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f6:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80064fa:	430b      	orrs	r3, r1
 80064fc:	d158      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80064fe:	4b55      	ldr	r3, [pc, #340]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006500:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006504:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006508:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006510:	d03b      	beq.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006518:	d846      	bhi.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006520:	d02e      	beq.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006528:	d83e      	bhi.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006530:	d00b      	beq.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006538:	d836      	bhi.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00d      	beq.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006546:	d012      	beq.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006548:	e02e      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800654a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff faf4 	bl	8005b3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006558:	f001 b83f 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800655c:	f107 0318 	add.w	r3, r7, #24
 8006560:	4618      	mov	r0, r3
 8006562:	f7ff fc51 	bl	8005e08 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800656a:	f001 b836 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800656e:	f107 030c 	add.w	r3, r7, #12
 8006572:	4618      	mov	r0, r3
 8006574:	f7ff fdae 	bl	80060d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800657c:	f001 b82d 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006580:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006584:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006586:	f001 b828 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800658a:	4b32      	ldr	r3, [pc, #200]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006596:	d103      	bne.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006598:	4b30      	ldr	r3, [pc, #192]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800659a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800659c:	f001 b81d 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065a4:	f001 b819 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065ac:	f001 b815 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80065b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065b4:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80065b8:	430b      	orrs	r3, r1
 80065ba:	d126      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80065bc:	4b25      	ldr	r3, [pc, #148]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80065c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c6:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80065c8:	4b22      	ldr	r3, [pc, #136]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d4:	d106      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d103      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80065dc:	4b1f      	ldr	r3, [pc, #124]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80065de:	637b      	str	r3, [r7, #52]	; 0x34
 80065e0:	f000 bffb 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80065e4:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f0:	d107      	bne.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f8:	d103      	bne.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80065fa:	4b19      	ldr	r3, [pc, #100]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
 80065fe:	f000 bfec 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	637b      	str	r3, [r7, #52]	; 0x34
 8006606:	f000 bfe8 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800660a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800660e:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8006612:	430b      	orrs	r3, r1
 8006614:	d164      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800661c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006620:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006628:	d03d      	beq.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006630:	d852      	bhi.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006638:	d014      	beq.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006640:	d84a      	bhi.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01f      	beq.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800664e:	d012      	beq.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006650:	e042      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006652:	bf00      	nop
 8006654:	46020c00 	.word	0x46020c00
 8006658:	0007a120 	.word	0x0007a120
 800665c:	00f42400 	.word	0x00f42400
 8006660:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff fa67 	bl	8005b3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006672:	f000 bfb2 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006676:	f107 0318 	add.w	r3, r7, #24
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff fbc4 	bl	8005e08 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006684:	f000 bfa9 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006688:	4bab      	ldr	r3, [pc, #684]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006694:	d103      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006696:	4ba9      	ldr	r3, [pc, #676]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800669a:	f000 bf9e 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066a2:	f000 bf9a 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066a6:	4ba4      	ldr	r3, [pc, #656]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80066b2:	4ba1      	ldr	r3, [pc, #644]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	0e1b      	lsrs	r3, r3, #24
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	e006      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80066be:	4b9e      	ldr	r3, [pc, #632]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80066c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80066c4:	041b      	lsls	r3, r3, #16
 80066c6:	0e1b      	lsrs	r3, r3, #24
 80066c8:	f003 030f 	and.w	r3, r3, #15
 80066cc:	4a9c      	ldr	r2, [pc, #624]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80066ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066d4:	f000 bf81 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066dc:	f000 bf7d 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80066e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066e4:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80066e8:	430b      	orrs	r3, r1
 80066ea:	d175      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80066ec:	4b92      	ldr	r3, [pc, #584]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80066ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80066f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066f6:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d15b      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80066fe:	4b8e      	ldr	r3, [pc, #568]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006704:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006708:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006710:	d034      	beq.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006718:	d849      	bhi.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006720:	d00b      	beq.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006728:	d841      	bhi.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	2b00      	cmp	r3, #0
 800672e:	d016      	beq.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006736:	d009      	beq.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006738:	e039      	b.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800673a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800673e:	4618      	mov	r0, r3
 8006740:	f7ff f9fc 	bl	8005b3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006748:	f000 bf47 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800674c:	f107 0318 	add.w	r3, r7, #24
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff fb59 	bl	8005e08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800675a:	f000 bf3e 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800675e:	4b76      	ldr	r3, [pc, #472]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676a:	d103      	bne.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 800676c:	4b73      	ldr	r3, [pc, #460]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800676e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006770:	f000 bf33 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006778:	f000 bf2f 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800677c:	4b6e      	ldr	r3, [pc, #440]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8006788:	4b6b      	ldr	r3, [pc, #428]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	0e1b      	lsrs	r3, r3, #24
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	e006      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8006794:	4b68      	ldr	r3, [pc, #416]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006796:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800679a:	041b      	lsls	r3, r3, #16
 800679c:	0e1b      	lsrs	r3, r3, #24
 800679e:	f003 030f 	and.w	r3, r3, #15
 80067a2:	4a67      	ldr	r2, [pc, #412]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80067a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067a8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80067aa:	f000 bf16 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80067b2:	f000 bf12 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067bc:	d108      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff f9ba 	bl	8005b3c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	637b      	str	r3, [r7, #52]	; 0x34
 80067cc:	f000 bf05 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	637b      	str	r3, [r7, #52]	; 0x34
 80067d4:	f000 bf01 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80067d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067dc:	1e51      	subs	r1, r2, #1
 80067de:	430b      	orrs	r3, r1
 80067e0:	d136      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80067e2:	4b55      	ldr	r3, [pc, #340]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80067e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067e8:	f003 0303 	and.w	r3, r3, #3
 80067ec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d104      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80067f4:	f7fe fb34 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 80067f8:	6378      	str	r0, [r7, #52]	; 0x34
 80067fa:	f000 beee 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	2b01      	cmp	r3, #1
 8006802:	d104      	bne.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006804:	f7fe f9f6 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8006808:	6378      	str	r0, [r7, #52]	; 0x34
 800680a:	f000 bee6 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800680e:	4b4a      	ldr	r3, [pc, #296]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800681a:	d106      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	2b02      	cmp	r3, #2
 8006820:	d103      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8006822:	4b48      	ldr	r3, [pc, #288]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006824:	637b      	str	r3, [r7, #52]	; 0x34
 8006826:	f000 bed8 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800682a:	4b43      	ldr	r3, [pc, #268]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800682c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b02      	cmp	r3, #2
 8006836:	d107      	bne.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	2b03      	cmp	r3, #3
 800683c:	d104      	bne.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800683e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006842:	637b      	str	r3, [r7, #52]	; 0x34
 8006844:	f000 bec9 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	637b      	str	r3, [r7, #52]	; 0x34
 800684c:	f000 bec5 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006854:	1e91      	subs	r1, r2, #2
 8006856:	430b      	orrs	r3, r1
 8006858:	d136      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800685a:	4b37      	ldr	r3, [pc, #220]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800685c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006860:	f003 030c 	and.w	r3, r3, #12
 8006864:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	2b00      	cmp	r3, #0
 800686a:	d104      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800686c:	f7fe fae4 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 8006870:	6378      	str	r0, [r7, #52]	; 0x34
 8006872:	f000 beb2 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	2b04      	cmp	r3, #4
 800687a:	d104      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800687c:	f7fe f9ba 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8006880:	6378      	str	r0, [r7, #52]	; 0x34
 8006882:	f000 beaa 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006886:	4b2c      	ldr	r3, [pc, #176]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006892:	d106      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	2b08      	cmp	r3, #8
 8006898:	d103      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800689a:	4b2a      	ldr	r3, [pc, #168]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800689c:	637b      	str	r3, [r7, #52]	; 0x34
 800689e:	f000 be9c 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80068a2:	4b25      	ldr	r3, [pc, #148]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80068a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d107      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	2b0c      	cmp	r3, #12
 80068b4:	d104      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 80068b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ba:	637b      	str	r3, [r7, #52]	; 0x34
 80068bc:	f000 be8d 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	637b      	str	r3, [r7, #52]	; 0x34
 80068c4:	f000 be89 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80068c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068cc:	1f11      	subs	r1, r2, #4
 80068ce:	430b      	orrs	r3, r1
 80068d0:	d13e      	bne.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80068d2:	4b19      	ldr	r3, [pc, #100]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80068d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d104      	bne.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80068e4:	f7fe faa8 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 80068e8:	6378      	str	r0, [r7, #52]	; 0x34
 80068ea:	f000 be76 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	2b10      	cmp	r3, #16
 80068f2:	d104      	bne.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068f4:	f7fe f97e 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 80068f8:	6378      	str	r0, [r7, #52]	; 0x34
 80068fa:	f000 be6e 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80068fe:	4b0e      	ldr	r3, [pc, #56]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690a:	d106      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	2b20      	cmp	r3, #32
 8006910:	d103      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8006912:	4b0c      	ldr	r3, [pc, #48]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006914:	637b      	str	r3, [r7, #52]	; 0x34
 8006916:	f000 be60 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800691a:	4b07      	ldr	r3, [pc, #28]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800691c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b02      	cmp	r3, #2
 8006926:	d10f      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	2b30      	cmp	r3, #48	; 0x30
 800692c:	d10c      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800692e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006932:	637b      	str	r3, [r7, #52]	; 0x34
 8006934:	f000 be51 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006938:	46020c00 	.word	0x46020c00
 800693c:	02dc6c00 	.word	0x02dc6c00
 8006940:	080094d0 	.word	0x080094d0
 8006944:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	637b      	str	r3, [r7, #52]	; 0x34
 800694c:	f000 be45 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006954:	f1a2 0108 	sub.w	r1, r2, #8
 8006958:	430b      	orrs	r3, r1
 800695a:	d136      	bne.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800695c:	4b9f      	ldr	r3, [pc, #636]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800695e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006962:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006966:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696a:	2b00      	cmp	r3, #0
 800696c:	d104      	bne.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800696e:	f7fe fa63 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 8006972:	6378      	str	r0, [r7, #52]	; 0x34
 8006974:	f000 be31 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	2b40      	cmp	r3, #64	; 0x40
 800697c:	d104      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800697e:	f7fe f939 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8006982:	6378      	str	r0, [r7, #52]	; 0x34
 8006984:	f000 be29 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006988:	4b94      	ldr	r3, [pc, #592]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006994:	d106      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	2b80      	cmp	r3, #128	; 0x80
 800699a:	d103      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 800699c:	4b90      	ldr	r3, [pc, #576]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800699e:	637b      	str	r3, [r7, #52]	; 0x34
 80069a0:	f000 be1b 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80069a4:	4b8d      	ldr	r3, [pc, #564]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d107      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	2bc0      	cmp	r3, #192	; 0xc0
 80069b6:	d104      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 80069b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069bc:	637b      	str	r3, [r7, #52]	; 0x34
 80069be:	f000 be0c 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	637b      	str	r3, [r7, #52]	; 0x34
 80069c6:	f000 be08 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80069ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ce:	f1a2 0110 	sub.w	r1, r2, #16
 80069d2:	430b      	orrs	r3, r1
 80069d4:	d139      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80069d6:	4b81      	ldr	r3, [pc, #516]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d104      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069e8:	f7fe fa26 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 80069ec:	6378      	str	r0, [r7, #52]	; 0x34
 80069ee:	f000 bdf4 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f8:	d104      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069fa:	f7fe f8fb 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 80069fe:	6378      	str	r0, [r7, #52]	; 0x34
 8006a00:	f000 bdeb 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006a04:	4b75      	ldr	r3, [pc, #468]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a10:	d107      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a18:	d103      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8006a1a:	4b71      	ldr	r3, [pc, #452]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1e:	f000 bddc 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006a22:	4b6e      	ldr	r3, [pc, #440]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d108      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a36:	d104      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8006a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a3e:	f000 bdcc 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34
 8006a46:	f000 bdc8 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006a4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a4e:	f1a2 0120 	sub.w	r1, r2, #32
 8006a52:	430b      	orrs	r3, r1
 8006a54:	d158      	bne.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006a56:	4b61      	ldr	r3, [pc, #388]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d104      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006a68:	f7fe fa0e 	bl	8004e88 <HAL_RCC_GetPCLK3Freq>
 8006a6c:	6378      	str	r0, [r7, #52]	; 0x34
 8006a6e:	f000 bdb4 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d104      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a78:	f7fe f8bc 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8006a7c:	6378      	str	r0, [r7, #52]	; 0x34
 8006a7e:	f000 bdac 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006a82:	4b56      	ldr	r3, [pc, #344]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a8e:	d106      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d103      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8006a96:	4b52      	ldr	r3, [pc, #328]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a98:	637b      	str	r3, [r7, #52]	; 0x34
 8006a9a:	f000 bd9e 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006a9e:	4b4f      	ldr	r3, [pc, #316]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d107      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d104      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8006ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab8:	f000 bd8f 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006abc:	4b47      	ldr	r3, [pc, #284]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0320 	and.w	r3, r3, #32
 8006ac4:	2b20      	cmp	r3, #32
 8006ac6:	d11b      	bne.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d118      	bne.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ace:	4b43      	ldr	r3, [pc, #268]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006ada:	4b40      	ldr	r3, [pc, #256]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	0e1b      	lsrs	r3, r3, #24
 8006ae0:	f003 030f 	and.w	r3, r3, #15
 8006ae4:	e006      	b.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8006ae6:	4b3d      	ldr	r3, [pc, #244]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006aec:	041b      	lsls	r3, r3, #16
 8006aee:	0e1b      	lsrs	r3, r3, #24
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	4a3b      	ldr	r2, [pc, #236]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006afa:	637b      	str	r3, [r7, #52]	; 0x34
 8006afc:	f000 bd6d 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	637b      	str	r3, [r7, #52]	; 0x34
 8006b04:	f000 bd69 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b0c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006b10:	430b      	orrs	r3, r1
 8006b12:	d169      	bne.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006b14:	4b31      	ldr	r3, [pc, #196]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b1a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006b1e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b26:	d104      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b28:	f7fe f864 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8006b2c:	6378      	str	r0, [r7, #52]	; 0x34
 8006b2e:	f000 bd54 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b38:	d108      	bne.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b3a:	f107 0318 	add.w	r3, r7, #24
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff f962 	bl	8005e08 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	637b      	str	r3, [r7, #52]	; 0x34
 8006b48:	f000 bd47 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d104      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006b52:	f7fe f957 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8006b56:	6378      	str	r0, [r7, #52]	; 0x34
 8006b58:	f000 bd3f 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006b62:	d118      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006b64:	4b1d      	ldr	r3, [pc, #116]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006b70:	4b1a      	ldr	r3, [pc, #104]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	0f1b      	lsrs	r3, r3, #28
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	e006      	b.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006b7c:	4b17      	ldr	r3, [pc, #92]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b82:	041b      	lsls	r3, r3, #16
 8006b84:	0f1b      	lsrs	r3, r3, #28
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	4a16      	ldr	r2, [pc, #88]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
 8006b92:	f000 bd22 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006b96:	4b11      	ldr	r3, [pc, #68]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ba2:	d107      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006baa:	d103      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8006bac:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006bae:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb0:	f000 bd13 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006bb4:	4b09      	ldr	r3, [pc, #36]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc0:	d107      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bc8:	d103      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8006bca:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bce:	f000 bd04 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd6:	f000 bd00 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006bda:	bf00      	nop
 8006bdc:	46020c00 	.word	0x46020c00
 8006be0:	00f42400 	.word	0x00f42400
 8006be4:	080094d0 	.word	0x080094d0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bec:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	d14e      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006bf4:	4ba8      	ldr	r3, [pc, #672]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006bf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d841      	bhi.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006c06:	a201      	add	r2, pc, #4	; (adr r2, 8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8006c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0c:	08006c45 	.word	0x08006c45
 8006c10:	08006c21 	.word	0x08006c21
 8006c14:	08006c33 	.word	0x08006c33
 8006c18:	08006c4f 	.word	0x08006c4f
 8006c1c:	08006c59 	.word	0x08006c59
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fe ff89 	bl	8005b3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c2e:	f000 bcd4 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c32:	f107 030c 	add.w	r3, r7, #12
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff fa4c 	bl	80060d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c40:	f000 bccb 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006c44:	f7fe f8de 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8006c48:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006c4a:	f000 bcc6 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006c4e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006c52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c54:	f000 bcc1 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c58:	4b8f      	ldr	r3, [pc, #572]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8006c64:	4b8c      	ldr	r3, [pc, #560]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	0e1b      	lsrs	r3, r3, #24
 8006c6a:	f003 030f 	and.w	r3, r3, #15
 8006c6e:	e006      	b.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006c70:	4b89      	ldr	r3, [pc, #548]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c76:	041b      	lsls	r3, r3, #16
 8006c78:	0e1b      	lsrs	r3, r3, #24
 8006c7a:	f003 030f 	and.w	r3, r3, #15
 8006c7e:	4a87      	ldr	r2, [pc, #540]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c86:	f000 bca8 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c8e:	f000 bca4 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c96:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	d15d      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006c9e:	4b7e      	ldr	r3, [pc, #504]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ca4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006ca8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cb0:	d036      	beq.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cb8:	d84b      	bhi.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cc0:	d029      	beq.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cc8:	d843      	bhi.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cd0:	d013      	beq.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cd8:	d83b      	bhi.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d015      	beq.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce6:	d134      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fe ff25 	bl	8005b3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cf6:	f000 bc70 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cfa:	f107 030c 	add.w	r3, r7, #12
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff f9e8 	bl	80060d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d08:	f000 bc67 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006d0c:	f7fe f87a 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8006d10:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006d12:	f000 bc62 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d16:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006d1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d1c:	f000 bc5d 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d20:	4b5d      	ldr	r3, [pc, #372]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d005      	beq.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006d2c:	4b5a      	ldr	r3, [pc, #360]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	0e1b      	lsrs	r3, r3, #24
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	e006      	b.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8006d38:	4b57      	ldr	r3, [pc, #348]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d3e:	041b      	lsls	r3, r3, #16
 8006d40:	0e1b      	lsrs	r3, r3, #24
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	4a55      	ldr	r2, [pc, #340]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d4e:	f000 bc44 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d56:	f000 bc40 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d5e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006d62:	430b      	orrs	r3, r1
 8006d64:	d14a      	bne.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006d66:	4b4c      	ldr	r3, [pc, #304]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d70:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d78:	f7fe f85e 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 8006d7c:	6378      	str	r0, [r7, #52]	; 0x34
 8006d7e:	f000 bc2c 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d88:	d104      	bne.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d8a:	f7fd ff33 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8006d8e:	6378      	str	r0, [r7, #52]	; 0x34
 8006d90:	f000 bc23 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006d94:	4b40      	ldr	r3, [pc, #256]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da0:	d107      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006da8:	d103      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8006daa:	4b3d      	ldr	r3, [pc, #244]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
 8006dae:	f000 bc14 	b.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006db2:	4b39      	ldr	r3, [pc, #228]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	d11b      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dc4:	d117      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006dc6:	4b34      	ldr	r3, [pc, #208]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d005      	beq.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8006dd2:	4b31      	ldr	r3, [pc, #196]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	0e1b      	lsrs	r3, r3, #24
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	e006      	b.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006dde:	4b2e      	ldr	r3, [pc, #184]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006de4:	041b      	lsls	r3, r3, #16
 8006de6:	0e1b      	lsrs	r3, r3, #24
 8006de8:	f003 030f 	and.w	r3, r3, #15
 8006dec:	4a2b      	ldr	r2, [pc, #172]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006df2:	637b      	str	r3, [r7, #52]	; 0x34
 8006df4:	e3f1      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dfa:	e3ee      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006dfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e00:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8006e04:	430b      	orrs	r3, r1
 8006e06:	d14d      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006e08:	4b23      	ldr	r3, [pc, #140]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e12:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d103      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e1a:	f7fe f80d 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 8006e1e:	6378      	str	r0, [r7, #52]	; 0x34
 8006e20:	e3db      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e28:	d103      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e2a:	f7fd fee3 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8006e2e:	6378      	str	r0, [r7, #52]	; 0x34
 8006e30:	e3d3      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006e32:	4b19      	ldr	r3, [pc, #100]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3e:	d106      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e46:	d102      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8006e48:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e4c:	e3c5      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006e4e:	4b12      	ldr	r3, [pc, #72]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b20      	cmp	r3, #32
 8006e58:	d11b      	bne.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e60:	d117      	bne.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e62:	4b0d      	ldr	r3, [pc, #52]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d005      	beq.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8006e6e:	4b0a      	ldr	r3, [pc, #40]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	0e1b      	lsrs	r3, r3, #24
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	e006      	b.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006e7a:	4b07      	ldr	r3, [pc, #28]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e80:	041b      	lsls	r3, r3, #16
 8006e82:	0e1b      	lsrs	r3, r3, #24
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	4a04      	ldr	r2, [pc, #16]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e90:	e3a3      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
 8006e96:	e3a0      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006e98:	46020c00 	.word	0x46020c00
 8006e9c:	080094d0 	.word	0x080094d0
 8006ea0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea8:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006eac:	430b      	orrs	r3, r1
 8006eae:	d148      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006eb0:	4b9d      	ldr	r3, [pc, #628]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006eb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006eba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	2bc0      	cmp	r3, #192	; 0xc0
 8006ec0:	d024      	beq.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	2bc0      	cmp	r3, #192	; 0xc0
 8006ec6:	d839      	bhi.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	2b80      	cmp	r3, #128	; 0x80
 8006ecc:	d00d      	beq.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	2b80      	cmp	r3, #128	; 0x80
 8006ed2:	d833      	bhi.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	d011      	beq.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006ee0:	e02c      	b.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006ee2:	f7fd ffd1 	bl	8004e88 <HAL_RCC_GetPCLK3Freq>
 8006ee6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006ee8:	e377      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006eea:	4b8f      	ldr	r3, [pc, #572]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef6:	d102      	bne.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8006ef8:	4b8c      	ldr	r3, [pc, #560]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006efa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006efc:	e36d      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f02:	e36a      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006f04:	f7fd fe76 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8006f08:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f0a:	e366      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006f0c:	4b86      	ldr	r3, [pc, #536]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8006f18:	4b83      	ldr	r3, [pc, #524]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	0f1b      	lsrs	r3, r3, #28
 8006f1e:	f003 030f 	and.w	r3, r3, #15
 8006f22:	e006      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8006f24:	4b80      	ldr	r3, [pc, #512]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f2a:	041b      	lsls	r3, r3, #16
 8006f2c:	0f1b      	lsrs	r3, r3, #28
 8006f2e:	f003 030f 	and.w	r3, r3, #15
 8006f32:	4a7f      	ldr	r2, [pc, #508]	; (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f3a:	e34e      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f40:	e34b      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f46:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8006f4a:	430b      	orrs	r3, r1
 8006f4c:	d147      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006f4e:	4b76      	ldr	r3, [pc, #472]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f58:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d103      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f60:	f7fd ff6a 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 8006f64:	6378      	str	r0, [r7, #52]	; 0x34
 8006f66:	e338      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f6e:	d103      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f70:	f7fd fe40 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8006f74:	6378      	str	r0, [r7, #52]	; 0x34
 8006f76:	e330      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006f78:	4b6b      	ldr	r3, [pc, #428]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f84:	d106      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f8c:	d102      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8006f8e:	4b67      	ldr	r3, [pc, #412]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006f90:	637b      	str	r3, [r7, #52]	; 0x34
 8006f92:	e322      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006f94:	4b64      	ldr	r3, [pc, #400]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0320 	and.w	r3, r3, #32
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	d11b      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006fa6:	d117      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fa8:	4b5f      	ldr	r3, [pc, #380]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006fb4:	4b5c      	ldr	r3, [pc, #368]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	0e1b      	lsrs	r3, r3, #24
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	e006      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8006fc0:	4b59      	ldr	r3, [pc, #356]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fc6:	041b      	lsls	r3, r3, #16
 8006fc8:	0e1b      	lsrs	r3, r3, #24
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	4a58      	ldr	r2, [pc, #352]	; (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd6:	e300      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	637b      	str	r3, [r7, #52]	; 0x34
 8006fdc:	e2fd      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fe2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006fe6:	430b      	orrs	r3, r1
 8006fe8:	d15b      	bne.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006fea:	4b4f      	ldr	r3, [pc, #316]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ff4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d117      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ffc:	4b4a      	ldr	r3, [pc, #296]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d005      	beq.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8007008:	4b47      	ldr	r3, [pc, #284]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	0e1b      	lsrs	r3, r3, #24
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	e006      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8007014:	4b44      	ldr	r3, [pc, #272]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800701a:	041b      	lsls	r3, r3, #16
 800701c:	0e1b      	lsrs	r3, r3, #24
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	4a43      	ldr	r2, [pc, #268]	; (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007028:	637b      	str	r3, [r7, #52]	; 0x34
 800702a:	e2d6      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800702c:	4b3e      	ldr	r3, [pc, #248]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800702e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800703a:	d112      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 800703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007042:	d10e      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007044:	4b38      	ldr	r3, [pc, #224]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800704a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800704e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007052:	d102      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8007054:	23fa      	movs	r3, #250	; 0xfa
 8007056:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007058:	e2bf      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800705a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800705e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007060:	e2bb      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007062:	4b31      	ldr	r3, [pc, #196]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800706a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800706e:	d106      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007076:	d102      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8007078:	4b2c      	ldr	r3, [pc, #176]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800707a:	637b      	str	r3, [r7, #52]	; 0x34
 800707c:	e2ad      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800707e:	4b2a      	ldr	r3, [pc, #168]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007080:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b02      	cmp	r3, #2
 800708a:	d107      	bne.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007092:	d103      	bne.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8007094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
 800709a:	e29e      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	637b      	str	r3, [r7, #52]	; 0x34
 80070a0:	e29b      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80070a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070a6:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80070aa:	430b      	orrs	r3, r1
 80070ac:	d162      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80070ae:	4b1e      	ldr	r3, [pc, #120]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80070b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070b8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d117      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070c0:	4b19      	ldr	r3, [pc, #100]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80070cc:	4b16      	ldr	r3, [pc, #88]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	0e1b      	lsrs	r3, r3, #24
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	e006      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80070d8:	4b13      	ldr	r3, [pc, #76]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80070da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070de:	041b      	lsls	r3, r3, #16
 80070e0:	0e1b      	lsrs	r3, r3, #24
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	4a12      	ldr	r2, [pc, #72]	; (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80070e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070ec:	637b      	str	r3, [r7, #52]	; 0x34
 80070ee:	e274      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80070f0:	4b0d      	ldr	r3, [pc, #52]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80070f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070fe:	d119      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007106:	d115      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007108:	4b07      	ldr	r3, [pc, #28]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800710a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800710e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007116:	d102      	bne.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8007118:	23fa      	movs	r3, #250	; 0xfa
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800711c:	e25d      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800711e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007122:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007124:	e259      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007126:	bf00      	nop
 8007128:	46020c00 	.word	0x46020c00
 800712c:	00f42400 	.word	0x00f42400
 8007130:	080094d0 	.word	0x080094d0
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007134:	4b9d      	ldr	r3, [pc, #628]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800713c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007140:	d106      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007148:	d102      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800714a:	4b99      	ldr	r3, [pc, #612]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
 800714e:	e244      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007150:	4b96      	ldr	r3, [pc, #600]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b02      	cmp	r3, #2
 800715c:	d107      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007164:	d103      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8007166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800716a:	637b      	str	r3, [r7, #52]	; 0x34
 800716c:	e235      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	637b      	str	r3, [r7, #52]	; 0x34
 8007172:	e232      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007178:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800717c:	430b      	orrs	r3, r1
 800717e:	d147      	bne.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007180:	4b8a      	ldr	r3, [pc, #552]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007186:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800718a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	2b00      	cmp	r3, #0
 8007190:	d103      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007192:	f7fd fe51 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 8007196:	6378      	str	r0, [r7, #52]	; 0x34
 8007198:	e21f      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800719a:	4b84      	ldr	r3, [pc, #528]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800719c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071a8:	d112      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071b0:	d10e      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071b2:	4b7e      	ldr	r3, [pc, #504]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80071b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071c0:	d102      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80071c2:	23fa      	movs	r3, #250	; 0xfa
 80071c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071c6:	e208      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80071c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071ce:	e204      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80071d0:	4b76      	ldr	r3, [pc, #472]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071dc:	d106      	bne.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80071e4:	d102      	bne.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 80071e6:	4b72      	ldr	r3, [pc, #456]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80071e8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ea:	e1f6      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80071ec:	4b6f      	ldr	r3, [pc, #444]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80071ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d107      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007200:	d103      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8007202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007206:	637b      	str	r3, [r7, #52]	; 0x34
 8007208:	e1e7      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	637b      	str	r3, [r7, #52]	; 0x34
 800720e:	e1e4      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007214:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007218:	430b      	orrs	r3, r1
 800721a:	d12d      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800721c:	4b63      	ldr	r3, [pc, #396]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800721e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007222:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007226:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007228:	4b60      	ldr	r3, [pc, #384]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007234:	d105      	bne.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	2b00      	cmp	r3, #0
 800723a:	d102      	bne.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 800723c:	4b5c      	ldr	r3, [pc, #368]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800723e:	637b      	str	r3, [r7, #52]	; 0x34
 8007240:	e1cb      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007248:	d107      	bne.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800724a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe fc74 	bl	8005b3c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	637b      	str	r3, [r7, #52]	; 0x34
 8007258:	e1bf      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007260:	d107      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007262:	f107 0318 	add.w	r3, r7, #24
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fdce 	bl	8005e08 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	637b      	str	r3, [r7, #52]	; 0x34
 8007270:	e1b3      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	637b      	str	r3, [r7, #52]	; 0x34
 8007276:	e1b0      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800727c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8007280:	430b      	orrs	r3, r1
 8007282:	d14d      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007284:	4b49      	ldr	r3, [pc, #292]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800728a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800728e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007292:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007296:	d028      	beq.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8007298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800729e:	d83c      	bhi.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072a6:	d013      	beq.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 80072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072ae:	d834      	bhi.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d004      	beq.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80072b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072bc:	d004      	beq.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80072be:	e02c      	b.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80072c0:	f7fd fdce 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 80072c4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80072c6:	e188      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80072c8:	f7fd fc94 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 80072cc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80072ce:	e184      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072d0:	4b36      	ldr	r3, [pc, #216]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072dc:	d102      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 80072de:	4b34      	ldr	r3, [pc, #208]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80072e0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072e2:	e17a      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072e8:	e177      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072ea:	4b30      	ldr	r3, [pc, #192]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 80072f6:	4b2d      	ldr	r3, [pc, #180]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	0e1b      	lsrs	r3, r3, #24
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	e006      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8007302:	4b2a      	ldr	r3, [pc, #168]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007304:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007308:	041b      	lsls	r3, r3, #16
 800730a:	0e1b      	lsrs	r3, r3, #24
 800730c:	f003 030f 	and.w	r3, r3, #15
 8007310:	4a28      	ldr	r2, [pc, #160]	; (80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8007312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007316:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007318:	e15f      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800731e:	e15c      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007324:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8007328:	430b      	orrs	r3, r1
 800732a:	d154      	bne.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800732c:	4b1f      	ldr	r3, [pc, #124]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800732e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007332:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007336:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800733e:	d028      	beq.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007346:	d843      	bhi.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800734e:	d013      	beq.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007356:	d83b      	bhi.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	2b00      	cmp	r3, #0
 800735c:	d004      	beq.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007364:	d004      	beq.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8007366:	e033      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007368:	f7fd fd66 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 800736c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800736e:	e134      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007370:	f7fd fc40 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8007374:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007376:	e130      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007378:	4b0c      	ldr	r3, [pc, #48]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007384:	d102      	bne.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8007386:	4b0a      	ldr	r3, [pc, #40]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007388:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800738a:	e126      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007390:	e123      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007392:	4b06      	ldr	r3, [pc, #24]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00c      	beq.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800739e:	4b03      	ldr	r3, [pc, #12]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	0e1b      	lsrs	r3, r3, #24
 80073a4:	f003 030f 	and.w	r3, r3, #15
 80073a8:	e00d      	b.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80073aa:	bf00      	nop
 80073ac:	46020c00 	.word	0x46020c00
 80073b0:	00f42400 	.word	0x00f42400
 80073b4:	080094d0 	.word	0x080094d0
 80073b8:	4b8a      	ldr	r3, [pc, #552]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80073ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	0e1b      	lsrs	r3, r3, #24
 80073c2:	f003 030f 	and.w	r3, r3, #15
 80073c6:	4a88      	ldr	r2, [pc, #544]	; (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80073c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073ce:	e104      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073d4:	e101      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80073d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073da:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80073de:	430b      	orrs	r3, r1
 80073e0:	d16e      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80073e2:	4b80      	ldr	r3, [pc, #512]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80073e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80073e8:	f003 0318 	and.w	r3, r3, #24
 80073ec:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	2b18      	cmp	r3, #24
 80073f2:	d862      	bhi.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80073f4:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80073f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fa:	bf00      	nop
 80073fc:	08007461 	.word	0x08007461
 8007400:	080074bb 	.word	0x080074bb
 8007404:	080074bb 	.word	0x080074bb
 8007408:	080074bb 	.word	0x080074bb
 800740c:	080074bb 	.word	0x080074bb
 8007410:	080074bb 	.word	0x080074bb
 8007414:	080074bb 	.word	0x080074bb
 8007418:	080074bb 	.word	0x080074bb
 800741c:	08007469 	.word	0x08007469
 8007420:	080074bb 	.word	0x080074bb
 8007424:	080074bb 	.word	0x080074bb
 8007428:	080074bb 	.word	0x080074bb
 800742c:	080074bb 	.word	0x080074bb
 8007430:	080074bb 	.word	0x080074bb
 8007434:	080074bb 	.word	0x080074bb
 8007438:	080074bb 	.word	0x080074bb
 800743c:	08007471 	.word	0x08007471
 8007440:	080074bb 	.word	0x080074bb
 8007444:	080074bb 	.word	0x080074bb
 8007448:	080074bb 	.word	0x080074bb
 800744c:	080074bb 	.word	0x080074bb
 8007450:	080074bb 	.word	0x080074bb
 8007454:	080074bb 	.word	0x080074bb
 8007458:	080074bb 	.word	0x080074bb
 800745c:	0800748b 	.word	0x0800748b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007460:	f7fd fd12 	bl	8004e88 <HAL_RCC_GetPCLK3Freq>
 8007464:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007466:	e0b8      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007468:	f7fd fbc4 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 800746c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800746e:	e0b4      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007470:	4b5c      	ldr	r3, [pc, #368]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800747c:	d102      	bne.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800747e:	4b5b      	ldr	r3, [pc, #364]	; (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8007480:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007482:	e0aa      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007488:	e0a7      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800748a:	4b56      	ldr	r3, [pc, #344]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d005      	beq.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8007496:	4b53      	ldr	r3, [pc, #332]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	0e1b      	lsrs	r3, r3, #24
 800749c:	f003 030f 	and.w	r3, r3, #15
 80074a0:	e006      	b.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80074a2:	4b50      	ldr	r3, [pc, #320]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80074a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074a8:	041b      	lsls	r3, r3, #16
 80074aa:	0e1b      	lsrs	r3, r3, #24
 80074ac:	f003 030f 	and.w	r3, r3, #15
 80074b0:	4a4d      	ldr	r2, [pc, #308]	; (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80074b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074b8:	e08f      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074be:	e08c      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80074c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074c4:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80074c8:	430b      	orrs	r3, r1
 80074ca:	d14c      	bne.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80074cc:	4b45      	ldr	r3, [pc, #276]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80074ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80074d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80074d6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074de:	d013      	beq.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074e6:	d83b      	bhi.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074ee:	d013      	beq.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074f6:	d833      	bhi.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d014      	beq.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007504:	d014      	beq.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8007506:	e02b      	b.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007508:	f107 0318 	add.w	r3, r7, #24
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe fc7b 	bl	8005e08 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007516:	e060      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe fb0d 	bl	8005b3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007526:	e058      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007528:	f7fd fb64 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 800752c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800752e:	e054      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007530:	4b2c      	ldr	r3, [pc, #176]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800753c:	4b29      	ldr	r3, [pc, #164]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	0e1b      	lsrs	r3, r3, #24
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	e006      	b.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8007548:	4b26      	ldr	r3, [pc, #152]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800754a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800754e:	041b      	lsls	r3, r3, #16
 8007550:	0e1b      	lsrs	r3, r3, #24
 8007552:	f003 030f 	and.w	r3, r3, #15
 8007556:	4a24      	ldr	r2, [pc, #144]	; (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8007558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800755c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800755e:	e03c      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007564:	e039      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800756a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800756e:	430b      	orrs	r3, r1
 8007570:	d131      	bne.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007572:	4b1c      	ldr	r3, [pc, #112]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800757c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800757e:	4b19      	ldr	r3, [pc, #100]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b02      	cmp	r3, #2
 800758a:	d106      	bne.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	2b00      	cmp	r3, #0
 8007590:	d103      	bne.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8007592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007596:	637b      	str	r3, [r7, #52]	; 0x34
 8007598:	e01f      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800759a:	4b12      	ldr	r3, [pc, #72]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800759c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075a8:	d112      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b0:	d10e      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075b2:	4b0c      	ldr	r3, [pc, #48]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80075b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075c0:	d102      	bne.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 80075c2:	23fa      	movs	r3, #250	; 0xfa
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075c6:	e008      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80075c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80075cc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075ce:	e004      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
 80075d4:	e001      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80075da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3738      	adds	r7, #56	; 0x38
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	46020c00 	.word	0x46020c00
 80075e8:	080094d0 	.word	0x080094d0
 80075ec:	00f42400 	.word	0x00f42400

080075f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80075f8:	4b47      	ldr	r3, [pc, #284]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a46      	ldr	r2, [pc, #280]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 80075fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007602:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007604:	f7fa f9b4 	bl	8001970 <HAL_GetTick>
 8007608:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800760a:	e008      	b.n	800761e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800760c:	f7fa f9b0 	bl	8001970 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	2b02      	cmp	r3, #2
 8007618:	d901      	bls.n	800761e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e077      	b.n	800770e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800761e:	4b3e      	ldr	r3, [pc, #248]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1f0      	bne.n	800760c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800762a:	4b3b      	ldr	r3, [pc, #236]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 800762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007632:	f023 0303 	bic.w	r3, r3, #3
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	6811      	ldr	r1, [r2, #0]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	6852      	ldr	r2, [r2, #4]
 800763e:	3a01      	subs	r2, #1
 8007640:	0212      	lsls	r2, r2, #8
 8007642:	430a      	orrs	r2, r1
 8007644:	4934      	ldr	r1, [pc, #208]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 8007646:	4313      	orrs	r3, r2
 8007648:	62cb      	str	r3, [r1, #44]	; 0x2c
 800764a:	4b33      	ldr	r3, [pc, #204]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 800764c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800764e:	4b33      	ldr	r3, [pc, #204]	; (800771c <RCCEx_PLL2_Config+0x12c>)
 8007650:	4013      	ands	r3, r2
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6892      	ldr	r2, [r2, #8]
 8007656:	3a01      	subs	r2, #1
 8007658:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	68d2      	ldr	r2, [r2, #12]
 8007660:	3a01      	subs	r2, #1
 8007662:	0252      	lsls	r2, r2, #9
 8007664:	b292      	uxth	r2, r2
 8007666:	4311      	orrs	r1, r2
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6912      	ldr	r2, [r2, #16]
 800766c:	3a01      	subs	r2, #1
 800766e:	0412      	lsls	r2, r2, #16
 8007670:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007674:	4311      	orrs	r1, r2
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	6952      	ldr	r2, [r2, #20]
 800767a:	3a01      	subs	r2, #1
 800767c:	0612      	lsls	r2, r2, #24
 800767e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007682:	430a      	orrs	r2, r1
 8007684:	4924      	ldr	r1, [pc, #144]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 8007686:	4313      	orrs	r3, r2
 8007688:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800768a:	4b23      	ldr	r3, [pc, #140]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	f023 020c 	bic.w	r2, r3, #12
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	4920      	ldr	r1, [pc, #128]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 8007698:	4313      	orrs	r3, r2
 800769a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800769c:	4b1e      	ldr	r3, [pc, #120]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 800769e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	491c      	ldr	r1, [pc, #112]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80076aa:	4b1b      	ldr	r3, [pc, #108]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	4a1a      	ldr	r2, [pc, #104]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 80076b0:	f023 0310 	bic.w	r3, r3, #16
 80076b4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80076b6:	4b18      	ldr	r3, [pc, #96]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	69d2      	ldr	r2, [r2, #28]
 80076c6:	00d2      	lsls	r2, r2, #3
 80076c8:	4913      	ldr	r1, [pc, #76]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80076ce:	4b12      	ldr	r3, [pc, #72]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	4a11      	ldr	r2, [pc, #68]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 80076d4:	f043 0310 	orr.w	r3, r3, #16
 80076d8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80076da:	4b0f      	ldr	r3, [pc, #60]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a0e      	ldr	r2, [pc, #56]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 80076e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076e4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076e6:	f7fa f943 	bl	8001970 <HAL_GetTick>
 80076ea:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076ec:	e008      	b.n	8007700 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076ee:	f7fa f93f 	bl	8001970 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d901      	bls.n	8007700 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e006      	b.n	800770e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007700:	4b05      	ldr	r3, [pc, #20]	; (8007718 <RCCEx_PLL2_Config+0x128>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d0f0      	beq.n	80076ee <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800770c:	2300      	movs	r3, #0

}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	46020c00 	.word	0x46020c00
 800771c:	80800000 	.word	0x80800000

08007720 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007728:	4b47      	ldr	r3, [pc, #284]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a46      	ldr	r2, [pc, #280]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 800772e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007732:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007734:	f7fa f91c 	bl	8001970 <HAL_GetTick>
 8007738:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800773a:	e008      	b.n	800774e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800773c:	f7fa f918 	bl	8001970 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d901      	bls.n	800774e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e077      	b.n	800783e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800774e:	4b3e      	ldr	r3, [pc, #248]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1f0      	bne.n	800773c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800775a:	4b3b      	ldr	r3, [pc, #236]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 800775c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007762:	f023 0303 	bic.w	r3, r3, #3
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6811      	ldr	r1, [r2, #0]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6852      	ldr	r2, [r2, #4]
 800776e:	3a01      	subs	r2, #1
 8007770:	0212      	lsls	r2, r2, #8
 8007772:	430a      	orrs	r2, r1
 8007774:	4934      	ldr	r1, [pc, #208]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 8007776:	4313      	orrs	r3, r2
 8007778:	630b      	str	r3, [r1, #48]	; 0x30
 800777a:	4b33      	ldr	r3, [pc, #204]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 800777c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800777e:	4b33      	ldr	r3, [pc, #204]	; (800784c <RCCEx_PLL3_Config+0x12c>)
 8007780:	4013      	ands	r3, r2
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	6892      	ldr	r2, [r2, #8]
 8007786:	3a01      	subs	r2, #1
 8007788:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	68d2      	ldr	r2, [r2, #12]
 8007790:	3a01      	subs	r2, #1
 8007792:	0252      	lsls	r2, r2, #9
 8007794:	b292      	uxth	r2, r2
 8007796:	4311      	orrs	r1, r2
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	6912      	ldr	r2, [r2, #16]
 800779c:	3a01      	subs	r2, #1
 800779e:	0412      	lsls	r2, r2, #16
 80077a0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80077a4:	4311      	orrs	r1, r2
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	6952      	ldr	r2, [r2, #20]
 80077aa:	3a01      	subs	r2, #1
 80077ac:	0612      	lsls	r2, r2, #24
 80077ae:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80077b2:	430a      	orrs	r2, r1
 80077b4:	4924      	ldr	r1, [pc, #144]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80077ba:	4b23      	ldr	r3, [pc, #140]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 80077bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077be:	f023 020c 	bic.w	r2, r3, #12
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	4920      	ldr	r1, [pc, #128]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80077cc:	4b1e      	ldr	r3, [pc, #120]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 80077ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	491c      	ldr	r1, [pc, #112]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80077da:	4b1b      	ldr	r3, [pc, #108]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 80077dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077de:	4a1a      	ldr	r2, [pc, #104]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 80077e0:	f023 0310 	bic.w	r3, r3, #16
 80077e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077e6:	4b18      	ldr	r3, [pc, #96]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 80077e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	69d2      	ldr	r2, [r2, #28]
 80077f6:	00d2      	lsls	r2, r2, #3
 80077f8:	4913      	ldr	r1, [pc, #76]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80077fe:	4b12      	ldr	r3, [pc, #72]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 8007800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007802:	4a11      	ldr	r2, [pc, #68]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 8007804:	f043 0310 	orr.w	r3, r3, #16
 8007808:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800780a:	4b0f      	ldr	r3, [pc, #60]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a0e      	ldr	r2, [pc, #56]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 8007810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007814:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007816:	f7fa f8ab 	bl	8001970 <HAL_GetTick>
 800781a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800781c:	e008      	b.n	8007830 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800781e:	f7fa f8a7 	bl	8001970 <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b02      	cmp	r3, #2
 800782a:	d901      	bls.n	8007830 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e006      	b.n	800783e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007830:	4b05      	ldr	r3, [pc, #20]	; (8007848 <RCCEx_PLL3_Config+0x128>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0f0      	beq.n	800781e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	46020c00 	.word	0x46020c00
 800784c:	80800000 	.word	0x80800000

08007850 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e03e      	b.n	80078e4 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f7f9 ff60 	bl	8001740 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3308      	adds	r3, #8
 8007888:	4619      	mov	r1, r3
 800788a:	4610      	mov	r0, r2
 800788c:	f000 fcda 	bl	8008244 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6818      	ldr	r0, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	461a      	mov	r2, r3
 800789a:	68b9      	ldr	r1, [r7, #8]
 800789c:	f000 fda2 	bl	80083e4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6858      	ldr	r0, [r3, #4]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	f000 fdeb 	bl	8008488 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	6892      	ldr	r2, [r2, #8]
 80078ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	6892      	ldr	r2, [r2, #8]
 80078c6:	f041 0101 	orr.w	r1, r1, #1
 80078ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80078ce:	4b07      	ldr	r3, [pc, #28]	; (80078ec <HAL_SRAM_Init+0x9c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a06      	ldr	r2, [pc, #24]	; (80078ec <HAL_SRAM_Init+0x9c>)
 80078d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078d8:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	420d0400 	.word	0x420d0400

080078f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e042      	b.n	8007988 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007908:	2b00      	cmp	r3, #0
 800790a:	d106      	bne.n	800791a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7f9 fdc9 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2224      	movs	r2, #36	; 0x24
 800791e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0201 	bic.w	r2, r2, #1
 8007930:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f82c 	bl	8007990 <UART_SetConfig>
 8007938:	4603      	mov	r3, r0
 800793a:	2b01      	cmp	r3, #1
 800793c:	d101      	bne.n	8007942 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e022      	b.n	8007988 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f9c2 	bl	8007cd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800795e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800796e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f042 0201 	orr.w	r2, r2, #1
 800797e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fa49 	bl	8007e18 <UART_CheckIdleState>
 8007986:	4603      	mov	r3, r0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007994:	b094      	sub	sp, #80	; 0x50
 8007996:	af00      	add	r7, sp, #0
 8007998:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80079a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	4b7e      	ldr	r3, [pc, #504]	; (8007ba0 <UART_SetConfig+0x210>)
 80079a6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	431a      	orrs	r2, r3
 80079b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	431a      	orrs	r2, r3
 80079b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	4313      	orrs	r3, r2
 80079be:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4977      	ldr	r1, [pc, #476]	; (8007ba4 <UART_SetConfig+0x214>)
 80079c8:	4019      	ands	r1, r3
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d0:	430b      	orrs	r3, r1
 80079d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	68d9      	ldr	r1, [r3, #12]
 80079e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	ea40 0301 	orr.w	r3, r0, r1
 80079ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	4b6a      	ldr	r3, [pc, #424]	; (8007ba0 <UART_SetConfig+0x210>)
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d009      	beq.n	8007a10 <UART_SetConfig+0x80>
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	4b69      	ldr	r3, [pc, #420]	; (8007ba8 <UART_SetConfig+0x218>)
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d004      	beq.n	8007a10 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a08:	6a1a      	ldr	r2, [r3, #32]
 8007a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007a1a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a24:	430b      	orrs	r3, r1
 8007a26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2e:	f023 000f 	bic.w	r0, r3, #15
 8007a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	ea40 0301 	orr.w	r3, r0, r1
 8007a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	4b59      	ldr	r3, [pc, #356]	; (8007bac <UART_SetConfig+0x21c>)
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d102      	bne.n	8007a50 <UART_SetConfig+0xc0>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a4e:	e029      	b.n	8007aa4 <UART_SetConfig+0x114>
 8007a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	4b56      	ldr	r3, [pc, #344]	; (8007bb0 <UART_SetConfig+0x220>)
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d102      	bne.n	8007a60 <UART_SetConfig+0xd0>
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a5e:	e021      	b.n	8007aa4 <UART_SetConfig+0x114>
 8007a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	4b53      	ldr	r3, [pc, #332]	; (8007bb4 <UART_SetConfig+0x224>)
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d102      	bne.n	8007a70 <UART_SetConfig+0xe0>
 8007a6a:	2304      	movs	r3, #4
 8007a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a6e:	e019      	b.n	8007aa4 <UART_SetConfig+0x114>
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	4b50      	ldr	r3, [pc, #320]	; (8007bb8 <UART_SetConfig+0x228>)
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d102      	bne.n	8007a80 <UART_SetConfig+0xf0>
 8007a7a:	2308      	movs	r3, #8
 8007a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a7e:	e011      	b.n	8007aa4 <UART_SetConfig+0x114>
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	4b4d      	ldr	r3, [pc, #308]	; (8007bbc <UART_SetConfig+0x22c>)
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d102      	bne.n	8007a90 <UART_SetConfig+0x100>
 8007a8a:	2310      	movs	r3, #16
 8007a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a8e:	e009      	b.n	8007aa4 <UART_SetConfig+0x114>
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	4b42      	ldr	r3, [pc, #264]	; (8007ba0 <UART_SetConfig+0x210>)
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d102      	bne.n	8007aa0 <UART_SetConfig+0x110>
 8007a9a:	2320      	movs	r3, #32
 8007a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a9e:	e001      	b.n	8007aa4 <UART_SetConfig+0x114>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	4b3d      	ldr	r3, [pc, #244]	; (8007ba0 <UART_SetConfig+0x210>)
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d005      	beq.n	8007aba <UART_SetConfig+0x12a>
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b3d      	ldr	r3, [pc, #244]	; (8007ba8 <UART_SetConfig+0x218>)
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	f040 8085 	bne.w	8007bc4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007abc:	2200      	movs	r2, #0
 8007abe:	623b      	str	r3, [r7, #32]
 8007ac0:	627a      	str	r2, [r7, #36]	; 0x24
 8007ac2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007ac6:	f7fe fc6b 	bl	80063a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007aca:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 80e8 	beq.w	8007ca4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	4a39      	ldr	r2, [pc, #228]	; (8007bc0 <UART_SetConfig+0x230>)
 8007ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ae6:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	4613      	mov	r3, r2
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	4413      	add	r3, r2
 8007af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d305      	bcc.n	8007b04 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d903      	bls.n	8007b0c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007b0a:	e048      	b.n	8007b9e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b0e:	2200      	movs	r2, #0
 8007b10:	61bb      	str	r3, [r7, #24]
 8007b12:	61fa      	str	r2, [r7, #28]
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	4a29      	ldr	r2, [pc, #164]	; (8007bc0 <UART_SetConfig+0x230>)
 8007b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2200      	movs	r2, #0
 8007b22:	613b      	str	r3, [r7, #16]
 8007b24:	617a      	str	r2, [r7, #20]
 8007b26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007b2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b2e:	f7f8 fba1 	bl	8000274 <__aeabi_uldivmod>
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	4610      	mov	r0, r2
 8007b38:	4619      	mov	r1, r3
 8007b3a:	f04f 0200 	mov.w	r2, #0
 8007b3e:	f04f 0300 	mov.w	r3, #0
 8007b42:	020b      	lsls	r3, r1, #8
 8007b44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b48:	0202      	lsls	r2, r0, #8
 8007b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b4c:	6849      	ldr	r1, [r1, #4]
 8007b4e:	0849      	lsrs	r1, r1, #1
 8007b50:	2000      	movs	r0, #0
 8007b52:	460c      	mov	r4, r1
 8007b54:	4605      	mov	r5, r0
 8007b56:	eb12 0804 	adds.w	r8, r2, r4
 8007b5a:	eb43 0905 	adc.w	r9, r3, r5
 8007b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	60bb      	str	r3, [r7, #8]
 8007b66:	60fa      	str	r2, [r7, #12]
 8007b68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	4649      	mov	r1, r9
 8007b70:	f7f8 fb80 	bl	8000274 <__aeabi_uldivmod>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4613      	mov	r3, r2
 8007b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b82:	d308      	bcc.n	8007b96 <UART_SetConfig+0x206>
 8007b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b8a:	d204      	bcs.n	8007b96 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b92:	60da      	str	r2, [r3, #12]
 8007b94:	e003      	b.n	8007b9e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007b9c:	e082      	b.n	8007ca4 <UART_SetConfig+0x314>
 8007b9e:	e081      	b.n	8007ca4 <UART_SetConfig+0x314>
 8007ba0:	46002400 	.word	0x46002400
 8007ba4:	cfff69f3 	.word	0xcfff69f3
 8007ba8:	56002400 	.word	0x56002400
 8007bac:	40013800 	.word	0x40013800
 8007bb0:	40004400 	.word	0x40004400
 8007bb4:	40004800 	.word	0x40004800
 8007bb8:	40004c00 	.word	0x40004c00
 8007bbc:	40005000 	.word	0x40005000
 8007bc0:	08009590 	.word	0x08009590
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bcc:	d13c      	bne.n	8007c48 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	607a      	str	r2, [r7, #4]
 8007bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bda:	f7fe fbe1 	bl	80063a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007bde:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d05e      	beq.n	8007ca4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	4a39      	ldr	r2, [pc, #228]	; (8007cd0 <UART_SetConfig+0x340>)
 8007bec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bf8:	005a      	lsls	r2, r3, #1
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	085b      	lsrs	r3, r3, #1
 8007c00:	441a      	add	r2, r3
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c0e:	2b0f      	cmp	r3, #15
 8007c10:	d916      	bls.n	8007c40 <UART_SetConfig+0x2b0>
 8007c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c18:	d212      	bcs.n	8007c40 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	f023 030f 	bic.w	r3, r3, #15
 8007c22:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c26:	085b      	lsrs	r3, r3, #1
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007c32:	4313      	orrs	r3, r2
 8007c34:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007c3c:	60da      	str	r2, [r3, #12]
 8007c3e:	e031      	b.n	8007ca4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007c46:	e02d      	b.n	8007ca4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	469a      	mov	sl, r3
 8007c4e:	4693      	mov	fp, r2
 8007c50:	4650      	mov	r0, sl
 8007c52:	4659      	mov	r1, fp
 8007c54:	f7fe fba4 	bl	80063a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c58:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d021      	beq.n	8007ca4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	4a1a      	ldr	r2, [pc, #104]	; (8007cd0 <UART_SetConfig+0x340>)
 8007c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	085b      	lsrs	r3, r3, #1
 8007c78:	441a      	add	r2, r3
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c82:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c86:	2b0f      	cmp	r3, #15
 8007c88:	d909      	bls.n	8007c9e <UART_SetConfig+0x30e>
 8007c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c90:	d205      	bcs.n	8007c9e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60da      	str	r2, [r3, #12]
 8007c9c:	e002      	b.n	8007ca4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007cc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3750      	adds	r7, #80	; 0x50
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cce:	bf00      	nop
 8007cd0:	08009590 	.word	0x08009590

08007cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d46:	f003 0308 	and.w	r3, r3, #8
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d68:	f003 0310 	and.w	r3, r3, #16
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d01a      	beq.n	8007dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dd2:	d10a      	bne.n	8007dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	605a      	str	r2, [r3, #4]
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e28:	f7f9 fda2 	bl	8001970 <HAL_GetTick>
 8007e2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0308 	and.w	r3, r3, #8
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d10e      	bne.n	8007e5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f82f 	bl	8007eae <UART_WaitOnFlagUntilTimeout>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e025      	b.n	8007ea6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	d10e      	bne.n	8007e86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f819 	bl	8007eae <UART_WaitOnFlagUntilTimeout>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e00f      	b.n	8007ea6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b09c      	sub	sp, #112	; 0x70
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	603b      	str	r3, [r7, #0]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ebe:	e0a9      	b.n	8008014 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec6:	f000 80a5 	beq.w	8008014 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eca:	f7f9 fd51 	bl	8001970 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d302      	bcc.n	8007ee0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d140      	bne.n	8007f62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ef4:	667b      	str	r3, [r7, #100]	; 0x64
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f06:	e841 2300 	strex	r3, r2, [r1]
 8007f0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1e6      	bne.n	8007ee0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3308      	adds	r3, #8
 8007f18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	f023 0301 	bic.w	r3, r3, #1
 8007f28:	663b      	str	r3, [r7, #96]	; 0x60
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3308      	adds	r3, #8
 8007f30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f32:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f3a:	e841 2300 	strex	r3, r2, [r1]
 8007f3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1e5      	bne.n	8007f12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e069      	b.n	8008036 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d051      	beq.n	8008014 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f7e:	d149      	bne.n	8008014 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8007faa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fb0:	e841 2300 	strex	r3, r2, [r1]
 8007fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e6      	bne.n	8007f8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	613b      	str	r3, [r7, #16]
   return(result);
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	f023 0301 	bic.w	r3, r3, #1
 8007fd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3308      	adds	r3, #8
 8007fda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fdc:	623a      	str	r2, [r7, #32]
 8007fde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	69f9      	ldr	r1, [r7, #28]
 8007fe2:	6a3a      	ldr	r2, [r7, #32]
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e5      	bne.n	8007fbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2220      	movs	r2, #32
 8008004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e010      	b.n	8008036 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69da      	ldr	r2, [r3, #28]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	4013      	ands	r3, r2
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	429a      	cmp	r2, r3
 8008022:	bf0c      	ite	eq
 8008024:	2301      	moveq	r3, #1
 8008026:	2300      	movne	r3, #0
 8008028:	b2db      	uxtb	r3, r3
 800802a:	461a      	mov	r2, r3
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	429a      	cmp	r2, r3
 8008030:	f43f af46 	beq.w	8007ec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3770      	adds	r7, #112	; 0x70
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800803e:	b480      	push	{r7}
 8008040:	b085      	sub	sp, #20
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800804c:	2b01      	cmp	r3, #1
 800804e:	d101      	bne.n	8008054 <HAL_UARTEx_DisableFifoMode+0x16>
 8008050:	2302      	movs	r3, #2
 8008052:	e027      	b.n	80080a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2224      	movs	r2, #36	; 0x24
 8008060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f022 0201 	bic.w	r2, r2, #1
 800807a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008082:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2220      	movs	r2, #32
 8008096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e02d      	b.n	8008124 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2224      	movs	r2, #36	; 0x24
 80080d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0201 	bic.w	r2, r2, #1
 80080ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	430a      	orrs	r2, r1
 8008102:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f84f 	bl	80081a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2220      	movs	r2, #32
 8008116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800813c:	2b01      	cmp	r3, #1
 800813e:	d101      	bne.n	8008144 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008140:	2302      	movs	r3, #2
 8008142:	e02d      	b.n	80081a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2224      	movs	r2, #36	; 0x24
 8008150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0201 	bic.w	r2, r2, #1
 800816a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	430a      	orrs	r2, r1
 800817e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f811 	bl	80081a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2220      	movs	r2, #32
 8008192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d108      	bne.n	80081ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081c8:	e031      	b.n	800822e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081ca:	2308      	movs	r3, #8
 80081cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081ce:	2308      	movs	r3, #8
 80081d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	0e5b      	lsrs	r3, r3, #25
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	f003 0307 	and.w	r3, r3, #7
 80081e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	0f5b      	lsrs	r3, r3, #29
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	7b3a      	ldrb	r2, [r7, #12]
 80081f6:	4911      	ldr	r1, [pc, #68]	; (800823c <UARTEx_SetNbDataToProcess+0x94>)
 80081f8:	5c8a      	ldrb	r2, [r1, r2]
 80081fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081fe:	7b3a      	ldrb	r2, [r7, #12]
 8008200:	490f      	ldr	r1, [pc, #60]	; (8008240 <UARTEx_SetNbDataToProcess+0x98>)
 8008202:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008204:	fb93 f3f2 	sdiv	r3, r3, r2
 8008208:	b29a      	uxth	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	7b7a      	ldrb	r2, [r7, #13]
 8008214:	4909      	ldr	r1, [pc, #36]	; (800823c <UARTEx_SetNbDataToProcess+0x94>)
 8008216:	5c8a      	ldrb	r2, [r1, r2]
 8008218:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800821c:	7b7a      	ldrb	r2, [r7, #13]
 800821e:	4908      	ldr	r1, [pc, #32]	; (8008240 <UARTEx_SetNbDataToProcess+0x98>)
 8008220:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008222:	fb93 f3f2 	sdiv	r3, r3, r2
 8008226:	b29a      	uxth	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800822e:	bf00      	nop
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	080095a8 	.word	0x080095a8
 8008240:	080095b0 	.word	0x080095b0

08008244 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	6812      	ldr	r2, [r2, #0]
 800825c:	f023 0101 	bic.w	r1, r3, #1
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	2b08      	cmp	r3, #8
 800826c:	d102      	bne.n	8008274 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800826e:	2340      	movs	r3, #64	; 0x40
 8008270:	617b      	str	r3, [r7, #20]
 8008272:	e001      	b.n	8008278 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008284:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800828a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008290:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008296:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800829c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80082a2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80082a8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80082ae:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80082b4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80082ba:	4313      	orrs	r3, r2
 80082bc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	4313      	orrs	r3, r2
 80082da:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80082e6:	4b3e      	ldr	r3, [pc, #248]	; (80083e0 <FMC_NORSRAM_Init+0x19c>)
 80082e8:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082f0:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082f8:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8008300:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008308:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	43db      	mvns	r3, r3
 8008318:	ea02 0103 	and.w	r1, r2, r3
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	4319      	orrs	r1, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008332:	d10c      	bne.n	800834e <FMC_NORSRAM_Init+0x10a>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d008      	beq.n	800834e <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008348:	431a      	orrs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d006      	beq.n	8008364 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800836a:	2b01      	cmp	r3, #1
 800836c:	d12f      	bne.n	80083ce <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	0c1b      	lsrs	r3, r3, #16
 8008374:	041b      	lsls	r3, r3, #16
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b04      	cmp	r3, #4
 8008386:	d014      	beq.n	80083b2 <FMC_NORSRAM_Init+0x16e>
 8008388:	2b04      	cmp	r3, #4
 800838a:	d819      	bhi.n	80083c0 <FMC_NORSRAM_Init+0x17c>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <FMC_NORSRAM_Init+0x152>
 8008390:	2b02      	cmp	r3, #2
 8008392:	d007      	beq.n	80083a4 <FMC_NORSRAM_Init+0x160>
 8008394:	e014      	b.n	80083c0 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	621a      	str	r2, [r3, #32]
        break;
 80083a2:	e015      	b.n	80083d0 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	621a      	str	r2, [r3, #32]
        break;
 80083b0:	e00e      	b.n	80083d0 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	621a      	str	r2, [r3, #32]
        break;
 80083be:	e007      	b.n	80083d0 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	621a      	str	r2, [r3, #32]
        break;
 80083cc:	e000      	b.n	80083d0 <FMC_NORSRAM_Init+0x18c>
    }
  }
 80083ce:	bf00      	nop

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	0008fb7f 	.word	0x0008fb7f

080083e4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	1c5a      	adds	r2, r3, #1
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	011b      	lsls	r3, r3, #4
 8008404:	431a      	orrs	r2, r3
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	021b      	lsls	r3, r3, #8
 800840c:	431a      	orrs	r2, r3
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	079b      	lsls	r3, r3, #30
 8008414:	431a      	orrs	r2, r3
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	041b      	lsls	r3, r3, #16
 800841c:	431a      	orrs	r2, r3
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	3b01      	subs	r3, #1
 8008424:	051b      	lsls	r3, r3, #20
 8008426:	431a      	orrs	r2, r3
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	3b02      	subs	r3, #2
 800842e:	061b      	lsls	r3, r3, #24
 8008430:	ea42 0103 	orr.w	r1, r2, r3
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	3201      	adds	r2, #1
 800843c:	4319      	orrs	r1, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800844c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008450:	d113      	bne.n	800847a <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800845a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	3b01      	subs	r3, #1
 8008462:	051b      	lsls	r3, r3, #20
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	4313      	orrs	r3, r2
 8008468:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	431a      	orrs	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	371c      	adds	r7, #28
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800849c:	d121      	bne.n	80084e2 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a6:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	6819      	ldr	r1, [r3, #0]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	4319      	orrs	r1, r3
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	021b      	lsls	r3, r3, #8
 80084bc:	4319      	orrs	r1, r3
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	079b      	lsls	r3, r3, #30
 80084c4:	4319      	orrs	r1, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	4319      	orrs	r1, r3
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	041b      	lsls	r3, r3, #16
 80084d2:	430b      	orrs	r3, r1
 80084d4:	ea42 0103 	orr.w	r1, r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80084e0:	e005      	b.n	80084ee <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80084ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b08b      	sub	sp, #44	; 0x2c
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	fa93 f3a3 	rbit	r3, r3
 8008516:	613b      	str	r3, [r7, #16]
  return result;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008522:	2320      	movs	r3, #32
 8008524:	e003      	b.n	800852e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	fab3 f383 	clz	r3, r3
 800852c:	b2db      	uxtb	r3, r3
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	2103      	movs	r1, #3
 8008532:	fa01 f303 	lsl.w	r3, r1, r3
 8008536:	43db      	mvns	r3, r3
 8008538:	401a      	ands	r2, r3
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	fa93 f3a3 	rbit	r3, r3
 8008544:	61fb      	str	r3, [r7, #28]
  return result;
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008550:	2320      	movs	r3, #32
 8008552:	e003      	b.n	800855c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	fab3 f383 	clz	r3, r3
 800855a:	b2db      	uxtb	r3, r3
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	fa01 f303 	lsl.w	r3, r1, r3
 8008564:	431a      	orrs	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	601a      	str	r2, [r3, #0]
}
 800856a:	bf00      	nop
 800856c:	372c      	adds	r7, #44	; 0x2c
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	60f8      	str	r0, [r7, #12]
 800857e:	60b9      	str	r1, [r7, #8]
 8008580:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	43db      	mvns	r3, r3
 800858a:	401a      	ands	r2, r3
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	fb01 f303 	mul.w	r3, r1, r3
 8008594:	431a      	orrs	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	605a      	str	r2, [r3, #4]
}
 800859a:	bf00      	nop
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b08b      	sub	sp, #44	; 0x2c
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	60f8      	str	r0, [r7, #12]
 80085ae:	60b9      	str	r1, [r7, #8]
 80085b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689a      	ldr	r2, [r3, #8]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	fa93 f3a3 	rbit	r3, r3
 80085c0:	613b      	str	r3, [r7, #16]
  return result;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d101      	bne.n	80085d0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80085cc:	2320      	movs	r3, #32
 80085ce:	e003      	b.n	80085d8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	fab3 f383 	clz	r3, r3
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	2103      	movs	r1, #3
 80085dc:	fa01 f303 	lsl.w	r3, r1, r3
 80085e0:	43db      	mvns	r3, r3
 80085e2:	401a      	ands	r2, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	fa93 f3a3 	rbit	r3, r3
 80085ee:	61fb      	str	r3, [r7, #28]
  return result;
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80085fa:	2320      	movs	r3, #32
 80085fc:	e003      	b.n	8008606 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	fab3 f383 	clz	r3, r3
 8008604:	b2db      	uxtb	r3, r3
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	6879      	ldr	r1, [r7, #4]
 800860a:	fa01 f303 	lsl.w	r3, r1, r3
 800860e:	431a      	orrs	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008614:	bf00      	nop
 8008616:	372c      	adds	r7, #44	; 0x2c
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008620:	b480      	push	{r7}
 8008622:	b08b      	sub	sp, #44	; 0x2c
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	68da      	ldr	r2, [r3, #12]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	fa93 f3a3 	rbit	r3, r3
 800863a:	613b      	str	r3, [r7, #16]
  return result;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008646:	2320      	movs	r3, #32
 8008648:	e003      	b.n	8008652 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	fab3 f383 	clz	r3, r3
 8008650:	b2db      	uxtb	r3, r3
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	2103      	movs	r1, #3
 8008656:	fa01 f303 	lsl.w	r3, r1, r3
 800865a:	43db      	mvns	r3, r3
 800865c:	401a      	ands	r2, r3
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	fa93 f3a3 	rbit	r3, r3
 8008668:	61fb      	str	r3, [r7, #28]
  return result;
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008674:	2320      	movs	r3, #32
 8008676:	e003      	b.n	8008680 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	fab3 f383 	clz	r3, r3
 800867e:	b2db      	uxtb	r3, r3
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	fa01 f303 	lsl.w	r3, r1, r3
 8008688:	431a      	orrs	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	60da      	str	r2, [r3, #12]
}
 800868e:	bf00      	nop
 8008690:	372c      	adds	r7, #44	; 0x2c
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800869a:	b480      	push	{r7}
 800869c:	b08b      	sub	sp, #44	; 0x2c
 800869e:	af00      	add	r7, sp, #0
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6a1a      	ldr	r2, [r3, #32]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	fa93 f3a3 	rbit	r3, r3
 80086b4:	613b      	str	r3, [r7, #16]
  return result;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80086c0:	2320      	movs	r3, #32
 80086c2:	e003      	b.n	80086cc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	fab3 f383 	clz	r3, r3
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	210f      	movs	r1, #15
 80086d0:	fa01 f303 	lsl.w	r3, r1, r3
 80086d4:	43db      	mvns	r3, r3
 80086d6:	401a      	ands	r2, r3
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	fa93 f3a3 	rbit	r3, r3
 80086e2:	61fb      	str	r3, [r7, #28]
  return result;
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80086e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d101      	bne.n	80086f2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80086ee:	2320      	movs	r3, #32
 80086f0:	e003      	b.n	80086fa <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	fab3 f383 	clz	r3, r3
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	6879      	ldr	r1, [r7, #4]
 80086fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008702:	431a      	orrs	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008708:	bf00      	nop
 800870a:	372c      	adds	r7, #44	; 0x2c
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008714:	b480      	push	{r7}
 8008716:	b08b      	sub	sp, #44	; 0x2c
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	0a1b      	lsrs	r3, r3, #8
 8008728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	fa93 f3a3 	rbit	r3, r3
 8008730:	613b      	str	r3, [r7, #16]
  return result;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d101      	bne.n	8008740 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800873c:	2320      	movs	r3, #32
 800873e:	e003      	b.n	8008748 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	fab3 f383 	clz	r3, r3
 8008746:	b2db      	uxtb	r3, r3
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	210f      	movs	r1, #15
 800874c:	fa01 f303 	lsl.w	r3, r1, r3
 8008750:	43db      	mvns	r3, r3
 8008752:	401a      	ands	r2, r3
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	0a1b      	lsrs	r3, r3, #8
 8008758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	fa93 f3a3 	rbit	r3, r3
 8008760:	61fb      	str	r3, [r7, #28]
  return result;
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800876c:	2320      	movs	r3, #32
 800876e:	e003      	b.n	8008778 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	fab3 f383 	clz	r3, r3
 8008776:	b2db      	uxtb	r3, r3
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	fa01 f303 	lsl.w	r3, r1, r3
 8008780:	431a      	orrs	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008786:	bf00      	nop
 8008788:	372c      	adds	r7, #44	; 0x2c
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b08a      	sub	sp, #40	; 0x28
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	fa93 f3a3 	rbit	r3, r3
 80087a8:	617b      	str	r3, [r7, #20]
  return result;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <LL_GPIO_Init+0x26>
    return 32U;
 80087b4:	2320      	movs	r3, #32
 80087b6:	e003      	b.n	80087c0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	fab3 f383 	clz	r3, r3
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80087c2:	e050      	b.n	8008866 <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	2101      	movs	r1, #1
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	fa01 f303 	lsl.w	r3, r1, r3
 80087d0:	4013      	ands	r3, r2
 80087d2:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d042      	beq.n	8008860 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	461a      	mov	r2, r3
 80087e0:	6a39      	ldr	r1, [r7, #32]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff fe8a 	bl	80084fc <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d003      	beq.n	80087f8 <LL_GPIO_Init+0x66>
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d106      	bne.n	8008806 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	461a      	mov	r2, r3
 80087fe:	6a39      	ldr	r1, [r7, #32]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff fed0 	bl	80085a6 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	461a      	mov	r2, r3
 800880c:	6a39      	ldr	r1, [r7, #32]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7ff ff06 	bl	8008620 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	2b02      	cmp	r3, #2
 800881a:	d121      	bne.n	8008860 <LL_GPIO_Init+0xce>
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	fa93 f3a3 	rbit	r3, r3
 8008826:	60bb      	str	r3, [r7, #8]
  return result;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <LL_GPIO_Init+0xa4>
    return 32U;
 8008832:	2320      	movs	r3, #32
 8008834:	e003      	b.n	800883e <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	fab3 f383 	clz	r3, r3
 800883c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800883e:	2b07      	cmp	r3, #7
 8008840:	d807      	bhi.n	8008852 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	461a      	mov	r2, r3
 8008848:	6a39      	ldr	r1, [r7, #32]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff ff25 	bl	800869a <LL_GPIO_SetAFPin_0_7>
 8008850:	e006      	b.n	8008860 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	461a      	mov	r2, r3
 8008858:	6a39      	ldr	r1, [r7, #32]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff ff5a 	bl	8008714 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	3301      	adds	r3, #1
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	fa22 f303 	lsr.w	r3, r2, r3
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1a7      	bne.n	80087c4 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d003      	beq.n	8008884 <LL_GPIO_Init+0xf2>
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2b02      	cmp	r3, #2
 8008882:	d107      	bne.n	8008894 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	6819      	ldr	r1, [r3, #0]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	461a      	mov	r2, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7ff fe71 	bl	8008576 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3728      	adds	r7, #40	; 0x28
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800889e:	b084      	sub	sp, #16
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	f107 001c 	add.w	r0, r7, #28
 80088ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fd8f 	bl	80093e0 <USB_CoreReset>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80088c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d106      	bne.n	80088da <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	639a      	str	r2, [r3, #56]	; 0x38
 80088d8:	e005      	b.n	80088e6 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088f2:	b004      	add	sp, #16
 80088f4:	4770      	bx	lr
	...

080088f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4613      	mov	r3, r2
 8008904:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008906:	79fb      	ldrb	r3, [r7, #7]
 8008908:	2b02      	cmp	r3, #2
 800890a:	d165      	bne.n	80089d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	4a41      	ldr	r2, [pc, #260]	; (8008a14 <USB_SetTurnaroundTime+0x11c>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d906      	bls.n	8008922 <USB_SetTurnaroundTime+0x2a>
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	4a40      	ldr	r2, [pc, #256]	; (8008a18 <USB_SetTurnaroundTime+0x120>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d202      	bcs.n	8008922 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800891c:	230f      	movs	r3, #15
 800891e:	617b      	str	r3, [r7, #20]
 8008920:	e062      	b.n	80089e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	4a3c      	ldr	r2, [pc, #240]	; (8008a18 <USB_SetTurnaroundTime+0x120>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d306      	bcc.n	8008938 <USB_SetTurnaroundTime+0x40>
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	4a3b      	ldr	r2, [pc, #236]	; (8008a1c <USB_SetTurnaroundTime+0x124>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d202      	bcs.n	8008938 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008932:	230e      	movs	r3, #14
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	e057      	b.n	80089e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	4a38      	ldr	r2, [pc, #224]	; (8008a1c <USB_SetTurnaroundTime+0x124>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d306      	bcc.n	800894e <USB_SetTurnaroundTime+0x56>
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	4a37      	ldr	r2, [pc, #220]	; (8008a20 <USB_SetTurnaroundTime+0x128>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d202      	bcs.n	800894e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008948:	230d      	movs	r3, #13
 800894a:	617b      	str	r3, [r7, #20]
 800894c:	e04c      	b.n	80089e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	4a33      	ldr	r2, [pc, #204]	; (8008a20 <USB_SetTurnaroundTime+0x128>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d306      	bcc.n	8008964 <USB_SetTurnaroundTime+0x6c>
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	4a32      	ldr	r2, [pc, #200]	; (8008a24 <USB_SetTurnaroundTime+0x12c>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d802      	bhi.n	8008964 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800895e:	230c      	movs	r3, #12
 8008960:	617b      	str	r3, [r7, #20]
 8008962:	e041      	b.n	80089e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	4a2f      	ldr	r2, [pc, #188]	; (8008a24 <USB_SetTurnaroundTime+0x12c>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d906      	bls.n	800897a <USB_SetTurnaroundTime+0x82>
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4a2e      	ldr	r2, [pc, #184]	; (8008a28 <USB_SetTurnaroundTime+0x130>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d802      	bhi.n	800897a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008974:	230b      	movs	r3, #11
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	e036      	b.n	80089e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4a2a      	ldr	r2, [pc, #168]	; (8008a28 <USB_SetTurnaroundTime+0x130>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d906      	bls.n	8008990 <USB_SetTurnaroundTime+0x98>
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	4a29      	ldr	r2, [pc, #164]	; (8008a2c <USB_SetTurnaroundTime+0x134>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d802      	bhi.n	8008990 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800898a:	230a      	movs	r3, #10
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	e02b      	b.n	80089e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	4a26      	ldr	r2, [pc, #152]	; (8008a2c <USB_SetTurnaroundTime+0x134>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d906      	bls.n	80089a6 <USB_SetTurnaroundTime+0xae>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4a25      	ldr	r2, [pc, #148]	; (8008a30 <USB_SetTurnaroundTime+0x138>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d202      	bcs.n	80089a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80089a0:	2309      	movs	r3, #9
 80089a2:	617b      	str	r3, [r7, #20]
 80089a4:	e020      	b.n	80089e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	4a21      	ldr	r2, [pc, #132]	; (8008a30 <USB_SetTurnaroundTime+0x138>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d306      	bcc.n	80089bc <USB_SetTurnaroundTime+0xc4>
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	4a20      	ldr	r2, [pc, #128]	; (8008a34 <USB_SetTurnaroundTime+0x13c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d802      	bhi.n	80089bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80089b6:	2308      	movs	r3, #8
 80089b8:	617b      	str	r3, [r7, #20]
 80089ba:	e015      	b.n	80089e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	4a1d      	ldr	r2, [pc, #116]	; (8008a34 <USB_SetTurnaroundTime+0x13c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d906      	bls.n	80089d2 <USB_SetTurnaroundTime+0xda>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4a1c      	ldr	r2, [pc, #112]	; (8008a38 <USB_SetTurnaroundTime+0x140>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d202      	bcs.n	80089d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80089cc:	2307      	movs	r3, #7
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	e00a      	b.n	80089e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80089d2:	2306      	movs	r3, #6
 80089d4:	617b      	str	r3, [r7, #20]
 80089d6:	e007      	b.n	80089e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d102      	bne.n	80089e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80089de:	2309      	movs	r3, #9
 80089e0:	617b      	str	r3, [r7, #20]
 80089e2:	e001      	b.n	80089e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80089e4:	2309      	movs	r3, #9
 80089e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	68da      	ldr	r2, [r3, #12]
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	029b      	lsls	r3, r3, #10
 80089fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008a00:	431a      	orrs	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	371c      	adds	r7, #28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	00d8acbf 	.word	0x00d8acbf
 8008a18:	00e4e1c0 	.word	0x00e4e1c0
 8008a1c:	00f42400 	.word	0x00f42400
 8008a20:	01067380 	.word	0x01067380
 8008a24:	011a499f 	.word	0x011a499f
 8008a28:	01312cff 	.word	0x01312cff
 8008a2c:	014ca43f 	.word	0x014ca43f
 8008a30:	016e3600 	.word	0x016e3600
 8008a34:	01a6ab1f 	.word	0x01a6ab1f
 8008a38:	01e84800 	.word	0x01e84800

08008a3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f023 0201 	bic.w	r2, r3, #1
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	460b      	mov	r3, r1
 8008a68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a7a:	78fb      	ldrb	r3, [r7, #3]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d115      	bne.n	8008aac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a8c:	2001      	movs	r0, #1
 8008a8e:	f7f8 ff7b 	bl	8001988 <HAL_Delay>
      ms++;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	3301      	adds	r3, #1
 8008a96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fc11 	bl	80092c0 <USB_GetMode>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d01e      	beq.n	8008ae2 <USB_SetCurrentMode+0x84>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2b31      	cmp	r3, #49	; 0x31
 8008aa8:	d9f0      	bls.n	8008a8c <USB_SetCurrentMode+0x2e>
 8008aaa:	e01a      	b.n	8008ae2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d115      	bne.n	8008ade <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008abe:	2001      	movs	r0, #1
 8008ac0:	f7f8 ff62 	bl	8001988 <HAL_Delay>
      ms++;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fbf8 	bl	80092c0 <USB_GetMode>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d005      	beq.n	8008ae2 <USB_SetCurrentMode+0x84>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b31      	cmp	r3, #49	; 0x31
 8008ada:	d9f0      	bls.n	8008abe <USB_SetCurrentMode+0x60>
 8008adc:	e001      	b.n	8008ae2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e005      	b.n	8008aee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b32      	cmp	r3, #50	; 0x32
 8008ae6:	d101      	bne.n	8008aec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e000      	b.n	8008aee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008af8:	b084      	sub	sp, #16
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b086      	sub	sp, #24
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b12:	2300      	movs	r3, #0
 8008b14:	613b      	str	r3, [r7, #16]
 8008b16:	e009      	b.n	8008b2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	3340      	adds	r3, #64	; 0x40
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	2200      	movs	r2, #0
 8008b24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	613b      	str	r3, [r7, #16]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	2b0e      	cmp	r3, #14
 8008b30:	d9f2      	bls.n	8008b18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d11c      	bne.n	8008b72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b46:	f043 0302 	orr.w	r3, r3, #2
 8008b4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	601a      	str	r2, [r3, #0]
 8008b70:	e005      	b.n	8008b7e <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b84:	461a      	mov	r2, r3
 8008b86:	2300      	movs	r3, #0
 8008b88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b90:	4619      	mov	r1, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b98:	461a      	mov	r2, r3
 8008b9a:	680b      	ldr	r3, [r1, #0]
 8008b9c:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b9e:	2103      	movs	r1, #3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f95b 	bl	8008e5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ba6:	2110      	movs	r1, #16
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f8f3 	bl	8008d94 <USB_FlushTxFifo>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f91f 	bl	8008dfc <USB_FlushRxFifo>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bce:	461a      	mov	r2, r3
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bda:	461a      	mov	r2, r3
 8008bdc:	2300      	movs	r3, #0
 8008bde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be6:	461a      	mov	r2, r3
 8008be8:	2300      	movs	r3, #0
 8008bea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bec:	2300      	movs	r3, #0
 8008bee:	613b      	str	r3, [r7, #16]
 8008bf0:	e043      	b.n	8008c7a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	015a      	lsls	r2, r3, #5
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c08:	d118      	bne.n	8008c3c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10a      	bne.n	8008c26 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	e013      	b.n	8008c4e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c32:	461a      	mov	r2, r3
 8008c34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c38:	6013      	str	r3, [r2, #0]
 8008c3a:	e008      	b.n	8008c4e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c48:	461a      	mov	r2, r3
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	3301      	adds	r3, #1
 8008c78:	613b      	str	r3, [r7, #16]
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d3b7      	bcc.n	8008bf2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c82:	2300      	movs	r3, #0
 8008c84:	613b      	str	r3, [r7, #16]
 8008c86:	e043      	b.n	8008d10 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c9e:	d118      	bne.n	8008cd2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10a      	bne.n	8008cbc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cb8:	6013      	str	r3, [r2, #0]
 8008cba:	e013      	b.n	8008ce4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc8:	461a      	mov	r2, r3
 8008cca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cce:	6013      	str	r3, [r2, #0]
 8008cd0:	e008      	b.n	8008ce4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cde:	461a      	mov	r2, r3
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	015a      	lsls	r2, r3, #5
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d02:	461a      	mov	r2, r3
 8008d04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	613b      	str	r3, [r7, #16]
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d3b7      	bcc.n	8008c88 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d105      	bne.n	8008d4c <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	f043 0210 	orr.w	r2, r3, #16
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	699a      	ldr	r2, [r3, #24]
 8008d50:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <USB_DevInit+0x298>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d005      	beq.n	8008d6a <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	f043 0208 	orr.w	r2, r3, #8
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d107      	bne.n	8008d80 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d78:	f043 0304 	orr.w	r3, r3, #4
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d8c:	b004      	add	sp, #16
 8008d8e:	4770      	bx	lr
 8008d90:	803c3800 	.word	0x803c3800

08008d94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	3301      	adds	r3, #1
 8008da6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4a13      	ldr	r2, [pc, #76]	; (8008df8 <USB_FlushTxFifo+0x64>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d901      	bls.n	8008db4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e01b      	b.n	8008dec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	daf2      	bge.n	8008da2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	019b      	lsls	r3, r3, #6
 8008dc4:	f043 0220 	orr.w	r2, r3, #32
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	4a08      	ldr	r2, [pc, #32]	; (8008df8 <USB_FlushTxFifo+0x64>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d901      	bls.n	8008dde <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e006      	b.n	8008dec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	f003 0320 	and.w	r3, r3, #32
 8008de6:	2b20      	cmp	r3, #32
 8008de8:	d0f0      	beq.n	8008dcc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	00030d40 	.word	0x00030d40

08008dfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	4a11      	ldr	r2, [pc, #68]	; (8008e58 <USB_FlushRxFifo+0x5c>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d901      	bls.n	8008e1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e018      	b.n	8008e4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	daf2      	bge.n	8008e08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2210      	movs	r2, #16
 8008e2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	4a08      	ldr	r2, [pc, #32]	; (8008e58 <USB_FlushRxFifo+0x5c>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d901      	bls.n	8008e3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e006      	b.n	8008e4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	f003 0310 	and.w	r3, r3, #16
 8008e46:	2b10      	cmp	r3, #16
 8008e48:	d0f0      	beq.n	8008e2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	00030d40 	.word	0x00030d40

08008e5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	78fb      	ldrb	r3, [r7, #3]
 8008e76:	68f9      	ldr	r1, [r7, #12]
 8008e78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b087      	sub	sp, #28
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f003 0306 	and.w	r3, r3, #6
 8008ea6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d102      	bne.n	8008eb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	75fb      	strb	r3, [r7, #23]
 8008eb2:	e00a      	b.n	8008eca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d002      	beq.n	8008ec0 <USB_GetDevSpeed+0x32>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b06      	cmp	r3, #6
 8008ebe:	d102      	bne.n	8008ec6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	75fb      	strb	r3, [r7, #23]
 8008ec4:	e001      	b.n	8008eca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ec6:	230f      	movs	r3, #15
 8008ec8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	371c      	adds	r7, #28
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	785b      	ldrb	r3, [r3, #1]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d14a      	bne.n	8008f8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f0e:	f040 8086 	bne.w	800901e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	7812      	ldrb	r2, [r2, #0]
 8008f26:	0151      	lsls	r1, r2, #5
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	440a      	add	r2, r1
 8008f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	7812      	ldrb	r2, [r2, #0]
 8008f4a:	0151      	lsls	r1, r2, #5
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	440a      	add	r2, r1
 8008f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d902      	bls.n	8008f70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f6e:	e056      	b.n	800901e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f88:	d0e7      	beq.n	8008f5a <USB_EPStopXfer+0x82>
 8008f8a:	e048      	b.n	800901e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fa4:	d13b      	bne.n	800901e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	015a      	lsls	r2, r3, #5
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	7812      	ldrb	r2, [r2, #0]
 8008fba:	0151      	lsls	r1, r2, #5
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	440a      	add	r2, r1
 8008fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fc8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	015a      	lsls	r2, r3, #5
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	7812      	ldrb	r2, [r2, #0]
 8008fde:	0151      	lsls	r1, r2, #5
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	440a      	add	r2, r1
 8008fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fe8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f242 7210 	movw	r2, #10000	; 0x2710
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d902      	bls.n	8009004 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	75fb      	strb	r3, [r7, #23]
          break;
 8009002:	e00c      	b.n	800901e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800901c:	d0e7      	beq.n	8008fee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800901e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009020:	4618      	mov	r0, r3
 8009022:	371c      	adds	r7, #28
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800902c:	b480      	push	{r7}
 800902e:	b089      	sub	sp, #36	; 0x24
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	4611      	mov	r1, r2
 8009038:	461a      	mov	r2, r3
 800903a:	460b      	mov	r3, r1
 800903c:	71fb      	strb	r3, [r7, #7]
 800903e:	4613      	mov	r3, r2
 8009040:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800904a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800904e:	2b00      	cmp	r3, #0
 8009050:	d123      	bne.n	800909a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009052:	88bb      	ldrh	r3, [r7, #4]
 8009054:	3303      	adds	r3, #3
 8009056:	089b      	lsrs	r3, r3, #2
 8009058:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800905a:	2300      	movs	r3, #0
 800905c:	61bb      	str	r3, [r7, #24]
 800905e:	e018      	b.n	8009092 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	031a      	lsls	r2, r3, #12
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	4413      	add	r3, r2
 8009068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800906c:	461a      	mov	r2, r3
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	3301      	adds	r3, #1
 8009078:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	3301      	adds	r3, #1
 800907e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	3301      	adds	r3, #1
 8009084:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	3301      	adds	r3, #1
 800908a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	3301      	adds	r3, #1
 8009090:	61bb      	str	r3, [r7, #24]
 8009092:	69ba      	ldr	r2, [r7, #24]
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	429a      	cmp	r2, r3
 8009098:	d3e2      	bcc.n	8009060 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3724      	adds	r7, #36	; 0x24
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b08b      	sub	sp, #44	; 0x2c
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	4613      	mov	r3, r2
 80090b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80090be:	88fb      	ldrh	r3, [r7, #6]
 80090c0:	089b      	lsrs	r3, r3, #2
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80090c6:	88fb      	ldrh	r3, [r7, #6]
 80090c8:	f003 0303 	and.w	r3, r3, #3
 80090cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80090ce:	2300      	movs	r3, #0
 80090d0:	623b      	str	r3, [r7, #32]
 80090d2:	e014      	b.n	80090fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	601a      	str	r2, [r3, #0]
    pDest++;
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	3301      	adds	r3, #1
 80090e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	3301      	adds	r3, #1
 80090ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	3301      	adds	r3, #1
 80090f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	3301      	adds	r3, #1
 80090f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80090f8:	6a3b      	ldr	r3, [r7, #32]
 80090fa:	3301      	adds	r3, #1
 80090fc:	623b      	str	r3, [r7, #32]
 80090fe:	6a3a      	ldr	r2, [r7, #32]
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	429a      	cmp	r2, r3
 8009104:	d3e6      	bcc.n	80090d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009106:	8bfb      	ldrh	r3, [r7, #30]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01e      	beq.n	800914a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009116:	461a      	mov	r2, r3
 8009118:	f107 0310 	add.w	r3, r7, #16
 800911c:	6812      	ldr	r2, [r2, #0]
 800911e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	b2db      	uxtb	r3, r3
 8009126:	00db      	lsls	r3, r3, #3
 8009128:	fa22 f303 	lsr.w	r3, r2, r3
 800912c:	b2da      	uxtb	r2, r3
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	701a      	strb	r2, [r3, #0]
      i++;
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	3301      	adds	r3, #1
 8009136:	623b      	str	r3, [r7, #32]
      pDest++;
 8009138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913a:	3301      	adds	r3, #1
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800913e:	8bfb      	ldrh	r3, [r7, #30]
 8009140:	3b01      	subs	r3, #1
 8009142:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009144:	8bfb      	ldrh	r3, [r7, #30]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1ea      	bne.n	8009120 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800914c:	4618      	mov	r0, r3
 800914e:	372c      	adds	r7, #44	; 0x2c
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009172:	f023 0303 	bic.w	r3, r3, #3
 8009176:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009186:	f043 0302 	orr.w	r3, r3, #2
 800918a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3714      	adds	r7, #20
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800919a:	b480      	push	{r7}
 800919c:	b085      	sub	sp, #20
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	4013      	ands	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80091b2:	68fb      	ldr	r3, [r7, #12]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	4013      	ands	r3, r2
 80091e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	0c1b      	lsrs	r3, r3, #16
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4013      	ands	r3, r2
 8009216:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	b29b      	uxth	r3, r3
}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009238:	78fb      	ldrb	r3, [r7, #3]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800924e:	695b      	ldr	r3, [r3, #20]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	4013      	ands	r3, r2
 8009254:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009256:	68bb      	ldr	r3, [r7, #8]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009264:	b480      	push	{r7}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009286:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009288:	78fb      	ldrb	r3, [r7, #3]
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	fa22 f303 	lsr.w	r3, r2, r3
 8009294:	01db      	lsls	r3, r3, #7
 8009296:	b2db      	uxtb	r3, r3
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	4313      	orrs	r3, r2
 800929c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800929e:	78fb      	ldrb	r3, [r7, #3]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	4013      	ands	r3, r2
 80092b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80092b2:	68bb      	ldr	r3, [r7, #8]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	371c      	adds	r7, #28
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	f003 0301 	and.w	r3, r3, #1
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80092fa:	f023 0307 	bic.w	r3, r3, #7
 80092fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800930e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009312:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
	...

08009324 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009324:	b480      	push	{r7}
 8009326:	b087      	sub	sp, #28
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	460b      	mov	r3, r1
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	333c      	adds	r3, #60	; 0x3c
 800933a:	3304      	adds	r3, #4
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	4a26      	ldr	r2, [pc, #152]	; (80093dc <USB_EP0_OutStart+0xb8>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d90a      	bls.n	800935e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009358:	d101      	bne.n	800935e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	e037      	b.n	80093ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009364:	461a      	mov	r2, r3
 8009366:	2300      	movs	r3, #0
 8009368:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800937c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800938c:	f043 0318 	orr.w	r3, r3, #24
 8009390:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80093a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80093a6:	7afb      	ldrb	r3, [r7, #11]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d10f      	bne.n	80093cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b2:	461a      	mov	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80093ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	4f54300a 	.word	0x4f54300a

080093e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093e8:	2300      	movs	r3, #0
 80093ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	3301      	adds	r3, #1
 80093f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	4a13      	ldr	r2, [pc, #76]	; (8009444 <USB_CoreReset+0x64>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d901      	bls.n	80093fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e01b      	b.n	8009436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	2b00      	cmp	r3, #0
 8009404:	daf2      	bge.n	80093ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009406:	2300      	movs	r3, #0
 8009408:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	f043 0201 	orr.w	r2, r3, #1
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3301      	adds	r3, #1
 800941a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4a09      	ldr	r2, [pc, #36]	; (8009444 <USB_CoreReset+0x64>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d901      	bls.n	8009428 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e006      	b.n	8009436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b01      	cmp	r3, #1
 8009432:	d0f0      	beq.n	8009416 <USB_CoreReset+0x36>

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	00030d40 	.word	0x00030d40

08009448 <__libc_init_array>:
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	4d0d      	ldr	r5, [pc, #52]	; (8009480 <__libc_init_array+0x38>)
 800944c:	2600      	movs	r6, #0
 800944e:	4c0d      	ldr	r4, [pc, #52]	; (8009484 <__libc_init_array+0x3c>)
 8009450:	1b64      	subs	r4, r4, r5
 8009452:	10a4      	asrs	r4, r4, #2
 8009454:	42a6      	cmp	r6, r4
 8009456:	d109      	bne.n	800946c <__libc_init_array+0x24>
 8009458:	4d0b      	ldr	r5, [pc, #44]	; (8009488 <__libc_init_array+0x40>)
 800945a:	2600      	movs	r6, #0
 800945c:	4c0b      	ldr	r4, [pc, #44]	; (800948c <__libc_init_array+0x44>)
 800945e:	f000 f81f 	bl	80094a0 <_init>
 8009462:	1b64      	subs	r4, r4, r5
 8009464:	10a4      	asrs	r4, r4, #2
 8009466:	42a6      	cmp	r6, r4
 8009468:	d105      	bne.n	8009476 <__libc_init_array+0x2e>
 800946a:	bd70      	pop	{r4, r5, r6, pc}
 800946c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009470:	3601      	adds	r6, #1
 8009472:	4798      	blx	r3
 8009474:	e7ee      	b.n	8009454 <__libc_init_array+0xc>
 8009476:	f855 3b04 	ldr.w	r3, [r5], #4
 800947a:	3601      	adds	r6, #1
 800947c:	4798      	blx	r3
 800947e:	e7f2      	b.n	8009466 <__libc_init_array+0x1e>
 8009480:	080095c0 	.word	0x080095c0
 8009484:	080095c0 	.word	0x080095c0
 8009488:	080095c0 	.word	0x080095c0
 800948c:	080095c4 	.word	0x080095c4

08009490 <memset>:
 8009490:	4402      	add	r2, r0
 8009492:	4603      	mov	r3, r0
 8009494:	4293      	cmp	r3, r2
 8009496:	d100      	bne.n	800949a <memset+0xa>
 8009498:	4770      	bx	lr
 800949a:	f803 1b01 	strb.w	r1, [r3], #1
 800949e:	e7f9      	b.n	8009494 <memset+0x4>

080094a0 <_init>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	bf00      	nop
 80094a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a6:	bc08      	pop	{r3}
 80094a8:	469e      	mov	lr, r3
 80094aa:	4770      	bx	lr

080094ac <_fini>:
 80094ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ae:	bf00      	nop
 80094b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b2:	bc08      	pop	{r3}
 80094b4:	469e      	mov	lr, r3
 80094b6:	4770      	bx	lr
